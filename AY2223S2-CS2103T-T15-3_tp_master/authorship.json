[{"path":".vscode/eclipse-java-google-style.xml","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"no\"?\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"\u003cprofiles version\u003d\"13\"\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"\u003cprofile kind\u003d\"CodeFormatterProfile\" name\u003d\"GoogleStyle\" version\u003d\"13\"\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.disabling_tag\" value\u003d\"@formatter:off\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_cascading_method_invocation_with_arguments.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_field\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_on_off_tags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_prefer_two_fragments\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_comment_inline_tags\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_local_variable_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_parameter\" value\u003d\"1040\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_type.count_dependent\" value\u003d\"1585|-1|1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression\" value\u003d\"80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_package\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression.count_dependent\" value\u003d\"16|4|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration.count_dependent\" value\u003d\"16|4|48\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation\" value\u003d\"2\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration.count_dependent\" value\u003d\"16|4|49\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_package\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_cascading_method_invocation_with_arguments\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.source\" value\u003d\"1.7\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration.count_dependent\" value\u003d\"16|4|48\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_line_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_wrapped_lines\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_non_simple_local_variable_annotation\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.align_type_members_on_columns\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_member_type\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants.count_dependent\" value\u003d\"16|5|48\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_parameter_description\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":88,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":89,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":90,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.lineSplit\" value\u003d\"100\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation.count_dependent\" value\u003d\"16|4|48\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":95,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":99,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indentation.size\" value\u003d\"4\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":100,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":101,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.enabling_tag\" value\u003d\"@formatter:on\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_package\" value\u003d\"1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":105,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_assignment\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":106,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.assertIdentifier\" value\u003d\"error\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":107,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.char\" value\u003d\"space\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":109,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_method\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":113,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":114,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_non_simple_type_annotation\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":115,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":116,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_field_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":120,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":121,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":122,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":123,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_method_declaration\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":124,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":125,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":126,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":127,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":128,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":130,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":131,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":132,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_switch\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":133,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":134,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":135,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":136,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":137,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":138,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":139,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":140,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":141,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":142,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":143,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.problem.enumIdentifier\" value\u003d\"error\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":144,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_generic_type_arguments\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":145,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":146,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment_new_line_at_start_of_html_paragraph\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":147,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":148,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":149,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comment_prefix\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":150,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":151,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":152,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.compact_else_if\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":153,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_non_simple_parameter_annotation\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":154,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":155,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":156,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":157,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_method\" value\u003d\"1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":158,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":159,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":160,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":161,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.indent_root_tags\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":162,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":163,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":164,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":165,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":166,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":167,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":168,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":169,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":170,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.tabulation.size\" value\u003d\"2\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":171,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":172,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":173,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":174,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":175,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":176,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":177,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":178,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":179,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":180,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":181,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":182,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_parameter.count_dependent\" value\u003d\"1040|-1|1040\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":183,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":184,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":185,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":186,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_package.count_dependent\" value\u003d\"1585|-1|1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":187,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_empty_lines\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":188,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":189,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":190,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":191,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.force_if_else_statement_brace\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":192,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":193,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve\" value\u003d\"3\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":194,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_non_simple_package_annotation\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":195,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":196,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":197,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":198,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":199,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":200,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":201,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":202,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":203,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_type\" value\u003d\"1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":204,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.compliance\" value\u003d\"1.7\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":205,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer\" value\u003d\"2\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":206,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":207,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":208,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":209,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":210,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":211,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_new_anonymous_class\" value\u003d\"20\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":212,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":213,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_local_variable.count_dependent\" value\u003d\"1585|-1|1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":214,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":215,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":216,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":217,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_field.count_dependent\" value\u003d\"1585|-1|1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":218,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":219,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":220,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":221,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":222,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":223,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":224,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":225,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":226,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":227,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":228,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":229,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":230,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":231,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode\" value\u003d\"enabled\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":232,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":233,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":234,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_label\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":235,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":236,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":237,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":238,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":239,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":240,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":241,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":242,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.line_length\" value\u003d\"100\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":243,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":244,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":245,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":246,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":247,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":248,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":249,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":250,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":251,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":252,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_before_binary_operator\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":253,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations\" value\u003d\"2\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":254,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":255,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":256,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":257,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":258,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.join_lines_in_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":259,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":260,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":261,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_compact_if\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":262,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":263,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":264,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":265,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":266,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":267,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":268,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_before_imports\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":269,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":270,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_field\" value\u003d\"1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":271,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_html\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":272,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":273,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":274,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":275,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":276,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":277,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":278,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":279,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":280,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":281,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_source_code\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":282,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":283,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":284,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":285,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":286,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":287,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.compiler.codegen.targetPlatform\" value\u003d\"1.7\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":288,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_resources_in_try\" value\u003d\"80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":289,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":290,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":291,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":292,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.format_block_comments\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":293,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":294,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants\" value\u003d\"0\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":295,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":296,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":297,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":298,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":299,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":300,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":301,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration.count_dependent\" value\u003d\"16|4|48\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":302,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":303,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":304,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_method.count_dependent\" value\u003d\"1585|-1|1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":305,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":306,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":307,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value\u003d\"end_of_line\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":308,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":309,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":310,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":311,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.wrap_non_simple_member_annotation\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":312,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_annotations_on_local_variable\" value\u003d\"1585\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":313,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":314,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":315,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":316,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":317,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":318,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":319,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":320,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_generic_type_arguments.count_dependent\" value\u003d\"16|-1|16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":321,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":322,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":323,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":324,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration.count_dependent\" value\u003d\"16|5|80\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":325,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":326,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.blank_lines_after_imports\" value\u003d\"1\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":327,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":328,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header\" value\u003d\"true\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":329,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for\" value\u003d\"insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":330,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":331,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":332,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.alignment_for_for_statement\" value\u003d\"16\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":333,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments\" value\u003d\"do not insert\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":334,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":335,"author":{"gitId":"VietAnh1010"},"content":"\u003csetting id\u003d\"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line\" value\u003d\"false\"/\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":336,"author":{"gitId":"VietAnh1010"},"content":"\u003c/profile\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":337,"author":{"gitId":"VietAnh1010"},"content":"\u003c/profiles\u003e","lastModifiedDate":"2023-02-22"}],"authorContributionMap":{"VietAnh1010":337}},{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"[![Java CI](https://github.com/AY2223S2-CS2103T-T15-3/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S2-CS2103T-T15-3/tp/actions/workflows/gradle.yml)[![codecov](https://codecov.io/gh/AY2223S2-CS2103T-T15-3/tp/branch/master/graph/badge.svg?token\u003d3H8B77BIDL)](https://codecov.io/gh/AY2223S2-CS2103T-T15-3/tp)","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"* Vimification is a task planner application, optimised for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). The target audience are users who prefers to use vim commands and minimal mouse interactions to increase effectiveness and speed.","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"* It is named `Vimification` because it was designed for users that are proficient in vim.","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"* For the detailed documentation of this project, see the **[Vimification Product Website](https://ay2223s2-cs2103t-t15-3.github.io/tp/)**.","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"* This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"liujiayue314":5,"VietAnh1010":1,"-":4}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"mainClassName \u003d \u0027vimification.Main\u0027","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"run {","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"VietAnh1010":6,"-":70}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"You can reach us at the email `what email should we put here?`","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"# Project team","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"## Nguyen Viet Anh","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"\u003cimg src\u003d\"images/vietanh1010.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"[[github](https://github.com/VietAnh1010)]","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"[[portfolio](team/vietanh1010.md)]","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"- Role: Team lead, Integration, Java expert","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"- Responsibilities: Parser, Model","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"## Liu JiaYue","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"\u003cimg src\u003d\"images/liujiayue314.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"[[github](http://github.com/liujiayue314)]","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"liujiayue314"},"content":"[[portfolio](team/liujiayue314.md)]","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"- Role: Developer","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"- Responsibilities: Storage","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"## Ethan Chen Ee Shuen","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"\u003cimg src\u003d\"images/bipbipboopboop.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"[[github](http://github.com/bipbipboopboop)]","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"[[portfolio](team/bipbipboopboop.md)]","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"- Role: Developer","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"- Responsibilities: UI, Integration","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"daniellingzy"},"content":"## Daniel Ling Zhi Yuan","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"daniellingzy"},"content":"\u003cimg src\u003d\"images/daniellingzy.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"daniellingzy"},"content":"[[github](http://github.com/daniellingzy)]","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"daniellingzy"},"content":"[[portfolio](team/daniellingzy.md)]","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"daniellingzy"},"content":"- Role: Test Engineer","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"daniellingzy"},"content":"- Responsibilities: Software Development Testing","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"## Cheng Deren","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"\u003cimg src\u003d\"images/DerenC.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"[[github](http://github.com/DerenC)]","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"[[portfolio](team/DerenC.md)]","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"- Role: Developer","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"- Responsibilities: Command","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"liujiayue314":6,"VietAnh1010":6,"-":28,"bipbipboopboop":14,"daniellingzy":6}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"VietAnh1010"},"content":"Classes used by multiple components are in the `vimificationbook.commons` package.","lastModifiedDate":"2023-03-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"* has a need to manage a significant number of contacts","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":264,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"**Value proposition**: manage contacts faster than a typical mouse/GUI driven app","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"| `* * *`  | new user                                   | see usage instructions         | refer to instructions when I forget how to use the App                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | add a new person               |                                                                        |","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | delete a person                | remove entries that I no longer need                                   |","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"| `* * *`  | user                                       | find a person by name          | locate details of persons without having to go through the entire list |","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"| `* *`    | user                                       | hide private contact details   | minimize chance of someone else seeing them by accident                |","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"| `*`      | user with many persons in the address book | sort persons by name           | locate a person easily                                                 |","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"* 2a. The list is empty.","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"* 3a. The given index is invalid.","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    * 3a1. AddressBook shows an error message.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"VietAnh1010":1,"-":376}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"   1. Run the `vimification.Main` and try a few commands.","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"VietAnh1010":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"   e.g. `vimification.commons.StringUtilTest`","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"   e.g. `vimification.storage.StorageManagerTest`","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"   e.g. `vimification.logic.LogicManagerTest`","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"VietAnh1010":3,"-":33}},{"path":"docs/team/DerenC.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"---","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"layout: page","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"title: Deren\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"---","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"# Project: Vimification","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"More details will be added soon...","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"DerenC":8}},{"path":"docs/team/bipbipboopboop.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"layout: page","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"title: Ethan\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"# Project: Vimification","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"More details will be added soon...","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"bipbipboopboop":8}},{"path":"docs/team/daniellingzy.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daniellingzy"},"content":"---","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"daniellingzy"},"content":"layout: page","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"daniellingzy"},"content":"title: Daniel\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"daniellingzy"},"content":"---","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"daniellingzy"},"content":"# Project: Vimification","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"daniellingzy"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"daniellingzy"},"content":"More details will be added soon... ","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"daniellingzy"},"content":"Stay Tuned!","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"daniellingzy":9}},{"path":"docs/team/liujiayue314.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"layout: page","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"title: Liu JiaYue\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"---","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"# Project: Vimification","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"More details will be added soon...","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"liujiayue314":8}},{"path":"docs/team/vietanh1010.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"---","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"layout: page","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"title: Nguyen Viet Anh\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"---","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"# Project: Vimification","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"More details will be added soon...","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"VietAnh1010":8}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.Model;","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"import static vimification.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"VietAnh1010"},"content":"Create a `RemarkCommandParser` class in the `vimification.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2023-03-07"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"VietAnh1010"},"content":"Create a new `Remark` in `vimification.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-03-07"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"VietAnh1010"},"content":"Simply add the following to [`vimification.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-03-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"VietAnh1010":6,"-":395}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"The `address` field in `Person` is actually an instance of the `vimification.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"VietAnh1010":1,"-":111}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `vimification.logic.Logic`.","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"A quick look at the `vimification.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"VietAnh1010":2,"-":299}},{"path":"src/main/java/vimification/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.util.FileUtil;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"            logger.warning(","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"                    \"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        appParameters","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"                .setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"VietAnh1010":7,"-":59}},{"path":"src/main/java/vimification/Gui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.core.Config;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.util.ConfigUtil;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.util.StringUtil;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.Logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.LogicManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.UserPrefs;","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"import vimification.storage.LogicTaskListStorage;","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"import vimification.storage.JsonLogicTaskListStorage;","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.storage.Storage;","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.storage.StorageManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.storage.UserPrefsStorage;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.taskui.Ui;","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.taskui.UiManager;","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"public class Gui extends Application {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    protected Ui ui;","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"    protected Logic logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"    protected Storage storage;","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    protected Config config;","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(Gui.class);","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"    public void init() throws Exception {","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"        logger.info(","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskPlanner ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"        super.init();","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"        LogicTaskListStorage vimificationStorage \u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"                new JsonLogicTaskListStorage(userPrefs.getTaskListFilePath());","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"        storage \u003d new StorageManager(vimificationStorage, userPrefsStorage);","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"        initLogging(config);","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"        logic \u003d new LogicManager(initLogicTaskList(storage, userPrefs), storage);","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"    public void start(Stage primaryStage) throws Exception {","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"bipbipboopboop"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"bipbipboopboop"},"content":"     * {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"bipbipboopboop"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"bipbipboopboop"},"content":"     * is not found, or an empty address book will be used instead if errors occur when reading","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"     * {@code storage}\u0027s address book.","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"    private LogicTaskList initLogicTaskList(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"        Optional\u003cLogicTaskList\u003e addressBookOptional;","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"        LogicTaskList initialData;","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"            addressBookOptional \u003d storage.readLogicTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"bipbipboopboop"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"bipbipboopboop"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"bipbipboopboop"},"content":"            }","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"            initialData \u003d addressBookOptional.orElseGet(LogicTaskList::new);","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"bipbipboopboop"},"content":"                    \"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"            initialData \u003d new LogicTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":87,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"bipbipboopboop"},"content":"                    \"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"VietAnh1010"},"content":"            initialData \u003d new LogicTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"        return initialData;","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"bipbipboopboop"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"bipbipboopboop"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"bipbipboopboop"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"bipbipboopboop"},"content":"        Config initializedConfig;","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"bipbipboopboop"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"bipbipboopboop"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"bipbipboopboop"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"bipbipboopboop"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"bipbipboopboop"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"bipbipboopboop"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"bipbipboopboop"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"bipbipboopboop"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"bipbipboopboop"},"content":"                    \"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"bipbipboopboop"},"content":"                            + \"Using default config properties\");","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"bipbipboopboop"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"bipbipboopboop"},"content":"        // Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"bipbipboopboop"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2023-03-15"},{"lineNumber":127,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":128,"author":{"gitId":"bipbipboopboop"},"content":"        return initializedConfig;","lastModifiedDate":"2023-03-15"},{"lineNumber":129,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":133,"author":{"gitId":"bipbipboopboop"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a","lastModifiedDate":"2023-03-15"},{"lineNumber":134,"author":{"gitId":"bipbipboopboop"},"content":"     * new {@code UserPrefs} with default configuration if errors occur when reading from the file.","lastModifiedDate":"2023-03-15"},{"lineNumber":135,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":136,"author":{"gitId":"bipbipboopboop"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"bipbipboopboop"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2023-03-15"},{"lineNumber":138,"author":{"gitId":"bipbipboopboop"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"bipbipboopboop"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2023-03-15"},{"lineNumber":141,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":142,"author":{"gitId":"bipbipboopboop"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"bipbipboopboop"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"bipbipboopboop"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"bipbipboopboop"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(","lastModifiedDate":"2023-03-15"},{"lineNumber":150,"author":{"gitId":"bipbipboopboop"},"content":"                    \"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"bipbipboopboop"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2023-03-15"},{"lineNumber":152,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"bipbipboopboop"},"content":"        // Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2023-03-15"},{"lineNumber":155,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":156,"author":{"gitId":"bipbipboopboop"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2023-03-15"},{"lineNumber":157,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":158,"author":{"gitId":"bipbipboopboop"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2023-03-15"},{"lineNumber":159,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":160,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":161,"author":{"gitId":"bipbipboopboop"},"content":"        return initializedPrefs;","lastModifiedDate":"2023-03-15"},{"lineNumber":162,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":163,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"VietAnh1010":13,"bipbipboopboop":150}},{"path":"src/main/java/vimification/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":" * This is a workaround for the following error when MainApp is made the entry point of the","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":" * application:","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":" * The reason is that MainApp extends Application. Isdfn that case, the LauncherHelper will check","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":" * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":" * module system so it can\u0027t find the javafx.graphics `module, and so the launch is aborted.","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application to be the entry point of","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":" * the application, we avoid this issue.","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"        Application.launch(Gui.class, args);","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"VietAnh1010":1,"-":15,"bipbipboopboop":8}},{"path":"src/main/java/vimification/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { // this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":1,"-":62}},{"path":"src/main/java/vimification/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":" * A Serializable class that contains the GUI settings. Guarantees: immutable.","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { // this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":2,"-":76}},{"path":"src/main/java/vimification/commons/core/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":" * the current component wants to communicate with another component, it can send an {@code Index}","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":" * to avoid having to know what base the other component is using for its index. However, after","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":" * receiving the {@code Index}, that component can convert it back to an int if the index will not","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":" * be passed to a different component again.","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"            return true;","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        if (!(other instanceof Index)) {","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"            return false;","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"        }","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"        Index otherIndex \u003d (Index) other;","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"        return zeroBasedIndex \u003d\u003d otherIndex.zeroBasedIndex;","lastModifiedDate":"2023-03-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"VietAnh1010":15,"-":45}},{"path":"src/main/java/vimification/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":" * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":" * can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":" * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":" * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name is","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"     * requested again from the LogsCenter.","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"        FileHandler fileHandler \u003d","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":13,"-":101}},{"path":"src/main/java/vimification/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"            \"The person index provided is invalid\";","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VietAnh1010":3,"-":11}},{"path":"src/main/java/vimification/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.core;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"            throw new IllegalArgumentException(","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":4,"-":114}},{"path":"src/main/java/vimification/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":1,"-":10}},{"path":"src/main/java/vimification/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VietAnh1010":1,"-":20}},{"path":"src/main/java/vimification/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.Gui;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"        return new Image(Gui.class.getResourceAsStream(imagePath));","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"VietAnh1010":1,"-":39,"bipbipboopboop":2}},{"path":"src/main/java/vimification/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VietAnh1010":1,"-":34}},{"path":"src/main/java/vimification/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.Config;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VietAnh1010":3,"-":20}},{"path":"src/main/java/vimification/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"     * {@link Paths#get(String)}, otherwise returns false.","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"     * Writes given string to a file. Will create the file if it does not exist yet.","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":6,"-":78}},{"path":"src/main/java/vimification/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"            throws IOException {","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"     * not found. If any values are missing from the file, default values will be used, as long as","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"     * the file is a valid json file.","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"     *        given here.","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"        T jsonFile \u003d null;","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"            logger.info(\"Object read from json file: \" + jsonFile);","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"        return Optional.ofNullable(jsonFile);","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"     * new file if it doesn\u0027t.","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":19,"-":128}},{"path":"src/main/java/vimification/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.commons.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import static vimification.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"     * match is required. \u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"     * examples:","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cpre\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param word cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1,","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"                \"Word parameter should be a single word\");","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ...,","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"     * {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"     * \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"     * ","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"                                                    // Integer#parseInt(String)","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"VietAnh1010":17,"-":57}},{"path":"src/main/java/vimification/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CommandResult;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.parser.ParserException;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    CommandResult execute(String commandText) throws CommandException, ParserException;","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"    // /**","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    // * Returns the AddressBook.","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    // *","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"    // * @see vimification.model.Model#getTaskList()","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    // */","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    // ReadOnlyTaskPlanner getTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    // /** Returns an unmodifiable view of the filtered list of persons */","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    // /**","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"    // * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"    // */","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"    // Path getTaskListFilePath();","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"    // /**","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"    // * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    // */","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"    // GuiSettings getGuiSettings();","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"    // /**","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"    // * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"    // */","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    // void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VietAnh1010":30,"-":16,"bipbipboopboop":1}},{"path":"src/main/java/vimification/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.LogicCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CommandResult;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.parser.ParserException;","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.parser.VimificationParser;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"import vimification.storage.Storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    private final LogicTaskList taskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    private final ObservableList\u003cTask\u003e viewTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    private final VimificationParser vimificationParser;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"    public LogicManager(LogicTaskList taskList, Storage storage) {","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"        this.viewTaskList \u003d FXCollections.observableList(taskList.getInternalList());","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"        this.vimificationParser \u003d VimificationParser.getInstance();","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParserException {","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"        logger.info(\"[USER COMMAND] \" + commandText);","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO : FIX THIS","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"        LogicCommand command \u003d vimificationParser.parse(commandText);","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"        CommandResult result \u003d command.execute(taskList);","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"        // TODO: Fix this later","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"        // Only save when the result indicates that the task list should be saved","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"        try {","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"            storage.saveLogicTaskList(taskList);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ex, ex);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"        return result;","lastModifiedDate":"2023-03-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"    // @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"    // public ReadOnlyTaskPlanner getTaskList() {","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"    // return model.getTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"VietAnh1010"},"content":"    public ObservableList\u003cTask\u003e getFilteredTaskList() {","lastModifiedDate":"2023-03-20"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"        return viewTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"    // @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"    // public Path getTaskListFilePath() {","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"    // return model.getTaskListFilePath();","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"    // @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"    // public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"    // return model.getGuiSettings();","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"    // @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"    // public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"    // model.setGuiSettings(guiSettings);","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"VietAnh1010":50,"-":30,"bipbipboopboop":3}},{"path":"src/main/java/vimification/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"    // /**","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"    // * Executes the command and returns the result message.","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"    // *","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"    // * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"    // * @return feedback message of the operation result for display","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"    // * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"    // */","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":"    // public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"DerenC":8,"VietAnh1010":1,"-":8}},{"path":"src/main/java/vimification/logic/commands/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message}.","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"     * {@code cause}.","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"VietAnh1010":7,"-":15}},{"path":"src/main/java/vimification/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"     * fields set to their default value.","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"VietAnh1010":3,"-":68}},{"path":"src/main/java/vimification/logic/commands/CreateCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":" * Creates a new task and adds it to the task planner.","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"public class CreateCommand extends UndoableLogicCommand {","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"    public static final String COMMAND_WORD \u003d \"create\";","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"    public static final String SUCCESS_MESSAGE_FORMAT \u003d \"New task created: %1$s\";","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":"    public static final String UNDO_MESSAGE \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":"            \"The command has been undoed. The new task has been deleted.\";","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"DerenC"},"content":"    private final Task newTask;","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"DerenC"},"content":"     * Creates an CreateCommand to add the specified {@code Task}","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"    public CreateCommand(Task task) {","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"        requireNonNull(task);","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"DerenC"},"content":"        newTask \u003d task;","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"    // Pass a TaskList instead","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"DerenC"},"content":"    public CommandResult execute(LogicTaskList taskList) throws CommandException {","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"        requireNonNull(taskList);","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"        taskList.add(newTask);","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"        return new CommandResult(String.format(SUCCESS_MESSAGE_FORMAT, newTask));","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"    public CommandResult undo(LogicTaskList taskList) throws CommandException {","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"DerenC"},"content":"        requireNonNull(taskList);","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"        taskList.pop();","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"        return new CommandResult(UNDO_MESSAGE);","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"DerenC"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"DerenC"},"content":"                || (other instanceof CreateCommand // instanceof handles nulls","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"DerenC"},"content":"                        \u0026\u0026 newTask.equals(((CreateCommand) other).newTask));","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"DerenC":49}},{"path":"src/main/java/vimification/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.Index;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":" * Deletes a task identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"public class DeleteCommand extends UndoableLogicCommand {","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"            + \": Deletes the task identified by the index number used in the displayed task list.\\n\"","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"            + \"Example: delete 1\";","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"DerenC"},"content":"    public static final String SUCCESS_MESSAGE_FORMAT \u003d \"Deleted Task: %1$s\";","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"    public static final String UNDO_MESSAGE \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"            \"The command has been undoed. The deleted task has been added back.\";","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"DerenC"},"content":"    // targetIndex is ZERO-BASED","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"    private Task deletedTask;","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"        this.deletedTask \u003d null;","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"    public CommandResult execute(LogicTaskList taskList)","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"DerenC"},"content":"            throws IndexOutOfBoundsException, CommandException {","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"        requireNonNull(taskList);","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"        deletedTask \u003d taskList.remove(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"        return new CommandResult(String.format(SUCCESS_MESSAGE_FORMAT, deletedTask));","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"    public CommandResult undo(LogicTaskList taskList) throws CommandException {","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"        requireNonNull(taskList);","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"        taskList.add(targetIndex.getZeroBased(), deletedTask);","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"DerenC"},"content":"        return new CommandResult(String.format(UNDO_MESSAGE, deletedTask));","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"DerenC"},"content":"        if (other \u003d\u003d this) { // short circuit if same object","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"DerenC"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"DerenC"},"content":"        if (!(other instanceof DeleteCommand)) { // instanceof handles nulls","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"DerenC"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"DerenC"},"content":"        DeleteCommand otherDeleteCommand \u003d (DeleteCommand) other;","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"DerenC"},"content":"        return targetIndex \u003d\u003d otherDeleteCommand.targetIndex // state check","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"DerenC"},"content":"                \u0026\u0026 ((this.deletedTask \u003d\u003d null \u0026\u0026 otherDeleteCommand.deletedTask \u003d\u003d null)","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"DerenC"},"content":"                        || deletedTask.equals(otherDeleteCommand.deletedTask));","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"DerenC":31,"VietAnh1010":6,"-":24,"bipbipboopboop":3}},{"path":"src/main/java/vimification/logic/commands/LogicCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"public abstract class LogicCommand extends Command {","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"    protected static final String NOT_UNDOABLE_MESSAGE \u003d \"This command is not undoable.\";","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"    protected static final String FINISHED_EXECUTION_MESSAGE \u003d","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"            \"This command has been executed. It cannot be executed again.\";","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"    public abstract CommandResult execute(LogicTaskList taskList) throws CommandException;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"DerenC":11}},{"path":"src/main/java/vimification/logic/commands/UndoableLogicCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.logic.commands;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"public abstract class UndoableLogicCommand extends LogicCommand {","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"    public abstract CommandResult undo(LogicTaskList taskList) throws CommandException;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"DerenC":7}},{"path":"src/main/java/vimification/logic/parser/ApplicativeParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import java.util.List;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import java.util.function.BiFunction;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":" * Basic implementation of a generic {@code ApplicativeParser}, based on functional applicative","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":" * parser from the \u003cb\u003eHaskell programming language\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":" * Uses static methods to create instances of this class.","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":" *","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":" * @param \u003cT\u003e the type of the parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"public final class ApplicativeParser\u003cT\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    ///////////////////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    // PREDEFINED PARSER COMBINATORS //","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"    ///////////////////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003c?\u003e ALWAYS_FAILED_PARSER \u003d","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"            fromRunner(ignore -\u003e Optional.empty());","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cVoid\u003e EOF_PARSER \u003d fromRunner(","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"            input -\u003e input.isEmpty() ? Optional.of(Pair.of(input, null)) : Optional.empty());","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cVoid\u003e SKIP_WHITESPACES_PARSER \u003d fromRunner(input -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"        int length \u003d input.length();","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"        int offset \u003d 0;","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"        while (offset \u003c length \u0026\u0026 Character.isWhitespace(input.charAt(offset))) {","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"            offset++;","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"        return Optional.of(Pair.of(input.subview(offset), null));","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"    });","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cString\u003e NON_WHITESPACES_PARSER \u003d fromRunner(input -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"        int length \u003d input.length();","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        int offset \u003d 0;","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"        while (offset \u003c length \u0026\u0026 !Character.isWhitespace(input.charAt(offset))) {","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"            offset++;","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"        String value \u003d input.substringTo(offset);","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"        return value.isEmpty()","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"                ? Optional.empty()","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"                : Optional.of(Pair.of(input.subview(offset), input.substringTo(offset)));","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"    });","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cString\u003e UNTIL_EOF_PARSER \u003d fromRunner(input -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"        int length \u003d input.length();","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        return Optional.of(Pair.of(input.subview(length), input.substringTo(length)));","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"    });","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cVoid\u003e SKIP_WHITESPACES_1_PARSER \u003d","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"            satisfy(Character::isWhitespace).takeNext(SKIP_WHITESPACES_PARSER);","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"    /////////////////////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"    // INSTANCE FIELDS AND CONSTRUCTOR //","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"    /////////////////////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"VietAnh1010"},"content":"    private final Function\u003cStringView, Optional\u003cPair\u003cStringView, T\u003e\u003e\u003e runner;","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"    private ApplicativeParser(","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003cStringView, Optional\u003cPair\u003cStringView, T\u003e\u003e\u003e runner) {","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"        this.runner \u003d runner;","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"    //////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"    // STATIC UTILITIES //","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"    //////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"    private static \u003cT\u003e ApplicativeParser\u003cT\u003e fromRunner(","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003cStringView, Optional\u003cPair\u003cStringView, T\u003e\u003e\u003e runner) {","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"        return new ApplicativeParser\u003c\u003e(runner);","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"     * Creates a parser that parses nothing and returns exactly the given value. This method is","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"     * equivalent to {@code return} function in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cT\u003e the type of the given value","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"     * @param value the given value","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that parses nothing, and returns exactly the given value","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT\u003e ApplicativeParser\u003cT\u003e of(T value) {","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e Optional.of(Pair.of(input, value)));","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that always fails.","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cT\u003e the type of the parser result (which does not exist, in this case)","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that always fails","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT\u003e ApplicativeParser\u003cT\u003e fail() {","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"VietAnh1010"},"content":"        return ALWAYS_FAILED_PARSER.cast();","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"     * Lifts a (curried) binary function to work on parsers. The first parser is run on the input,","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"     * and may consume some characters. Then, the second parser is run on the remaining input.","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"VietAnh1010"},"content":"     * Finally, the results of the two parsers are combined using the binary function.","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"VietAnh1010"},"content":"     * This method is equivalent to {@code liftA2} function in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"VietAnh1010"},"content":"     * This method proves that an {@code ApplicativeParser} is an {@code Applicative}. However,","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"     * there is no way to encode the behavior of an {@code Applicative} using an instance method in","lastModifiedDate":"2023-03-07"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cb\u003eJava\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cT\u003e the type of the first parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the second parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":115,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cV\u003e the type of the resultant parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"VietAnh1010"},"content":"     * @param combiner the given (curried) binary function","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"VietAnh1010"},"content":"     * @param left the first parser","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"VietAnh1010"},"content":"     * @param right the second parser","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser, that first runs the first parser, then the second parser, and finally","lastModifiedDate":"2023-03-07"},{"lineNumber":120,"author":{"gitId":"VietAnh1010"},"content":"     *         combines the result of these parsers using the binary function","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT, U, V\u003e ApplicativeParser\u003cV\u003e lift(","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003c? super T, ? extends Function\u003c? super U, ? extends V\u003e\u003e combiner,","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends T\u003e left,","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends U\u003e right) {","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"VietAnh1010"},"content":"        return left.flatMap(combiner.andThen(right::map));","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT, U, V\u003e ApplicativeParser\u003cV\u003e lift(","lastModifiedDate":"2023-03-07"},{"lineNumber":130,"author":{"gitId":"VietAnh1010"},"content":"            BiFunction\u003c? super T, ? super U, ? extends V\u003e combiner,","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends T\u003e left,","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends U\u003e right) {","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"VietAnh1010"},"content":"        return lift(leftValue -\u003e rightValue -\u003e combiner.apply(leftValue, rightValue), left, right);","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":137,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that succeeds when reaches eof, and fails otherwise. The result of this","lastModifiedDate":"2023-03-07"},{"lineNumber":138,"author":{"gitId":"VietAnh1010"},"content":"     * parser should be discarded.","lastModifiedDate":"2023-03-07"},{"lineNumber":139,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":140,"author":{"gitId":"VietAnh1010"},"content":"     * @return the eof parser","lastModifiedDate":"2023-03-07"},{"lineNumber":141,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":142,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cVoid\u003e eof() {","lastModifiedDate":"2023-03-07"},{"lineNumber":143,"author":{"gitId":"VietAnh1010"},"content":"        return EOF_PARSER;","lastModifiedDate":"2023-03-07"},{"lineNumber":144,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":145,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":146,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":147,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that skips all leading whitespaces.","lastModifiedDate":"2023-03-07"},{"lineNumber":148,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":149,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that skips all leading whitespaces","lastModifiedDate":"2023-03-07"},{"lineNumber":150,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":151,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cVoid\u003e skipWhitespaces() {","lastModifiedDate":"2023-03-07"},{"lineNumber":152,"author":{"gitId":"VietAnh1010"},"content":"        return SKIP_WHITESPACES_PARSER;","lastModifiedDate":"2023-03-07"},{"lineNumber":153,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":154,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":155,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cVoid\u003e skipWhitespaces1() {","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"VietAnh1010"},"content":"        return SKIP_WHITESPACES_1_PARSER;","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":158,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":160,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that consumes input until it reaches a whitespace character.","lastModifiedDate":"2023-03-07"},{"lineNumber":161,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":162,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that parses until a whitespace character","lastModifiedDate":"2023-03-07"},{"lineNumber":163,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":164,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cString\u003e nonWhitespaces() {","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"VietAnh1010"},"content":"        return NON_WHITESPACES_PARSER;","lastModifiedDate":"2023-03-07"},{"lineNumber":166,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":167,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":168,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":169,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that consumes all remaining input.","lastModifiedDate":"2023-03-07"},{"lineNumber":170,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":171,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that parses until eof","lastModifiedDate":"2023-03-07"},{"lineNumber":172,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":173,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cString\u003e untilEof() {","lastModifiedDate":"2023-03-21"},{"lineNumber":174,"author":{"gitId":"VietAnh1010"},"content":"        return UNTIL_EOF_PARSER;","lastModifiedDate":"2023-03-07"},{"lineNumber":175,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":176,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":177,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":178,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that succeeds when the input starts with the given prefix, fails otherwise.","lastModifiedDate":"2023-03-07"},{"lineNumber":179,"author":{"gitId":"VietAnh1010"},"content":"     * If the parser succeeds, the result of the parser will be the given prefix.","lastModifiedDate":"2023-03-07"},{"lineNumber":180,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":181,"author":{"gitId":"VietAnh1010"},"content":"     * @param prefix the given prefix","lastModifiedDate":"2023-03-07"},{"lineNumber":182,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that succeeds when the input starts with the given prefix, fails otherwise","lastModifiedDate":"2023-03-07"},{"lineNumber":183,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":184,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cString\u003e string(String prefix) {","lastModifiedDate":"2023-03-21"},{"lineNumber":185,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e input.startsWith(prefix)","lastModifiedDate":"2023-03-07"},{"lineNumber":186,"author":{"gitId":"VietAnh1010"},"content":"                ? Optional.of(Pair.of(input.subview(prefix.length()), prefix))","lastModifiedDate":"2023-03-07"},{"lineNumber":187,"author":{"gitId":"VietAnh1010"},"content":"                : Optional.empty());","lastModifiedDate":"2023-03-07"},{"lineNumber":188,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":189,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":190,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":191,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that parses until the given substring is encountered. The substring will","lastModifiedDate":"2023-03-07"},{"lineNumber":192,"author":{"gitId":"VietAnh1010"},"content":"     * also be consumed from the input. This parser will returns the substring between the start of","lastModifiedDate":"2023-03-07"},{"lineNumber":193,"author":{"gitId":"VietAnh1010"},"content":"     * the input, and the last character before the given substring.","lastModifiedDate":"2023-03-07"},{"lineNumber":194,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":195,"author":{"gitId":"VietAnh1010"},"content":"     * @param end the substring to find","lastModifiedDate":"2023-03-07"},{"lineNumber":196,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that parses until the given substring is encountered","lastModifiedDate":"2023-03-07"},{"lineNumber":197,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":198,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cString\u003e until(String end) {","lastModifiedDate":"2023-03-21"},{"lineNumber":199,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":200,"author":{"gitId":"VietAnh1010"},"content":"            int offset \u003d input.indexOf(end);","lastModifiedDate":"2023-03-07"},{"lineNumber":201,"author":{"gitId":"VietAnh1010"},"content":"            if (offset \u003c 0) {","lastModifiedDate":"2023-03-21"},{"lineNumber":202,"author":{"gitId":"VietAnh1010"},"content":"                return Optional.empty();","lastModifiedDate":"2023-03-21"},{"lineNumber":203,"author":{"gitId":"VietAnh1010"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":204,"author":{"gitId":"VietAnh1010"},"content":"            StringView nextInput \u003d input.subview(offset + end.length());","lastModifiedDate":"2023-03-21"},{"lineNumber":205,"author":{"gitId":"VietAnh1010"},"content":"            String value \u003d input.substringTo(offset);","lastModifiedDate":"2023-03-21"},{"lineNumber":206,"author":{"gitId":"VietAnh1010"},"content":"            return Optional.of(Pair.of(nextInput, value));","lastModifiedDate":"2023-03-21"},{"lineNumber":207,"author":{"gitId":"VietAnh1010"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":208,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":209,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":210,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cCharacter\u003e character(char ch) {","lastModifiedDate":"2023-03-21"},{"lineNumber":211,"author":{"gitId":"VietAnh1010"},"content":"        return satisfy(c -\u003e c \u003d\u003d ch);","lastModifiedDate":"2023-03-21"},{"lineNumber":212,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":213,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":214,"author":{"gitId":"VietAnh1010"},"content":"    public static ApplicativeParser\u003cCharacter\u003e satisfy(CharPredicate predicate) {","lastModifiedDate":"2023-03-21"},{"lineNumber":215,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":216,"author":{"gitId":"VietAnh1010"},"content":"            if (input.isEmpty()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":217,"author":{"gitId":"VietAnh1010"},"content":"                return Optional.empty();","lastModifiedDate":"2023-03-21"},{"lineNumber":218,"author":{"gitId":"VietAnh1010"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":219,"author":{"gitId":"VietAnh1010"},"content":"            char value \u003d input.charAt(0);","lastModifiedDate":"2023-03-21"},{"lineNumber":220,"author":{"gitId":"VietAnh1010"},"content":"            return predicate.test(value)","lastModifiedDate":"2023-03-21"},{"lineNumber":221,"author":{"gitId":"VietAnh1010"},"content":"                    ? Optional.of(Pair.of(input.subview(1), value))","lastModifiedDate":"2023-03-21"},{"lineNumber":222,"author":{"gitId":"VietAnh1010"},"content":"                    : Optional.empty();","lastModifiedDate":"2023-03-21"},{"lineNumber":223,"author":{"gitId":"VietAnh1010"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":224,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":225,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":226,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":227,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that tries multiple parsers, until one succeeds.","lastModifiedDate":"2023-03-07"},{"lineNumber":228,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":229,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cT\u003e the type of the parser results","lastModifiedDate":"2023-03-07"},{"lineNumber":230,"author":{"gitId":"VietAnh1010"},"content":"     * @param parsers an array of parsers","lastModifiedDate":"2023-03-07"},{"lineNumber":231,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that tries the given parsers, until one succeeds","lastModifiedDate":"2023-03-07"},{"lineNumber":232,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":233,"author":{"gitId":"VietAnh1010"},"content":"    @SafeVarargs","lastModifiedDate":"2023-03-07"},{"lineNumber":234,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT\u003e ApplicativeParser\u003cT\u003e choice(ApplicativeParser\u003c? extends T\u003e... parsers) {","lastModifiedDate":"2023-03-20"},{"lineNumber":235,"author":{"gitId":"VietAnh1010"},"content":"        return Arrays.stream(parsers)","lastModifiedDate":"2023-03-07"},{"lineNumber":236,"author":{"gitId":"VietAnh1010"},"content":"                .map(ApplicativeParser::\u003cT\u003ecast)","lastModifiedDate":"2023-03-21"},{"lineNumber":237,"author":{"gitId":"VietAnh1010"},"content":"                .reduce(ApplicativeParser::or)","lastModifiedDate":"2023-03-07"},{"lineNumber":238,"author":{"gitId":"VietAnh1010"},"content":"                .orElseGet(ApplicativeParser::fail);","lastModifiedDate":"2023-03-21"},{"lineNumber":239,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":240,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":241,"author":{"gitId":"VietAnh1010"},"content":"    //////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":242,"author":{"gitId":"VietAnh1010"},"content":"    // INSTANCE METHODS //","lastModifiedDate":"2023-03-07"},{"lineNumber":243,"author":{"gitId":"VietAnh1010"},"content":"    //////////////////////","lastModifiedDate":"2023-03-07"},{"lineNumber":244,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":245,"author":{"gitId":"VietAnh1010"},"content":"    private Optional\u003cPair\u003cStringView, T\u003e\u003e run(StringView input) {","lastModifiedDate":"2023-03-21"},{"lineNumber":246,"author":{"gitId":"VietAnh1010"},"content":"        return runner.apply(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":247,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":248,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":249,"author":{"gitId":"VietAnh1010"},"content":"    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2023-03-21"},{"lineNumber":250,"author":{"gitId":"VietAnh1010"},"content":"    private \u003cU\u003e ApplicativeParser\u003cU\u003e cast() {","lastModifiedDate":"2023-03-21"},{"lineNumber":251,"author":{"gitId":"VietAnh1010"},"content":"        return (ApplicativeParser\u003cU\u003e) this;","lastModifiedDate":"2023-03-21"},{"lineNumber":252,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":253,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":254,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":255,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that runs this parser and another parser, but drops the result of that","lastModifiedDate":"2023-03-07"},{"lineNumber":256,"author":{"gitId":"VietAnh1010"},"content":"     * parser. This method is equivalent to {@code \u003c*} operator in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":257,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":258,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the other parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":259,"author":{"gitId":"VietAnh1010"},"content":"     * @param that the other parser","lastModifiedDate":"2023-03-07"},{"lineNumber":260,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that runs both parsers, but keeps the result of only one parser","lastModifiedDate":"2023-03-07"},{"lineNumber":261,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":262,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cT\u003e dropNext(ApplicativeParser\u003cU\u003e that) {","lastModifiedDate":"2023-03-07"},{"lineNumber":263,"author":{"gitId":"VietAnh1010"},"content":"        return lift(left -\u003e right -\u003e left, this, that);","lastModifiedDate":"2023-03-21"},{"lineNumber":264,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":265,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":266,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":267,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a parser that runs this parser and another parser, but takes the result of that","lastModifiedDate":"2023-03-07"},{"lineNumber":268,"author":{"gitId":"VietAnh1010"},"content":"     * parser. This method is equivalent to {@code *\u003e} operator in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":269,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":270,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the other parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":271,"author":{"gitId":"VietAnh1010"},"content":"     * @param that the other parser","lastModifiedDate":"2023-03-07"},{"lineNumber":272,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that runs both parsers, but keeps the result of only one parser","lastModifiedDate":"2023-03-07"},{"lineNumber":273,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":274,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cU\u003e takeNext(ApplicativeParser\u003cU\u003e that) {","lastModifiedDate":"2023-03-07"},{"lineNumber":275,"author":{"gitId":"VietAnh1010"},"content":"        return lift(left -\u003e right -\u003e right, this, that);","lastModifiedDate":"2023-03-21"},{"lineNumber":276,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":277,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":278,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":279,"author":{"gitId":"VietAnh1010"},"content":"     * Maps a function over the result of this parser.","lastModifiedDate":"2023-03-07"},{"lineNumber":280,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":281,"author":{"gitId":"VietAnh1010"},"content":"     * This method is equivalent to {@code fmap} function in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":282,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":283,"author":{"gitId":"VietAnh1010"},"content":"     * This method proves that an {@code ApplicativeParser} is a {@code Functor}.","lastModifiedDate":"2023-03-07"},{"lineNumber":284,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":285,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the new result","lastModifiedDate":"2023-03-07"},{"lineNumber":286,"author":{"gitId":"VietAnh1010"},"content":"     * @param mapper the function to map the result of this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":287,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that applies the mapper function, after running this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":288,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":289,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cU\u003e map(Function\u003c? super T, ? extends U\u003e mapper) {","lastModifiedDate":"2023-03-07"},{"lineNumber":290,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).map(pair -\u003e pair.mapSecond(mapper)));","lastModifiedDate":"2023-03-21"},{"lineNumber":291,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":292,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":293,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":294,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":295,"author":{"gitId":"VietAnh1010"},"content":"     * Runs this parser, then uses the given function to create another parser from the result of","lastModifiedDate":"2023-03-07"},{"lineNumber":296,"author":{"gitId":"VietAnh1010"},"content":"     * this parser and run that parser.","lastModifiedDate":"2023-03-07"},{"lineNumber":297,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":298,"author":{"gitId":"VietAnh1010"},"content":"     * This method is equivalent to {@code \u003e\u003e\u003d} operator in \u003cb\u003eHaskell\u003c/b\u003e.","lastModifiedDate":"2023-03-07"},{"lineNumber":299,"author":{"gitId":"VietAnh1010"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":300,"author":{"gitId":"VietAnh1010"},"content":"     * This method proves that an {@code ApplicativeParser} is a {@code Monad}.","lastModifiedDate":"2023-03-07"},{"lineNumber":301,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":302,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the generated parser result","lastModifiedDate":"2023-03-07"},{"lineNumber":303,"author":{"gitId":"VietAnh1010"},"content":"     * @param flatMapper the function to create another parser from the result of this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":304,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that runs this parser, and then uses the mapper function to create and run","lastModifiedDate":"2023-03-07"},{"lineNumber":305,"author":{"gitId":"VietAnh1010"},"content":"     *         another parser","lastModifiedDate":"2023-03-07"},{"lineNumber":306,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":307,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cU\u003e flatMap(","lastModifiedDate":"2023-03-07"},{"lineNumber":308,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003c? super T, ? extends ApplicativeParser\u003c? extends U\u003e\u003e flatMapper) {","lastModifiedDate":"2023-03-07"},{"lineNumber":309,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).flatMap(pair -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":310,"author":{"gitId":"VietAnh1010"},"content":"            StringView nextInput \u003d pair.getFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":311,"author":{"gitId":"VietAnh1010"},"content":"            T value \u003d pair.getSecond();","lastModifiedDate":"2023-03-21"},{"lineNumber":312,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends U\u003e nextParser \u003d flatMapper.apply(value);","lastModifiedDate":"2023-03-21"},{"lineNumber":313,"author":{"gitId":"VietAnh1010"},"content":"            return nextParser.\u003cU\u003ecast().run(nextInput);","lastModifiedDate":"2023-03-21"},{"lineNumber":314,"author":{"gitId":"VietAnh1010"},"content":"        }));","lastModifiedDate":"2023-03-07"},{"lineNumber":315,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":316,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":317,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":318,"author":{"gitId":"VietAnh1010"},"content":"     * Maps a function that produces an {@code Optional} over the result of this parser, and unwraps","lastModifiedDate":"2023-03-07"},{"lineNumber":319,"author":{"gitId":"VietAnh1010"},"content":"     * that {@code Optional}. If the {@code Optional} is empty, the parser fails.","lastModifiedDate":"2023-03-07"},{"lineNumber":320,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":321,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the new result","lastModifiedDate":"2023-03-07"},{"lineNumber":322,"author":{"gitId":"VietAnh1010"},"content":"     * @param optionalMapper the function to map the result of this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":323,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that applies the mapper function, after running this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":324,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":325,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cU\u003e optionalMap(","lastModifiedDate":"2023-03-07"},{"lineNumber":326,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003c? super T, ? extends Optional\u003c? extends U\u003e\u003e optionalMapper) {","lastModifiedDate":"2023-03-07"},{"lineNumber":327,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).flatMap(pair -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":328,"author":{"gitId":"VietAnh1010"},"content":"            StringView nextInput \u003d pair.getFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":329,"author":{"gitId":"VietAnh1010"},"content":"            T value \u003d pair.getSecond();","lastModifiedDate":"2023-03-21"},{"lineNumber":330,"author":{"gitId":"VietAnh1010"},"content":"            return optionalMapper.apply(value).map(newValue -\u003e Pair.of(nextInput, newValue));","lastModifiedDate":"2023-03-21"},{"lineNumber":331,"author":{"gitId":"VietAnh1010"},"content":"        }));","lastModifiedDate":"2023-03-21"},{"lineNumber":332,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":333,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":334,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU\u003e ApplicativeParser\u003cU\u003e constMap(U otherValue) {","lastModifiedDate":"2023-03-21"},{"lineNumber":335,"author":{"gitId":"VietAnh1010"},"content":"        return map(ignore -\u003e otherValue);","lastModifiedDate":"2023-03-21"},{"lineNumber":336,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":337,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":338,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU, V\u003e ApplicativeParser\u003cV\u003e combine(","lastModifiedDate":"2023-03-21"},{"lineNumber":339,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends U\u003e that,","lastModifiedDate":"2023-03-21"},{"lineNumber":340,"author":{"gitId":"VietAnh1010"},"content":"            BiFunction\u003c? super T, ? super U, ? extends V\u003e combiner) {","lastModifiedDate":"2023-03-21"},{"lineNumber":341,"author":{"gitId":"VietAnh1010"},"content":"        return lift(combiner, this, that);","lastModifiedDate":"2023-03-21"},{"lineNumber":342,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":343,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":344,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cU, V\u003e ApplicativeParser\u003cV\u003e combine(","lastModifiedDate":"2023-03-21"},{"lineNumber":345,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser\u003c? extends U\u003e that,","lastModifiedDate":"2023-03-21"},{"lineNumber":346,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003c? super T, Function\u003c? super U, ? extends V\u003e\u003e combiner) {","lastModifiedDate":"2023-03-21"},{"lineNumber":347,"author":{"gitId":"VietAnh1010"},"content":"        return lift(combiner, this, that);","lastModifiedDate":"2023-03-21"},{"lineNumber":348,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":349,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":350,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":351,"author":{"gitId":"VietAnh1010"},"content":"     * Uses a predicate to filter the result of this parser. If the test fails, the parser also","lastModifiedDate":"2023-03-07"},{"lineNumber":352,"author":{"gitId":"VietAnh1010"},"content":"     * fails.","lastModifiedDate":"2023-03-07"},{"lineNumber":353,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":354,"author":{"gitId":"VietAnh1010"},"content":"     * @param predicate the predicate to test the result of this parser","lastModifiedDate":"2023-03-07"},{"lineNumber":355,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that runs this parser and uses the predicate to test the result","lastModifiedDate":"2023-03-07"},{"lineNumber":356,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":357,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cT\u003e filter(Predicate\u003c? super T\u003e predicate) {","lastModifiedDate":"2023-03-07"},{"lineNumber":358,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).filter(pair -\u003e predicate.test(pair.getSecond())));","lastModifiedDate":"2023-03-07"},{"lineNumber":359,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":360,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":361,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":362,"author":{"gitId":"VietAnh1010"},"content":"     * Chooses between this parser, or another parser.","lastModifiedDate":"2023-03-07"},{"lineNumber":363,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":364,"author":{"gitId":"VietAnh1010"},"content":"     * @param that the other parser","lastModifiedDate":"2023-03-07"},{"lineNumber":365,"author":{"gitId":"VietAnh1010"},"content":"     * @return a parser that chooses the result of the first succeeds parser","lastModifiedDate":"2023-03-07"},{"lineNumber":366,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":367,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cT\u003e or(ApplicativeParser\u003c? extends T\u003e that) {","lastModifiedDate":"2023-03-21"},{"lineNumber":368,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).or(() -\u003e that.\u003cT\u003ecast().run(input)));","lastModifiedDate":"2023-03-21"},{"lineNumber":369,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":370,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":371,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cList\u003cT\u003e\u003e many() {","lastModifiedDate":"2023-03-21"},{"lineNumber":372,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":373,"author":{"gitId":"VietAnh1010"},"content":"            List\u003cT\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":374,"author":{"gitId":"VietAnh1010"},"content":"            StringView nextInput \u003d input;","lastModifiedDate":"2023-03-21"},{"lineNumber":375,"author":{"gitId":"VietAnh1010"},"content":"            while (true) {","lastModifiedDate":"2023-03-21"},{"lineNumber":376,"author":{"gitId":"VietAnh1010"},"content":"                Optional\u003cPair\u003cStringView, T\u003e\u003e opt \u003d run(nextInput);","lastModifiedDate":"2023-03-21"},{"lineNumber":377,"author":{"gitId":"VietAnh1010"},"content":"                if (opt.isEmpty()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":378,"author":{"gitId":"VietAnh1010"},"content":"                    break;","lastModifiedDate":"2023-03-21"},{"lineNumber":379,"author":{"gitId":"VietAnh1010"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":380,"author":{"gitId":"VietAnh1010"},"content":"                Pair\u003cStringView, T\u003e pair \u003d opt.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":381,"author":{"gitId":"VietAnh1010"},"content":"                nextInput \u003d pair.getFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":382,"author":{"gitId":"VietAnh1010"},"content":"                result.add(pair.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":383,"author":{"gitId":"VietAnh1010"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":384,"author":{"gitId":"VietAnh1010"},"content":"            return Optional.of(Pair.of(input, result));","lastModifiedDate":"2023-03-21"},{"lineNumber":385,"author":{"gitId":"VietAnh1010"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":386,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":387,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":388,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cList\u003cT\u003e\u003e many1() {","lastModifiedDate":"2023-03-21"},{"lineNumber":389,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e run(input).map(pair -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":390,"author":{"gitId":"VietAnh1010"},"content":"            List\u003cT\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":391,"author":{"gitId":"VietAnh1010"},"content":"            StringView nextInput \u003d pair.getFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":392,"author":{"gitId":"VietAnh1010"},"content":"            result.add(pair.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":393,"author":{"gitId":"VietAnh1010"},"content":"            while (true) {","lastModifiedDate":"2023-03-21"},{"lineNumber":394,"author":{"gitId":"VietAnh1010"},"content":"                Optional\u003cPair\u003cStringView, T\u003e\u003e opt \u003d run(nextInput);","lastModifiedDate":"2023-03-21"},{"lineNumber":395,"author":{"gitId":"VietAnh1010"},"content":"                if (opt.isEmpty()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":396,"author":{"gitId":"VietAnh1010"},"content":"                    break;","lastModifiedDate":"2023-03-21"},{"lineNumber":397,"author":{"gitId":"VietAnh1010"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":398,"author":{"gitId":"VietAnh1010"},"content":"                Pair\u003cStringView, T\u003e nextPair \u003d opt.get();","lastModifiedDate":"2023-03-21"},{"lineNumber":399,"author":{"gitId":"VietAnh1010"},"content":"                nextInput \u003d nextPair.getFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":400,"author":{"gitId":"VietAnh1010"},"content":"                result.add(nextPair.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":401,"author":{"gitId":"VietAnh1010"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":402,"author":{"gitId":"VietAnh1010"},"content":"            return Pair.of(nextInput, result);","lastModifiedDate":"2023-03-21"},{"lineNumber":403,"author":{"gitId":"VietAnh1010"},"content":"        }));","lastModifiedDate":"2023-03-21"},{"lineNumber":404,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":405,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":406,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cT\u003e orElse(T otherValue) {","lastModifiedDate":"2023-03-21"},{"lineNumber":407,"author":{"gitId":"VietAnh1010"},"content":"        return or(of(otherValue));","lastModifiedDate":"2023-03-21"},{"lineNumber":408,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":409,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":410,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":411,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a new parser that throws an exception (immediately) if this parser fails. The thrown","lastModifiedDate":"2023-03-21"},{"lineNumber":412,"author":{"gitId":"VietAnh1010"},"content":"     * exception will stop a parsing pipeline.","lastModifiedDate":"2023-03-21"},{"lineNumber":413,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":414,"author":{"gitId":"VietAnh1010"},"content":"     * @param errorMessage the error message of the exception","lastModifiedDate":"2023-03-21"},{"lineNumber":415,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new parser that throws if this parser fails","lastModifiedDate":"2023-03-21"},{"lineNumber":416,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":417,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cT\u003e throwIfFail(String errorMessage) {","lastModifiedDate":"2023-03-21"},{"lineNumber":418,"author":{"gitId":"VietAnh1010"},"content":"        return fromRunner(input -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":419,"author":{"gitId":"VietAnh1010"},"content":"            Optional\u003cPair\u003cStringView, T\u003e\u003e opt \u003d run(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":420,"author":{"gitId":"VietAnh1010"},"content":"            if (opt.isEmpty()) {","lastModifiedDate":"2023-03-21"},{"lineNumber":421,"author":{"gitId":"VietAnh1010"},"content":"                throw new ParserException(errorMessage);","lastModifiedDate":"2023-03-21"},{"lineNumber":422,"author":{"gitId":"VietAnh1010"},"content":"            }","lastModifiedDate":"2023-03-07"},{"lineNumber":423,"author":{"gitId":"VietAnh1010"},"content":"            return opt;","lastModifiedDate":"2023-03-21"},{"lineNumber":424,"author":{"gitId":"VietAnh1010"},"content":"        });","lastModifiedDate":"2023-03-21"},{"lineNumber":425,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":426,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":427,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":428,"author":{"gitId":"VietAnh1010"},"content":"     * Runs this parser on the given input.","lastModifiedDate":"2023-03-21"},{"lineNumber":429,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":430,"author":{"gitId":"VietAnh1010"},"content":"     * @param input the given input, to be parsed","lastModifiedDate":"2023-03-21"},{"lineNumber":431,"author":{"gitId":"VietAnh1010"},"content":"     * @return a pair consists of the remaining input, and the parser result","lastModifiedDate":"2023-03-21"},{"lineNumber":432,"author":{"gitId":"VietAnh1010"},"content":"     * @throws ParserException if this parser fails","lastModifiedDate":"2023-03-21"},{"lineNumber":433,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":434,"author":{"gitId":"VietAnh1010"},"content":"    public Pair\u003cString, T\u003e parsePartOf(String input) {","lastModifiedDate":"2023-03-21"},{"lineNumber":435,"author":{"gitId":"VietAnh1010"},"content":"        return run(StringView.of(input))","lastModifiedDate":"2023-03-21"},{"lineNumber":436,"author":{"gitId":"VietAnh1010"},"content":"                .map(pair -\u003e pair.mapFirst(StringView::toString))","lastModifiedDate":"2023-03-21"},{"lineNumber":437,"author":{"gitId":"VietAnh1010"},"content":"                .orElseThrow(() -\u003e new ParserException(\"Unable to parse input: \" + input));","lastModifiedDate":"2023-03-21"},{"lineNumber":438,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":439,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":440,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":441,"author":{"gitId":"VietAnh1010"},"content":"     * Runs this parser on the given input.","lastModifiedDate":"2023-03-21"},{"lineNumber":442,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":443,"author":{"gitId":"VietAnh1010"},"content":"     * @param input the given input, to be parsed","lastModifiedDate":"2023-03-21"},{"lineNumber":444,"author":{"gitId":"VietAnh1010"},"content":"     * @return the parser result","lastModifiedDate":"2023-03-21"},{"lineNumber":445,"author":{"gitId":"VietAnh1010"},"content":"     * @throws ParserException if this parser fails","lastModifiedDate":"2023-03-21"},{"lineNumber":446,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":447,"author":{"gitId":"VietAnh1010"},"content":"    public T parse(String input) {","lastModifiedDate":"2023-03-21"},{"lineNumber":448,"author":{"gitId":"VietAnh1010"},"content":"        return run(StringView.of(input))","lastModifiedDate":"2023-03-21"},{"lineNumber":449,"author":{"gitId":"VietAnh1010"},"content":"                .map(Pair::getSecond)","lastModifiedDate":"2023-03-21"},{"lineNumber":450,"author":{"gitId":"VietAnh1010"},"content":"                .orElseThrow(() -\u003e new ParserException(\"Unable to parse input: \" + input));","lastModifiedDate":"2023-03-21"},{"lineNumber":451,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":452,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"VietAnh1010":452}},{"path":"src/main/java/vimification/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":" * Stores mapping of prefixes to their respective arguments. Each key may be associated with","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":" * multiple argument values. Values for a given key are stored in a list, and the insertion ordering","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":" * is maintained. Keys are unique, but the list of argument values may contain duplicate argument","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":" * values, i.e. the same argument value can be inserted multiple times for the same prefix.","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments **/","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     * Associates the specified argument value with {@code prefix} key in this map. If the map","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"     * previously contained a mapping for the key, the new value is appended to the list of existing","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"     * values.","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"     * will return an empty list. Modifying the returned list will not affect the underlying data","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"     * structure of the ArgumentMultimap.","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"VietAnh1010":11,"-":49}},{"path":"src/main/java/vimification/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":" * {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":" * example.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":" * {@code t/} in the above example.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"     * prefixes to their respective argument values. Only the given prefixes will be recognized in","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"     * the arguments string.","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"     * @param argsString Arguments string of the form:","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"     *        {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param prefixes Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"     * @param argsString Arguments string of the form:","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"     *        {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @param prefixes Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString,","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"            Prefix... prefixes) {","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"     * from index {@code fromIndex}. An occurrence is valid if there is a whitespace before","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"     * {@code prefix}. Returns -1 if no such occurrence can be found.","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it.","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"     * 0, this method returns 5.","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"     * on their zero-based positions in {@code argsString}.","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":87,"author":{"gitId":"VietAnh1010"},"content":"     * @param argsString Arguments string of the form:","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"VietAnh1010"},"content":"     *        {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"    private static ArgumentMultimap extractArguments(String argsString,","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"            List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"        prefixPositions.sort(","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"                (prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i),","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"VietAnh1010"},"content":"                    prefixPositions.get(i + 1));","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"VietAnh1010"},"content":"     * {@code currentPrefixPosition}. The end position of the value is determined by","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"VietAnh1010"},"content":"     * {@code nextPrefixPosition}.","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"VietAnh1010":37,"-":120}},{"path":"src/main/java/vimification/logic/parser/CharPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"@FunctionalInterface","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"public interface CharPredicate {","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"    boolean test(char c);","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"    default CharPredicate negate() {","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"        return c -\u003e !test(c);","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    default CharPredicate and(CharPredicate other) {","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"        return c -\u003e test(c) \u0026\u0026 other.test(c);","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    default CharPredicate or(CharPredicate other) {","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        return c -\u003e test(c) || other.test(c);","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":19}},{"path":"src/main/java/vimification/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"VietAnh1010":1,"-":14}},{"path":"src/main/java/vimification/logic/parser/CreateCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CreateCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.task.Deadline;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.task.Todo;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"public class CreateCommandParser implements LogicCommandParser\u003cCreateCommand\u003e {","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cTodo\u003e TODO_PARSER \u003d ApplicativeParser","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"            .string(\"todo\")","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"            .takeNext(ApplicativeParser.skipWhitespaces1())","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"            .takeNext(ApplicativeParser.untilEof().map(String::strip))","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"            .map(Todo::new);","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cLocalDateTime\u003e DATE_TIME_PARSER \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"            .nonWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"            .map(ignore -\u003e LocalDateTime.now()); // TODO: Fix after we agree on the format.","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cDeadline\u003e DEADLINE_PARSER \u003d ApplicativeParser","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"            .string(\"deadline\")","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"            .takeNext(ApplicativeParser.skipWhitespaces1())","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"            .takeNext(ApplicativeParser.until(\"/\").map(String::strip))","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"            .combine(DATE_TIME_PARSER, Deadline::new);","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cCreateCommand\u003e COMMAND_PARSER \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"            .choice(TODO_PARSER, DEADLINE_PARSER)","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"            .dropNext(ApplicativeParser.skipWhitespaces())","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"            .dropNext(ApplicativeParser.eof())","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"            .map(CreateCommand::new);","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cApplicativeParser\u003cCreateCommand\u003e\u003e INTERNAL_PARSER \u003d","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"                    .skipWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"                    .takeNext(ApplicativeParser.string(\"i\"))","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"                    .takeNext(ApplicativeParser.skipWhitespaces1())","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"                    .constMap(COMMAND_PARSER);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    private static final CreateCommandParser INSTANCE \u003d new CreateCommandParser();","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"    private CreateCommandParser() {}","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"    public static CreateCommandParser getInstance() {","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"        return INSTANCE;","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cApplicativeParser\u003cCreateCommand\u003e\u003e getInternalParser() {","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"        return INTERNAL_PARSER;","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"VietAnh1010":52}},{"path":"src/main/java/vimification/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.Index;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"public class DeleteCommandParser implements LogicCommandParser\u003cDeleteCommand\u003e {","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cIndex\u003e INDEX_PARSER \u003d","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser.nonWhitespaces().flatMap(indexStr -\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"                try {","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"                    int indexInt \u003d Integer.parseInt(indexStr);","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"                    Index index \u003d Index.fromOneBased(indexInt);","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"                    return ApplicativeParser.of(index);","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"                } catch (NumberFormatException | IndexOutOfBoundsException ex) {","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"                    return ApplicativeParser.fail();","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"                }","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"            });","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cDeleteCommand\u003e COMMAND_PARSER \u003d INDEX_PARSER","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"            .dropNext(ApplicativeParser.skipWhitespaces())","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"            .dropNext(ApplicativeParser.eof())","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"            .map(DeleteCommand::new);","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    private static final ApplicativeParser\u003cApplicativeParser\u003cDeleteCommand\u003e\u003e INTERNAL_PARSER \u003d","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"            ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"                    .skipWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"                    .takeNext(ApplicativeParser.string(\"d\"))","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"                    .takeNext(ApplicativeParser.skipWhitespaces1())","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"                    .constMap(COMMAND_PARSER);","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    private static final DeleteCommandParser INSTANCE \u003d new DeleteCommandParser();","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    private DeleteCommandParser() {}","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"    public static DeleteCommandParser getInstance() {","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"        return INSTANCE;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    public ApplicativeParser\u003cApplicativeParser\u003cDeleteCommand\u003e\u003e getInternalParser() {","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"        return INTERNAL_PARSER;","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"VietAnh1010":43}},{"path":"src/main/java/vimification/logic/parser/LogicCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.LogicCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"/**","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":" * Represents a parser that is able to parse user input into a {@code LogicCommand} of type","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":" * {@code T}.","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":" * Note that, we need two layers of {@code ApplicativeParser}. The first layer is to parse the","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":" * prefix, and the second layer is to parse the actual {@code LogicCommand}.","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":" */","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"@FunctionalInterface","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"public interface LogicCommandParser\u003cT extends LogicCommand\u003e {","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"    ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e getInternalParser();","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"    default T parse(String input) {","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"        return getInternalParser().flatMap(Function.identity()).parse(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"    default LogicCommandParser\u003cT\u003e or(LogicCommandParser\u003c? extends T\u003e that) {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e thisInternal \u003d getInternalParser();","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e thatInternal \u003d that.\u003cT\u003ecast().getInternalParser();","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e combinedInternal \u003d thisInternal.or(thatInternal);","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        return () -\u003e combinedInternal;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    @SuppressWarnings(\"unchecked\")","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    default \u003cU extends LogicCommand\u003e LogicCommandParser\u003cU\u003e cast() {","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"        return (LogicCommandParser\u003cU\u003e) this;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"    default LogicCommandParser\u003cT\u003e updateInternalParser(","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"            Function\u003cApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e, ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e\u003e mapper) {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cApplicativeParser\u003cT\u003e\u003e newInternal \u003d mapper.apply(getInternalParser());","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"        return () -\u003e newInternal;","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT extends LogicCommand\u003e LogicCommandParser\u003cT\u003e fail() {","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        return ApplicativeParser::fail;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"VietAnh1010":45}},{"path":"src/main/java/vimification/logic/parser/Pair.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.util.function.Function;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":" * Represents a tuple of two elements.","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":" *","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":" * @param \u003cT\u003e the type of the first element","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":" * @param \u003cU\u003e the type of the second element","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"public class Pair\u003cT, U\u003e {","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"    private T first;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    private U second;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"     * Creates a new pair of two elements.","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"     * @param first the first element","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"     * @param second the second element","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    public Pair(T first, U second) {","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"        this.first \u003d first;","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"        this.second \u003d second;","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"     * Creates a new pair of two elements. This is a factory method, used to reduce the verbosity","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"     * when creating a new pair.","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cT\u003e the type of the first element","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"     * @param \u003cU\u003e the type of the second element","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"     * @param first the first element","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"     * @param second the second element","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new pair that contains the two elements","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"    public static \u003cT, U\u003e Pair\u003cT, U\u003e of(T first, U second) {","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"        return new Pair\u003c\u003e(first, second);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"    public T getFirst() {","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        return first;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"    public U getSecond() {","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"        return second;","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cV\u003e Pair\u003cV, U\u003e mapFirst(Function\u003c? super T, ? extends V\u003e mapper) {","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"        return of(mapper.apply(first), second);","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"    public \u003cR\u003e Pair\u003cT, R\u003e mapSecond(Function\u003c? super U, ? extends R\u003e mapper) {","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        return of(first, mapper.apply(second));","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"    public String toString() {","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"        return String.format(\"[%s, %s]\", first, second);","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":61}},{"path":"src/main/java/vimification/logic/parser/ParserException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":" * Represents an error encountered by the parsers.","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"public class ParserException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"    public ParserException(String message) {","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"        super(message);","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    public ParserException(String message, Throwable cause) {","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"        super(message, cause);","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"VietAnh1010":15}},{"path":"src/main/java/vimification/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":" * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":" * t/ friend\u0027.","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"VietAnh1010":3,"-":36}},{"path":"src/main/java/vimification/logic/parser/StringView.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":" * Wrapper of a normal {@code String} instance. Instances of this class are used to represent slices","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":" * of the original string.","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":" * A {@code StringView} instance stores 2 fields: the original string and an index that represents","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":" * the offset into the original string.","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"public class StringView {","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    private String value;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"    private int index;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    private StringView(String value, int index) {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     * Creates a new instance of this class.","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"     * @param value the original string","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"     * @param index the initial offset","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"     * @return an instance of this class, which represents a substring that starts from","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"     *         {@code index} in the original string.","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    public static StringView of(String value, int index) {","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"        return new StringView(value, index);","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"    public static StringView of(String value) {","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"        return of(value, 0);","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"     * Checks whether this view starts with the given prefix.","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"     * @param prefix the prefix to check","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"     * @return whether this view starts with the given prefix","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"    public boolean startsWith(String prefix) {","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"        return value.startsWith(prefix, index);","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a subview of this view, starting from an offset.","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"     * @param offset the offset from the start of this view","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"     * @return a new subview that starts from the given offset","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"    public StringView subview(int offset) {","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"        return new StringView(value, index + offset);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"     * Returns a substring, from the start of this view to the given offset.","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"     * @param offset the offset from the start of this view","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"     * @return a substring that starts at the start of this view, and ends before the given offset","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"    public String substringTo(int offset) {","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"        return value.substring(index, index + offset);","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the character at the given offset.","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"     * @param offset the offset from the start of this view","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"     * @return the chatacter at the offset","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"    public char charAt(int offset) {","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"        return value.charAt(index + offset);","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the length of this view.","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"     * @return the length of this view","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"    public int length() {","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"        return value.length() - index;","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the index of the first occurence of the given substring in this view.","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"VietAnh1010"},"content":"     * @param str the given substring to find","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"VietAnh1010"},"content":"     * @return the index of the first occurence of the given substring in this view, {@code -1} if","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"VietAnh1010"},"content":"     *         the substring does not appear in this view","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"    public int indexOf(String str) {","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"        int result \u003d value.indexOf(str, index);","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"        return result \u003c 0 ? result : result - index;","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"     * Checks whether this view represents an empty string.","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"VietAnh1010"},"content":"     * @return {@code true} if this view represents an empty string, otherwise {@code false}","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"VietAnh1010"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"        return index \u003e\u003d value.length();","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"VietAnh1010"},"content":"    public String getOriginalString() {","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"VietAnh1010"},"content":"        return value;","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"    public String toString() {","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"        return value.substring(index);","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":114}},{"path":"src/main/java/vimification/logic/parser/VimificationParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-20"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.LogicCommand;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"public class VimificationParser {","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(VimificationParser.class);","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    private static final LogicCommandParser\u003cLogicCommand\u003e INTERNAL_PARSER \u003d","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"            CreateCommandParser.getInstance()","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"                    .cast()","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"                    .or(DeleteCommandParser.getInstance())","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"                    .updateInternalParser(parser -\u003e parser.throwIfFail(\"Unknown command\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"    public static VimificationParser getInstance() {","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"        return new VimificationParser();","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    public LogicCommand parse(String userInput) {","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"        LOGGER.info(userInput);","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"        return INTERNAL_PARSER.parse(userInput);","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-20"}],"authorContributionMap":{"VietAnh1010":20,"bipbipboopboop":6}},{"path":"src/main/java/vimification/model/LogicTaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.model;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"import java.util.List;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-20"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":" * Responsible for storing, retrieving and updating all the tasks that are currently on the list.","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":"public class LogicTaskList {","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    public LogicTaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    public LogicTaskList() {","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        this(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    public LogicTaskList(Task... tasks) {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"        this(new ArrayList\u003c\u003e(Arrays.asList(tasks)));","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    public List\u003cTask\u003e getInternalList() {","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"        return tasks;","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"    public int size() {","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"DerenC"},"content":"        return tasks.size();","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"DerenC"},"content":"    //// Task-level operations","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"     * Returns the task with the specified index.","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    public Task get(int index) {","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        requireNonNull(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"        tasks.add(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"     * Inserts a task to the task list at the specified index.","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"    public void add(int index, Task task) {","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"        requireNonNull(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"        tasks.add(index, task);","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"     * Removes the task with the specified index from the task list.","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"    public Task remove(int index) {","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"        return tasks.remove(index);","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"     * Replaces the task with the specified index with the given task.","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"    public void set(int index, Task newTask) {","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"        requireNonNull(newTask);","lastModifiedDate":"2023-03-20"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"        tasks.set(index, newTask);","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"     * Returns the index of the task with the specified index.","lastModifiedDate":"2023-03-20"},{"lineNumber":83,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"    public int indexOf(Task t) {","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"        return tasks.indexOf(t);","lastModifiedDate":"2023-03-20"},{"lineNumber":86,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":89,"author":{"gitId":"VietAnh1010"},"content":"     * Returns true if a task that is the same as {@code t} exists in the task list.","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":91,"author":{"gitId":"VietAnh1010"},"content":"    public boolean contains(Task task) {","lastModifiedDate":"2023-03-20"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"        requireNonNull(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"        return tasks.contains(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":95,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"    public Stream\u003cTask\u003e stream() {","lastModifiedDate":"2023-03-20"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"        return tasks.stream();","lastModifiedDate":"2023-03-20"},{"lineNumber":98,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"VietAnh1010"},"content":"     * Removes the last task from the task list.","lastModifiedDate":"2023-03-20"},{"lineNumber":102,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"    public void pop() {","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"        tasks.remove(size() - 1);","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":107,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"     * Marks the task with the specified index as done.","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"    public void mark(int index) {","lastModifiedDate":"2023-03-20"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"        tasks.get(index).mark();","lastModifiedDate":"2023-03-20"},{"lineNumber":112,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"VietAnh1010"},"content":"     * Unmarks the task with the specified index as not done.","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"VietAnh1010"},"content":"    public void unmark(int index) {","lastModifiedDate":"2023-03-20"},{"lineNumber":118,"author":{"gitId":"VietAnh1010"},"content":"        tasks.get(index).unmark();","lastModifiedDate":"2023-03-20"},{"lineNumber":119,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"DerenC"},"content":"    //// util methods","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"DerenC"},"content":"    public LogicTaskList slice(int start, int end) {","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"DerenC"},"content":"        return new LogicTaskList(tasks.subList(start, end));","lastModifiedDate":"2023-03-19"},{"lineNumber":125,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"DerenC"},"content":"    public LogicTaskList filter(Predicate\u003cTask\u003e pred) {","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"VietAnh1010"},"content":"        List\u003cTask\u003e filteredTasks \u003d stream()","lastModifiedDate":"2023-03-20"},{"lineNumber":129,"author":{"gitId":"VietAnh1010"},"content":"                .filter(pred)","lastModifiedDate":"2023-03-20"},{"lineNumber":130,"author":{"gitId":"VietAnh1010"},"content":"                .collect(Collectors.toCollection(ArrayList::new));","lastModifiedDate":"2023-03-20"},{"lineNumber":131,"author":{"gitId":"VietAnh1010"},"content":"        return new LogicTaskList(filteredTasks);","lastModifiedDate":"2023-03-20"},{"lineNumber":132,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"DerenC"},"content":"    public String toString() {","lastModifiedDate":"2023-03-19"},{"lineNumber":136,"author":{"gitId":"VietAnh1010"},"content":"        // TODO: rewrite this, too confusing","lastModifiedDate":"2023-03-20"},{"lineNumber":137,"author":{"gitId":"DerenC"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-03-19"},{"lineNumber":138,"author":{"gitId":"DerenC"},"content":"        for (int i \u003d 0; i \u003c size(); i++) {","lastModifiedDate":"2023-03-20"},{"lineNumber":139,"author":{"gitId":"DerenC"},"content":"            String prefix \u003d i + 1 \u003c 10 ? \"0\" : \"\";","lastModifiedDate":"2023-03-19"},{"lineNumber":140,"author":{"gitId":"DerenC"},"content":"            result +\u003d prefix + (i + 1) + \". \" + get(i).toString();","lastModifiedDate":"2023-03-19"},{"lineNumber":141,"author":{"gitId":"DerenC"},"content":"            if (i \u003c size() - 1) {","lastModifiedDate":"2023-03-20"},{"lineNumber":142,"author":{"gitId":"DerenC"},"content":"                result +\u003d \"\\n\";","lastModifiedDate":"2023-03-19"},{"lineNumber":143,"author":{"gitId":"DerenC"},"content":"            }","lastModifiedDate":"2023-03-19"},{"lineNumber":144,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":145,"author":{"gitId":"DerenC"},"content":"        return result;","lastModifiedDate":"2023-03-19"},{"lineNumber":146,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":147,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":148,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":149,"author":{"gitId":"DerenC"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-19"},{"lineNumber":150,"author":{"gitId":"DerenC"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-19"},{"lineNumber":151,"author":{"gitId":"DerenC"},"content":"                || (other instanceof LogicTaskList // instanceof handles nulls","lastModifiedDate":"2023-03-19"},{"lineNumber":152,"author":{"gitId":"DerenC"},"content":"                        \u0026\u0026 tasks.equals(((LogicTaskList) other).tasks));","lastModifiedDate":"2023-03-19"},{"lineNumber":153,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":154,"author":{"gitId":"DerenC"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"DerenC":100,"VietAnh1010":54}},{"path":"src/main/java/vimification/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.model;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.GuiSettings;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"    Path getTaskListFilePath();","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"    void setTaskListFilePath(Path taskListFilePath);","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"    void setTaskList(ReadOnlyTaskPlanner taskList);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"    /** Returns the TaskPlanner */","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"liujiayue314"},"content":"    ReadOnlyTaskPlanner getTaskList();","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"liujiayue314"},"content":"    boolean hasTask(Task task);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"     * Deletes the given person. The person must exist in the address book.","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"liujiayue314"},"content":"    void deleteTask(Task task);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"     * Adds the given person. {@code person} must not already exist in the address book.","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"liujiayue314"},"content":"    void addTask(Task task);","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"bipbipboopboop"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}. {@code target} must exist","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"     * in the address book. The person identity of {@code editedPerson} must not be the same as","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"     * another existing person in the address book.","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":75,"author":{"gitId":"liujiayue314"},"content":"    void setTask(Task target, Task editedTask);","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":78,"author":{"gitId":"liujiayue314"},"content":"    ObservableList\u003cTask\u003e getFilteredTaskList();","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":80,"author":{"gitId":"liujiayue314"},"content":"    void markTask(Task task);","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"liujiayue314"},"content":"    void unmarkTask(Task task);","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"bipbipboopboop"},"content":"     * ","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"liujiayue314"},"content":"    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"liujiayue314":15,"VietAnh1010":2,"-":66,"bipbipboopboop":7}},{"path":"src/main/java/vimification/model/ReadOnlyTaskPlanner.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"public interface ReadOnlyTaskPlanner {","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"    ObservableList\u003cTask\u003e getTaskList();","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":4,"-":13}},{"path":"src/main/java/vimification/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.model;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.GuiSettings;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"    Path getTaskListFilePath();","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"liujiayue314":1,"VietAnh1010":2,"-":13}},{"path":"src/main/java/vimification/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.model;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.GuiSettings;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"liujiayue314"},"content":"    private Path taskListFilePath \u003d Paths.get(\"data\" , \"tasklist.json\");","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"liujiayue314"},"content":"        setTaskListFilePath(newUserPrefs.getTaskListFilePath());","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"    public Path getTaskListFilePath() {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"        return taskListFilePath;","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"liujiayue314"},"content":"    public void setTaskListFilePath(Path taskListFilePath) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"liujiayue314"},"content":"        requireNonNull(taskListFilePath);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"liujiayue314"},"content":"        this.taskListFilePath \u003d taskListFilePath;","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"liujiayue314"},"content":"                \u0026\u0026 taskListFilePath.equals(o.taskListFilePath);","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"liujiayue314"},"content":"        sb.append(\"\\nLocal data file location : \" + taskListFilePath);","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"liujiayue314":9,"VietAnh1010":2,"-":71}},{"path":"src/main/java/vimification/model/task/Deadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"    public Deadline(String description, boolean isDone, LocalDateTime deadline) {","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"        requireNonNull(deadline);","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":"        this(description, false, deadline);","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"DerenC"},"content":"    public LocalDateTime getDeadline() {","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"DerenC"},"content":"        return deadline;","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    public void setDeadline(LocalDateTime deadline) {","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"DerenC"},"content":"    public Deadline clone() {","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"DerenC"},"content":"        return new Deadline(getDescription(), isDone(), deadline);","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"    public boolean isSameTask(Task task) {","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"        if (task \u003d\u003d this) {","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"DerenC"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"DerenC"},"content":"        if (!(task instanceof Deadline)) {","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"DerenC"},"content":"        Deadline otherDeadline \u003d (Deadline) task;","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        return super.isSameTask(otherDeadline) \u0026\u0026 otherDeadline.deadline.equals(deadline);","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"DerenC"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"DerenC"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"        if (!(other instanceof Deadline)) {","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"DerenC"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"DerenC"},"content":"        Deadline otherDeadline \u003d (Deadline) other;","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        return super.equals(otherDeadline) \u0026\u0026 otherDeadline.deadline.equals(deadline);","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"liujiayue314"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"        builder.append(\"Deadline \")","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"liujiayue314"},"content":"                .append(super.toString())","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"liujiayue314"},"content":"                .append(\"; by: \")","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"liujiayue314"},"content":"                .append(getDeadline());","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"liujiayue314"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":16,"DerenC":40,"VietAnh1010":9}},{"path":"src/main/java/vimification/model/task/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"import static vimification.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"public class Event extends Task {","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"    private LocalDateTime startDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"    private LocalDateTime endDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"    public Event(String description, boolean isDone,","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"            LocalDateTime startDateTime,","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"            LocalDateTime endDateTime) {","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"        requireAllNonNull(startDateTime, endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"    public Event(String description, LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"        this(description, false, startDateTime, endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"DerenC"},"content":"        return startDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    public void setStartDateTime(LocalDateTime startDateTime) {","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"        return endDateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"    public void setEndDateTime(LocalDateTime endDateTime) {","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"DerenC"},"content":"    public Event clone() {","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"DerenC"},"content":"        return new Event(getDescription(), isDone(), startDateTime, endDateTime);","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":46,"author":{"gitId":"DerenC"},"content":"    public boolean isSameTask(Task task) {","lastModifiedDate":"2023-03-19"},{"lineNumber":47,"author":{"gitId":"DerenC"},"content":"        if (task \u003d\u003d this) {","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"        if (!(task instanceof Event)) {","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"DerenC"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"DerenC"},"content":"        Event otherEvent \u003d (Event) task;","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"        return super.isSameTask(otherEvent)","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"                \u0026\u0026 otherEvent.startDateTime.equals(startDateTime)","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"                \u0026\u0026 otherEvent.endDateTime.equals(endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"DerenC"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"DerenC"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"DerenC"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"DerenC"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"DerenC"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"DerenC"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"DerenC"},"content":"        return super.equals(otherEvent)","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"                \u0026\u0026 otherEvent.startDateTime.equals(startDateTime)","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"                \u0026\u0026 otherEvent.endDateTime.equals(endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"liujiayue314"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"        builder.append(\"Event \")","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"liujiayue314"},"content":"                .append(super.toString())","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"liujiayue314"},"content":"                .append(\"; from: \")","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"                .append(startDateTime)","lastModifiedDate":"2023-03-20"},{"lineNumber":79,"author":{"gitId":"liujiayue314"},"content":"                .append(\" to: \")","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"                .append(endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"liujiayue314"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":16,"DerenC":41,"VietAnh1010":26}},{"path":"src/main/java/vimification/model/task/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"public class Status {","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"    public Boolean done;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"    public String value;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"    public Status(Boolean status) {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"        done \u003d status;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"liujiayue314"},"content":"        value \u003d Integer.toString((done) ? 1 : 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"    public Status(String status) {","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"        done \u003d status.equals(\"1\");","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"        value \u003d status;","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"    public void setDone() {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"        done \u003d true;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"liujiayue314"},"content":"        value \u003d Integer.toString(1);","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"    public void setNotDone() {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"liujiayue314"},"content":"        done \u003d false;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"liujiayue314"},"content":"        value \u003d Integer.toString(0);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"liujiayue314"},"content":"        return value;","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"                || (other instanceof Status // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"                        \u0026\u0026 done \u003d\u003d ((Status) other).done); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":46}},{"path":"src/main/java/vimification/model/task/Task.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"public abstract class Task {","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"    private String description;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"    private boolean isDone;","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"    Task(String description, boolean isDone) {","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"        return description;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"        return isDone;","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"DerenC"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"    public void mark() {","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"DerenC"},"content":"    public void unmark() {","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-03-19"},{"lineNumber":38,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"    public abstract Task clone();","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"    public boolean isSameTask(Task otherTask) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"        if (otherTask \u003d\u003d this) {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"        return otherTask.description.equals(description);","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"     * Returns true if both persons have the same identity and data fields. This defines a stronger","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"DerenC"},"content":"     * notion of equality between two persons.","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"liujiayue314"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"liujiayue314"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"liujiayue314"},"content":"            return true;","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"liujiayue314"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"liujiayue314"},"content":"        if (!(other instanceof Task)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"liujiayue314"},"content":"            return false;","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"liujiayue314"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"liujiayue314"},"content":"        Task otherTask \u003d (Task) other;","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"        return otherTask.description.equals(description) \u0026\u0026 otherTask.isDone \u003d\u003d isDone;","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"liujiayue314"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"        builder.append(\"description: \")","lastModifiedDate":"2023-03-20"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"                .append(description)","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"                .append(\"; status: \")","lastModifiedDate":"2023-03-20"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"                .append(isDone ? \"done\" : \"not done\");","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"liujiayue314"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":43,"DerenC":24,"VietAnh1010":7}},{"path":"src/main/java/vimification/model/task/TaskType.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"import static vimification.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"public enum TaskType {","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"    TODO(\"Todo\"), DEADLINE(\"Deadline\"), EVENT(\"Event\");","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"    private String type;","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"    TaskType(String type) {","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":"    public String toString() {","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":"        return type;","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"DerenC"},"content":"    public static TaskType str2type(String type) {","lastModifiedDate":"2023-03-19"},{"lineNumber":21,"author":{"gitId":"DerenC"},"content":"        requireNonNull(type);","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"        switch (type) {","lastModifiedDate":"2023-03-19"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"        case \"Todo\":","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"            return TODO;","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"DerenC"},"content":"        case \"Deadline\":","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"DerenC"},"content":"            return DEADLINE;","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"        case \"Event\":","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"            return EVENT;","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"DerenC"},"content":"        default:","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"DerenC"},"content":"            throw new IllegalArgumentException(\"Invalid task type\");","lastModifiedDate":"2023-03-19"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"}","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"DerenC":34}},{"path":"src/main/java/vimification/model/task/Todo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"        this(description, false);","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"DerenC"},"content":"    public Todo clone() {","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":"        return new Todo(getDescription(), isDone());","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"        return \"Todo \" + super.toString();","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":8,"DerenC":10,"VietAnh1010":3}},{"path":"src/main/java/vimification/model/task/components/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.model.task.components;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"public class DateTime {","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"\";","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"    public static final String VALIDATION_REGEX \u003d \"\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"    public final LocalDateTime dateTime;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"    public final String value;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    private static final DateTimeFormatter dateTimeFormatter \u003d","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"     * Constructs an {@code DateTime}.","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"     * @param date A valid date.","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"    public DateTime(String date) {","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO : UNSUPPRESS checking","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        // checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"        this.dateTime \u003d LocalDateTime.parse(date, dateTimeFormatter);","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"        value \u003d dateTimeFormatter.format(this.dateTime);","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"liujiayue314"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"    public static boolean isValidDate(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"        return value;","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"liujiayue314"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"liujiayue314"},"content":"                || (other instanceof DateTime // instanceof handles nulls","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"liujiayue314"},"content":"                        \u0026\u0026 dateTime.equals(((DateTime) other).dateTime)); // state check","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"DerenC":1,"liujiayue314":46,"bipbipboopboop":4}},{"path":"src/main/java/vimification/model/task/components/Description.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"DerenC"},"content":"package vimification.model.task.components;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":" * Represents a Person\u0027s name in the address book. Guarantees: immutable; is valid as declared in","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":" * {@link #isValidDescription(String)}","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"public class Description {","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"            \"\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"    /*","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"     * The first character of the address must not be a whitespace, otherwise \" \" (a blank string)","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"     * becomes a valid input.","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"    public static final String VALIDATION_REGEX \u003d \".*\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"    public final String description;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"liujiayue314"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"     * @param description A valid name.","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"liujiayue314"},"content":"    public Description(String description) {","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"        requireNonNull(description);","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO : UNSUPPRESS checking","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"        // checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"liujiayue314"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"liujiayue314"},"content":"    public static boolean isValidDescription(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"liujiayue314"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"        return description;","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"liujiayue314"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"liujiayue314"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"                || (other instanceof Description // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"liujiayue314"},"content":"                        \u0026\u0026 description.equals(((Description) other).description)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"DerenC":1,"liujiayue314":45,"bipbipboopboop":7}},{"path":"src/main/java/vimification/model/task/exceptions/DuplicateTaskException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task.exceptions;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":" * they have the same identity).","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"public class DuplicateTaskException extends RuntimeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"    public DuplicateTaskException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"liujiayue314":3,"VietAnh1010":2,"-":6}},{"path":"src/main/java/vimification/model/task/exceptions/TaskNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.task.exceptions;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"public class TaskNotFoundException extends RuntimeException {","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":7}},{"path":"src/main/java/vimification/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.model.util;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"DerenC"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"DerenC"},"content":"import java.time.ZoneOffset;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"DerenC"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"DerenC"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"DerenC"},"content":"import java.util.Random;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"DerenC"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"DerenC"},"content":"import java.util.function.Supplier;","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"DerenC"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"DerenC"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"DerenC"},"content":"import vimification.model.task.components.DateTime;","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"DerenC"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"DerenC"},"content":" * Contains utility methods for populating {@code TaskPlanner} with sample data.","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"DerenC"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"public class SampleDataUtil {","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"DerenC"},"content":"    // 57 sample tasks in total","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"DerenC"},"content":"    private static String[] samples \u003d new String[] {","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"DerenC"},"content":"            \"Tidy up my room\",","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"DerenC"},"content":"            \"FOW proposal review.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"DerenC"},"content":"            \"Practise meditation\",","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"DerenC"},"content":"            \"Abs workout.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"DerenC"},"content":"            \"Do ES2660 essay.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"DerenC"},"content":"            \"Pick up guitar\",","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"DerenC"},"content":"            \"Read Deep Work by Cal Newport\",","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"DerenC"},"content":"            \"Meet Prof Ng for career advice.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"DerenC"},"content":"            \"Practise OP2 presentation.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"DerenC"},"content":"            \"Get started on CS2109 ps6\",","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"DerenC"},"content":"            \"Go to the gym.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"DerenC"},"content":"            \"Revise Operating System knowledge.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"DerenC"},"content":"            \"Go to the park to play with my dog.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"DerenC"},"content":"            \"Shave my moustache.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"DerenC"},"content":"            \"Research on class divide in Singapore\",","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"DerenC"},"content":"            \"FOW cohesion day.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"DerenC"},"content":"            \"Piano practice.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"DerenC"},"content":"            \"Check in with Rag\u0027s PD.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"DerenC"},"content":"            \"Go to the library to study.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"DerenC"},"content":"            \"Go to the supermarket to buy groceries.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"DerenC"},"content":"            \"Learn advance hooks in React.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"DerenC"},"content":"            \"HTHT with Jon\",","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"DerenC"},"content":"            \"Project meeting.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"DerenC"},"content":"            \"Play badminton with the boys.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"DerenC"},"content":"            \"Daily Leetcode practice.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"DerenC"},"content":"            \"Do CS2103T quiz.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"DerenC"},"content":"            \"Search \u0026 apply for internships.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"DerenC"},"content":"            \"Cut my fingernails.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"DerenC"},"content":"            \"Go to the dentist.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"DerenC"},"content":"            \"Organise my closet\",","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"DerenC"},"content":"            \"Go Sim Lim Square to upgrade my laptop.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"DerenC"},"content":"            \"Schedule a date night with your partner\",","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"DerenC"},"content":"            \"Buy birthday present for Kai Xuan.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"DerenC"},"content":"            \"Learn Django on youtube.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"DerenC"},"content":"            \"Help mum run errands.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"DerenC"},"content":"            \"Send an important email to Prof Aaron\",","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"DerenC"},"content":"            \"Attend CAPT graduation ceremony\",","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"DerenC"},"content":"            \"Frisbee training with Amos.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"DerenC"},"content":"            \"Revise for CS4225 midterms.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"DerenC"},"content":"            \"Go post office pay the bill.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"DerenC"},"content":"            \"Finish up CS2105 assignment\",","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"DerenC"},"content":"            \"Revise Data Sturctures and Algorithms knowledge\",","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"DerenC"},"content":"            \"Complete a home improvement task\",","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"DerenC"},"content":"            \"Do research to see which model to get as my new phone.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"DerenC"},"content":"            \"Update my resume/linkedin profile\",","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"DerenC"},"content":"            \"Plan a summer vacation getaway\",","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"DerenC"},"content":"            \"Pay rent for this month\",","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"DerenC"},"content":"            \"Touch up my portfolio website.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"DerenC"},"content":"            \"Feed my dog, Bobby.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"DerenC"},"content":"            \"Complete lab report for PC1431\",","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"DerenC"},"content":"            \"Work on Bridge game side-project.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"DerenC"},"content":"            \"Ask Prof Kelvin to write a letter of recommendation\",","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"DerenC"},"content":"            \"Watch the latest movie, Suzume no Shizuku\",","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"DerenC"},"content":"            \"Finish up CS2109 mini-project.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"DerenC"},"content":"            \"Buy grocery.\",","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"DerenC"},"content":"            \"Have High-Tea session with my mum.\"","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"DerenC"},"content":"    };","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"DerenC"},"content":"    private static int length \u003d samples.length;","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"DerenC"},"content":"    private static String[] tags \u003d new String[] {","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"DerenC"},"content":"            \"academic\",","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"DerenC"},"content":"            \"career\",","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"DerenC"},"content":"            \"family\",","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"DerenC"},"content":"            \"house chores\",","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"DerenC"},"content":"            \"errands friends\",","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"DerenC"},"content":"            \"other hobbies\",","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"DerenC"},"content":"            \"sports\",","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"DerenC"},"content":"            \"group projects\",","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"DerenC"},"content":"            \"assignments\",","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"DerenC"},"content":"            \"wellness\",","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"DerenC"},"content":"            \"learning\",","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"DerenC"},"content":"            \"other commitments\",","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"DerenC"},"content":"            \"weekly habits\",","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"DerenC"},"content":"            \"daily habits\",","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"DerenC"},"content":"            \"monthly habits\"","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"liujiayue314"},"content":"    };","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"DerenC"},"content":"    static Supplier\u003cInteger\u003e randLength \u003d () -\u003e Math.max(new Random().nextInt(length), 5);","lastModifiedDate":"2023-03-16"},{"lineNumber":99,"author":{"gitId":"DerenC"},"content":"    static Supplier\u003cInteger\u003e randStatus \u003d () -\u003e new Random().nextInt(2);","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"DerenC"},"content":"    static Supplier\u003cInteger\u003e randType \u003d () -\u003e new Random().nextInt(3);","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"    // public static LogicTaskList getSampleTaskPlanner(int n) {","lastModifiedDate":"2023-03-20"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"    // LogicTaskList taskList \u003d new LogicTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"    // for (int i \u003d 0; i \u003c n; i++) {","lastModifiedDate":"2023-03-20"},{"lineNumber":105,"author":{"gitId":"VietAnh1010"},"content":"    // taskList.add(getTask(i));","lastModifiedDate":"2023-03-20"},{"lineNumber":106,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":107,"author":{"gitId":"VietAnh1010"},"content":"    // return taskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":109,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"    // public static LogicTaskList getSampleTaskPlanner() {","lastModifiedDate":"2023-03-20"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"    // return getSampleTaskPlanner(randLength.get());","lastModifiedDate":"2023-03-20"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":113,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"VietAnh1010"},"content":"    // public static ReadOnlyTaskPlanner getSampleReadOnlyTaskPlanner(int n) {","lastModifiedDate":"2023-03-20"},{"lineNumber":115,"author":{"gitId":"VietAnh1010"},"content":"    // return getSampleTaskPlanner(n);","lastModifiedDate":"2023-03-20"},{"lineNumber":116,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":117,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"VietAnh1010"},"content":"    // public static ReadOnlyTaskPlanner getSampleReadOnlyTaskPlanner() {","lastModifiedDate":"2023-03-20"},{"lineNumber":119,"author":{"gitId":"VietAnh1010"},"content":"    // return getSampleReadOnlyTaskPlanner(randLength.get());","lastModifiedDate":"2023-03-20"},{"lineNumber":120,"author":{"gitId":"VietAnh1010"},"content":"    // }","lastModifiedDate":"2023-03-20"},{"lineNumber":121,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":122,"author":{"gitId":"DerenC"},"content":"    private static LocalDateTime generateRandLocalDateTime() {","lastModifiedDate":"2023-03-16"},{"lineNumber":123,"author":{"gitId":"DerenC"},"content":"        // Set the range of future dates to generate","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"DerenC"},"content":"        LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"DerenC"},"content":"        LocalDateTime startDateTime \u003d now.plusDays(1); // tomorrow\u0027s date","lastModifiedDate":"2023-03-16"},{"lineNumber":126,"author":{"gitId":"DerenC"},"content":"        LocalDateTime endDateTime \u003d now.plusYears(1); // one year from now","lastModifiedDate":"2023-03-16"},{"lineNumber":127,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":128,"author":{"gitId":"DerenC"},"content":"        Random random \u003d new Random();","lastModifiedDate":"2023-03-16"},{"lineNumber":129,"author":{"gitId":"DerenC"},"content":"        return startDateTime.plusSeconds(random.nextInt(","lastModifiedDate":"2023-03-16"},{"lineNumber":130,"author":{"gitId":"DerenC"},"content":"                (int) (endDateTime.toEpochSecond(ZoneOffset.UTC) -","lastModifiedDate":"2023-03-16"},{"lineNumber":131,"author":{"gitId":"DerenC"},"content":"                        startDateTime.toEpochSecond(ZoneOffset.UTC))));","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":133,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":134,"author":{"gitId":"DerenC"},"content":"    private static DateTime toDateTime(LocalDateTime ldt) {","lastModifiedDate":"2023-03-16"},{"lineNumber":135,"author":{"gitId":"DerenC"},"content":"        return new DateTime(ldt.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-03-16"},{"lineNumber":136,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":137,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":138,"author":{"gitId":"DerenC"},"content":"    private static DateTime generateRandDateTime() {","lastModifiedDate":"2023-03-16"},{"lineNumber":139,"author":{"gitId":"DerenC"},"content":"        return toDateTime(generateRandLocalDateTime());","lastModifiedDate":"2023-03-16"},{"lineNumber":140,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":141,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":142,"author":{"gitId":"DerenC"},"content":"    private static DateTime[] generate2RandDataTimes() {","lastModifiedDate":"2023-03-16"},{"lineNumber":143,"author":{"gitId":"DerenC"},"content":"        LocalDateTime ldt1 \u003d generateRandLocalDateTime();","lastModifiedDate":"2023-03-16"},{"lineNumber":144,"author":{"gitId":"DerenC"},"content":"        LocalDateTime ldt2 \u003d generateRandLocalDateTime();","lastModifiedDate":"2023-03-16"},{"lineNumber":145,"author":{"gitId":"DerenC"},"content":"        while (ldt1.isAfter(ldt2)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":146,"author":{"gitId":"DerenC"},"content":"            ldt2 \u003d generateRandLocalDateTime();","lastModifiedDate":"2023-03-16"},{"lineNumber":147,"author":{"gitId":"DerenC"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":148,"author":{"gitId":"DerenC"},"content":"        DateTime[] dateTimes \u003d new DateTime[2];","lastModifiedDate":"2023-03-16"},{"lineNumber":149,"author":{"gitId":"DerenC"},"content":"        dateTimes[0] \u003d toDateTime(ldt1);","lastModifiedDate":"2023-03-16"},{"lineNumber":150,"author":{"gitId":"DerenC"},"content":"        dateTimes[1] \u003d toDateTime(ldt2);","lastModifiedDate":"2023-03-16"},{"lineNumber":151,"author":{"gitId":"DerenC"},"content":"        return dateTimes;","lastModifiedDate":"2023-03-16"},{"lineNumber":152,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":153,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":154,"author":{"gitId":"DerenC"},"content":"    private static Task getTask(int idx) {","lastModifiedDate":"2023-03-16"},{"lineNumber":155,"author":{"gitId":"VietAnh1010"},"content":"        // int taskType \u003d randType.get();","lastModifiedDate":"2023-03-20"},{"lineNumber":156,"author":{"gitId":"VietAnh1010"},"content":"        // Description description \u003d new Description(samples[idx]);","lastModifiedDate":"2023-03-20"},{"lineNumber":157,"author":{"gitId":"VietAnh1010"},"content":"        // Status status \u003d new Status(randStatus.get() \u003d\u003d 0);","lastModifiedDate":"2023-03-20"},{"lineNumber":158,"author":{"gitId":"VietAnh1010"},"content":"        // switch (taskType) {","lastModifiedDate":"2023-03-20"},{"lineNumber":159,"author":{"gitId":"VietAnh1010"},"content":"        // case 0:","lastModifiedDate":"2023-03-20"},{"lineNumber":160,"author":{"gitId":"VietAnh1010"},"content":"        // return new Todo(description, status);","lastModifiedDate":"2023-03-20"},{"lineNumber":161,"author":{"gitId":"VietAnh1010"},"content":"        // case 1:","lastModifiedDate":"2023-03-20"},{"lineNumber":162,"author":{"gitId":"VietAnh1010"},"content":"        // return new Deadline(description, status, generateRandDateTime());","lastModifiedDate":"2023-03-20"},{"lineNumber":163,"author":{"gitId":"VietAnh1010"},"content":"        // default:","lastModifiedDate":"2023-03-20"},{"lineNumber":164,"author":{"gitId":"VietAnh1010"},"content":"        // DateTime[] dateTimes \u003d generate2RandDataTimes();","lastModifiedDate":"2023-03-20"},{"lineNumber":165,"author":{"gitId":"VietAnh1010"},"content":"        // return new Event(description, status, dateTimes[0], dateTimes[1]);","lastModifiedDate":"2023-03-20"},{"lineNumber":166,"author":{"gitId":"VietAnh1010"},"content":"        // }","lastModifiedDate":"2023-03-20"},{"lineNumber":167,"author":{"gitId":"VietAnh1010"},"content":"        return null;","lastModifiedDate":"2023-03-20"},{"lineNumber":168,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":169,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":170,"author":{"gitId":"DerenC"},"content":"    public static Task generateRandTask() {","lastModifiedDate":"2023-03-16"},{"lineNumber":171,"author":{"gitId":"DerenC"},"content":"        int idx \u003d new Random().nextInt(length);","lastModifiedDate":"2023-03-16"},{"lineNumber":172,"author":{"gitId":"DerenC"},"content":"        return getTask(idx);","lastModifiedDate":"2023-03-16"},{"lineNumber":173,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":174,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":175,"author":{"gitId":"DerenC"},"content":"    // TODO: as still incomplete","lastModifiedDate":"2023-03-16"},{"lineNumber":176,"author":{"gitId":"DerenC"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":177,"author":{"gitId":"DerenC"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2023-03-16"},{"lineNumber":178,"author":{"gitId":"DerenC"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":179,"author":{"gitId":"DerenC"},"content":"    public static Set\u003cString\u003e getStringSet(String... strings) {","lastModifiedDate":"2023-03-16"},{"lineNumber":180,"author":{"gitId":"DerenC"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2023-03-16"},{"lineNumber":181,"author":{"gitId":"DerenC"},"content":"                .map(String::new)","lastModifiedDate":"2023-03-16"},{"lineNumber":182,"author":{"gitId":"DerenC"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2023-03-16"},{"lineNumber":183,"author":{"gitId":"DerenC"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":184,"author":{"gitId":"DerenC"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":185,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"liujiayue314":9,"DerenC":147,"VietAnh1010":29}},{"path":"src/main/java/vimification/storage/JsonAdaptedDeadline.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Deadline;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"public class JsonAdaptedDeadline extends JsonAdaptedTask {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    private final LocalDateTime deadline;","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedDeadline(","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"isDone\") boolean isDone,","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"deadline\") LocalDateTime deadline) {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"    public JsonAdaptedDeadline(Deadline task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"        super(task);","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        deadline \u003d task.getDeadline();","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"    public Task toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"        /*","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"         * if (description \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName())); } if","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"         * (!Description.isValidDescription(description)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Description.MESSAGE_CONSTRAINTS); } final Description","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"         * modelDescription \u003d new Description(description);","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"         *","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"         * if (status \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName())); } final","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"         * Status modelStatus \u003d new Status(status);","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"         *","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"         * if (deadline \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName())); } if","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"         * (!DateTime.isValidDate(deadline)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Description.MESSAGE_CONSTRAINTS); } final DateTime modelDate \u003d new","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"         * DateTime(deadline);","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"         */","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"        return new Deadline(description, isDone, deadline);","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":15,"VietAnh1010":35}},{"path":"src/main/java/vimification/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Event;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":"public class JsonAdaptedEvent extends JsonAdaptedTask {","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    private final LocalDateTime startDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    private final LocalDateTime endDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedEvent(","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"isDone\") boolean isDone,","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"startDateTime\") LocalDateTime startDateTime,","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"startEndTime\") LocalDateTime endDateTime) {","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"    public JsonAdaptedEvent(Event task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"        super(task);","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"        startDateTime \u003d task.getStartDateTime();","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"        endDateTime \u003d task.getEndDateTime();","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"    public Task toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"        /*","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"         * if (description \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName())); } if","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"         * (!Description.isValidDescription(description)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Description.MESSAGE_CONSTRAINTS); } final Description","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"         * modelDescription \u003d new Description(description);","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"         *","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"         * if (status \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName())); } final","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"         * Status modelStatus \u003d new Status(status); if (type \u003d\u003d null) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException( String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"         * Type.class.getSimpleName())); } if (!Type.isValidType(type)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Type.MESSAGE_CONSTRAINTS); } final Type modelType \u003d new Type(type);","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"         * if (startDate \u003d\u003d null || endDate \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName())); } if","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"         * (!DateTime.isValidDate(startDate) || !DateTime.isValidDate(endDate)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Description.MESSAGE_CONSTRAINTS); } final DateTime modelStartDate \u003d","lastModifiedDate":"2023-03-20"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"         * new DateTime(startDate); final DateTime modelEndDate \u003d new DateTime(endDate);","lastModifiedDate":"2023-03-20"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"         */","lastModifiedDate":"2023-03-20"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"        return new Event(description, isDone, startDateTime, endDateTime);","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":16,"VietAnh1010":41}},{"path":"src/main/java/vimification/storage/JsonAdaptedLogicTaskList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"import java.util.List;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Deadline;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Event;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.task.Todo;","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":" * An Immutable TaskPlanner that is serializable to JSON format.","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"@JsonRootName(value \u003d \"logicTaskList\")","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"public class JsonAdaptedLogicTaskList {","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonAdaptedLogicTaskList.class);","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    private final List\u003cJsonAdaptedTask\u003e tasks;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedLogicTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"        this.tasks \u003d tasks \u003d\u003d null ? List.of() : tasks;","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"     *        {@code JsonSerializableAddressBook}.","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedLogicTaskList(LogicTaskList source) {","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"        tasks \u003d source.stream().map(this::toJsonAdaptedTask).collect(Collectors.toList());","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"    private JsonAdaptedTask toJsonAdaptedTask(Task task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"liujiayue314"},"content":"            return new JsonAdaptedTodo((Todo) task);","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"liujiayue314"},"content":"        } else if (task instanceof Deadline) {","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"liujiayue314"},"content":"            return new JsonAdaptedDeadline((Deadline) task);","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"liujiayue314"},"content":"        } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"            return new JsonAdaptedEvent((Event) task);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"liujiayue314"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"liujiayue314"},"content":"     * Converts this address book into the model\u0027s {@code TaskPlanner} object.","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"liujiayue314"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"liujiayue314"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"    public LogicTaskList toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-20"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"        LogicTaskList taskList \u003d new LogicTaskList();","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"liujiayue314"},"content":"        for (JsonAdaptedTask jsonAdaptedTask : tasks) {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"            Task task \u003d jsonAdaptedTask.toModelType();","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"            taskList.add(task);","lastModifiedDate":"2023-03-20"},{"lineNumber":64,"author":{"gitId":"liujiayue314"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"liujiayue314"},"content":"        return taskList;","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"    public String toString() {","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"        return \"JsonAdpatedLogicTaskList: [\" + tasks + \"]\";","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":43,"VietAnh1010":29}},{"path":"src/main/java/vimification/storage/JsonAdaptedTask.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonSubTypes;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonTypeInfo;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-20"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":" * Jackson-friendly version of {@link Task}.","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"liujiayue314"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"@JsonTypeInfo(use \u003d JsonTypeInfo.Id.NAME, include \u003d JsonTypeInfo.As.PROPERTY, property \u003d \"type\")","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"@JsonSubTypes({","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"        @JsonSubTypes.Type(value \u003d JsonAdaptedTodo.class, name \u003d \"todo\"),","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        @JsonSubTypes.Type(value \u003d JsonAdaptedDeadline.class, name \u003d \"deadline\"),","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"        @JsonSubTypes.Type(value \u003d JsonAdaptedEvent.class, name \u003d \"event\")","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"})","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"public abstract class JsonAdaptedTask {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    final String description;","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    final boolean isDone;","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedTask(","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"isDone\") boolean isDone) {","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"     * Converts a given {@code Task} into this class for Jackson use.","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"liujiayue314"},"content":"    public JsonAdaptedTask(Task task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"        description \u003d task.getDescription();","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"        isDone \u003d task.isDone();","lastModifiedDate":"2023-03-20"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s","lastModifiedDate":"2023-03-20"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"     * {@code Person} object.","lastModifiedDate":"2023-03-20"},{"lineNumber":46,"author":{"gitId":"liujiayue314"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-03-20"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"     *                               the adapted","lastModifiedDate":"2023-03-20"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"     *                               person.","lastModifiedDate":"2023-03-20"},{"lineNumber":50,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"liujiayue314"},"content":"    public abstract Task toModelType() throws IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":23,"VietAnh1010":29}},{"path":"src/main/java/vimification/storage/JsonAdaptedTodo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-20"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-20"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"liujiayue314"},"content":"import vimification.model.task.Todo;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":"public class JsonAdaptedTodo extends JsonAdaptedTask {","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Todo\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    public JsonAdaptedTodo(","lastModifiedDate":"2023-03-20"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-03-20"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"            @JsonProperty(\"isDone\") boolean isDone) {","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"        super(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"liujiayue314"},"content":"    public JsonAdaptedTodo(Todo task) {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"liujiayue314"},"content":"        super(task);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"    public Task toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        // TODO: add input validation","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"        /*","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"         * if (description \u003d\u003d null) { throw new IllegalValueException(","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName())); } if","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"         * (!Description.isValidDescription(description)) { throw new","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"         * IllegalValueException(Description.MESSAGE_CONSTRAINTS); } // final Description","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"         * modelDescription \u003d new Description(description); // final Status modelStatus \u003d new","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"         * Status(status); // if (type \u003d\u003d null) { // throw new IllegalValueException( //","lastModifiedDate":"2023-03-20"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"         * String.format(MISSING_FIELD_MESSAGE_FORMAT, Type.class.getSimpleName())); // } // if","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"         * (!Type.isValidType(type)) { // throw new IllegalValueException(Type.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"         * // } // final Type modelType \u003d new Type(type);","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"         */","lastModifiedDate":"2023-03-20"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"        return new Todo(description, isDone);","lastModifiedDate":"2023-03-20"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":16,"VietAnh1010":26}},{"path":"src/main/java/vimification/storage/JsonLogicTaskListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.util.FileUtil;","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.util.JsonUtil;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":" * A class to access TaskPlanner data stored as a json file on the hard disk.","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"public class JsonLogicTaskListStorage implements LogicTaskListStorage {","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    private static final Logger LOGGER \u003d LogsCenter.getLogger(JsonLogicTaskListStorage.class);","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"    private Path filePath;","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"    public JsonLogicTaskListStorage(Path filePath) {","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    public Path getLogicTaskListFilePath() {","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"        return filePath;","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"    public Optional\u003cLogicTaskList\u003e readLogicTaskList() throws DataConversionException {","lastModifiedDate":"2023-03-20"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"        return readLogicTaskList(filePath);","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"     * Similar to {@link #readTaskList()}.","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    public Optional\u003cLogicTaskList\u003e readLogicTaskList(Path filePath)","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"            throws DataConversionException {","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"        Optional\u003cJsonAdaptedLogicTaskList\u003e jsonTaskList \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-03-20"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"                filePath, JsonAdaptedLogicTaskList.class);","lastModifiedDate":"2023-03-20"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"        LOGGER.info(jsonTaskList.toString());","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"        if (!jsonTaskList.isPresent()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"            return Optional.empty();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"            return Optional.of(jsonTaskList.get().toModelType());","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"            LOGGER.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"    public void saveLogicTaskList(LogicTaskList taskList) throws IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"        saveLogicTaskList(taskList, filePath);","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"     * Similar to {@link #saveTaskList(LogicTaskList)}.","lastModifiedDate":"2023-03-20"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"    @Override","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"    public void saveLogicTaskList(LogicTaskList taskList, Path filePath) throws IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":77,"author":{"gitId":"bipbipboopboop"},"content":"        requireNonNull(taskList);","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"bipbipboopboop"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"bipbipboopboop"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"        JsonUtil.saveJsonFile(new JsonAdaptedLogicTaskList(taskList), filePath);","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"VietAnh1010":19,"bipbipboopboop":64}},{"path":"src/main/java/vimification/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.util.JsonUtil;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.UserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VietAnh1010":5,"-":42}},{"path":"src/main/java/vimification/storage/LogicTaskListStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"liujiayue314"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"liujiayue314"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"liujiayue314"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"liujiayue314"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"liujiayue314"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"liujiayue314"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"liujiayue314"},"content":" * Represents a storage for {@link vimification.model.TaskList}.","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"liujiayue314"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"public interface LogicTaskListStorage {","lastModifiedDate":"2023-03-20"},{"lineNumber":14,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"liujiayue314"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"    Path getLogicTaskListFilePath();","lastModifiedDate":"2023-03-20"},{"lineNumber":19,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"     * Returns TaskPlanner data as a {@link ReadOnlyTaskPlanner}. Returns {@code Optional.empty()}","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"     * if storage file is not found.","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":24,"author":{"gitId":"liujiayue314"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"liujiayue314"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    Optional\u003cLogicTaskList\u003e readLogicTaskList() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"     * @see #getTaskListFilePath()","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"    Optional\u003cLogicTaskList\u003e readLogicTaskList(Path filePath)","lastModifiedDate":"2023-03-20"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"            throws DataConversionException, IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":34,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"liujiayue314"},"content":"     * Saves the given {@link ReadOnlyTaskPlanner} to the storage.","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"     *","lastModifiedDate":"2023-03-20"},{"lineNumber":38,"author":{"gitId":"liujiayue314"},"content":"     * @param taskList cannot be null.","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"liujiayue314"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"    void saveLogicTaskList(LogicTaskList taskList) throws IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":42,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"liujiayue314"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"liujiayue314"},"content":"     * @see #saveTaskList(ReadOnlyTaskPlanner)","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"liujiayue314"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    void saveLogicTaskList(LogicTaskList taskList, Path filePath) throws IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":47,"author":{"gitId":"liujiayue314"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"liujiayue314":35,"VietAnh1010":12}},{"path":"src/main/java/vimification/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.UserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"public interface Storage extends LogicTaskListStorage, UserPrefsStorage {","lastModifiedDate":"2023-03-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    Path getLogicTaskListFilePath();","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"    Optional\u003cLogicTaskList\u003e readLogicTaskList() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    void saveLogicTaskList(LogicTaskList taskList) throws IOException;","lastModifiedDate":"2023-03-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"VietAnh1010":9,"-":22}},{"path":"src/main/java/vimification/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.LogicTaskList;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.UserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"liujiayue314"},"content":" * Manages storage of TaskPlanner data in local storage.","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    private LogicTaskListStorage taskPlannerStorage;","lastModifiedDate":"2023-03-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"     * Creates a {@code StorageManager} with the given {@code TaskPlannerStorage} and","lastModifiedDate":"2023-03-20"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"     * {@code UserPrefStorage}.","lastModifiedDate":"2023-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    public StorageManager(LogicTaskListStorage taskPlannerStorage,","lastModifiedDate":"2023-03-20"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"            UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-03-20"},{"lineNumber":30,"author":{"gitId":"liujiayue314"},"content":"        this.taskPlannerStorage \u003d taskPlannerStorage;","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"liujiayue314"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskPlanner methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"    public Path getLogicTaskListFilePath() {","lastModifiedDate":"2023-03-20"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"        return taskPlannerStorage.getLogicTaskListFilePath();","lastModifiedDate":"2023-03-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"    public Optional\u003cLogicTaskList\u003e readLogicTaskList()","lastModifiedDate":"2023-03-20"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"        return readLogicTaskList(taskPlannerStorage.getLogicTaskListFilePath());","lastModifiedDate":"2023-03-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"    public Optional\u003cLogicTaskList\u003e readLogicTaskList(Path filePath)","lastModifiedDate":"2023-03-20"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"            throws DataConversionException, IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"        return taskPlannerStorage.readLogicTaskList(filePath);","lastModifiedDate":"2023-03-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"liujiayue314"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"    public void saveLogicTaskList(LogicTaskList taskPlanner) throws IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"        saveLogicTaskList(taskPlanner, taskPlannerStorage.getLogicTaskListFilePath());","lastModifiedDate":"2023-03-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"    public void saveLogicTaskList(LogicTaskList taskPlanner, Path filePath) throws IOException {","lastModifiedDate":"2023-03-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"        taskPlannerStorage.saveLogicTaskList(taskPlanner, filePath);","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"liujiayue314":4,"VietAnh1010":24,"-":56}},{"path":"src/main/java/vimification/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import vimification.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.model.UserPrefs;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a storage for {@link seedu.address.model.UserPrefs}.","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"     * Saves the given {@link vimification.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"VietAnh1010":5,"-":31}},{"path":"src/main/java/vimification/taskui/CommandInput.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.List;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.Logic;","lastModifiedDate":"2023-03-20"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.commands.CommandException;","lastModifiedDate":"2023-03-20"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.commands.CommandResult;","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.parser.ParserException;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":" *","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"public class CommandInput extends UiPart\u003cTextField\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"CommandInput.fxml\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"    private MainScreen parent;","lastModifiedDate":"2023-03-19"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"    private Logic logic;","lastModifiedDate":"2023-03-20"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"    public CommandInput(MainScreen parent, Logic logic) {","lastModifiedDate":"2023-03-20"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"        this.parent \u003d parent;","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2023-03-20"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"     * Listener for handling all keyboard events to Vimification.","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"     * @param event","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"    private void handleKeyPressed(KeyEvent event) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isEnterEvent \u003d event.getCode().equals(KeyCode.ENTER);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isEscEvent \u003d event.getCode().equals(KeyCode.ESCAPE);","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"        if (isEscEvent || isTextFieldEmpty()) {","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"            returnFocusToParent();","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"        if (isEnterEvent) {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"            String commandString \u003d this.getRoot().getText();","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"            executeCommand(commandString);","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"            returnFocusToParent();","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"    // TODO: REMOVE THIS AFTER TESTING","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"    private static boolean isNumeric(String str) {","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"            Double.parseDouble(str);","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"            return true;","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"            return false;","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"    private String cleanCommandString(String commandString) {","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isCommandHasColon \u003d commandString.startsWith(\":\");","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"        if (!isCommandHasColon) {","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"[Your command] \" + commandString + \" is invalid\");","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"bipbipboopboop"},"content":"        String strippedCommandString \u003d commandString.substring(1).strip();","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"bipbipboopboop"},"content":"        return strippedCommandString;","lastModifiedDate":"2023-03-23"},{"lineNumber":71,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"    private void executeCommand(String input) {","lastModifiedDate":"2023-03-23"},{"lineNumber":74,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"bipbipboopboop"},"content":"        String commandString \u003d cleanCommandString(input);","lastModifiedDate":"2023-03-23"},{"lineNumber":76,"author":{"gitId":"bipbipboopboop"},"content":"        System.out.println(\"Your command is \" + input);","lastModifiedDate":"2023-03-23"},{"lineNumber":77,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":78,"author":{"gitId":"bipbipboopboop"},"content":"        processUiCommand(commandString);","lastModifiedDate":"2023-03-23"},{"lineNumber":79,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-20"},{"lineNumber":81,"author":{"gitId":"bipbipboopboop"},"content":"            CommandResult result \u003d logic.execute(commandString);","lastModifiedDate":"2023-03-23"},{"lineNumber":82,"author":{"gitId":"bipbipboopboop"},"content":"            parent.initializeTaskListPanel();","lastModifiedDate":"2023-03-23"},{"lineNumber":83,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(result.getFeedbackToUser());","lastModifiedDate":"2023-03-23"},{"lineNumber":84,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (CommandException e) {","lastModifiedDate":"2023-03-20"},{"lineNumber":85,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"[Your command] \" + input + \" is invalid\");","lastModifiedDate":"2023-03-23"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"        } catch (ParserException e) {","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"[Your command] \" + input + \" can\u0027t be parsed\");","lastModifiedDate":"2023-03-23"},{"lineNumber":88,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":89,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-20"},{"lineNumber":90,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-20"},{"lineNumber":91,"author":{"gitId":"bipbipboopboop"},"content":"    private void processUiCommand(String commandString) {","lastModifiedDate":"2023-03-23"},{"lineNumber":92,"author":{"gitId":"bipbipboopboop"},"content":"        checkIsExitCommand(commandString);","lastModifiedDate":"2023-03-23"},{"lineNumber":93,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":94,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO : TEMPORARY, REMOVE THIS IN THE FUTURE AFTER ABSTRACTING INTO GUI COMMANDS","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"bipbipboopboop"},"content":"        if (isNumeric(commandString)) {","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"bipbipboopboop"},"content":"            parent.getTaskListPanel().scrollToTaskIndex(Integer.parseInt(commandString));","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"bipbipboopboop"},"content":"            return;","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"bipbipboopboop"},"content":"    private void checkIsExitCommand(String commandString) {","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"bipbipboopboop"},"content":"        List\u003cString\u003e exitCommands \u003d List.of(\"wq!\", \"wq\", \"q!\", \"q\");","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isExitCommand \u003d exitCommands.contains(commandString);","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"bipbipboopboop"},"content":"        if (isExitCommand) {","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"bipbipboopboop"},"content":"            Platform.exit();","lastModifiedDate":"2023-03-15"},{"lineNumber":106,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":108,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":109,"author":{"gitId":"bipbipboopboop"},"content":"    private void returnFocusToParent() {","lastModifiedDate":"2023-03-23"},{"lineNumber":110,"author":{"gitId":"bipbipboopboop"},"content":"        parent.getRoot().requestFocus();","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setVisible(false);","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"bipbipboopboop"},"content":"    private void initialize() {","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setFocusTraversable(true); // Important","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setVisible(false);","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"bipbipboopboop"},"content":"    private boolean isTextFieldEmpty() {","lastModifiedDate":"2023-03-23"},{"lineNumber":121,"author":{"gitId":"bipbipboopboop"},"content":"        return getRoot().getText().equals(\"\");","lastModifiedDate":"2023-03-23"},{"lineNumber":122,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":123,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"VietAnh1010":2,"bipbipboopboop":122}},{"path":"src/main/java/vimification/taskui/MainScreen.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.beans.binding.DoubleBinding;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.beans.property.ReadOnlyDoubleProperty;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyCodeCombination;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.Pane;","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.Logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":" * The Main Scene. Provides the basic application layout containing a menu bar and space where other","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":" * JavaFX elements can be placed.","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"public class MainScreen extends UiPart\u003cVBox\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"MainScreen.fxml\";","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"    private ReadOnlyDoubleProperty stageHeight;","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"    private DoubleBinding topComponentHeight; // Height of left and right component","lastModifiedDate":"2023-03-19"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"    private DoubleBinding commandInputComponentHeight;","lastModifiedDate":"2023-03-19"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    private Logic logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"    private TaskListPanel taskListPanel;","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    private TaskCreationPanel taskCreationPanel;","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"    private CommandInput commandInput;","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"    private VBox leftComponent;","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"    private VBox rightComponent;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"    private VBox commandInputComponent;","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"     * Creates a {@code MainWindow} with {@code Logic}.","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"    public MainScreen(Logic logic, Stage stage) {","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"        stageHeight \u003d stage.heightProperty();","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"        topComponentHeight \u003d stageHeight.multiply(0.9);","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"        commandInputComponentHeight \u003d stageHeight.multiply(0.1);","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"        setup();","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"    public TaskListPanel getTaskListPanel() {","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"        return this.taskListPanel;","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-19"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"    private void initialize() {","lastModifiedDate":"2023-03-19"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setFocusTraversable(true); // Important","lastModifiedDate":"2023-03-19"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"    private void setup() {","lastModifiedDate":"2023-03-19"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"        leftComponent.prefHeightProperty().bind(topComponentHeight);","lastModifiedDate":"2023-03-19"},{"lineNumber":67,"author":{"gitId":"bipbipboopboop"},"content":"        rightComponent.prefHeightProperty().bind(topComponentHeight);","lastModifiedDate":"2023-03-19"},{"lineNumber":68,"author":{"gitId":"bipbipboopboop"},"content":"        commandInputComponent.prefHeightProperty().bind(commandInputComponentHeight);","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"bipbipboopboop"},"content":"        intializeCommandInput();","lastModifiedDate":"2023-03-19"},{"lineNumber":71,"author":{"gitId":"bipbipboopboop"},"content":"        initializeTaskListPanel();","lastModifiedDate":"2023-03-19"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":74,"author":{"gitId":"bipbipboopboop"},"content":"    public void initializeTaskListPanel() {","lastModifiedDate":"2023-03-23"},{"lineNumber":75,"author":{"gitId":"bipbipboopboop"},"content":"        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"bipbipboopboop"},"content":"        taskListPanel.setMainScreen(this);","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"bipbipboopboop"},"content":"        loadLeftComponent(taskListPanel);","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":80,"author":{"gitId":"bipbipboopboop"},"content":"    private void intializeCommandInput() {","lastModifiedDate":"2023-03-19"},{"lineNumber":81,"author":{"gitId":"bipbipboopboop"},"content":"        commandInput \u003d new CommandInput(this, logic);","lastModifiedDate":"2023-03-20"},{"lineNumber":82,"author":{"gitId":"bipbipboopboop"},"content":"        commandInput.getRoot().prefHeightProperty().bind(stageHeight.multiply(0.1));","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":84,"author":{"gitId":"bipbipboopboop"},"content":"        commandInputComponent.getChildren().add(commandInput.getRoot());","lastModifiedDate":"2023-03-19"},{"lineNumber":85,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":86,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":87,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"bipbipboopboop"},"content":"     * Listener for handling all keyboard events to Vimification.","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"bipbipboopboop"},"content":"     * @param event","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"bipbipboopboop"},"content":"    private void handleKeyPressed(KeyEvent event) {","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"bipbipboopboop"},"content":"        KeyCodeCombination colonKey \u003d","lastModifiedDate":"2023-03-16"},{"lineNumber":95,"author":{"gitId":"bipbipboopboop"},"content":"                new KeyCodeCombination(KeyCode.SEMICOLON, KeyCombination.SHIFT_DOWN);","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isKeyPressedColon \u003d colonKey.match(event);","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"bipbipboopboop"},"content":"        if (isKeyPressedColon) {","lastModifiedDate":"2023-03-16"},{"lineNumber":99,"author":{"gitId":"bipbipboopboop"},"content":"            loadCommandInputComponent();","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"bipbipboopboop"},"content":"            return;","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"bipbipboopboop"},"content":"        switch (event.getText()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"bipbipboopboop"},"content":"        case \"i\":","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"bipbipboopboop"},"content":"            loadTaskCreationPanelComponent();","lastModifiedDate":"2023-03-19"},{"lineNumber":106,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"bipbipboopboop"},"content":"        case \"j\":","lastModifiedDate":"2023-03-19"},{"lineNumber":108,"author":{"gitId":"bipbipboopboop"},"content":"        case \"k\":","lastModifiedDate":"2023-03-19"},{"lineNumber":109,"author":{"gitId":"bipbipboopboop"},"content":"            taskListPanel.requestFocus();","lastModifiedDate":"2023-03-19"},{"lineNumber":110,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-19"},{"lineNumber":111,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":112,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"bipbipboopboop"},"content":"    private void loadTaskCreationPanelComponent() {","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"bipbipboopboop"},"content":"        taskCreationPanel \u003d new TaskCreationPanel(this.getRoot());","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"bipbipboopboop"},"content":"        loadRightComponent(taskCreationPanel);","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"bipbipboopboop"},"content":"        taskCreationPanel.requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"bipbipboopboop"},"content":"    private void loadCommandInputComponent() {","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"bipbipboopboop"},"content":"        commandInput.setVisible(true);","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"bipbipboopboop"},"content":"        commandInput.requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":123,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":124,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":125,"author":{"gitId":"bipbipboopboop"},"content":"    public void loadDetailedTaskComponent(Task task) {","lastModifiedDate":"2023-03-19"},{"lineNumber":126,"author":{"gitId":"bipbipboopboop"},"content":"        TaskDetailPanel detailTask \u003d new TaskDetailPanel(task);","lastModifiedDate":"2023-03-19"},{"lineNumber":127,"author":{"gitId":"bipbipboopboop"},"content":"        loadRightComponent(detailTask);","lastModifiedDate":"2023-03-19"},{"lineNumber":128,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":129,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":130,"author":{"gitId":"bipbipboopboop"},"content":"    private \u003cT extends Pane\u003e void loadLeftComponent(UiPart\u003cT\u003e component) {","lastModifiedDate":"2023-03-19"},{"lineNumber":131,"author":{"gitId":"bipbipboopboop"},"content":"        leftComponent.getChildren().clear();","lastModifiedDate":"2023-03-19"},{"lineNumber":132,"author":{"gitId":"bipbipboopboop"},"content":"        leftComponent.getChildren().add(component.getRoot());","lastModifiedDate":"2023-03-19"},{"lineNumber":133,"author":{"gitId":"bipbipboopboop"},"content":"        component.getRoot().prefHeightProperty().bind(stageHeight.multiply(0.9));","lastModifiedDate":"2023-03-19"},{"lineNumber":134,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":135,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":136,"author":{"gitId":"bipbipboopboop"},"content":"    private \u003cT extends Pane\u003e void loadRightComponent(UiPart\u003cT\u003e component) {","lastModifiedDate":"2023-03-19"},{"lineNumber":137,"author":{"gitId":"bipbipboopboop"},"content":"        rightComponent.getChildren().clear();","lastModifiedDate":"2023-03-19"},{"lineNumber":138,"author":{"gitId":"bipbipboopboop"},"content":"        rightComponent.getChildren().add(component.getRoot());","lastModifiedDate":"2023-03-19"},{"lineNumber":139,"author":{"gitId":"bipbipboopboop"},"content":"        component.getRoot().prefHeightProperty().bind(stageHeight.multiply(0.9));","lastModifiedDate":"2023-03-19"},{"lineNumber":140,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":141,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":141}},{"path":"src/main/java/vimification/taskui/TaskCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":" * An UI component that displays information of a {@code Task}.","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"public class TaskCard extends UiPart\u003cHBox\u003e {","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"TaskCard.fxml\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"    private Label description;","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    private Label id;","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"    // @FXML","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"    // private FlowPane tags;","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"     * Creates a {@code TaskCode} with the given {@code Task} and index to display.","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"    public TaskCard(Task task, int displayedIndex) {","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"        // this.task \u003d task;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"        description.setText(task.getDescription());","lastModifiedDate":"2023-03-20"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"            return true;","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"        if (!(other instanceof TaskCard)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"            return false;","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"        // state check","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO: FIX CLASH WITH JIAYUE","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"        // TaskCard card \u003d (TaskCard) other;","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"        // return id.getText().equals(card.id.getText())","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"        // \u0026\u0026 task.equals(card.task);","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO: REMOVE THIS AFTER FIX ABOVE","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"        return false;","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"VietAnh1010":1,"bipbipboopboop":54}},{"path":"src/main/java/vimification/taskui/TaskCreationPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyCode;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"public class TaskCreationPanel extends UiPart\u003cVBox\u003e {","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"TaskCreationPanel.fxml\";","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"    Node parent;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"    private TextField nameField;","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"    private TextArea descriptionField;","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"    public TaskCreationPanel(Node parent) {","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"        this.parent \u003d parent;","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"     * Requests that this {@code Node} get the input focus, and that this {@code Node}\u0027s top-level","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"     * ancestor become the focused window. To be eligible to receive the focus, the node must be","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"     * part of a scene, it and all of its ancestors must be visible, and it must not be disabled. If","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"     * this node is eligible, this function will cause it to become this {@code Scene}\u0027s \"focus","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"     * owner\". Each scene has at most one focus owner node. The focus owner will not actually have","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"     * the input focus, however, unless the scene belongs to a {@code Stage} that is both visible","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"     * and active.","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"    public void requestFocus() {","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"        this.nameField.requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"    private void returnFocusToParent() {","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"        parent.requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setVisible(false);","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"     * Listener for handling all keyboard events to TaskCreationPanel.","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"     * @param event","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"    private void handleKeyPressed(KeyEvent event) {","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isEscEvent \u003d event.getCode().equals(KeyCode.ESCAPE);","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"        if (isEscEvent) {","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"            nameField.clear();","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"            descriptionField.clear();","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"            returnFocusToParent();","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"TaskCreationPanel -\u003e Parent\");","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":66}},{"path":"src/main/java/vimification/taskui/TaskDetailPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Todo;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":" * Panel containing task details, such as description, the type of the task, etc.","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"public class TaskDetailPanel extends UiPart\u003cVBox\u003e {","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"TaskDetailPanel.fxml\";","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    private Task task;","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"    private ListView\u003cTask\u003e taskListView;","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"    private Label descriptionText;","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"    private Label typeText;","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"     * Creates a {@code TaskDetailPanel}.","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    public TaskDetailPanel(Task task) {","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"        setup();","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"    public void setup() {","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"        descriptionText.setText(task.getDescription());","lastModifiedDate":"2023-03-20"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"        String taskType \u003d getTaskType(task);","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"        typeText.setText(taskType);","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"    public String getTaskType(Task task) {","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"        if (task instanceof Todo) {","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"            return \"Todo\";","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"        return \"Deadline\";","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"VietAnh1010":1,"bipbipboopboop":48}},{"path":"src/main/java/vimification/taskui/TaskListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":" * Panel containing the list of tasks.","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"public class TaskListPanel extends UiPart\u003cVBox\u003e {","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String FXML \u003d \"TaskListPanel.fxml\";","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    private MainScreen mainScreen;","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    private ListView\u003cTask\u003e taskListView;","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"     * Creates a {@code TaskListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"        super(FXML);","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.setItems(taskList);","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"    public void setMainScreen(MainScreen parent) {","lastModifiedDate":"2023-03-19"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"        this.mainScreen \u003d parent;","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"    public void requestFocus() {","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"        this.taskListView.requestFocus();","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"    public void scrollToTaskIndex(int displayedIndex) {","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.getFocusModel().focus(displayedIndex - 1);","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.getSelectionModel().select(displayedIndex - 1);","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.scrollTo(displayedIndex - 1);","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"    private void initialize() {","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"        // TODO: Implement Visual Mode","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"        // taskListView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setFocusTraversable(true);","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"        taskListView.setFocusTraversable(true);","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"        Platform.runLater(() -\u003e {","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"            // Hackish way of requesting focus","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"            // after every listItem has been","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"            // loaded","lastModifiedDate":"2023-03-19"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.requestFocus();","lastModifiedDate":"2023-03-19"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.getSelectionModel().selectFirst();","lastModifiedDate":"2023-03-19"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"        });","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"bipbipboopboop"},"content":"    @FXML","lastModifiedDate":"2023-03-18"},{"lineNumber":61,"author":{"gitId":"bipbipboopboop"},"content":"    private void handleKeyPressed(KeyEvent event) {","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"bipbipboopboop"},"content":"        // System.out.println(\"You are navigating in TaskListPanel\");","lastModifiedDate":"2023-03-18"},{"lineNumber":63,"author":{"gitId":"bipbipboopboop"},"content":"        switch (event.getText()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"bipbipboopboop"},"content":"        case \"d\":","lastModifiedDate":"2023-03-18"},{"lineNumber":65,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"You\u0027ve deleted a task!\");","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"bipbipboopboop"},"content":"        case \"l\":","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"bipbipboopboop"},"content":"            Task selectedTask \u003d taskListView.getSelectionModel().getSelectedItem();","lastModifiedDate":"2023-03-19"},{"lineNumber":69,"author":{"gitId":"bipbipboopboop"},"content":"            mainScreen.loadDetailedTaskComponent(selectedTask);","lastModifiedDate":"2023-03-19"},{"lineNumber":70,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"bipbipboopboop"},"content":"        case \"j\":","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"You\u0027ve moved down\");","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"bipbipboopboop"},"content":"            navigateToNextCell();","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-18"},{"lineNumber":75,"author":{"gitId":"bipbipboopboop"},"content":"        case \"k\":","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"bipbipboopboop"},"content":"            System.out.println(\"You\u0027ve moved up\");","lastModifiedDate":"2023-03-19"},{"lineNumber":77,"author":{"gitId":"bipbipboopboop"},"content":"            navigateToPrevCell();","lastModifiedDate":"2023-03-19"},{"lineNumber":78,"author":{"gitId":"bipbipboopboop"},"content":"            break;","lastModifiedDate":"2023-03-19"},{"lineNumber":79,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":83,"author":{"gitId":"bipbipboopboop"},"content":"    private void navigateToNextCell() {","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"bipbipboopboop"},"content":"        int currIndex \u003d taskListView.getFocusModel().getFocusedIndex();","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"bipbipboopboop"},"content":"        int lastIndex \u003d taskListView.getItems().size();","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"bipbipboopboop"},"content":"        // We can only navigate to the next cell if we are not the last cell.","lastModifiedDate":"2023-03-19"},{"lineNumber":88,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isCurrLastCell \u003d currIndex \u003d\u003d lastIndex;","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"bipbipboopboop"},"content":"        if (!isCurrLastCell) {","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.getFocusModel().focusNext();","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.getSelectionModel().select(currIndex + 1);","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.scrollTo(currIndex + 1);","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"bipbipboopboop"},"content":"    private void navigateToPrevCell() {","lastModifiedDate":"2023-03-18"},{"lineNumber":97,"author":{"gitId":"bipbipboopboop"},"content":"        int currIndex \u003d taskListView.getFocusModel().getFocusedIndex();","lastModifiedDate":"2023-03-18"},{"lineNumber":98,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":99,"author":{"gitId":"bipbipboopboop"},"content":"        // We can only navigate to the previous cell if we are not the first cell.","lastModifiedDate":"2023-03-18"},{"lineNumber":100,"author":{"gitId":"bipbipboopboop"},"content":"        boolean isCurrFirstCell \u003d currIndex \u003d\u003d 0;","lastModifiedDate":"2023-03-18"},{"lineNumber":101,"author":{"gitId":"bipbipboopboop"},"content":"        if (!isCurrFirstCell) {","lastModifiedDate":"2023-03-18"},{"lineNumber":102,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.getFocusModel().focusPrevious();","lastModifiedDate":"2023-03-18"},{"lineNumber":103,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.getSelectionModel().select(currIndex - 1);","lastModifiedDate":"2023-03-18"},{"lineNumber":104,"author":{"gitId":"bipbipboopboop"},"content":"            taskListView.scrollTo(currIndex - 1);","lastModifiedDate":"2023-03-18"},{"lineNumber":105,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":107}},{"path":"src/main/java/vimification/taskui/TaskListViewCell.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-19"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-19"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.model.task.Task;","lastModifiedDate":"2023-03-19"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-19"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":" * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code TaskCard}.","lastModifiedDate":"2023-03-19"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-19"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"class TaskListViewCell extends ListCell\u003cTask\u003e {","lastModifiedDate":"2023-03-19"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"    protected void updateItem(Task task, boolean empty) {","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"        super.updateItem(task, empty);","lastModifiedDate":"2023-03-19"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"        if (empty || task \u003d\u003d null) {","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"            setGraphic(null);","lastModifiedDate":"2023-03-19"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"            setText(null);","lastModifiedDate":"2023-03-19"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"            return;","lastModifiedDate":"2023-03-19"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-19"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"        setGraphic(new TaskCard(task, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-19"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"bipbipboopboop":20}},{"path":"src/main/java/vimification/taskui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"    /** Starts the UI (and the App). */","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"-":11,"bipbipboopboop":2}},{"path":"src/main/java/vimification/taskui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.Gui;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.core.LogsCenter;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.commons.util.StringUtil;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.logic.Logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":" * The manager of the UI component.","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/vimification.png\";","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"    private Logic logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    @Override","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"        // Set the application icon.","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"bipbipboopboop"},"content":"            primaryStage.setTitle(\"Vimification\");","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"            primaryStage.setHeight(500);","lastModifiedDate":"2023-03-19"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"            primaryStage.setWidth(1000);","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"bipbipboopboop"},"content":"            MainScreen mainScreen \u003d new MainScreen(logic, primaryStage);","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"bipbipboopboop"},"content":"            Scene scene \u003d new Scene(mainScreen.getRoot());","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"bipbipboopboop"},"content":"            scene.getRoot().requestFocus();","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"bipbipboopboop"},"content":"            primaryStage.setScene(scene); // Setting the stage to show our screen","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"bipbipboopboop"},"content":"            primaryStage.show();","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"bipbipboopboop"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"bipbipboopboop"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"bipbipboopboop"},"content":"        return new Image(Gui.class.getResourceAsStream(imagePath));","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"bipbipboopboop"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":59}},{"path":"src/main/java/vimification/taskui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"package vimification.taskui;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"import vimification.Gui;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":" * contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"public abstract class UiPart\u003cT extends Node\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"     * {@code fx:controller} attribute.","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"bipbipboopboop"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"bipbipboopboop"},"content":"     * specify the {@code fx:controller} attribute.","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"bipbipboopboop"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"bipbipboopboop"},"content":"     * object.","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"bipbipboopboop"},"content":"        URL fxmlFileUrl \u003d Gui.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"bipbipboopboop"},"content":"     * Specifies whether the root of {@code Node} and any subnodes should be rendered as part of the","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"bipbipboopboop"},"content":"     * scene graph. A node may be visible and yet not be shown in the rendered scene if, for","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"bipbipboopboop"},"content":"     * instance, it is off the screen or obscured by another Node. Invisible nodes never receive","lastModifiedDate":"2023-03-23"},{"lineNumber":97,"author":{"gitId":"bipbipboopboop"},"content":"     * mouse events or keyboard focus and never maintain keyboard focus when they become invisible.","lastModifiedDate":"2023-03-23"},{"lineNumber":98,"author":{"gitId":"bipbipboopboop"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"bipbipboopboop"},"content":"     * @defaultValue true","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":101,"author":{"gitId":"bipbipboopboop"},"content":"    public void setVisible(boolean isVisible) {","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().setVisible(isVisible);","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"bipbipboopboop"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":106,"author":{"gitId":"bipbipboopboop"},"content":"     * Requests that this {@code Node} get the input focus, and that this {@code Node}\u0027s top-level","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"bipbipboopboop"},"content":"     * ancestor become the focused window. To be eligible to receive the focus, the node must be","lastModifiedDate":"2023-03-23"},{"lineNumber":108,"author":{"gitId":"bipbipboopboop"},"content":"     * part of a scene, it and all of its ancestors must be visible, and it must not be disabled. If","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"bipbipboopboop"},"content":"     * this node is eligible, this function will cause it to become this {@code Scene}\u0027s \"focus","lastModifiedDate":"2023-03-23"},{"lineNumber":110,"author":{"gitId":"bipbipboopboop"},"content":"     * owner\". Each scene has at most one focus owner node. The focus owner will not actually have","lastModifiedDate":"2023-03-23"},{"lineNumber":111,"author":{"gitId":"bipbipboopboop"},"content":"     * the input focus, however, unless the scene belongs to a {@code Stage} that is both visible","lastModifiedDate":"2023-03-23"},{"lineNumber":112,"author":{"gitId":"bipbipboopboop"},"content":"     * and active.","lastModifiedDate":"2023-03-23"},{"lineNumber":113,"author":{"gitId":"bipbipboopboop"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":114,"author":{"gitId":"bipbipboopboop"},"content":"    public void requestFocus() {","lastModifiedDate":"2023-03-23"},{"lineNumber":115,"author":{"gitId":"bipbipboopboop"},"content":"        this.getRoot().requestFocus();","lastModifiedDate":"2023-03-23"},{"lineNumber":116,"author":{"gitId":"bipbipboopboop"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":117,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"-":77,"bipbipboopboop":41}},{"path":"src/main/resources/oldview/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":36}},{"path":"src/main/resources/oldview/PersonListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"  \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":8}},{"path":"src/main/resources/view/CommandInput.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"\u003cTextField xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onKeyPressed\u003d\"#handleKeyPressed\"/\u003e","lastModifiedDate":"2023-03-19"}],"authorContributionMap":{"bipbipboopboop":9}},{"path":"src/main/resources/view/MainScreen.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.BorderPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"\u003cVBox alignment\u003d\"CENTER\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onKeyPressed\u003d\"#handleKeyPressed\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"    \u003cHBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cVBox fx:id\u003d\"leftComponent\" prefWidth\u003d\"300.0\"\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cVBox fx:id\u003d\"rightComponent\" prefWidth\u003d\"700.0\"\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    \u003cVBox fx:id\u003d\"commandInputComponent\" prefHeight\u003d\"50.0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":18}},{"path":"src/main/resources/view/TaskCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c!-- \u003cFlowPane fx:id\u003d\"tags\" /\u003e --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c!-- \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e --\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":34}},{"path":"src/main/resources/view/TaskCreationPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"\u003cVBox alignment\u003d\"CENTER\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" spacing\u003d\"75.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onKeyPressed\u003d\"#handleKeyPressed\"\u003e","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"49.0\" prefWidth\u003d\"600.0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel text\u003d\"Task\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cTextField fx:id\u003d\"nameField\" prefHeight\u003d\"49.0\" prefWidth\u003d\"486.0\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"200.0\" prefWidth\u003d\"600.0\"\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel alignment\u003d\"CENTER\" text\u003d\"Description\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cTextArea fx:id\u003d\"descriptionField\" prefHeight\u003d\"200.0\" prefWidth\u003d\"464.0\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"   \u003c/children\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":25}},{"path":"src/main/resources/view/TaskDetailPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"bipbipboopboop"},"content":"\u003cVBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-19"},{"lineNumber":11,"author":{"gitId":"bipbipboopboop"},"content":"   \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"bipbipboopboop"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel prefWidth\u003d\"150.0\" text\u003d\"Description\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"bipbipboopboop"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"bipbipboopboop"},"content":"                  \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"bipbipboopboop"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"bipbipboopboop"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"bipbipboopboop"},"content":"                  \u003cInsets left\u003d\"10.0\" right\u003d\"50.0\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"bipbipboopboop"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"bipbipboopboop"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel prefHeight\u003d\"45.0\" prefWidth\u003d\"489.0\" fx:id\u003d\"descriptionText\"/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"bipbipboopboop"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"bipbipboopboop"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"bipbipboopboop"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel prefWidth\u003d\"150.0\" text\u003d\"Type\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"bipbipboopboop"},"content":"               \u003cfont\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"bipbipboopboop"},"content":"                  \u003cFont name\u003d\"System Bold\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"bipbipboopboop"},"content":"               \u003c/font\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"bipbipboopboop"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"bipbipboopboop"},"content":"                  \u003cInsets left\u003d\"10.0\" right\u003d\"50.0\" /\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"bipbipboopboop"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"bipbipboopboop"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"bipbipboopboop"},"content":"            \u003cLabel prefHeight\u003d\"45.0\" prefWidth\u003d\"489.0\" text\u003d\"Label\" fx:id\u003d\"typeText\"/\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"bipbipboopboop"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"bipbipboopboop"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"bipbipboopboop"},"content":"   \u003c/children\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":39,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-18"}],"authorContributionMap":{"bipbipboopboop":39}},{"path":"src/main/resources/view/TaskListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"bipbipboopboop"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"bipbipboopboop"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"bipbipboopboop"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" onKeyPressed\u003d\"#handleKeyPressed\"\u003e","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"bipbipboopboop"},"content":"  \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"bipbipboopboop"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"bipbipboopboop":8}},{"path":"src/test/java/vimification/logic/parser/ApplicativeParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import java.util.List;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"public class ApplicativeParserTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    private static final Class\u003cParserException\u003e EXPECTED_EXCEPTION_CLASS \u003d ParserException.class;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    public void string_validInput_shouldSucceed() {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Hidden Seasons will pass you by\";","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.string(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(input, result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    public void string_invalidInput_shouldThrow() {","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Witching Dream Battle\";","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.string(\"Maiden\u0027s Capriccio\");","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        assertThrows(EXPECTED_EXCEPTION_CLASS, () -\u003e parser.parse(input));","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    public void until_validInput_shouldSucceed() {","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Red, White and Black Butterfly\";","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.until(\"Butterfly\");","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"Red, White and Black \", result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    public void until_invalidInput_shouldThrow() {","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Dichromatic Lotus Butterfly\";","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.until(\"Red and White\");","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"VietAnh1010"},"content":"        assertThrows(EXPECTED_EXCEPTION_CLASS, () -\u003e parser.parse(input));","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"VietAnh1010"},"content":"    public void shouldLiftCorrectly() {","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"The Rabbit Has Landed\";","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e leftParser \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"VietAnh1010"},"content":"                .string(\"The Rabbit\")","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"VietAnh1010"},"content":"                .dropNext(ApplicativeParser.skipWhitespaces());","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e rightParser \u003d ApplicativeParser.string(\"Has Landed\");","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.lift(","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"VietAnh1010"},"content":"                (left, right) -\u003e String.join(\" \", left, right),","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"VietAnh1010"},"content":"                leftParser,","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"VietAnh1010"},"content":"                rightParser);","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(input, result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"VietAnh1010"},"content":"    public void shouldMapCorrectly() {","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Legacy of Lunatic Kingdom\";","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"VietAnh1010"},"content":"                .string(input)","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"VietAnh1010"},"content":"                .map(result -\u003e result + \" (LoLK)\");","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(input + \" (LoLK)\", result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"VietAnh1010"},"content":"    public void shouldFlatMapCorrectly() {","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Tonight Stars an Easygoing Egoist\";","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"VietAnh1010"},"content":"                .string(\"Tonight Stars\")","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"VietAnh1010"},"content":"                .flatMap(left -\u003e ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"VietAnh1010"},"content":"                        .skipWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"VietAnh1010"},"content":"                        .takeNext(ApplicativeParser.string(\"an\"))","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"VietAnh1010"},"content":"                        .flatMap(middle -\u003e ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"VietAnh1010"},"content":"                                .skipWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"VietAnh1010"},"content":"                                .takeNext(ApplicativeParser.string(\"Easygoing Egoist\"))","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"VietAnh1010"},"content":"                                .flatMap(right -\u003e ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"VietAnh1010"},"content":"                                        .of(String.join(\" \", left, middle, right)))));","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(input, result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"VietAnh1010"},"content":"    public void of_anyInput_shouldNotConsume() {","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"The Girl\u0027s Secret Room\";","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"VietAnh1010"},"content":"        String output \u003d \"Locked Girl\";","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cString\u003e parser \u003d ApplicativeParser.of(output);","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, String\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(input, result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(output, result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"VietAnh1010"},"content":"    public void oneOrMore_validInput_shouldStopAtCorrectPosition() {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"Shoot the Bullet\";","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"VietAnh1010"},"content":"        ApplicativeParser\u003cList\u003cString\u003e\u003e parser \u003d ApplicativeParser","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"VietAnh1010"},"content":"                .nonWhitespaces()","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"VietAnh1010"},"content":"                .filter(str -\u003e !str.equals(\"Bullet\"))","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"VietAnh1010"},"content":"                .dropNext(ApplicativeParser.skipWhitespaces())","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"VietAnh1010"},"content":"                .many1();","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"VietAnh1010"},"content":"        Pair\u003cString, List\u003cString\u003e\u003e result \u003d parser.parsePartOf(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"Bullet\", result.getFirst());","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(List.of(\"Shoot\", \"the\"), result.getSecond());","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":113}},{"path":"src/test/java/vimification/logic/parser/CreateCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.CreateCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"public class CreateCommandParserTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"    private static final Class\u003cParserException\u003e EXPECTED_EXCEPTION_CLASS \u003d ParserException.class;","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    public void unrecognizableKeyword_shouldFail() {","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"itodoTrue\";","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        assertThrows(EXPECTED_EXCEPTION_CLASS,","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"                () -\u003e CreateCommandParser.getInstance().parse(input));","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    public void unrecognizableType_shouldFail() {","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"        String input1 \u003d \"i todogood bye\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"        assertThrows(EXPECTED_EXCEPTION_CLASS,","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"                () -\u003e CreateCommandParser.getInstance().parse(input1));","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        String input2 \u003d \"i deadlinehomework is suffering\";","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        assertThrows(EXPECTED_EXCEPTION_CLASS,","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"                () -\u003e CreateCommandParser.getInstance().parse(input2));","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"VietAnh1010"},"content":"    public void validCommand_shouldSuccess() {","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"VietAnh1010"},"content":"        String input1 \u003d \"i todo play Touhou 7\";","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"VietAnh1010"},"content":"        CreateCommand cmd1 \u003d CreateCommandParser.getInstance().parse(input1);","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"VietAnh1010"},"content":"        assertTrue(cmd1 !\u003d null);","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"VietAnh1010"},"content":"        String input2 \u003d \"i deadline to play Touhou 8 /\u003cdatetime\u003e\";","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"VietAnh1010"},"content":"        CreateCommand cmd2 \u003d CreateCommandParser.getInstance().parse(input2);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"VietAnh1010"},"content":"        assertTrue(cmd2 !\u003d null);","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":41}},{"path":"src/test/java/vimification/logic/parser/VimificationParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"VietAnh1010"},"content":"package vimification.logic.parser;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"VietAnh1010"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"VietAnh1010"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"VietAnh1010"},"content":"import vimification.logic.commands.LogicCommand;","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"VietAnh1010"},"content":"public class VimificationParserTest {","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"VietAnh1010"},"content":"    private static final Class\u003cParserException\u003e EXPECTED_EXCEPTION_CLASS \u003d ParserException.class;","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"VietAnh1010"},"content":"    public void unknownCommand_shouldThrow() {","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \". todo sleep\";","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"VietAnh1010"},"content":"        ParserException ex \u003d assertThrows(","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"VietAnh1010"},"content":"                EXPECTED_EXCEPTION_CLASS,","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"VietAnh1010"},"content":"                () -\u003e VimificationParser.getInstance().parse(input));","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"VietAnh1010"},"content":"        assertEquals(\"Unknown command\", ex.getMessage());","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"VietAnh1010"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"VietAnh1010"},"content":"    @Test","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"VietAnh1010"},"content":"    public void validCommand_shouldSuccess() {","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"VietAnh1010"},"content":"        String input \u003d \"i todo play touhou 6\";","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"VietAnh1010"},"content":"        LogicCommand cmd \u003d VimificationParser.getInstance().parse(input);","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"VietAnh1010"},"content":"        assertTrue(cmd !\u003d null);","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"VietAnh1010"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"VietAnh1010"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"VietAnh1010":30}}]
