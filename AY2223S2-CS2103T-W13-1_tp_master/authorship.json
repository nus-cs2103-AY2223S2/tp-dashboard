[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"[![CI Status](https://github.com/AY2223S2-CS2103T-W13-1/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S2-CS2103T-W13-1/tp/actions)","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"* This is a **team project (tp) for Software Engineering (SE) students in CS2103T**.\u003cbr\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"  * Add patients and Add doctors information (particulars, patients bill, medication, etc)","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"  * Find the specific person and doctor","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"  * Delete person based on name instead of index","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"  * Retrieve patient/doctors information","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"* The project simulates an ongoing software project for a desktop application (called MediConnect) used for managing patient/doctor details.","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  * It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"* It is named `MediConnect` because it facilitates a connection between healthcare providers and individual patients.","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"* This project was based on the AddressBook-Level3 project created by the **[SE-EDU initiative](https://se-education.org)**.","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"* For the detailed documentation of this project, see the **[Product Website](https://ay2223s2-cs2103t-w13-1.github.io/tp)**.","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"StefanosAv":10,"-":6}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"mainClassName \u003d \u0027seedu.address.Main\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"thennant"},"content":"run {","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"thennant"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":72,"thennant":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"### Mandy Kaw","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"\u003cimg src\u003d\"images/mandykqh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"[[github](http://github.com/mandykqh)]","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"[[portfolio](team/mandykqh.md)]","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"thennant"},"content":"### Thennant Lim","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"thennant"},"content":"\u003cimg src\u003d\"images/thennant.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"thennant"},"content":"[[github](http://github.com/thennant)] [[portfolio](team/thennant.md)]","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Responsibilities: Data","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"### Low Jian Feng","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"PeanutButters93"},"content":"\u003cimg src\u003d\"images/peanutbutters93.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"PeanutButters93"},"content":"[[github](http://github.com/peanutbutters93)]","lastModifiedDate":"2023-02-20"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"[[portfolio](team/peanutbutters93.md)]","lastModifiedDate":"2023-02-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"* Responsibilities: TBD","lastModifiedDate":"2023-02-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"### Stefanos Avraam","lastModifiedDate":"2023-02-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"\u003cimg src\u003d\"images/stefanosav.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"[[github](https://github.com/StefanosAv)]","lastModifiedDate":"2023-02-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[[portfolio](team/johndoe.md)]","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"PeanutButters93":7,"StefanosAv":3,"mandykqh":4,"-":32,"thennant":3}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"### Adding a Person","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"The add mechanism is facilitated by `MediConnect`. ","lastModifiedDate":"2023-03-24"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"It allows the user to add new a person (Patient/Doctor) to the `list` using `addPatient` or `addDoctor`","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"Given below is an example usage scenario and how the add mechanism behaves at each step.","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"Step 1. The user launches the application. The list of existing patients and doctors is shown.","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"StefanosAv"},"content":"Step 2. The user inputs the appropriate command (either addPatient or addDoctor), followed by the required input fields as shown below: \u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"StefanosAv"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;`addDoctor n/Sarah Tan p/99123456 e/sarah@abc.com ic/T7654321P a/Sarah Rd t/Pediatrician`","lastModifiedDate":"2023-03-24"},{"lineNumber":169,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"StefanosAv"},"content":"Step 3. The `addDoctor` command will check whether all the required fields are correct and if the person does not already exist in the doctors\u0027 list.","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"StefanosAv"},"content":"Step 4. call Model...","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"StefanosAv"},"content":"Step 5. create new Doctor object and add to list...","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"thennant"},"content":"### Deleting a Person","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"thennant"},"content":"The delete mechanism is facilitated by `MediConnect`. It extends `MediConnect` with a delete function.","lastModifiedDate":"2023-03-27"},{"lineNumber":179,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"thennant"},"content":"Given below is an example usage scenario and how the delete mechanism behaves at each step.","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":182,"author":{"gitId":"thennant"},"content":"Step 1. The user launches the application for the first time. The `MediConnect` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2023-03-24"},{"lineNumber":183,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"thennant"},"content":"![deleteState0](images/deleteState0.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":185,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":186,"author":{"gitId":"thennant"},"content":"Step 2. The user executes addDoctor n/David Tan …​ to add a new doctor. The add command also calls Model#commitAddressBook(), causing another modified address book state to be saved into the addressBookStateList.","lastModifiedDate":"2023-03-27"},{"lineNumber":187,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":188,"author":{"gitId":"thennant"},"content":"![deleteState1](images/deleteState1.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":189,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"thennant"},"content":"Step 3. The user now wants to delete the person, and decides to carry out the delete operation by executing the `delete` command. ","lastModifiedDate":"2023-03-27"},{"lineNumber":191,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"thennant"},"content":"Step 4. The user executes `delete ic/S9876543K` command to delete the person with the `NRIC S9876543K` in the MediConnect. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete ic/S9876543K` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-27"},{"lineNumber":193,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":194,"author":{"gitId":"thennant"},"content":"![deleteState2](images/deleteState2.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":195,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":196,"author":{"gitId":"thennant"},"content":"#### Design considerations:","lastModifiedDate":"2023-03-27"},{"lineNumber":197,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":198,"author":{"gitId":"thennant"},"content":"**Aspect: How delete executes:**","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"thennant"},"content":"* **Current choice:** Delete the patient/doctor with the given NRIC","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"thennant"},"content":"    * Pros: Easy to implement. No need to worry about multiple people with same name, since everyone has a unique nric number.","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"thennant"},"content":"    * Cons: Cannot delete multiple people at once. User might delete the wrong nric accidentally since it is a long chain of numbers.","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":204,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":205,"author":{"gitId":"mandykqh"},"content":"### Adding an appointment","lastModifiedDate":"2023-03-24"},{"lineNumber":206,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":207,"author":{"gitId":"mandykqh"},"content":"The add appointment mechanism is facilitated by `MediConnect`. ","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":209,"author":{"gitId":"mandykqh"},"content":"Given below is an example usage scenario and how the add appointment mechanism behaves at each step.","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"Step 1. The user launches the application for the first time. The `MediConnect` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":213,"author":{"gitId":"mandykqh"},"content":"Step 2. The user executes `appointment ic/S1234567X d/20-12-2020 20:20 dric/S7654321R` command to add an appointment at the specified date, with the specified doctor by NRIC, for the specified patient by NRIC.  The `appointment` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `appointment` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-24"},{"lineNumber":214,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":215,"author":{"gitId":"mandykqh"},"content":"### \\[Proposed\\] Deleting an appointment","lastModifiedDate":"2023-03-24"},{"lineNumber":216,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":217,"author":{"gitId":"mandykqh"},"content":"The delete appointment mechanism is facilitated by `MediConnect`.","lastModifiedDate":"2023-03-24"},{"lineNumber":218,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":219,"author":{"gitId":"mandykqh"},"content":"Given below is an example usage scenario and how the delete appointment mechanism behaves at each step.","lastModifiedDate":"2023-03-24"},{"lineNumber":220,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":221,"author":{"gitId":"mandykqh"},"content":"Step 1. The user launches the application for the first time. The `MediConnect` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2023-03-24"},{"lineNumber":222,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":223,"author":{"gitId":"mandykqh"},"content":"Step 2. The user executes `deleteAppointment ic/S1234567X d/20-12-2020 20:20 dric/S7654321R` command to delete an appointment at the specified date, with the specified doctor by NRIC, for the specified patient by NRIC.  The `deleteAppointment` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `deleteAppointment` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-24"},{"lineNumber":224,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":225,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":313,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":315,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":316,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":317,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":318,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"mandykqh"},"content":"* Hospital administrative staff, Doctors","lastModifiedDate":"2023-02-24"},{"lineNumber":329,"author":{"gitId":"mandykqh"},"content":"* has a need to manage a significant number of patient/doctor data","lastModifiedDate":"2023-02-24"},{"lineNumber":330,"author":{"gitId":"-"},"content":"* prefer desktop apps over other types","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"* can type fast","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"* prefers typing to mouse interactions","lastModifiedDate":"2020-05-26"},{"lineNumber":333,"author":{"gitId":"-"},"content":"* is reasonably comfortable using CLI apps","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"mandykqh"},"content":"**Value proposition**: manage patient/doctor details faster than a typical mouse/GUI driven app","lastModifiedDate":"2023-02-24"},{"lineNumber":336,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"mandykqh"},"content":"| Priority | As a …​                  | I want to …​                                      | So that …​                                              |","lastModifiedDate":"2023-02-24"},{"lineNumber":343,"author":{"gitId":"mandykqh"},"content":"| -------- |--------------------------| ---                                                     |----------------------------------------------------------- |","lastModifiedDate":"2023-02-24"},{"lineNumber":344,"author":{"gitId":"mandykqh"},"content":"| `* * *`  | healthcare provider | access a dashboard to keep track of my patients\u0027 information, medical history, and appointment schedules | I can provide better care. |","lastModifiedDate":"2023-02-24"},{"lineNumber":345,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider | view bed availability in real-time | I can make informed decisions about patient admission and discharge. |","lastModifiedDate":"2023-02-24"},{"lineNumber":346,"author":{"gitId":"mandykqh"},"content":"| `* * *`  | healthcare provider      | update patient information and medical history after each appointment | I have a complete and accurate record of the patient\u0027s health.          |","lastModifiedDate":"2023-02-24"},{"lineNumber":347,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | generate and send prescription orders to the pharmacy directly from the application | I can streamline the process for my patients.                           |","lastModifiedDate":"2023-02-24"},{"lineNumber":348,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | access real-time data on the patient\u0027s vital signs and monitor the patient\u0027s health remotely | I can quickly respond to changes in the patient\u0027s health.               |","lastModifiedDate":"2023-02-24"},{"lineNumber":349,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | access and update my own schedule and availability through the application | I can manage my workload and provide better care for my patients.       | ","lastModifiedDate":"2023-02-24"},{"lineNumber":350,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | view and manage patient waiting times | I can minimize wait times and improve patient satisfaction.             |","lastModifiedDate":"2023-02-24"},{"lineNumber":351,"author":{"gitId":"mandykqh"},"content":"| `* * *`  | healthcare provider      | access a directory of specialist doctors and referral information | I can quickly and easily connect my patients with the right care.       |","lastModifiedDate":"2023-02-24"},{"lineNumber":352,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | provide virtual consultations and appointments through the application | I can reach more patients and provide better access to care.            |","lastModifiedDate":"2023-02-24"},{"lineNumber":353,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | access a library of patient education materials and resources | I can provide better information and support to my patients.            |","lastModifiedDate":"2023-02-24"},{"lineNumber":354,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | view and manage patient waitlists and triage patient needs | I can prioritize the most urgent cases and provide better access to care. |","lastModifiedDate":"2023-02-24"},{"lineNumber":355,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | access and view patient insurance information and make necessary updates | I can accurately bill patients and manage healthcare costs. |","lastModifiedDate":"2023-02-24"},{"lineNumber":356,"author":{"gitId":"mandykqh"},"content":"|          | healthcare provider      | send appointment confirmations and reminders to patients | they can arrive prepared for their appointments. |","lastModifiedDate":"2023-02-24"},{"lineNumber":357,"author":{"gitId":"mandykqh"},"content":"|          | healthcare administrator | access analytics and metrics on patient engagement, appointment booking, and resource utilization | I can make data-driven decisions to improve the hospital\u0027s operations. |","lastModifiedDate":"2023-02-24"},{"lineNumber":358,"author":{"gitId":"mandykqh"},"content":"|          | healthcare administrator | access real-time data on hospital utilization and resource allocation | I can optimize the hospital\u0027s operations and improve patient outcomes. |","lastModifiedDate":"2023-02-24"},{"lineNumber":359,"author":{"gitId":"mandykqh"},"content":"| `* * *`  | healthcare administrator | access patients\u0027 records on the go/at home any time when it\u0027s necessary to provide admin support anytime. | |","lastModifiedDate":"2023-02-24"},{"lineNumber":360,"author":{"gitId":"mandykqh"},"content":"|          | healthcare administrator | manage the hospital staff and workload better using the app | there are sufficient people during each shift. |","lastModifiedDate":"2023-02-24"},{"lineNumber":361,"author":{"gitId":"mandykqh"},"content":"|          | patient | chat 1-to-1 with my doctor | I can seek advice on my medical condition without having to visit the doctor\u0027s office. |","lastModifiedDate":"2023-02-24"},{"lineNumber":362,"author":{"gitId":"mandykqh"},"content":"|          | patient | retrieve my invoices and pay my bills through the application | I can manage my healthcare expenses more efficiently. |","lastModifiedDate":"2023-02-24"},{"lineNumber":363,"author":{"gitId":"mandykqh"},"content":"|          | patient | receive reminders for appointments and medication | I don\u0027t forget important events related to my healthcare. |","lastModifiedDate":"2023-02-24"},{"lineNumber":364,"author":{"gitId":"mandykqh"},"content":"|          | patient | provide feedback and rate my experience with the hospital and its services | the hospital can continuously improve its offerings. |","lastModifiedDate":"2023-02-24"},{"lineNumber":365,"author":{"gitId":"mandykqh"},"content":"|          | patient | access my test results and medical records through the application | I can keep track of my health history. |","lastModifiedDate":"2023-02-24"},{"lineNumber":366,"author":{"gitId":"mandykqh"},"content":"|          | patient | create an account | I can easily book appointments and keep track of my medical information. |","lastModifiedDate":"2023-02-24"},{"lineNumber":367,"author":{"gitId":"mandykqh"},"content":"|          | patient | view and manage my medical history and health records | I can keep track of my health status and history. |","lastModifiedDate":"2023-02-24"},{"lineNumber":368,"author":{"gitId":"mandykqh"},"content":"|          | patient | communicate with my healthcare team and provide updates on my health status | I can receive better care and improve my health outcomes. |","lastModifiedDate":"2023-02-24"},{"lineNumber":369,"author":{"gitId":"mandykqh"},"content":"|          | patient | view the hospital\u0027s facilities and services and make informed decisions about which hospital to visit for my medical needs. | |","lastModifiedDate":"2023-02-24"},{"lineNumber":370,"author":{"gitId":"mandykqh"},"content":"|          | patient | provide consent for my medical information to be shared with other healthcare providers as needed, | I can receive coordinated care from a team of specialists. | ","lastModifiedDate":"2023-02-24"},{"lineNumber":371,"author":{"gitId":"mandykqh"},"content":"|          | patient | schedule and reschedule appointments through the application | I can easily manage my schedule. |","lastModifiedDate":"2023-02-24"},{"lineNumber":372,"author":{"gitId":"mandykqh"},"content":"|          | patient | provide emergency contact information through the application | my healthcare providers can quickly reach out to my designated emergency contacts in case of an emergency. |","lastModifiedDate":"2023-02-24"},{"lineNumber":373,"author":{"gitId":"mandykqh"},"content":"|          | patient | request and receive referrals for specialist consultations through the application | I can receive the best care for my medical needs. |","lastModifiedDate":"2023-02-24"},{"lineNumber":374,"author":{"gitId":"mandykqh"},"content":"|          | patient | view and manage my lab results and diagnostic reports through the application | I can keep track of my health status. |","lastModifiedDate":"2023-02-24"},{"lineNumber":375,"author":{"gitId":"mandykqh"},"content":"|          | tech illiterate patient | navigate through the app easily without help. | |","lastModifiedDate":"2023-02-24"},{"lineNumber":376,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":380,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"mandykqh"},"content":"(For all use cases below, the **System** is `MediConnect (MC)`, unless specified otherwise)","lastModifiedDate":"2023-02-24"},{"lineNumber":382,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"mandykqh"},"content":"**Use case: UC01 - Add patient’s information**","lastModifiedDate":"2023-02-24"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":385,"author":{"gitId":"mandykqh"},"content":"**Actor: Healthcare administrator** ","lastModifiedDate":"2023-02-24"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":387,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2023-02-24"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":389,"author":{"gitId":"mandykqh"},"content":"1. User chooses to add patient’s information..","lastModifiedDate":"2023-02-24"},{"lineNumber":390,"author":{"gitId":"mandykqh"},"content":"2. MC requests for details of the information.","lastModifiedDate":"2023-02-24"},{"lineNumber":391,"author":{"gitId":"mandykqh"},"content":"3. User enters the requested details.","lastModifiedDate":"2023-02-24"},{"lineNumber":392,"author":{"gitId":"mandykqh"},"content":"4. MC displays the new patient information..","lastModifiedDate":"2023-02-24"},{"lineNumber":393,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":394,"author":{"gitId":"mandykqh"},"content":"    Use case ends.","lastModifiedDate":"2023-02-24"},{"lineNumber":395,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":396,"author":{"gitId":"mandykqh"},"content":"**Extensions**","lastModifiedDate":"2023-02-24"},{"lineNumber":397,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":398,"author":{"gitId":"mandykqh"},"content":"* 3a. MC detects an error in the entered data.","lastModifiedDate":"2023-02-24"},{"lineNumber":399,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":400,"author":{"gitId":"mandykqh"},"content":"  * 3a1. MC requests for the correct data.","lastModifiedDate":"2023-02-24"},{"lineNumber":401,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":402,"author":{"gitId":"mandykqh"},"content":"  * 3a2. User enters new data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":403,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":404,"author":{"gitId":"mandykqh"},"content":"    Steps 3a1-3a2 are repeated until the data entered are correct.","lastModifiedDate":"2023-02-24"},{"lineNumber":405,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":406,"author":{"gitId":"mandykqh"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-02-24"},{"lineNumber":407,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":408,"author":{"gitId":"mandykqh"},"content":"**Use case: UC02 - Add doctor’s information**","lastModifiedDate":"2023-02-24"},{"lineNumber":409,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":410,"author":{"gitId":"mandykqh"},"content":"**Actor: Healthcare administrator**","lastModifiedDate":"2023-02-24"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"mandykqh"},"content":"1. User chooses to add doctor’s information..","lastModifiedDate":"2023-02-24"},{"lineNumber":415,"author":{"gitId":"mandykqh"},"content":"2. MC requests for details of the information.","lastModifiedDate":"2023-02-24"},{"lineNumber":416,"author":{"gitId":"mandykqh"},"content":"3. User enters the requested details.","lastModifiedDate":"2023-02-24"},{"lineNumber":417,"author":{"gitId":"mandykqh"},"content":"4. MC displays the new doctor’s information..","lastModifiedDate":"2023-02-24"},{"lineNumber":418,"author":{"gitId":"-"},"content":"   ","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"mandykqh"},"content":"* 3a. MC detects an error in the entered data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":424,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":425,"author":{"gitId":"mandykqh"},"content":"  * 3a1. MC requests for the correct data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":426,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"mandykqh"},"content":"  * 3a2. User enters new data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":428,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":429,"author":{"gitId":"mandykqh"},"content":"    Steps 3a1-3a2 are repeated until the data entered are correct.","lastModifiedDate":"2023-02-24"},{"lineNumber":430,"author":{"gitId":"mandykqh"},"content":"    ","lastModifiedDate":"2023-02-24"},{"lineNumber":431,"author":{"gitId":"mandykqh"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-02-24"},{"lineNumber":432,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":433,"author":{"gitId":"mandykqh"},"content":"**Use case: UC03 - Retrieve patient’s information**","lastModifiedDate":"2023-02-24"},{"lineNumber":434,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":435,"author":{"gitId":"mandykqh"},"content":"**Actor: Doctor**","lastModifiedDate":"2023-02-24"},{"lineNumber":436,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":437,"author":{"gitId":"mandykqh"},"content":"**MSS**","lastModifiedDate":"2023-02-24"},{"lineNumber":438,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":439,"author":{"gitId":"mandykqh"},"content":"1. User chooses to retrieve patient’s information..","lastModifiedDate":"2023-02-24"},{"lineNumber":440,"author":{"gitId":"mandykqh"},"content":"2. MC retrieves the patient’s information","lastModifiedDate":"2023-02-24"},{"lineNumber":441,"author":{"gitId":"mandykqh"},"content":"3. MC displays the patient information that was retrieved..","lastModifiedDate":"2023-02-24"},{"lineNumber":442,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"mandykqh"},"content":"**Extensions**","lastModifiedDate":"2023-02-24"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":446,"author":{"gitId":"mandykqh"},"content":"* 3a. MC detects an error in the entered data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":447,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":448,"author":{"gitId":"mandykqh"},"content":"  * 3a1. MC requests for the correct data.","lastModifiedDate":"2023-02-24"},{"lineNumber":449,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":450,"author":{"gitId":"mandykqh"},"content":"  * 3a2. User enters new data. ","lastModifiedDate":"2023-02-24"},{"lineNumber":451,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":452,"author":{"gitId":"mandykqh"},"content":"    Steps 3a1-3a2 are repeated until the data entered are correct. ","lastModifiedDate":"2023-02-24"},{"lineNumber":453,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"mandykqh"},"content":"    Use case resumes from step 4. ","lastModifiedDate":"2023-02-24"},{"lineNumber":455,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":456,"author":{"gitId":"mandykqh"},"content":"* 3b. User request an unassigned patient’s information ","lastModifiedDate":"2023-02-24"},{"lineNumber":457,"author":{"gitId":"mandykqh"},"content":"  ","lastModifiedDate":"2023-02-24"},{"lineNumber":458,"author":{"gitId":"mandykqh"},"content":"  * 3b1. MC denies the request. ","lastModifiedDate":"2023-02-24"},{"lineNumber":459,"author":{"gitId":"mandykqh"},"content":"    ","lastModifiedDate":"2023-02-24"},{"lineNumber":460,"author":{"gitId":"mandykqh"},"content":"    Use case ends.","lastModifiedDate":"2023-02-24"},{"lineNumber":461,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":462,"author":{"gitId":"thennant"},"content":"**Use case: UC04 - Delete patient\u0027s information**","lastModifiedDate":"2023-03-27"},{"lineNumber":463,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":464,"author":{"gitId":"thennant"},"content":"**Actor: Hospital administration**","lastModifiedDate":"2023-03-27"},{"lineNumber":465,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":466,"author":{"gitId":"thennant"},"content":"**MSS**","lastModifiedDate":"2023-03-27"},{"lineNumber":467,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":468,"author":{"gitId":"thennant"},"content":"1. User choose to delete patient information.","lastModifiedDate":"2023-03-27"},{"lineNumber":469,"author":{"gitId":"thennant"},"content":"2. MC request for the patient\u0027s nric number.","lastModifiedDate":"2023-03-27"},{"lineNumber":470,"author":{"gitId":"thennant"},"content":"3. User enters the requested details","lastModifiedDate":"2023-03-27"},{"lineNumber":471,"author":{"gitId":"thennant"},"content":"4. MC displays the confirmation of the deleted patient.","lastModifiedDate":"2023-03-27"},{"lineNumber":472,"author":{"gitId":"thennant"},"content":"   Use case ends. ","lastModifiedDate":"2023-03-27"},{"lineNumber":473,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":474,"author":{"gitId":"thennant"},"content":"**Extensions**","lastModifiedDate":"2023-03-27"},{"lineNumber":475,"author":{"gitId":"thennant"},"content":"* 3a. MC cannot find the patient\u0027s nric in the list","lastModifiedDate":"2023-03-27"},{"lineNumber":476,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":477,"author":{"gitId":"thennant"},"content":"  * 3a1. MC informs the user that the patient cannot be found","lastModifiedDate":"2023-03-27"},{"lineNumber":478,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":479,"author":{"gitId":"thennant"},"content":"  * 3a2. User enters the corrected nric.","lastModifiedDate":"2023-03-27"},{"lineNumber":480,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":481,"author":{"gitId":"thennant"},"content":"    Steps 3a1-3a2 are repeated until the data entered are correct.","lastModifiedDate":"2023-03-27"},{"lineNumber":482,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":483,"author":{"gitId":"thennant"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-03-27"},{"lineNumber":484,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":485,"author":{"gitId":"thennant"},"content":"* 3b. User does not enter the `ic/` field after the `delete` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":486,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":487,"author":{"gitId":"thennant"},"content":"  * 3b1. MC informs the user that it is an invalid command format.","lastModifiedDate":"2023-03-27"},{"lineNumber":488,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":489,"author":{"gitId":"thennant"},"content":"  * 3b2. User enters the correct command format.","lastModifiedDate":"2023-03-27"},{"lineNumber":490,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":491,"author":{"gitId":"thennant"},"content":"    Steps 3b1-3b2 are repeated until the data entered are correct.","lastModifiedDate":"2023-03-27"},{"lineNumber":492,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":493,"author":{"gitId":"thennant"},"content":"    Use case resumes from step 4.","lastModifiedDate":"2023-03-27"},{"lineNumber":494,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":495,"author":{"gitId":"thennant"},"content":"* 3c. User does not enter a nric number or enters an invalid nric format number after the `ic/` field.","lastModifiedDate":"2023-03-27"},{"lineNumber":496,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":497,"author":{"gitId":"thennant"},"content":"  * 3c1. MC informs the user that NRIC must follow a specific format.","lastModifiedDate":"2023-03-27"},{"lineNumber":498,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":499,"author":{"gitId":"thennant"},"content":"  * User enters the correct nric format number.","lastModifiedDate":"2023-03-27"},{"lineNumber":500,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":501,"author":{"gitId":"thennant"},"content":"    Steps 3c1-3c2 are repeated until the data entered are correct.","lastModifiedDate":"2023-03-27"},{"lineNumber":502,"author":{"gitId":"thennant"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":503,"author":{"gitId":"thennant"},"content":"    Use case resumes from step 4. ","lastModifiedDate":"2023-03-27"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"mandykqh"},"content":"1. Users cannot view information of unassigned patients","lastModifiedDate":"2023-02-24"},{"lineNumber":511,"author":{"gitId":"mandykqh"},"content":"2. System should be backward compatible with data produced by earlier versions of the system;","lastModifiedDate":"2023-02-24"},{"lineNumber":512,"author":{"gitId":"mandykqh"},"content":"3. Requires Java 11","lastModifiedDate":"2023-02-24"},{"lineNumber":513,"author":{"gitId":"mandykqh"},"content":"4. The system should be usable by a novice who is tech illiterate","lastModifiedDate":"2023-02-24"},{"lineNumber":514,"author":{"gitId":"mandykqh"},"content":"5. **Any other noteworthy points:** Confidential information is hidden, requires access rights","lastModifiedDate":"2023-02-24"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":518,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"mandykqh"},"content":"* **Patient**: Define as a customer of the hospital and only has read-access","lastModifiedDate":"2023-02-24"},{"lineNumber":522,"author":{"gitId":"mandykqh"},"content":"* **Doctor**: Define as staff of the hospital and only has read-access","lastModifiedDate":"2023-02-24"},{"lineNumber":523,"author":{"gitId":"mandykqh"},"content":"* **Administrator**: Define as admin staff of the hospital and has write-access","lastModifiedDate":"2023-02-24"},{"lineNumber":524,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":531,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":532,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":533,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":534,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":535,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":536,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":537,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":538,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":539,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":540,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":541,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":542,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":543,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":544,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":545,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":546,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":547,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":548,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":549,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":550,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":551,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":552,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":553,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":554,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":555,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":556,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":557,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":558,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":559,"author":{"gitId":"thennant"},"content":"   1. Test case: `delete ic/S1234567A`\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":560,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":561,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":562,"author":{"gitId":"thennant"},"content":"   1. Test case: `delete ic/0`\u003cbr\u003e","lastModifiedDate":"2023-03-27"},{"lineNumber":563,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":564,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":565,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":566,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":567,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":568,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":569,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":570,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":571,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":572,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":573,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":574,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":575,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":576,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"StefanosAv":19,"mandykqh":126,"-":358,"thennant":73}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"Introducing **MediConnect** - the comprehensive desktop application designed to  **streamline patient management, doctor coordination, and hospital billing.** ","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"As a centralised platform, **MediConnect** offers healthcare professionals and secretarial personnel an efficient solution","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"to manage clinics in Singapore. The app simplifies the organization and maintainance of patient and doctor data, appointments and billing records. \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"**MediConnect** can be used with either a command line interface (CLI) or a graphical user interface (GUI).","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"Users experienced with the CLI may get their tasks done faster than traditional GUI apps. \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"_With MediConnect, managing your healthcare practice has never been easier._","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"2. Download the latest `MediConnect.jar` from [here](https://github.com/AY2223S2-CS2103T-W13-1/tp/releases).","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"3. Copy the file to the folder you want to use as the _home folder_ for your MediConnect.","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"4. Double-click the file to start the app.\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"   * `list` : Lists all stored patients and doctors.","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"   * `addPatient n/Ben Smith p/98353535 e/ben@abc.com ic/S1234567A a/Ben Street, block 13, #01-01` : Adds a patient named `Ben Smith` to MediConnect.","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"   * `delete ic/S1234567A` : Deletes the person with NRIC `S1234567A` from the current list.","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"   * `clear` : Deletes all persons stored in the application.","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"6. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"* If a parameter is expected only once in the command, but it\u0027s specified multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"  e.g. if the command specifies `p/12341234 p/56785678`, only `p/56785678` will be stored.","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":70,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"StefanosAv"},"content":"| Field            | Prefix | Input Restrictions|","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"StefanosAv"},"content":"|------------------|--------||","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"StefanosAv"},"content":"| **Address**      | a/     ||","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"StefanosAv"},"content":"| **Date**         | d/     ||","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"StefanosAv"},"content":"| **Email**        | e/     | 1. Should be of the format local-part@domain \u003cbr\u003e 2. The local-part should only contain alphanumeric characters and these special characters (+_.-). The local-part may not start or end with any special characters. \u003cbr\u003e 3. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels separated by periods. \u003cbr\u003e The domain name must: \u003cbr\u003e - end with a domain label at least 2 characters long \u003cbr\u003e - have each domain label start and end with alphanumeric characters \u003cbr\u003e - have each domain label consist of alphanumeric characters, separated only by hyphens, if any. |","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"StefanosAv"},"content":"| **Medication**   | m/     ||","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"StefanosAv"},"content":"| **Name**         | n/     | Should only contain alphanumeric characters and spaces.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"StefanosAv"},"content":"| **NRIC**         | ic/    | 1. Should be 9 characters long. \u003cbr\u003e 2. The first character must be one of [S,T,F,G,M], followed by 7 numerical digits and ending with [A-Z].                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"| **Phone Number** | p/     | 1. Should only contain numbers. \u003cbr\u003e 2. Should be at least 3 digits long|","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"StefanosAv"},"content":"| **Tag**          | t/     | Should be alphanumeric|","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"### Adding a person: `add a patient`, `add a doctor`","lastModifiedDate":"2023-03-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"StefanosAv"},"content":"Adds a person (patient/doctor) to MediConnect.","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"StefanosAv"},"content":"Format: `addPatient n/NAME p/PHONE_NUMBER e/EMAIL ic/NRIC a/ADDRESS [t/TAG]`  \u003cbr /\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":90,"author":{"gitId":"StefanosAv"},"content":"\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;`addDoctor n/NAME p/PHONE_NUMBER e/EMAIL ic/NRIC a/ADDRESS [t/TAG]​`","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"* Adds the specified person to MediConnect.","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"* Each person can be added only once.","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"* Each person\u0027s NRIC must be distinct.","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"* `addPatient n/Ben Smith p/98353535 e/ben@abc.com ic/S1234567A a/1 Ben Street, block 13, #01-01` adds the patient `Ben Smith` to the list.","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"* `addDoctor n/Sarah Tan p/99123456 e/sarah@abc.com ic/T7654321P a/Sarah Rd t/Pediatrician` adds the doctor `Sarah Tan` to the list.","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"thennant"},"content":"### Retrieve person information : `list`","lastModifiedDate":"2023-02-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"thennant"},"content":"Shows a list of all persons in MediConnect.","lastModifiedDate":"2023-02-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"thennant"},"content":"### Prescribing patient’s medication : `prescribe medication to patient`","lastModifiedDate":"2023-02-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"thennant"},"content":"Prescribe a patient’s medication.","lastModifiedDate":"2023-02-20"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"thennant"},"content":"Format: `prescribe m/MEDICATION to n/NAME`","lastModifiedDate":"2023-02-20"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"thennant"},"content":"*  `prescribe m/paracetamol to n/John Tan` Prescribes paracetamol to John Tan","lastModifiedDate":"2023-02-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"StefanosAv"},"content":"### Finding persons (patient or doctor) by NRIC : `find`","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"Finds and displays information about the specified person.","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"Format: `find ic/NRIC`","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"* Finds the person with the specified `NRIC`","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"* Search is case-insensitive. e.g `s1234567a` will match with `S1234567A`.","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"StefanosAv"},"content":"* Only the NRIC is searched, additional input (e.g n/NAME) will be ignored.","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"StefanosAv"},"content":"* Only full NRIC entries can be searched.","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"* `find ic/S1234567A` returns the details for the person with NRIC number S1234567A.","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"thennant"},"content":"### Deleting a person by name : `delete`","lastModifiedDate":"2023-02-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"thennant"},"content":"Deletes the specified person from MediConnect.","lastModifiedDate":"2023-02-27"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"Format: `delete ic/NRIC`","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"* Deletes the person with the specified `NRIC`","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"* `delete ic/S9876543K` deletes the person with the NRIC number S9876543K in MediConnect.","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"thennant"},"content":"### Book appointment : `appointment`","lastModifiedDate":"2023-02-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":143,"author":{"gitId":"thennant"},"content":"Set an appointment date to the patient and doctor","lastModifiedDate":"2023-02-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":145,"author":{"gitId":"thennant"},"content":"Format: `appointment r/ROLE n/NAME d/Date`","lastModifiedDate":"2023-02-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":148,"author":{"gitId":"thennant"},"content":"* `appointment patient John 2020-10-12` attaches the date 12 October 2020 to the patient John","lastModifiedDate":"2023-02-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"StefanosAv"},"content":"Deletes all patients\u0027 and doctors\u0027 data from the system.","lastModifiedDate":"2023-03-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2023-03-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"* Data cannot be retrieved after `clear` is performed.","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"Example:","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"* `clear` permanently deletes all data stored in the system.","lastModifiedDate":"2023-03-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"Closes the `MediConnect` application.","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":165,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":167,"author":{"gitId":"thennant"},"content":"Examples:","lastModifiedDate":"2023-03-27"},{"lineNumber":168,"author":{"gitId":"thennant"},"content":"* `exit` closes the `MediConnect` application immediately.","lastModifiedDate":"2023-03-27"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":170,"author":{"gitId":"thennant"},"content":"### Requesting help : `help`","lastModifiedDate":"2023-03-27"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":172,"author":{"gitId":"StefanosAv"},"content":"Provides the user with a link to this user guide.","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":174,"author":{"gitId":"thennant"},"content":"Format: `help`","lastModifiedDate":"2023-03-27"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":176,"author":{"gitId":"thennant"},"content":"Examples:","lastModifiedDate":"2023-03-27"},{"lineNumber":177,"author":{"gitId":"StefanosAv"},"content":"* `help` opens a mini window with a url link of this user guide which can be copied by the user.","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"StefanosAv"},"content":"### Editing a person : `edit`","lastModifiedDate":"2023-03-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"StefanosAv"},"content":"Edits the details of an existing person stored in MediConnect.","lastModifiedDate":"2023-03-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"StefanosAv"},"content":"Format `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [ic/NRIC] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2023-03-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":185,"author":{"gitId":"StefanosAv"},"content":"* Edits the person at the specified INDEX. The index refers to the index number shown in the displayed person list. The *index must be a positive integer* 1, 2, 3, …​","lastModifiedDate":"2023-03-29"},{"lineNumber":186,"author":{"gitId":"StefanosAv"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2023-03-29"},{"lineNumber":187,"author":{"gitId":"StefanosAv"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2023-03-29"},{"lineNumber":188,"author":{"gitId":"StefanosAv"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2023-03-29"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"* Tags can be removed by typing t/ without specifying any tags after it.","lastModifiedDate":"2023-03-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":191,"author":{"gitId":"StefanosAv"},"content":"### Sending automated messages to patients `[coming in v2.0]`","lastModifiedDate":"2023-03-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"StefanosAv"},"content":"**1. What can I do if MediConnect.jar does not open when double-clicked?** \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":200,"author":{"gitId":"StefanosAv"},"content":"Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar MediConnect.jar` command to run the application.","lastModifiedDate":"2023-03-29"},{"lineNumber":201,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":202,"author":{"gitId":"StefanosAv"},"content":"**2. Do I need to manually store the data?** \u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":203,"author":{"gitId":"StefanosAv"},"content":"No, MediConnect data is saved on the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-03-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"StefanosAv"},"content":"| Action                 | Format, Examples                                                                                                                                                                                                                                                                                                                                         |","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"StefanosAv"},"content":"|------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-29"},{"lineNumber":211,"author":{"gitId":"StefanosAv"},"content":"| **Add Person**         | 1. `addPatient n/NAME p/PHONE_NUMBER e/EMAIL ic/NRIC a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `addPatient n/Ben Smith p/98353535 e/ben@abc.com ic/S1234567A a/1 Ben Street, block 13, #01-01` \u003cbr\u003e 2. `addDoctor n/NAME p/PHONE_NUMBER e/EMAIL ic/NRIC a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `addDoctor n/Sarah Tan p/99123456 e/sarah@abc.com ic/T7654321P a/Sarah Rd` |","lastModifiedDate":"2023-03-29"},{"lineNumber":212,"author":{"gitId":"StefanosAv"},"content":"| **Appointment**        |                                                                                                                                                                                                                                                                                                                                                          |","lastModifiedDate":"2023-03-29"},{"lineNumber":213,"author":{"gitId":"StefanosAv"},"content":"| **Clear**              | `clear`                                                                                                                                                                                                                                                                                                                                                  |","lastModifiedDate":"2023-03-29"},{"lineNumber":214,"author":{"gitId":"StefanosAv"},"content":"| **Delete Appointment** |                                                                                                                                                                                                                                                                                                                                                          |","lastModifiedDate":"2023-03-29"},{"lineNumber":215,"author":{"gitId":"StefanosAv"},"content":"| **Delete Person**      | `delete ic/NRIC`\u003cbr\u003e e.g., `delete ic/S1234567A`                                                                                                                                                                                                                                                                                                         |","lastModifiedDate":"2023-03-29"},{"lineNumber":216,"author":{"gitId":"StefanosAv"},"content":"| **Edit**               | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [ic/NRIC] [a/ADDRESS] [t/TAG]…​` \u003cbr\u003e e.g., `edit 2 n/James Lee e/jameslee@example.com`                                                                                                                                                                                                                  |","lastModifiedDate":"2023-03-29"},{"lineNumber":217,"author":{"gitId":"StefanosAv"},"content":"| **Exit**               | `exit`                                                                                                                                                                                                                                                                                                                                                   | ","lastModifiedDate":"2023-03-29"},{"lineNumber":218,"author":{"gitId":"StefanosAv"},"content":"| **Find**               | `find ic/NRIC`\u003cbr\u003e e.g., `find ic/S1234567A`                                                                                                                                                                                                                                                                                                             |","lastModifiedDate":"2023-03-29"},{"lineNumber":219,"author":{"gitId":"StefanosAv"},"content":"| **Help**               | `help`                                                                                                                                                                                                                                                                                                                                                   |","lastModifiedDate":"2023-03-29"},{"lineNumber":220,"author":{"gitId":"StefanosAv"},"content":"| **List**               | `list`                                                                                                                                                                                                                                                                                                                                                   |","lastModifiedDate":"2023-03-24"},{"lineNumber":221,"author":{"gitId":"StefanosAv"},"content":"| **Prescribe**          | `prescribe medication to patient`                                                                                                                                                                                                                                                                                                                        |","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"StefanosAv":82,"-":121,"thennant":18}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"thennant"},"content":"[-\u003e LogicManager : execute(\"delete ic/S9876543K\")","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"thennant"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete ic/S9876543K\")","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"thennant"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"S9876543K\")","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"DeleteCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"thennant"},"content":"DeleteCommand -\u003e Model : deletePerson(S9876543K)","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"-":65,"thennant":4}},{"path":"docs/team/mandykqh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"---","lastModifiedDate":"2023-02-24"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"layout: page","lastModifiedDate":"2023-02-24"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"title: Mandy Kaw\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"---","lastModifiedDate":"2023-02-24"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"### Project: MediConnect","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"MediConnect is a desktop address book application used for managing patients and doctors information.","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX.","lastModifiedDate":"2023-02-24"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-24"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-24"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dthennant\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-24"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"* **Project management**:","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"  * to be added soon","lastModifiedDate":"2023-02-24"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-24"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"  * to be added soon","lastModifiedDate":"2023-02-24"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-24"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"  * User Guide:","lastModifiedDate":"2023-02-24"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"    * Added documentation for the features","lastModifiedDate":"2023-02-24"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"  * Developer Guide:","lastModifiedDate":"2023-02-24"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    * Added documentation for use cases and glossary","lastModifiedDate":"2023-02-24"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"* **Community**:","lastModifiedDate":"2023-02-24"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"  * to be added soon","lastModifiedDate":"2023-02-24"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-02-24"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"* **Tools**:","lastModifiedDate":"2023-02-24"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"  * to be added soon","lastModifiedDate":"2023-02-24"}],"authorContributionMap":{"mandykqh":32}},{"path":"docs/team/peanutbutters93.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"---","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"layout: page","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"title: Low Jian Feng\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"---","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"* **To Be Added Soon**","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"PeanutButters93":12}},{"path":"docs/team/stefanosav.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"layout: page","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"StefanosAv"},"content":"title: Stefanos Avraam\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":" ---","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"### Project: MediConnect","lastModifiedDate":"2023-02-27"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"Overview:","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"MediConnect is a desktop address book application used for managing patients and doctors information.","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX.","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dstefanosav\u0026breakdown\u003dtrue\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2023-02-17\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"* **Project management**:","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"    * to be added soon","lastModifiedDate":"2023-02-27"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-27"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"    * to be added soon","lastModifiedDate":"2023-02-27"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-27"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"    * to be added soon","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"* **Community**:","lastModifiedDate":"2023-02-27"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"    * to be added soon","lastModifiedDate":"2023-02-27"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"* **Tools**:","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"    * to be added soon","lastModifiedDate":"2023-02-27"}],"authorContributionMap":{"StefanosAv":30}},{"path":"docs/team/thennant.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"thennant"},"content":"---","lastModifiedDate":"2023-02-20"},{"lineNumber":2,"author":{"gitId":"thennant"},"content":"layout: page","lastModifiedDate":"2023-02-20"},{"lineNumber":3,"author":{"gitId":"thennant"},"content":"title: Thennant Lim\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-20"},{"lineNumber":4,"author":{"gitId":"thennant"},"content":"---","lastModifiedDate":"2023-02-20"},{"lineNumber":5,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":6,"author":{"gitId":"thennant"},"content":"### Project: MediConnect","lastModifiedDate":"2023-02-20"},{"lineNumber":7,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":8,"author":{"gitId":"thennant"},"content":"MediConnect is a desktop address book application used for managing patients and doctors information. ","lastModifiedDate":"2023-02-20"},{"lineNumber":9,"author":{"gitId":"thennant"},"content":"The user interacts with it using a CLI, and it has a GUI created with JavaFX. ","lastModifiedDate":"2023-02-20"},{"lineNumber":10,"author":{"gitId":"thennant"},"content":"It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-20"},{"lineNumber":11,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":12,"author":{"gitId":"thennant"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-20"},{"lineNumber":13,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":14,"author":{"gitId":"thennant"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dthennant\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-20"},{"lineNumber":15,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":16,"author":{"gitId":"thennant"},"content":"* **Project management**:","lastModifiedDate":"2023-02-20"},{"lineNumber":17,"author":{"gitId":"thennant"},"content":"    * to be added soon","lastModifiedDate":"2023-02-20"},{"lineNumber":18,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":19,"author":{"gitId":"thennant"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-20"},{"lineNumber":20,"author":{"gitId":"thennant"},"content":"    * to be added soon","lastModifiedDate":"2023-02-20"},{"lineNumber":21,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":22,"author":{"gitId":"thennant"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-20"},{"lineNumber":23,"author":{"gitId":"thennant"},"content":"    * User Guide:","lastModifiedDate":"2023-02-20"},{"lineNumber":24,"author":{"gitId":"thennant"},"content":"        * Added documentation for the features ","lastModifiedDate":"2023-02-20"},{"lineNumber":25,"author":{"gitId":"thennant"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-20"},{"lineNumber":26,"author":{"gitId":"thennant"},"content":"        * Added documentation for use cases and glossary","lastModifiedDate":"2023-02-20"},{"lineNumber":27,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":28,"author":{"gitId":"thennant"},"content":"* **Community**:","lastModifiedDate":"2023-02-20"},{"lineNumber":29,"author":{"gitId":"thennant"},"content":"    * to be added soon","lastModifiedDate":"2023-02-20"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"* **Tools**:","lastModifiedDate":"2023-02-20"},{"lineNumber":32,"author":{"gitId":"thennant"},"content":"    * to be added soon","lastModifiedDate":"2023-02-20"},{"lineNumber":33,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-02-20"}],"authorContributionMap":{"thennant":33}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"thennant"},"content":"    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The person cannot be found\";","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"thennant"},"content":"    public static final String MESSAGE_INVALID_PERSON_NAME \u003d \"The person you are looking for cannot be found, \"","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"thennant"},"content":"            + \"below is a list of people with similar names\";","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":12,"thennant":3}},{"path":"src/main/java/seedu/address/logic/commands/AddDoctorCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"public class AddDoctorCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"    public static final String COMMAND_WORD \u003d \"addDoctor\";","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a doctor to the doctors\u0027 list. \"","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \\n\"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_NRIC + \"S1234567T \"","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \";","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New doctor added: %1$s\";","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the doctors\u0027 list\";","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"    private final Doctor toAdd;","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"    public AddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"        toAdd \u003d doctor;","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        if (model.hasDoctor(toAdd)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"StefanosAv"},"content":"        model.addDoctor(toAdd);","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"StefanosAv"},"content":"                || (other instanceof AddDoctorCommand // instanceof handles nulls","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 toAdd.equals(((AddDoctorCommand) other).toAdd));","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"StefanosAv":19,"-":47}},{"path":"src/main/java/seedu/address/logic/commands/AddPatientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Adds a person to the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"public class AddPatientCommand extends Command {","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"    public static final String COMMAND_WORD \u003d \"addPatient\";","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to the patients\u0027 list. \"","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":30,"author":{"gitId":"PeanutButters93"},"content":"            + \"[\" + PREFIX_MEDICATION + \"MEDICATION ]\"","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"            + PREFIX_NRIC + \"S1234567T \"","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"            + PREFIX_MEDICATION + \"Paracetamol \"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This patient already exists in the patients\u0027 list\";","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"    private final Patient toAdd;","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"    public AddPatientCommand(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"StefanosAv"},"content":"        if (model.hasPatient(toAdd)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"StefanosAv"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"                || (other instanceof AddPatientCommand // instanceof handles nulls","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 toAdd.equals(((AddPatientCommand) other).toAdd));","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"PeanutButters93":3,"StefanosAv":17,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/AppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import java.util.List;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":" * Creates an appointment.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"public class AppointmentCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"    public static final String COMMAND_WORD \u003d \"appointment\";","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_USAGE \u003d \"\";","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New appointment booked: %1$s\"; // todo patient name","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"This appointment slot is already booked\";","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_INVALID_PERSON \u003d \"This patient that you want to schedule an appointment for\"","lastModifiedDate":"2023-03-26"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"            + \" does not exist\";","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_INVALID_DOCTOR \u003d \"This doctor that you want to schedule an appointment with\"","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"            + \" does not exist\";","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"    private final Appointment appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"     * Creates an AppointmentCommand to add the specified {@code Person}","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"    public AppointmentCommand(Appointment appointment) {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"        this.appointment \u003d appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"        if (!model.hasPatientByNric(appointment.getPatientNric())) {","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"        if (!model.hasDrByNric(appointment.getDrNric())) {","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"            throw new CommandException(MESSAGE_INVALID_DOCTOR);","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"        if (model.hasAppointment(appointment)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"        Nric patientNricAppointment \u003d appointment.getPatientNric();","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"        List\u003cPerson\u003e persons \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"        Patient appointmentPatient \u003d null;","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"        Doctor appointmentDoctor \u003d null;","lastModifiedDate":"2023-03-26"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"        for (Person person : persons) {","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"            if (person.isDoctor()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"                boolean isMatchDr \u003d person.getNric().equals(appointment.getDrNric());","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"                if (isMatchDr) {","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"                    appointmentDoctor \u003d (Doctor) person;","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"                }","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"            if (person.isPatient()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"                Nric otherPatientNricAppointment \u003d person.getNric();","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"                if (patientNricAppointment.equals(otherPatientNricAppointment)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"                    appointmentPatient \u003d (Patient) person;","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"                }","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"            model.bookAppointment(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"            appointmentPatient.addPatientAppointment(appointment);","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"            appointmentDoctor.addPatientAppointment(appointment);","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"        } catch (DuplicateAppointmentException e) {","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-03-18"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"        Patient editedPatient \u003d new Patient(appointmentPatient.getName(), appointmentPatient.getPhone(),","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"                appointmentPatient.getEmail(), appointmentPatient.getNric(), appointmentPatient.getAddress(),","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"PeanutButters93"},"content":"                appointmentPatient.getMedication(), appointmentPatient.getTags(),","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"StefanosAv"},"content":"                appointmentPatient.getPatientAppointments(), appointmentPatient.getRole());","lastModifiedDate":"2023-03-19"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"        Doctor editedDoctor \u003d new Doctor(appointmentDoctor.getName(), appointmentDoctor.getPhone(),","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"                appointmentDoctor.getEmail(), appointmentDoctor.getNric(), appointmentDoctor.getAddress(),","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"                appointmentDoctor.getTags(),","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"                appointmentDoctor.getPatientAppointments(), appointmentDoctor.getRole());","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"        model.setPerson(appointmentPatient, editedPatient);","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"mandykqh"},"content":"        model.setPerson(appointmentDoctor, editedDoctor);","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":98,"author":{"gitId":"mandykqh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"                + appointmentDoctor.drAppointmentsToString(), appointment));","lastModifiedDate":"2023-03-26"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"PeanutButters93":1,"StefanosAv":1,"mandykqh":101}},{"path":"src/main/java/seedu/address/logic/commands/DeleteAppointmentCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import java.util.List;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":" * Deletes an appointment","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"public class DeleteAppointmentCommand extends Command {","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"    public static final String COMMAND_WORD \u003d \"deleteAppointment\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"        + \": Deletes the appointment of the patient identified \"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        + \"by the NRIC and index number of the \"","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"        + \"corresponding patient\u0027s appointment listing. \"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"        + \"\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"        + \"ic/ [NRIC]\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"        + \"ic/ S1234567Z\";","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Appointment deleted: %1$s\";","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Appointment: %2$s\";","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Specified index is invalid\";","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_INVALID_PATIENT \u003d \"This patient that you want to delete an appointment for\"","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"            + \" does not exist\";","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"    private final Index index;","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"     * Creates a DeleteAppointmentCommand to delete the specified {@code Appointment}","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"    public DeleteAppointmentCommand(Index index, Nric nric) {","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"        requireAllNonNull(index, nric);","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"        List\u003cPerson\u003e persons \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        List\u003cAppointment\u003e appointments \u003d model.getAddressBook().getAppointmentList();","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"        Patient appointmentPatient \u003d null;","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"        for (Person p : persons) {","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"            if (p.getNric().equals(nric)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"                if (!p.isPatient()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"                    throw new CommandException(MESSAGE_INVALID_PATIENT);","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"                }","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"                appointmentPatient \u003d (Patient) p;","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"                break;","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"        int patientApptSize \u003d appointmentPatient.getAppointmentSize();","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"        int ind \u003d index.getZeroBased();","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"        if (patientApptSize \u003c\u003d 0 || ind \u003e\u003d patientApptSize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"            throw new CommandException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"        Appointment appointmentToDeletePatient \u003d appointmentPatient.deletePatientAppointment(ind);","lastModifiedDate":"2023-03-27"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"        Nric appointmentToDeleteDrNric \u003d appointmentToDeletePatient.getDrNric();","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"        Doctor appointmentToDeleteDr \u003d null;","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"        for (Person pp : persons) {","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"            if (pp.getNric().equals(appointmentToDeleteDrNric)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"                appointmentToDeleteDr \u003d (Doctor) pp;","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"        Appointment toDeleteDrAppmt \u003d null;","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"        for (Appointment a : appointmentToDeleteDr.getPatientAppointments()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"            if (a.isSameAppointment(appointmentToDeletePatient)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"                toDeleteDrAppmt \u003d a;","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"        appointmentToDeleteDr.deletePatientAppointment(toDeleteDrAppmt);","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"        /*","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"        return new CommandResult(String.valueOf(ind) + \" \"","lastModifiedDate":"2023-03-27"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"                + appointmentPatient.getPatientAppointments().get(ind).toString()","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"        + \"\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"        + \"patientapptsize: \" + String.valueOf(patientApptSize) +\"\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":96,"author":{"gitId":"mandykqh"},"content":"                + appointmentToDelete.toString());","lastModifiedDate":"2023-03-27"},{"lineNumber":97,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":98,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":99,"author":{"gitId":"mandykqh"},"content":"        if (patientApptSize \u003c\u003d 0 || ind \u003e patientApptSize) {","lastModifiedDate":"2023-03-27"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"            throw new CommandException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"        Appointment appointmentToDelete \u003d appointmentPatient.deletePatientAppointment(ind);","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"        // appointmentDoctor.deletePatientAppointment(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"        model.deleteAppointment(appointmentToDelete);","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"        */","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"        Patient editedPatient \u003d new Patient(appointmentPatient.getName(), appointmentPatient.getPhone(),","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"                appointmentPatient.getEmail(), appointmentPatient.getNric(), appointmentPatient.getAddress(),","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"                appointmentPatient.getMedication(), appointmentPatient.getTags(),","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"mandykqh"},"content":"                appointmentPatient.getPatientAppointments(), appointmentPatient.getRole());","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"        Doctor editedDoctor \u003d new Doctor(appointmentToDeleteDr.getName(), appointmentToDeleteDr.getPhone(),","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"mandykqh"},"content":"                appointmentToDeleteDr.getEmail(), appointmentToDeleteDr.getNric(), appointmentToDeleteDr.getAddress(),","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"mandykqh"},"content":"                appointmentToDeleteDr.getTags(),","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"mandykqh"},"content":"                appointmentToDeleteDr.getPatientAppointments(), appointmentToDeleteDr.getRole());","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"mandykqh"},"content":"        model.setPatient(appointmentPatient, editedPatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"mandykqh"},"content":"        model.setDoctor(appointmentToDeleteDr, editedDoctor);","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"mandykqh"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"mandykqh"},"content":"        model.deleteAppointment(appointmentToDeletePatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"mandykqh"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, appointmentToDeletePatient));","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":123,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":124,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":125,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-27"},{"lineNumber":126,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":127,"author":{"gitId":"mandykqh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"mandykqh"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"mandykqh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":133,"author":{"gitId":"mandykqh"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"mandykqh"},"content":"        if (!(other instanceof DeleteAppointmentCommand)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"mandykqh"},"content":"            return false;","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":137,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"        // state check","lastModifiedDate":"2023-03-27"},{"lineNumber":139,"author":{"gitId":"mandykqh"},"content":"        DeleteAppointmentCommand e \u003d (DeleteAppointmentCommand) other;","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"mandykqh"},"content":"        return index.equals(e.index)","lastModifiedDate":"2023-03-27"},{"lineNumber":141,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 appointment.equals(e.appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":142,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":143,"author":{"gitId":"mandykqh"},"content":"    */","lastModifiedDate":"2023-03-27"},{"lineNumber":144,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"mandykqh":144}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"thennant"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"thennant"},"content":" * Deletes a person identified using the displayed name from the address book.","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"thennant"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"thennant"},"content":"            + \": Deletes the person identified by their name in the displayed person list.\\n\"","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"thennant"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"thennant"},"content":"            + PREFIX_NRIC + \"NRIC\\n\"","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"thennant"},"content":"            + \"Example: \" + COMMAND_WORD + \" ic/S9876543J\";","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"thennant"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"     * Constructor for DeleteCommand","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"thennant"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"thennant"},"content":"     * @param nric person nric","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"thennant"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"thennant"},"content":"    public DeleteCommand(Nric nric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"thennant"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"thennant"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"thennant"},"content":"        List\u003cPerson\u003e personsToDelete \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"thennant"},"content":"        if (personsToDelete.isEmpty()) {","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"thennant"},"content":"            throw new CommandException(Messages.MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"thennant"},"content":"        } else {","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"thennant"},"content":"            int index \u003d 0;","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"thennant"},"content":"            for (int i \u003d 0; i \u003c personsToDelete.size(); i++) {","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"thennant"},"content":"                if (personsToDelete.get(i).getNric().equals(nric)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"thennant"},"content":"                    index \u003d i;","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"thennant"},"content":"                    break;","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"thennant"},"content":"                }","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"thennant"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"thennant"},"content":"            if (personsToDelete.get(index).getNric().equals(this.nric)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"thennant"},"content":"                Person deletedPerson \u003d personsToDelete.get(index);","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"thennant"},"content":"                model.deletePerson(deletedPerson);","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"thennant"},"content":"                return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson.getName()));","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"thennant"},"content":"            } else {","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"thennant"},"content":"                throw new CommandException(Messages.MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"thennant"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"thennant"},"content":"                \u0026\u0026 nric.equals(((DeleteCommand) other).nric)); // state check","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":36,"thennant":36}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"            + \"[\" + PREFIX_NRIC + \"NRIC] \"","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"            + \"[\" + PREFIX_MEDICATION + \"MEDICATION] \"","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"thennant"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_NAME);","lastModifiedDate":"2023-03-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"StefanosAv"},"content":"        if (personToEdit.getRole().toString().equals(\"Doctor\")) {","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"StefanosAv"},"content":"            model.setDoctor((Doctor) personToEdit, (Doctor) editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"        } else if (personToEdit.getRole().toString().equals(\"Patient\")) {","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"            model.setPatient((Patient) personToEdit, (Patient) editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"        } else {","lastModifiedDate":"2023-03-19"},{"lineNumber":100,"author":{"gitId":"StefanosAv"},"content":"            throw new CommandException(MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-19"},{"lineNumber":101,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":103,"author":{"gitId":"StefanosAv"},"content":"        //model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2016-12-26"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2016-12-26"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2018-01-10"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2016-12-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"        Nric updatedNric \u003d editPersonDescriptor.getNric().orElse(personToEdit.getNric());","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"        Role role \u003d personToEdit.getRole();","lastModifiedDate":"2023-03-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"mandykqh"},"content":"        if (personToEdit.isPatient()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":124,"author":{"gitId":"mandykqh"},"content":"            Patient patientToEdit \u003d (Patient) personToEdit;","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"PeanutButters93"},"content":"            Medication updatedMedication \u003d editPersonDescriptor.getMedication().orElse(patientToEdit.getMedication());","lastModifiedDate":"2023-03-18"},{"lineNumber":126,"author":{"gitId":"mandykqh"},"content":"            ArrayList\u003cAppointment\u003e patientAppointments \u003d patientToEdit.getPatientAppointments();","lastModifiedDate":"2023-03-16"},{"lineNumber":127,"author":{"gitId":"PeanutButters93"},"content":"            return new Patient(updatedName, updatedPhone, updatedEmail, updatedNric, updatedAddress, updatedMedication,","lastModifiedDate":"2023-03-18"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"                    updatedTags, patientAppointments, role);","lastModifiedDate":"2023-03-19"},{"lineNumber":129,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":131,"author":{"gitId":"mandykqh"},"content":"        if (personToEdit.isDoctor()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":132,"author":{"gitId":"mandykqh"},"content":"            Doctor doctorToEdit \u003d (Doctor) personToEdit;","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"mandykqh"},"content":"            ArrayList\u003cAppointment\u003e patientAppointments \u003d doctorToEdit.getPatientAppointments();","lastModifiedDate":"2023-03-18"},{"lineNumber":134,"author":{"gitId":"mandykqh"},"content":"            return new Doctor(updatedName, updatedPhone, updatedEmail, updatedNric, updatedAddress, updatedTags,","lastModifiedDate":"2023-03-18"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"                    patientAppointments, role);","lastModifiedDate":"2023-03-19"},{"lineNumber":136,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":137,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"        return null; // should not return","lastModifiedDate":"2023-03-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"StefanosAv"},"content":"        private Nric nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"PeanutButters93"},"content":"        private Medication medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":171,"author":{"gitId":"mandykqh"},"content":"        private ArrayList\u003cAppointment\u003e appointments;","lastModifiedDate":"2023-03-18"},{"lineNumber":172,"author":{"gitId":"StefanosAv"},"content":"        private Role role;","lastModifiedDate":"2023-03-16"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor() {}","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":177,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":178,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":179,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":182,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":184,"author":{"gitId":"StefanosAv"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":186,"author":{"gitId":"PeanutButters93"},"content":"            setMedication(toCopy.medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":188,"author":{"gitId":"mandykqh"},"content":"            setAppointments(toCopy.appointments);","lastModifiedDate":"2023-03-18"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"            setRole(toCopy.role);","lastModifiedDate":"2023-03-16"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":193,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":194,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":219,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":220,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":231,"author":{"gitId":"PeanutButters93"},"content":"        public void setMedication(Medication medication) {","lastModifiedDate":"2023-03-14"},{"lineNumber":232,"author":{"gitId":"PeanutButters93"},"content":"            this.medication \u003d medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":233,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":234,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":235,"author":{"gitId":"PeanutButters93"},"content":"        public Optional\u003cMedication\u003e getMedication() {","lastModifiedDate":"2023-03-14"},{"lineNumber":236,"author":{"gitId":"PeanutButters93"},"content":"            return Optional.ofNullable(medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":237,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":238,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":239,"author":{"gitId":"StefanosAv"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2023-03-06"},{"lineNumber":240,"author":{"gitId":"StefanosAv"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":241,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":242,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":243,"author":{"gitId":"StefanosAv"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2023-03-06"},{"lineNumber":244,"author":{"gitId":"StefanosAv"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":245,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":246,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":247,"author":{"gitId":"StefanosAv"},"content":"        public void setRole(Role role) {","lastModifiedDate":"2023-03-16"},{"lineNumber":248,"author":{"gitId":"StefanosAv"},"content":"            this.role \u003d role;","lastModifiedDate":"2023-03-16"},{"lineNumber":249,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":250,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":252,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":253,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":254,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":256,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":259,"author":{"gitId":"mandykqh"},"content":"        /**","lastModifiedDate":"2023-03-18"},{"lineNumber":260,"author":{"gitId":"mandykqh"},"content":"         * Sets {@code appointments} to this object\u0027s {@code appointments}.","lastModifiedDate":"2023-03-18"},{"lineNumber":261,"author":{"gitId":"mandykqh"},"content":"         * A defensive copy of {@code appointments} is used internally.","lastModifiedDate":"2023-03-18"},{"lineNumber":262,"author":{"gitId":"mandykqh"},"content":"         */","lastModifiedDate":"2023-03-18"},{"lineNumber":263,"author":{"gitId":"mandykqh"},"content":"        public void setAppointments(ArrayList\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-03-18"},{"lineNumber":264,"author":{"gitId":"mandykqh"},"content":"            this.appointments \u003d (appointments !\u003d null) ? new ArrayList\u003c\u003e(appointments) : null;","lastModifiedDate":"2023-03-18"},{"lineNumber":265,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":266,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":267,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":268,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":269,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":270,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":271,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":276,"author":{"gitId":"mandykqh"},"content":"        /**","lastModifiedDate":"2023-03-18"},{"lineNumber":277,"author":{"gitId":"mandykqh"},"content":"         * Returns an unmodifiable appointment list, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2023-03-18"},{"lineNumber":278,"author":{"gitId":"mandykqh"},"content":"         * if modification is attempted.","lastModifiedDate":"2023-03-18"},{"lineNumber":279,"author":{"gitId":"mandykqh"},"content":"         * Returns {@code Optional#empty()} if {@code appointments} is null.","lastModifiedDate":"2023-03-18"},{"lineNumber":280,"author":{"gitId":"mandykqh"},"content":"         */","lastModifiedDate":"2023-03-18"},{"lineNumber":281,"author":{"gitId":"mandykqh"},"content":"        public Optional\u003cArrayList\u003cAppointment\u003e\u003e getAppointments() {","lastModifiedDate":"2023-03-18"},{"lineNumber":282,"author":{"gitId":"mandykqh"},"content":"            return (appointments !\u003d null)","lastModifiedDate":"2023-03-18"},{"lineNumber":283,"author":{"gitId":"mandykqh"},"content":"                    ? Optional.of((ArrayList\u003cAppointment\u003e) Collections.unmodifiableList(appointments))","lastModifiedDate":"2023-03-18"},{"lineNumber":284,"author":{"gitId":"mandykqh"},"content":"                    : Optional.empty();","lastModifiedDate":"2023-03-18"},{"lineNumber":285,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":286,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":287,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":288,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":289,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":290,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":291,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":292,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":294,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":295,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":296,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":299,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":300,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":302,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":305,"author":{"gitId":"StefanosAv"},"content":"                    \u0026\u0026 getNric().equals(e.getNric())","lastModifiedDate":"2023-03-06"},{"lineNumber":306,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":307,"author":{"gitId":"PeanutButters93"},"content":"                    \u0026\u0026 getMedication().equals(e.getMedication())","lastModifiedDate":"2023-03-14"},{"lineNumber":308,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"PeanutButters93":16,"StefanosAv":36,"mandykqh":34,"-":224,"thennant":1}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":" * Finds and displays the person in address book with the given NRIC.","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the person with the given NRIC.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"            + \"Parameters: ic/NRIC \\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"            + \"Example: \" + COMMAND_WORD + \" ic/S1234567A\";","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"    public FindCommand(Nric nric) {","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"        List\u003cPerson\u003e personsToFind \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        int index \u003d -1;","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"        for (int i \u003d 0; i \u003c personsToFind.size(); i++) {","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"            if (personsToFind.get(i).getNric().equals(nric)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"                index \u003d i;","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"                break;","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"        if (index !\u003d -1) {","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"            model.updateFilteredPersonListNric(nric);","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"            return new CommandResult(\"This is the person you are looking for:\");","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"        } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"            throw new CommandException(Messages.MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 nric.equals(((FindCommand) other).nric)); // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"StefanosAv":30,"-":27}},{"path":"src/main/java/seedu/address/logic/commands/PrescribeCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import java.util.List;","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":" * Changes the medication of an existing person in the address book.","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"PeanutButters93"},"content":"public class PrescribeCommand extends Command {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"    public static final String COMMAND_WORD \u003d \"prescribe\";","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum-reused","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    //Reused from https://nus-cs2103-ay2223s2.github.io/tp/tutorials/AddRemark.html","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + \": Changes current medication information of the person identified \"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"Existing medication information will be overwritten by input.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"m/ [MEDICATION]\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + \"m/ paracetamol\";","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_PRESCRIBE_SUCCESS \u003d \"Added medication to Person: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PRESCRIBE_SUCCESS \u003d \"Removed medication from Person: %1$s\";","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SELECTED_DOCTOR_FAILURE \u003d \"You have selected a doctor, this command is only \"","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            + \"applicable for doctors.\";","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public final Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final Medication medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param medication to be changed to","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public PrescribeCommand(Index index, Medication medication) {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.medication \u003d medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum-reused","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    //Reused from https://nus-cs2103-ay2223s2.github.io/tp/tutorials/AddRemark.html","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (personToEdit.isDoctor()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_SELECTED_DOCTOR_FAILURE);","lastModifiedDate":"2023-03-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Patient patientToEdit \u003d (Patient) personToEdit;","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Patient editedPerson \u003d new Patient(","lastModifiedDate":"2023-03-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(), patientToEdit.getNric(),","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                patientToEdit.getAddress(), medication, patientToEdit.getTags(), patientToEdit.getPatientAppointments(),","lastModifiedDate":"2023-03-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                patientToEdit.getRole());","lastModifiedDate":"2023-03-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * the medication is added to or removed from","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        String message \u003d !medication.value.isEmpty() ? MESSAGE_ADD_PRESCRIBE_SUCCESS : MESSAGE_DELETE_PRESCRIBE_SUCCESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(other instanceof PrescribeCommand)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        PrescribeCommand e \u003d (PrescribeCommand) other;","lastModifiedDate":"2023-03-16"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"                \u0026\u0026 medication.equals(e.medication);","lastModifiedDate":"2023-03-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"PeanutButters93":21,"-":90}},{"path":"src/main/java/seedu/address/logic/parser/AddDoctorCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":" * Parses input arguments and creates a new AddDoctorCommand object","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"public class AddDoctorCommandParser implements Parser\u003cAddDoctorCommand\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"     * Parses the given {@code String} of arguments in the context of the AddDoctorCommand","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"     * and returns an AddDoctorCommand object for execution.","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"    public AddDoctorCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"                        PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_NRIC, PREFIX_EMAIL)","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        Role role \u003d new Role(\"Doctor\");","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"        Doctor doctor \u003d new Doctor(name, phone, email, nric, address, tagList, new ArrayList\u003c\u003e(), role);","lastModifiedDate":"2023-03-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"StefanosAv"},"content":"        return new AddDoctorCommand(doctor);","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"StefanosAv":19,"mandykqh":1,"-":48}},{"path":"src/main/java/seedu/address/logic/parser/AddPatientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-03-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-03-17"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-03-17"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":" * Parses input arguments and creates a new AddPatientCommand object","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"public class AddPatientCommandParser implements Parser\u003cAddPatientCommand\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"     * Parses the given {@code String} of arguments in the context of the AddPatientCommand","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"     * and returns an AddPatientCommand object for execution.","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"    public AddPatientCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"                        PREFIX_ADDRESS, PREFIX_MEDICATION, PREFIX_TAG);","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_NRIC, PREFIX_EMAIL)","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"        Medication medication \u003d ParserUtil.parseMedication(argMultimap.getValue(PREFIX_MEDICATION).orElse(\"\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"        Role role \u003d new Role(\"Patient\");","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"        Patient patient \u003d new Patient(name, phone, email, nric, address, medication, tagList, new ArrayList\u003c\u003e(), role);","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"        return new AddPatientCommand(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"PeanutButters93":4,"StefanosAv":19,"mandykqh":1,"-":47}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.AppointmentCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.PrescribeCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        case AddPatientCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"            return new AddPatientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        case AddDoctorCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"            return new AddDoctorCommandParser().parse(arguments);","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":78,"author":{"gitId":"PeanutButters93"},"content":"        case PrescribeCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"PeanutButters93"},"content":"            return new PrescribeCommandParser().parse(arguments);","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"        case AppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"            return new AppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"        case DeleteAppointmentCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"            return new DeleteAppointmentCommandParser().parse(arguments);","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"PeanutButters93":3,"StefanosAv":5,"mandykqh":11,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/AppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING;","lastModifiedDate":"2023-03-26"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_DR_NRIC;","lastModifiedDate":"2023-03-26"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-26"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.AppointmentCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Booking;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":" * Parses input arguments and creates a new AppointmentCommand object","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"public class AppointmentCommandParser implements Parser\u003cAppointmentCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"     * Parses the given {@code String} of arguments in the context of the AppointmentCommand","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"     * and returns an AppointmentCommand object for execution.","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    public AppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NRIC, PREFIX_BOOKING, PREFIX_DR_NRIC);","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NRIC, PREFIX_BOOKING, PREFIX_DR_NRIC)","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AppointmentCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"        Nric patientNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"        Booking booking \u003d ParserUtil.parseBooking(argMultimap.getValue(PREFIX_BOOKING).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"        Nric drNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_DR_NRIC).get());","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"        Appointment appointment \u003d new Appointment(patientNric, booking, drNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"        return new AppointmentCommand(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"mandykqh":51}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"    public static final Prefix PREFIX_MEDICATION \u003d new Prefix(\"m/\");","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"ic/\");","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"    public static final Prefix PREFIX_BOOKING \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"    public static final Prefix PREFIX_DR_NRIC \u003d new Prefix(\"dric/\");","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"PeanutButters93":1,"StefanosAv":1,"mandykqh":2,"-":14}},{"path":"src/main/java/seedu/address/logic/parser/DeleteAppointmentCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.commands.DeleteAppointmentCommand;","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":" * Parses input arguments and creates a new AppointmentCommand object","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"public class DeleteAppointmentCommandParser implements Parser\u003cDeleteAppointmentCommand\u003e {","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteAppointmentCommand","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"     * and returns an DeleteAppointmentCommand object for execution.","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"    public DeleteAppointmentCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NRIC);","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        Index index;","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"        } catch (ParseException ive) {","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"                    DeleteAppointmentCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"            // todo handle 0 index with specific error message","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"        Nric patientNric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"        return new DeleteAppointmentCommand(index, patientNric);","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"mandykqh":41}},{"path":"src/main/java/seedu/address/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"thennant"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"thennant"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"thennant"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"thennant"},"content":"                throw new ParseException(","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"thennant"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"thennant"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"thennant"},"content":"            ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"thennant"},"content":"                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE,","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"thennant"},"content":"                            PREFIX_EMAIL, PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"thennant"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"thennant"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"thennant"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"thennant"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"thennant"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"thennant"},"content":"            return new DeleteCommand(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"thennant"},"content":"            throw pe;","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"thennant"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"thennant"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"-":26,"thennant":31}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"                        PREFIX_ADDRESS, PREFIX_MEDICATION, PREFIX_TAG);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"        if (argMultimap.getValue(PREFIX_NRIC).isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"StefanosAv"},"content":"            editPersonDescriptor.setNric(ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"PeanutButters93"},"content":"        if (argMultimap.getValue(PREFIX_MEDICATION).isPresent()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"PeanutButters93"},"content":"            editPersonDescriptor.setMedication(ParserUtil.parseMedication(argMultimap.getValue(PREFIX_MEDICATION)","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"PeanutButters93"},"content":"                    .get()));","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2017-06-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"PeanutButters93":6,"StefanosAv":5,"-":81}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING;","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"            if (args.isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"            ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"                    ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"                            PREFIX_NRIC, PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BOOKING, PREFIX_MEDICATION);","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"            if (!arePrefixesPresent(argMultimap, PREFIX_NRIC)","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"                    || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"            Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get().toUpperCase());","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"            return new FindCommand(nric);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"            throw pe;","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"StefanosAv":26,"-":30}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Booking;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"StefanosAv"},"content":"     * Parses a {@code String nric} into an {@code Nric}.","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"StefanosAv"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"StefanosAv"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"StefanosAv"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"        String trimmedNric \u003d nric.trim();","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"StefanosAv"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"StefanosAv"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"        return new Nric(trimmedNric);","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"PeanutButters93"},"content":"     * Parses a {@code String medication} into a {@code Medication}.","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"PeanutButters93"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"PeanutButters93"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"PeanutButters93"},"content":"     * @throws ParseException if the given {@code medication} is invalid.","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"PeanutButters93"},"content":"    public static Medication parseMedication(String medication) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"PeanutButters93"},"content":"        requireNonNull(medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"PeanutButters93"},"content":"        String trimmedMedication \u003d medication.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"PeanutButters93"},"content":"        if (!Medication.isValidMedication(trimmedMedication)) {","lastModifiedDate":"2023-03-15"},{"lineNumber":126,"author":{"gitId":"PeanutButters93"},"content":"            throw new ParseException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"PeanutButters93"},"content":"        return new Medication(trimmedMedication);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":157,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":159,"author":{"gitId":"mandykqh"},"content":"     * Parses {@code String booking} into a {@code Booking}.","lastModifiedDate":"2023-03-18"},{"lineNumber":160,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":161,"author":{"gitId":"mandykqh"},"content":"    public static Booking parseBooking(String booking) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(booking);","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"mandykqh"},"content":"        String trimmedBooking \u003d booking.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"mandykqh"},"content":"        if (!Booking.isValidBookingFormat(trimmedBooking)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"mandykqh"},"content":"            throw new ParseException(Booking.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"mandykqh"},"content":"        return new Booking(trimmedBooking);","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"PeanutButters93":16,"StefanosAv":16,"mandykqh":14,"-":124}},{"path":"src/main/java/seedu/address/logic/parser/PrescribeCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-17"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-17"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.logic.commands.PrescribeCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":" * Parses input arguments and creates a new PrescribeCommand object","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":"public class PrescribeCommandParser implements Parser\u003cPrescribeCommand\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum-reused","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    //Reused from https://nus-cs2103-ay2223s2.github.io/tp/tutorials/AddRemark.html","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the PrescribeCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * and returns an PrescribeCommand object for execution.","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public PrescribeCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_MEDICATION);","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrescribeCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Medication medication \u003d ParserUtil.parseMedication(argMultimap.getValue(PREFIX_MEDICATION).orElse(\"\"));","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new PrescribeCommand(index, medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    //@@author Jeffry Lum","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"PeanutButters93":17,"-":24}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.HospitalAppointmentList;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"    private final HospitalAppointmentList appointments;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"        appointments \u003d new HospitalAppointmentList();","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"        this.appointments.setAppointments(appointments);","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"        setAppointments(newData.getAppointmentList());","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"     * Returns true if a person with the same identity as {@code person} by NRIC exists in the address book.","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"    public boolean hasPersonByNric(Nric nric) {","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"        return persons.containsByNric(nric);","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"        return persons.contains(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} exists in the address book.","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"StefanosAv"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"StefanosAv"},"content":"        return persons.contains(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"     * Adds a patient to the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"     * The patient must not already exist in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"        persons.add(p);","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"StefanosAv"},"content":"     * Adds a doctor to the address book.","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"     * The doctor must not already exist in the address book.","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"StefanosAv"},"content":"    public void addDoctor(Doctor p) {","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"StefanosAv"},"content":"        persons.add(p);","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":145,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":146,"author":{"gitId":"mandykqh"},"content":"     * Replaces the given appointment {@code target} in the list with {@code editedAppointment}.","lastModifiedDate":"2023-03-21"},{"lineNumber":147,"author":{"gitId":"mandykqh"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-03-21"},{"lineNumber":148,"author":{"gitId":"mandykqh"},"content":"     * The appointment identity of {@code editedAppointment} must not be the same as","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"mandykqh"},"content":"     * another existing appointment in the address book.","lastModifiedDate":"2023-03-21"},{"lineNumber":150,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":151,"author":{"gitId":"mandykqh"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(editedAppointment);","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"mandykqh"},"content":"        appointments.setAppointment(target, editedAppointment);","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"     * Replaces the given doctor {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2023-03-19"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing doctor in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"    public void setDoctor(Doctor target, Doctor editedPerson) {","lastModifiedDate":"2023-03-19"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":166,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":167,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":168,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":169,"author":{"gitId":"StefanosAv"},"content":"     * Replaces the given patient {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2023-03-19"},{"lineNumber":170,"author":{"gitId":"StefanosAv"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":171,"author":{"gitId":"StefanosAv"},"content":"     * The patient identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":172,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":173,"author":{"gitId":"StefanosAv"},"content":"    public void setPatient(Patient target, Patient editedPerson) {","lastModifiedDate":"2023-03-19"},{"lineNumber":174,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":175,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":176,"author":{"gitId":"StefanosAv"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":177,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":178,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":180,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":181,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"mandykqh"},"content":"    // appointment-level operations","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":189,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":190,"author":{"gitId":"mandykqh"},"content":"     * Returns true if {@code Appointment} exists in the address book.","lastModifiedDate":"2023-03-18"},{"lineNumber":191,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":192,"author":{"gitId":"mandykqh"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":194,"author":{"gitId":"mandykqh"},"content":"        return appointments.isADuplicateAppointment(appointment);","lastModifiedDate":"2023-03-14"},{"lineNumber":195,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":197,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":198,"author":{"gitId":"mandykqh"},"content":"     * Books appointment.","lastModifiedDate":"2023-03-18"},{"lineNumber":199,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-18"},{"lineNumber":200,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":201,"author":{"gitId":"mandykqh"},"content":"    public void bookAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"mandykqh"},"content":"        appointments.bookAppointment(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":204,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":205,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"mandykqh"},"content":"     * Deletes appointment.","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"mandykqh"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"        appointments.deleteAppointment(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":226,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":227,"author":{"gitId":"mandykqh"},"content":"    public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2023-03-21"},{"lineNumber":228,"author":{"gitId":"mandykqh"},"content":"        return appointments.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-21"},{"lineNumber":229,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":230,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":234,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":235,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons))","lastModifiedDate":"2023-03-21"},{"lineNumber":236,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 appointments.equals(((AddressBook) other).appointments);","lastModifiedDate":"2023-03-21"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":243,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":244,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":245,"author":{"gitId":"mandykqh"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} by NRIC exists in the address book.","lastModifiedDate":"2023-03-21"},{"lineNumber":246,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":247,"author":{"gitId":"mandykqh"},"content":"    public boolean hasDrByNric(Nric nric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":248,"author":{"gitId":"mandykqh"},"content":"        return persons.containsDrByNric(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":249,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":250,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":251,"author":{"gitId":"mandykqh"},"content":"    public Name getNameByNric(Nric drNric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":252,"author":{"gitId":"mandykqh"},"content":"        return persons.getNameByNric(drNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":253,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":254,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":255,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StefanosAv":54,"mandykqh":82,"-":119}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-26"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} exists in the address book.","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"StefanosAv"},"content":"    boolean hasDoctor(Doctor doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the address book.","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"    boolean hasPatientByNric(Nric nric);","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"     * Adds the given patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"     * {@code patient} must not already exist in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"StefanosAv"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"     * Adds the given doctor.","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"     * {@code doctor} must not already exist in the address book.","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"StefanosAv"},"content":"    void addDoctor(Doctor doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":111,"author":{"gitId":"StefanosAv"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2023-03-19"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":114,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":115,"author":{"gitId":"StefanosAv"},"content":"    void setDoctor(Doctor target, Doctor editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":116,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-19"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2023-03-19"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2023-03-19"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-19"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"    void setPatient(Patient target, Patient editedPerson);","lastModifiedDate":"2023-03-19"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"    void updateFilteredPersonListNric(Nric nric);","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"mandykqh"},"content":"    boolean hasAppointment(Appointment appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"mandykqh"},"content":"    void bookAppointment(Appointment appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"    void deleteAppointment(Appointment appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":139,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"mandykqh"},"content":"     * Returns true if a doctor with the same identity as {@code doctor} exists in the address book.","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"mandykqh"},"content":"    boolean hasDrByNric(Nric drNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"StefanosAv":39,"mandykqh":17,"-":87,"thennant":2}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"    public boolean hasPatientByNric(Nric nric) {","lastModifiedDate":"2023-03-16"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"        return addressBook.hasPersonByNric(nric);","lastModifiedDate":"2023-03-16"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"    public boolean hasDrByNric(Nric nric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"mandykqh"},"content":"        return addressBook.hasDrByNric(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"StefanosAv"},"content":"        return addressBook.hasPatient(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"    public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"        return addressBook.hasDoctor(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"        addressBook.addPatient(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"StefanosAv"},"content":"    public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"StefanosAv"},"content":"        addressBook.addDoctor(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"StefanosAv"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":154,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":155,"author":{"gitId":"StefanosAv"},"content":"    public void setDoctor(Doctor doctor, Doctor editedDoctor) {","lastModifiedDate":"2023-03-19"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"        requireAllNonNull(doctor, editedDoctor);","lastModifiedDate":"2023-03-19"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"        addressBook.setDoctor(doctor, editedDoctor);","lastModifiedDate":"2023-03-19"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-19"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"    public void setPatient(Patient patient, Patient editedPatient) {","lastModifiedDate":"2023-03-19"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"        requireAllNonNull(patient, editedPatient);","lastModifiedDate":"2023-03-19"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"        addressBook.setPatient(patient, editedPatient);","lastModifiedDate":"2023-03-19"},{"lineNumber":166,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-19"},{"lineNumber":167,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":171,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":185,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":186,"author":{"gitId":"StefanosAv"},"content":"    public void updateFilteredPersonListNric(Nric nric) {","lastModifiedDate":"2023-03-29"},{"lineNumber":187,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-29"},{"lineNumber":188,"author":{"gitId":"StefanosAv"},"content":"        updateFilteredPersonList(p -\u003e p.getNric().equals(nric));","lastModifiedDate":"2023-03-29"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":190,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":207,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"    public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-14"},{"lineNumber":213,"author":{"gitId":"mandykqh"},"content":"        return addressBook.hasAppointment(appointment);","lastModifiedDate":"2023-03-14"},{"lineNumber":214,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":215,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":216,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":217,"author":{"gitId":"mandykqh"},"content":"    public void bookAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":218,"author":{"gitId":"mandykqh"},"content":"        addressBook.bookAppointment(appointment);","lastModifiedDate":"2023-03-14"},{"lineNumber":219,"author":{"gitId":"mandykqh"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-14"},{"lineNumber":220,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":221,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":222,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":223,"author":{"gitId":"mandykqh"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":224,"author":{"gitId":"mandykqh"},"content":"        addressBook.deleteAppointment(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":225,"author":{"gitId":"mandykqh"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-27"},{"lineNumber":226,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":227,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StefanosAv":40,"mandykqh":35,"-":152}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"    ObservableList\u003cAppointment\u003e getAppointmentList();","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"mandykqh":2,"-":17}},{"path":"src/main/java/seedu/address/model/appointment/Appointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":" * Represents a Person\u0027s appointment in the address book.","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"public class Appointment {","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"    private final Booking booking;","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"    private final Nric drNric;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"    // todo add another Dr name field to link appmt to a doctor)","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"     * Constructs an {@code Appointment}.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"     * @param nric Person nric","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"     * @param booking timing","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"    public Appointment(Nric nric, Booking booking, Nric drNric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"        requireAllNonNull(nric, booking);","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"        this.booking \u003d booking;","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        this.drNric \u003d drNric;","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"    public Booking getBooking() {","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"        return booking;","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"    public Nric getPatientNric() {","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"        return nric;","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"    public Nric getDrNric() {","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"        return drNric;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"     * Checks if this appointment is the same as another appointment.","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"     * @param otherAppointment","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"     * @return true if is the same, false otherwise","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"    public boolean isSameAppointment(Appointment otherAppointment) {","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"        if (otherAppointment \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"        String thisAppointmentDate \u003d getBooking().toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"        String otherAppointmentDate \u003d otherAppointment.getBooking().toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"        String otherPatientNric \u003d otherAppointment.getPatientNric().toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"        String thisPatientNric \u003d nric.toString();","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"        String otherAppointmentDrNric \u003d otherAppointment.getDrNric().toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        String thisAppointmentDrNric \u003d otherAppointment.getDrNric().toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"        return otherPatientNric.equals(thisPatientNric)","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 thisAppointmentDate.equals(otherAppointmentDate)","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 thisAppointmentDrNric.equals(otherAppointmentDrNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"    public String toString() {","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"        builder.append(\"NRIC: \")","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"                .append(getPatientNric())","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"                .append(\"; Appointment: \")","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"                .append(getBooking())","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"                .append(\"; Doctor: \")","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"                .append(getDrNric());","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"mandykqh":75}},{"path":"src/main/java/seedu/address/model/appointment/Booking.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-03-12"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":" * Represents an appointment booking.","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"public class Booking {","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Appointment booking should adhere to the following conventions: \"","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"            + \"\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"            + \"1. Format should be DD-MM-YYYY HH:mm\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"            + \"2.\u0027DD\u0027 and \u0027MM\u0027 values should be valid for the calendar\\n\"","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"            + \"3. HH:mm should follow the 24-hour notation\";","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"    private final String date;","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"     * Constructs an {@code Booking}","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"     * @param date","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    public Booking(String date) {","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(date);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"        checkArgument(isValidBookingFormat(date), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"     * Checks if the input date is in a valid format.","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"     * @param someDate","lastModifiedDate":"2023-03-18"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"     * @return true if is in a valid format, false otherwise","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"    public static boolean isValidBookingFormat(String someDate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"            LocalDate.parse(someDate, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"            return false;","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"    public String toString() {","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"        return date;","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"mandykqh":50}},{"path":"src/main/java/seedu/address/model/appointment/HospitalAppointmentList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.model.appointment;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import java.util.List;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.exceptions.AppointmentNotFoundException;","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.exceptions.DuplicateAppointmentException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":" * A list of appointments that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":" * A person is considered unique by comparing using {@code Appointment#isSameAppointment(Appointment)}. As such,","lastModifiedDate":"2023-03-18"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":" * adding and updating of appointments uses Appointment#isSameAppointment(Appointment) for equality so as to","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":" * ensure that the appointment being added or updated is unique in terms of booking in the HospitalAppointmentList.","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":" *","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":" *","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":" * @see Appointment#isSameAppointment(Appointment)","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"public class HospitalAppointmentList implements Iterable\u003cAppointment\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"    private final ObservableList\u003cAppointment\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    private final ObservableList\u003cAppointment\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"     * Checks if an appointment already exists in the addressbook.","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"     * @return true if appointment already exists and hence a duplicate, false otherwise","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"    public boolean isADuplicateAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"        return internalList.stream().anyMatch(patientAppointment -\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"                patientAppointment.isSameAppointment(appointment));","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"     * Adds an appointment to the HospitalAppointmentList.","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    public void bookAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"        if (isADuplicateAppointment(appointment)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"        internalList.add(appointment);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"     * Deletes an appointment to the HospitalAppointmentList.","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"    public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"        //boolean isSuccessfulDeletion \u003d false;","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"        Appointment toDelete \u003d null;","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"        //boolean isSuccessfulDeletion \u003d internalList.remove(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"        for (int i \u003d 0; i \u003c internalList.size(); i++) {","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"            if (internalList.get(i).isSameAppointment(appointment)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"                toDelete \u003d internalList.remove(i);","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"        if (toDelete \u003d\u003d null) {","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"    public Iterator\u003cAppointment\u003e iterator() {","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"    public void setAppointment(Appointment target, Appointment editedAppointment) {","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"        requireAllNonNull(target, editedAppointment);","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"            throw new AppointmentNotFoundException();","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"        if (!target.equals(editedAppointment) \u0026\u0026 isADuplicateAppointment(editedAppointment)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"        internalList.set(index, editedAppointment);","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"    public void setAppointments(HospitalAppointmentList replacement) {","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"mandykqh"},"content":"     * Replaces the contents of this list with {@code appointments}.","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"     * {@code appointments} must not contain duplicate appointments.","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"    public void setAppointments(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"        requireAllNonNull(appointments);","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"        if (!appointmentsAreUnique(appointments)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"            throw new DuplicateAppointmentException();","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"        internalList.setAll(appointments);","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"mandykqh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"mandykqh"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"mandykqh"},"content":"                || (other instanceof HospitalAppointmentList // instanceof handles nulls","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 internalList.equals(((HospitalAppointmentList) other).internalList));","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"mandykqh"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"mandykqh"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"mandykqh"},"content":"     * Returns true if {@code appointments} contains only unique appointments.","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"mandykqh"},"content":"    private boolean appointmentsAreUnique(List\u003cAppointment\u003e appointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"mandykqh"},"content":"        for (int i \u003d 0; i \u003c appointments.size() - 1; i++) {","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"mandykqh"},"content":"            for (int j \u003d i + 1; j \u003c appointments.size(); j++) {","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"mandykqh"},"content":"                if (appointments.get(i).equals(appointments.get(j))) {","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"mandykqh"},"content":"                    return false;","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"mandykqh"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"mandykqh"},"content":"        return true;","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-21"},{"lineNumber":139,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"mandykqh"},"content":"    public ObservableList\u003cAppointment\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"mandykqh"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"mandykqh":144}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/AppointmentNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-21"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":" * Signals that the operation is unable to find the specified appointment.","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"public class AppointmentNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"mandykqh":6}},{"path":"src/main/java/seedu/address/model/appointment/exceptions/DuplicateAppointmentException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.model.appointment.exceptions;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":" * Signals that the operation will result in duplicate Appointments (Appointments are considered duplicates if they","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":" * have the same identity and booking).","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"public class DuplicateAppointmentException extends RuntimeException {","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"    public DuplicateAppointmentException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"        super(\"Operation would result in duplicate appointments\");","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"mandykqh":11}},{"path":"src/main/java/seedu/address/model/person/Doctor.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-18"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":" * Represents a Doctor in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"public class Doctor extends Person {","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"    private final ArrayList\u003cAppointment\u003e patientAppointments;","lastModifiedDate":"2023-03-26"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"     * Creates Doctor object.","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"     * @param name","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"     * @param phone","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"     * @param email","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"     * @param nric","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"     * @param address","lastModifiedDate":"2023-03-26"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"     * @param tags","lastModifiedDate":"2023-03-26"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"     * @param patientAppointments","lastModifiedDate":"2023-03-26"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"     * @param role","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"    public Doctor(Name name, Phone phone, Email email, Nric nric, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2023-03-18"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"                  ArrayList\u003cAppointment\u003e patientAppointments, Role role) {","lastModifiedDate":"2023-03-19"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        super(name, phone, email, nric, address, tags, patientAppointments, role);","lastModifiedDate":"2023-03-19"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"        this.patientAppointments \u003d patientAppointments;","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if both Doctors have the same NRIC.","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"     * This defines a weaker notion of equality between two doctors.","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"    public boolean isSameDoctor(Doctor otherPerson) {","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"            return true;","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric());","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"     * Returns a list of Appointments.","lastModifiedDate":"2023-03-26"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"    public ArrayList\u003cAppointment\u003e getPatientAppointments() {","lastModifiedDate":"2023-03-26"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"        return patientAppointments;","lastModifiedDate":"2023-03-26"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"    public String toString() {","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"        final StringBuilder builder \u003d new StringBuilder(super.toString());","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        ArrayList\u003cAppointment\u003e appointments \u003d getPatientAppointments();","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"        if (!appointments.isEmpty()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"            builder.append(\"; Appointments: \");","lastModifiedDate":"2023-03-26"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"            appointments.forEach(builder::append);","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"     * Adds an appointment for the Doctor.","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"    public void addPatientAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-26"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"        patientAppointments.add(appointment);","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"     * Get the patient\u0027s appointments as a String in list form.","lastModifiedDate":"2023-03-26"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"     * @return list of patient\u0027s appointment bookings in String","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"    public String drAppointmentsToString() {","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"        ArrayList\u003cAppointment\u003e patientAppointments \u003d getPatientAppointments();","lastModifiedDate":"2023-03-26"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"        String string \u003d \"\";","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"        int count \u003d 1;","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"        for (Appointment appointment : patientAppointments) {","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"            String appointmentBooking \u003d appointment.getBooking().toString();","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"            string +\u003d count + \". \" + appointmentBooking + \"; \" + appointment.getPatientNric().toString() + \"\\n\";","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"            count++;","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"        return string;","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-26"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"     * Returns true if both persons have the same NRIC.","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"    public boolean isSameDrByNric(Nric otherNric) {","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"        if (otherNric \u003d\u003d this.getNric()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":97,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":98,"author":{"gitId":"mandykqh"},"content":"        return otherNric !\u003d null","lastModifiedDate":"2023-03-26"},{"lineNumber":99,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherNric.equals(this.getNric());","lastModifiedDate":"2023-03-26"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"     * Deletes an appointment for the Doctor.","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"    public void deletePatientAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"        patientAppointments.remove(appointment);","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":109,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"StefanosAv":29,"mandykqh":81}},{"path":"src/main/java/seedu/address/model/person/Medication.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":" * Represents a Patient\u0027s current medication","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidMedication(String)}","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"public class Medication {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"    private static final String DELIMITER \u003d \";\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Medication should be of the format:\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":"            + \"qty medication\\n\"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"            + \"If you would like to prescribe multiple medications, insert \" + DELIMITER + \" between each string.\";","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"    /*","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"PeanutButters93"},"content":"     * Accepts one of the following 2 cases:","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"PeanutButters93"},"content":"     * An empty string","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"     * number medication[;number medication]*","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"    // ^$|\\\\d+ [^+;+]+(;\\\\s*\\\\d+ [^;]+)*","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"PeanutButters93"},"content":"    public static final String VALIDATION_REGEX \u003d \"^$|\\\\d+ [^+\" + DELIMITER + \"+]+(\" + DELIMITER","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"PeanutButters93"},"content":"            + \"\\\\s*\\\\d+ [^\" + DELIMITER + \"]+)*\";","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"PeanutButters93"},"content":"    public final String value;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"PeanutButters93"},"content":"     * Constructs an {@code Medication}.","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"PeanutButters93"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"     * @param medication A valid medication.","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"PeanutButters93"},"content":"    public Medication(String medication) {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"PeanutButters93"},"content":"        requireNonNull(medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"PeanutButters93"},"content":"        checkArgument(isValidMedication(medication), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"        value \u003d medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"PeanutButters93"},"content":"     * Returns true if a given string is a valid medication.","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"PeanutButters93"},"content":"    public static boolean isValidMedication(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"     * Returns true if Medication value is an empty string.","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"        return value.length() \u003d\u003d 0;","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"PeanutButters93"},"content":"        return value;","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"PeanutButters93"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"PeanutButters93"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"PeanutButters93"},"content":"                || (other instanceof Medication // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"PeanutButters93"},"content":"                \u0026\u0026 value.equals(((Medication) other).value)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"PeanutButters93"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"PeanutButters93"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"PeanutButters93"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"PeanutButters93"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"PeanutButters93":70}},{"path":"src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"thennant"},"content":"        return this.keywords.toString();","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"thennant"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":31,"thennant":4}},{"path":"src/main/java/seedu/address/model/person/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"StefanosAv"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":" * Represents a Person\u0027s NRIC number in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"public class Nric {","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"            \"NRIC should be 9 characters, and it should not be blank. \\n\"","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"            + \"The first character must be one of [S,T,F,G,M], followed by 7 numerical digits and ending with [A-Z].\";","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"    /*","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"     * The first character of the NRIC must be 9 digits long.","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"     * Starting character must be one of [S,T,F,G,M] and ending with [A-Z].","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"     * In between there must be 7 digits [0-9].","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALIDATION_REGEX \u003d \"[S,T,F,G,M]{1}[0-9]{7}[A-Z]{1}\";","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"    public final String nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"     * Constructs a {@code Nric}.","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"     * @param nric A valid Singaporean NRIC number.","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"    public Nric(String nric) {","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a given string is a valid NRIC.","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"    public String toString() {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"        return nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"                || (other instanceof Nric // instanceof handles nulls","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 nric.equals(((Nric) other).nric)); // state check","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"StefanosAv"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"        return nric.hashCode();","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"StefanosAv":60}},{"path":"src/main/java/seedu/address/model/person/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-08"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-18"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":" * Represents a Patient in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"public class Patient extends Person {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"    private final ArrayList\u003cAppointment\u003e patientAppointments;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"    private final Medication medication;","lastModifiedDate":"2023-03-18"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-18"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"    public Patient(Name name, Phone phone, Email email, Nric nric, Address address, Medication medication,","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"                   Set\u003cTag\u003e tags, ArrayList\u003cAppointment\u003e patientAppointments, Role role) {","lastModifiedDate":"2023-03-19"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"        super(name, phone, email, nric, address, tags, patientAppointments, role);","lastModifiedDate":"2023-03-19"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"        requireAllNonNull(name, phone, email, address, tags, patientAppointments, role);","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"PeanutButters93"},"content":"        this.medication \u003d medication;","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"        this.patientAppointments \u003d patientAppointments;","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if both Patient have the same NRIC.","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"     * This defines a weaker notion of equality between two patients.","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"    public boolean isSamePatient(Patient otherPerson) {","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"            return true;","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric());","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"    public Medication getMedication() {","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"PeanutButters93"},"content":"        return medication;","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"     * Returns a list of Appointments.","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"    public ArrayList\u003cAppointment\u003e getPatientAppointments() {","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"        return patientAppointments;","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"            return false;","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"        return otherPatient.getName().equals(getName())","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getPhone().equals(getPhone())","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getEmail().equals(getEmail())","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getNric().equals(getNric())","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getAddress().equals(getAddress())","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"PeanutButters93"},"content":"                \u0026\u0026 otherPatient.getMedication().equals(getMedication())","lastModifiedDate":"2023-03-18"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getTags().equals(getTags())","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPatient.getPatientAppointments().equals(getPatientAppointments());","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"    public String toString() {","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"PeanutButters93"},"content":"        final StringBuilder builder \u003d new StringBuilder(super.toString());","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"PeanutButters93"},"content":"        if (!getMedication().isEmpty()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"PeanutButters93"},"content":"            builder.append(\"; Medication: \")","lastModifiedDate":"2023-03-18"},{"lineNumber":81,"author":{"gitId":"PeanutButters93"},"content":"                    .append(getMedication());","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"mandykqh"},"content":"        ArrayList\u003cAppointment\u003e appointments \u003d getPatientAppointments();","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"mandykqh"},"content":"        if (!appointments.isEmpty()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"            builder.append(\"; Appointments: \");","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"            appointments.forEach(builder::append);","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"PeanutButters93"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"     * Adds an appointment for the Patient.","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-18"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"mandykqh"},"content":"    public void addPatientAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-16"},{"lineNumber":97,"author":{"gitId":"mandykqh"},"content":"        patientAppointments.add(appointment);","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":99,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":100,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"mandykqh"},"content":"     * Deletes an appointment for the Patient.","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"    public Appointment deletePatientAppointment(int index) {","lastModifiedDate":"2023-03-27"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"        return patientAppointments.remove(index);","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"     * Get the patient\u0027s appointments as a String in list form.","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"mandykqh"},"content":"     * @return list of patient\u0027s appointment bookings in String","lastModifiedDate":"2023-03-18"},{"lineNumber":110,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"    public String patientAppointmentstoString() {","lastModifiedDate":"2023-03-16"},{"lineNumber":112,"author":{"gitId":"mandykqh"},"content":"        ArrayList\u003cAppointment\u003e patientAppointments \u003d getPatientAppointments();","lastModifiedDate":"2023-03-16"},{"lineNumber":113,"author":{"gitId":"mandykqh"},"content":"        String string \u003d \"\";","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"mandykqh"},"content":"        int count \u003d 1;","lastModifiedDate":"2023-03-26"},{"lineNumber":115,"author":{"gitId":"mandykqh"},"content":"        for (Appointment appointment : patientAppointments) {","lastModifiedDate":"2023-03-16"},{"lineNumber":116,"author":{"gitId":"mandykqh"},"content":"            String appointmentBooking \u003d appointment.getBooking().toString();","lastModifiedDate":"2023-03-16"},{"lineNumber":117,"author":{"gitId":"mandykqh"},"content":"            string +\u003d count + \". \" + appointmentBooking + \"; \" + appointment.getDrNric().toString() + \"\\n\";","lastModifiedDate":"2023-03-26"},{"lineNumber":118,"author":{"gitId":"mandykqh"},"content":"            count++;","lastModifiedDate":"2023-03-26"},{"lineNumber":119,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":120,"author":{"gitId":"mandykqh"},"content":"        return string;","lastModifiedDate":"2023-03-16"},{"lineNumber":121,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"PeanutButters93":15,"StefanosAv":28,"mandykqh":79}},{"path":"src/main/java/seedu/address/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"    private final Role role;","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"    private final ArrayList\u003cAppointment\u003e patientAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-18"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"    public Person(Name name, Phone phone, Email email, Nric nric, Address address, Set\u003cTag\u003e tags,","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"                  ArrayList\u003cAppointment\u003e patientAppointments, Role role) {","lastModifiedDate":"2023-03-19"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        requireAllNonNull(name, phone, email, nric, address, tags, patientAppointments, role);","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"        this.patientAppointments.addAll(patientAppointments);","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"        this.role \u003d role;","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"        return nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":72,"author":{"gitId":"StefanosAv"},"content":"    public Role getRole() {","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"StefanosAv"},"content":"        return role;","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if both persons have the same NRIC.","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"     * Returns a list of Appointments.","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"    public ArrayList\u003cAppointment\u003e getPatientAppointments() {","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"        return patientAppointments;","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if both persons have the same NRIC.","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric());","lastModifiedDate":"2023-03-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"     * Returns true if both persons have the same NRIC.","lastModifiedDate":"2023-03-18"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2023-03-18"},{"lineNumber":108,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":109,"author":{"gitId":"mandykqh"},"content":"    public boolean isSamePersonByNric(Nric otherNric) {","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"mandykqh"},"content":"        if (otherNric \u003d\u003d this.getNric()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"mandykqh"},"content":"        return otherNric !\u003d null","lastModifiedDate":"2023-03-16"},{"lineNumber":115,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherNric.equals(this.getNric());","lastModifiedDate":"2023-03-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 otherPerson.getNric().equals(getNric())","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPerson.getTags().equals(getTags())","lastModifiedDate":"2023-03-18"},{"lineNumber":139,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 otherPerson.getPatientAppointments().equals(getPatientAppointments());","lastModifiedDate":"2023-03-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":153,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":154,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":155,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"                .append(\"; Nric: \")","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"                .append(getNric())","lastModifiedDate":"2023-03-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":159,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":166,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":167,"author":{"gitId":"mandykqh"},"content":"        ArrayList\u003cAppointment\u003e appointments \u003d getPatientAppointments();","lastModifiedDate":"2023-03-18"},{"lineNumber":168,"author":{"gitId":"mandykqh"},"content":"        if (!appointments.isEmpty()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":169,"author":{"gitId":"mandykqh"},"content":"            builder.append(\"; Appointments: \");","lastModifiedDate":"2023-03-18"},{"lineNumber":170,"author":{"gitId":"mandykqh"},"content":"            appointments.forEach(builder::append);","lastModifiedDate":"2023-03-18"},{"lineNumber":171,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":172,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":177,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a person is a doctor.","lastModifiedDate":"2023-03-22"},{"lineNumber":178,"author":{"gitId":"StefanosAv"},"content":"     * Returns false otherwise.","lastModifiedDate":"2023-03-22"},{"lineNumber":179,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":180,"author":{"gitId":"StefanosAv"},"content":"    public boolean isDoctor() {","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"StefanosAv"},"content":"        if (role.toString().equals(\"Doctor\")) {","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"StefanosAv"},"content":"            return true;","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":184,"author":{"gitId":"StefanosAv"},"content":"        return false;","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":186,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":187,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":188,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a person is a patient.","lastModifiedDate":"2023-03-22"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"     * Returns false otherwise.","lastModifiedDate":"2023-03-22"},{"lineNumber":190,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":191,"author":{"gitId":"mandykqh"},"content":"    public boolean isPatient() {","lastModifiedDate":"2023-03-16"},{"lineNumber":192,"author":{"gitId":"StefanosAv"},"content":"        if (role.toString().equals(\"Patient\")) {","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"StefanosAv"},"content":"            return true;","lastModifiedDate":"2023-03-21"},{"lineNumber":194,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":195,"author":{"gitId":"mandykqh"},"content":"        return false;","lastModifiedDate":"2023-03-16"},{"lineNumber":196,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":197,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":198,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":199,"author":{"gitId":"mandykqh"},"content":"     * Adds an appointment for the Patient.","lastModifiedDate":"2023-03-18"},{"lineNumber":200,"author":{"gitId":"mandykqh"},"content":"     * @param appointment","lastModifiedDate":"2023-03-18"},{"lineNumber":201,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":202,"author":{"gitId":"mandykqh"},"content":"    public void addPatientAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-18"},{"lineNumber":203,"author":{"gitId":"mandykqh"},"content":"        patientAppointments.add(appointment);","lastModifiedDate":"2023-03-18"},{"lineNumber":204,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-18"},{"lineNumber":205,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"mandykqh"},"content":"     * Gets size of appointment list.","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"mandykqh"},"content":"     * @return appointment size","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"    public int getAppointmentSize() {","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"        return this.patientAppointments.size();","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"StefanosAv":39,"mandykqh":52,"-":122}},{"path":"src/main/java/seedu/address/model/person/Role.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"StefanosAv"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"//import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":" * Represents a Person\u0027s role in the address book.","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"public class Role {","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Role can only be Patient or Doctor\";","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"    /*","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"     * The role string must be either \"Doctor\" or \"Patient\".","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALIDATION_REGEX \u003d \"^(Doctor|Patient)$\";","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"    public final String role;","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"     * Constructs a {@code Role}.","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"     *","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"     * @param role A valid role.","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"    public Role(String role) {","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"        requireNonNull(role);","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"        //checkArgument(isValidRole(role), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        this.role \u003d role;","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"     * Returns true if a given string is a valid role.","lastModifiedDate":"2023-03-19"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"    public static boolean isValidRole(String test) {","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"    public String toString() {","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"        return role;","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"                || (other instanceof Role // instanceof handles nulls","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"                \u0026\u0026 role.equals(((Role) other).role)); // state check","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        return role.hashCode();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"StefanosAv":58}},{"path":"src/main/java/seedu/address/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2016-08-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"     * Returns true if the list contains an equivalent person identified by NRIC as the given argument.","lastModifiedDate":"2023-03-18"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"     * @param toCheck","lastModifiedDate":"2023-03-18"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"     * @return true if contains, false otherwise","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"    public boolean containsByNric(Nric toCheck) {","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"        return internalList.stream().anyMatch(person -\u003e person.isSamePersonByNric(toCheck));","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"                String personIRole \u003d persons.get(i).getRole().toString();","lastModifiedDate":"2023-03-22"},{"lineNumber":142,"author":{"gitId":"StefanosAv"},"content":"                String personJRole \u003d persons.get(j).getRole().toString();","lastModifiedDate":"2023-03-22"},{"lineNumber":143,"author":{"gitId":"StefanosAv"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))","lastModifiedDate":"2023-03-22"},{"lineNumber":144,"author":{"gitId":"StefanosAv"},"content":"                        \u0026\u0026 (personIRole.equals(personJRole))) {","lastModifiedDate":"2023-03-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":151,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"mandykqh"},"content":"     * Returns true if the list contains an equivalent person identified by NRIC as the given argument.","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"mandykqh"},"content":"     * @param toCheck","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"mandykqh"},"content":"     * @return true if contains, false otherwise","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"mandykqh"},"content":"    public boolean containsDrByNric(Nric toCheck) {","lastModifiedDate":"2023-03-21"},{"lineNumber":158,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"mandykqh"},"content":"        return internalList.stream().anyMatch(person -\u003e person instanceof Doctor","lastModifiedDate":"2023-03-21"},{"lineNumber":160,"author":{"gitId":"mandykqh"},"content":"                \u0026\u0026 person.isSamePersonByNric(toCheck));","lastModifiedDate":"2023-03-21"},{"lineNumber":161,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":163,"author":{"gitId":"mandykqh"},"content":"    public Name getNameByNric(Nric nric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":164,"author":{"gitId":"mandykqh"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"mandykqh"},"content":"        Optional\u003cPerson\u003e optionalPerson \u003d internalList.stream()","lastModifiedDate":"2023-03-21"},{"lineNumber":166,"author":{"gitId":"mandykqh"},"content":"                .filter(person -\u003e person.getNric().equals(nric))","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"mandykqh"},"content":"                .findFirst();","lastModifiedDate":"2023-03-21"},{"lineNumber":168,"author":{"gitId":"mandykqh"},"content":"        return optionalPerson.map(Person::getName).orElse(null);","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"StefanosAv":4,"mandykqh":30,"-":136}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Booking;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return new Person[] {","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"                    new Nric(\"S1234567X\"), new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Medication(\"\"),","lastModifiedDate":"2023-03-18"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"                getTagSet(\"friends\"), new ArrayList\u003c\u003e(), new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"                    new Nric(\"T1234567Z\"), new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"                    new Medication(\"10 Paracetamol\"), getTagSet(\"colleagues\", \"friends\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2023-03-19"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"                    new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"                    new Nric(\"F1234567A\"), new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"                    new Medication(\"10 Paracetamol 500mg\"), getTagSet(\"neighbours\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2023-03-19"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"                    new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"                    new Nric(\"G1234567L\"), new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"                    new Medication(\"12 Histamine; 2 water\"), getTagSet(\"family\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2023-03-19"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"                    new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"                    new Nric(\"M1234567K\"), new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"                    new Medication(\"1 Steroid Cream;2 water\"), getTagSet(\"classmates\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2023-03-19"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"                    new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"            new Patient(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"                    new Nric(\"S1234567B\"), new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"                    new Medication(\"1 drugA; 2 drug B ; 3 drug C\"), getTagSet(\"colleagues\"), new ArrayList\u003c\u003e(),","lastModifiedDate":"2023-03-19"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"                    new Role(\"Patient\")),","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"            new Doctor(new Name(\"Jane Chew\"), new Phone(\"93424232\"), new Email(\"janec@example.com\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"                    new Nric(\"S3523567R\"), new Address(\"Blk 11 Eunos Street 1, #14-09\"),","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"                    getTagSet(\"colleagues\"), new ArrayList\u003c\u003e(), new Role(\"Doctor\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"            new Doctor(new Name(\"Joseph Law\"), new Phone(\"93424232\"), new Email(\"joseph@example.com\"),","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"                    new Nric(\"S7654321R\"), new Address(\"Blk 11 Yishun Street 1, #14-09\"),","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"                    getTagSet(\"colleagues\"), new ArrayList\u003c\u003e(), new Role(\"Doctor\"))","lastModifiedDate":"2023-03-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"            if (samplePerson.isPatient()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"                Patient samplePatient \u003d (Patient) samplePerson;","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"                sampleAb.addPatient(samplePatient);","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"            if (samplePerson.isDoctor()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"                Doctor sampleDoctor \u003d (Doctor) samplePerson;","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"                sampleAb.addDoctor(sampleDoctor);","lastModifiedDate":"2023-03-16"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"    public static Appointment getAppointment(String... strings) {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"        return new Appointment(new Nric(strings[0]), new Booking(strings[1]),","lastModifiedDate":"2023-03-21"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"                new Nric(strings[0]));","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"PeanutButters93":2,"StefanosAv":19,"mandykqh":29,"-":41}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedAppointment.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"mandykqh"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"mandykqh"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":6,"author":{"gitId":"mandykqh"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Booking;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"mandykqh"},"content":"/**","lastModifiedDate":"2023-03-18"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":" * Jackson-friendly version of {@link Appointment}.","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":" */","lastModifiedDate":"2023-03-18"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"public class JsonAdaptedAppointment {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"mandykqh"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Appointment\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"mandykqh"},"content":"    private final String nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"    private final String booking;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"    private final String drNric;","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"     * Constructs a {@code JsonAdaptedAppointment} with the given appointment details.","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"    public JsonAdaptedAppointment(@JsonProperty(\"nric\") String nric, @JsonProperty(\"Booking\") String booking,","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"                                  @JsonProperty(\"drnric\") String drNric) {","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"mandykqh"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"mandykqh"},"content":"        this.booking \u003d booking;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"mandykqh"},"content":"        this.drNric \u003d drNric;","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"     * Converts a given {@code Appointment} into this class for Jackson use.","lastModifiedDate":"2023-03-18"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"    public JsonAdaptedAppointment(Appointment source) {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"mandykqh"},"content":"        nric \u003d source.getPatientNric().toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"        booking \u003d source.getBooking().toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"        drNric \u003d source.getDrNric().toString();","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"mandykqh"},"content":"     * Converts this Jackson-friendly adapted appointment object into the model\u0027s {@code Appointment} object.","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"     *","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"mandykqh"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted appointment.","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"    public Appointment toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"mandykqh"},"content":"        final Nric modelPatientNric \u003d new Nric(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"mandykqh"},"content":"        if (booking \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Booking.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"mandykqh"},"content":"        if (!Booking.isValidBookingFormat(booking)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(Booking.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"mandykqh"},"content":"        final Booking modelBooking \u003d new Booking(booking);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"mandykqh"},"content":"        if (drNric \u003d\u003d null) {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"mandykqh"},"content":"        if (!Nric.isValidNric(drNric)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"mandykqh"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"        final Nric modelDrNric \u003d new Nric(drNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"        return new Appointment(modelPatientNric, modelBooking, modelDrNric);","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"mandykqh":78}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"    private final String nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"    private final String medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    private final ArrayList\u003cJsonAdaptedAppointment\u003e patientAppointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"    private final String role;","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"            @JsonProperty(\"email\") String email, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"            @JsonProperty(\"address\") String address, @JsonProperty(\"medication\") String medication,","lastModifiedDate":"2023-03-19"},{"lineNumber":51,"author":{"gitId":"mandykqh"},"content":"            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"            @JsonProperty(\"patientAppointments\") ArrayList\u003cJsonAdaptedAppointment\u003e patientAppointments,","lastModifiedDate":"2023-03-19"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"            @JsonProperty(\"role\") String role) {","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"        this.medication \u003d medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"mandykqh"},"content":"        if (patientAppointments !\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"mandykqh"},"content":"            this.patientAppointments.addAll(patientAppointments);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"        this.role \u003d role;","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"StefanosAv"},"content":"        nric \u003d source.getNric().nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"        if (source.isPatient()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"            Patient sourcePatient \u003d (Patient) source;","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"PeanutButters93"},"content":"            medication \u003d sourcePatient.getMedication().value;","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"mandykqh"},"content":"            patientAppointments.addAll(sourcePatient.getPatientAppointments().stream()","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"                    .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"                    .collect(Collectors.toList()));","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"PeanutButters93"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"            Doctor sourceDoctor \u003d (Doctor) source;","lastModifiedDate":"2023-03-26"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"            medication \u003d \"\";","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"            patientAppointments.addAll(sourceDoctor.getPatientAppointments().stream()","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"mandykqh"},"content":"                    .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"mandykqh"},"content":"                    .collect(Collectors.toList()));","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"        role \u003d source.getRole().role;","lastModifiedDate":"2023-03-16"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"StefanosAv"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"StefanosAv"},"content":"        final Role modelRole \u003d new Role(role);","lastModifiedDate":"2023-03-21"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"StefanosAv"},"content":"        // Return a new Patient object if Role field is \"Patient\". Otherwise, return new Doctor object.","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"StefanosAv"},"content":"        if (role.toString().equals(\"Patient\")) {","lastModifiedDate":"2023-03-21"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"            final ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"            for (JsonAdaptedAppointment appointment : patientAppointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"                appointments.add(appointment.toModelType());","lastModifiedDate":"2023-03-21"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":161,"author":{"gitId":"PeanutButters93"},"content":"            if (medication \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"PeanutButters93"},"content":"                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"PeanutButters93"},"content":"                        Medication.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"PeanutButters93"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"PeanutButters93"},"content":"            if (!Medication.isValidMedication(medication)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":166,"author":{"gitId":"PeanutButters93"},"content":"                throw new IllegalValueException(Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":167,"author":{"gitId":"PeanutButters93"},"content":"            }","lastModifiedDate":"2023-03-14"},{"lineNumber":168,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"StefanosAv"},"content":"            final Medication modelMedication \u003d new Medication(medication);","lastModifiedDate":"2023-03-19"},{"lineNumber":170,"author":{"gitId":"mandykqh"},"content":"            final ArrayList\u003cAppointment\u003e modelAppointments \u003d new ArrayList\u003c\u003e(appointments);","lastModifiedDate":"2023-03-14"},{"lineNumber":171,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":172,"author":{"gitId":"PeanutButters93"},"content":"            return new Patient(modelName, modelPhone, modelEmail, modelNric, modelAddress, modelMedication, modelTags,","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"StefanosAv"},"content":"                    modelAppointments, modelRole);","lastModifiedDate":"2023-03-19"},{"lineNumber":174,"author":{"gitId":"StefanosAv"},"content":"        } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":175,"author":{"gitId":"mandykqh"},"content":"            final ArrayList\u003cAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-26"},{"lineNumber":176,"author":{"gitId":"mandykqh"},"content":"            for (JsonAdaptedAppointment appointment : patientAppointments) {","lastModifiedDate":"2023-03-26"},{"lineNumber":177,"author":{"gitId":"mandykqh"},"content":"                appointments.add(appointment.toModelType());","lastModifiedDate":"2023-03-26"},{"lineNumber":178,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-26"},{"lineNumber":179,"author":{"gitId":"mandykqh"},"content":"            final ArrayList\u003cAppointment\u003e modelAppointments \u003d new ArrayList\u003c\u003e(appointments);","lastModifiedDate":"2023-03-26"},{"lineNumber":180,"author":{"gitId":"StefanosAv"},"content":"            return new Doctor(modelName, modelPhone, modelEmail, modelNric, modelAddress, modelTags, modelAppointments,","lastModifiedDate":"2023-03-21"},{"lineNumber":181,"author":{"gitId":"StefanosAv"},"content":"                    modelRole);","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":184,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"PeanutButters93":15,"StefanosAv":37,"mandykqh":25,"-":107}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"    public static final String MESSAGE_DUPLICATE_APPOINTMENT \u003d \"Appointment list contains duplicate appointment(s).\";","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"mandykqh"},"content":"    private final List\u003cJsonAdaptedAppointment\u003e appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"mandykqh"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"                                       @JsonProperty(\"appointments\") List\u003cJsonAdaptedAppointment\u003e appointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"mandykqh"},"content":"        this.appointments.addAll(appointments);","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"mandykqh"},"content":"        appointments.addAll(source.getAppointmentList().stream().map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"            if (jsonAdaptedPerson.toModelType().getRole().toString().equals(\"Patient\")) {","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"                Patient patient \u003d (Patient) jsonAdaptedPerson.toModelType();","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"                if (addressBook.hasPatient(patient)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                    throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"                addressBook.addPatient(patient);","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"            } else {","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"                Doctor doctor \u003d (Doctor) jsonAdaptedPerson.toModelType();","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"StefanosAv"},"content":"                if (addressBook.hasDoctor(doctor)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"                    throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"                }","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"                addressBook.addDoctor(doctor);","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"        for (JsonAdaptedAppointment jsonAdaptedAppointment : appointments) {","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"            Appointment appointment \u003d jsonAdaptedAppointment.toModelType();","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"            if (addressBook.hasAppointment(appointment)) {","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_APPOINTMENT);","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"            }","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"            addressBook.bookAppointment(appointment);","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"StefanosAv":12,"mandykqh":18,"-":56}},{"path":"src/main/java/seedu/address/ui/PersonCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-26"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"PersonListCard.fxml\";","lastModifiedDate":"2016-09-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public final Person person;","lastModifiedDate":"2018-01-10"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"    private Label nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"    @FXML","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"    private Label medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"    @FXML","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":49,"author":{"gitId":"mandykqh"},"content":"    @FXML","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"mandykqh"},"content":"    private Label appointments;","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2018-01-10"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        this.person \u003d person;","lastModifiedDate":"2017-07-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"        if (person.isDoctor()) {","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"            name.setText(\"[Dr] \" + person.getName().fullName);","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"        } else {","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            name.setText(person.getName().fullName);","lastModifiedDate":"2017-12-20"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"        nric.setText(person.getNric().nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        phone.setText(person.getPhone().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        address.setText(person.getAddress().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        email.setText(person.getEmail().value);","lastModifiedDate":"2017-12-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        person.getTags().stream()","lastModifiedDate":"2019-01-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"mandykqh"},"content":"        if (person.isPatient()) {","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"mandykqh"},"content":"            Patient patient \u003d (Patient) person;","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"PeanutButters93"},"content":"            medication.setText(patient.getMedication().value);","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"            appointments.setText(\"Appointments: \\n\" + patient.patientAppointmentstoString());","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"mandykqh"},"content":"        if (person.isDoctor()) {","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"mandykqh"},"content":"            Doctor doctor \u003d (Doctor) person;","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"mandykqh"},"content":"            appointments.setText(\"Appointments: \\n\" + doctor.drAppointmentsToString());","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!(other instanceof PersonCard)) {","lastModifiedDate":"2017-07-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        PersonCard card \u003d (PersonCard) other;","lastModifiedDate":"2017-07-14"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                \u0026\u0026 person.equals(card.person);","lastModifiedDate":"2017-07-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"PeanutButters93":3,"StefanosAv":9,"mandykqh":14,"-":77}},{"path":"src/main/resources/view/PersonListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003cFlowPane fx:id\u003d\"tags\" /\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"      \u003cLabel fx:id\u003d\"medication\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$medication\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"      \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$nric\" /\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"mandykqh"},"content":"      \u003cLabel fx:id\u003d\"appointments\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$appointments\" /\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"PeanutButters93":1,"StefanosAv":1,"mandykqh":1,"-":36}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":22,"author":{"gitId":"thennant"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":62,"author":{"gitId":"thennant"},"content":"    public void execute_commandExecutionError_throwsParseException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":63,"author":{"gitId":"thennant"},"content":"        String deleteCommand \u003d \"delete ic/9\";","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"thennant"},"content":"        Nric nric \u003d new Nric(\"S9876543C\");","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"thennant"},"content":"        DeleteCommand expectedDeleteCommand \u003d new DeleteCommand(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"thennant"},"content":"        assertParseException(deleteCommand,","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"thennant"},"content":"                String.format(nric.MESSAGE_CONSTRAINTS));","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"StefanosAv"},"content":"        String addPatientCommand \u003d AddPatientCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_AMY + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"        assertCommandFailure(addPatientCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"StefanosAv":5,"-":154,"thennant":9}},{"path":"src/test/java/seedu/address/logic/commands/AddDoctorCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":" * Contains integration tests (interaction with the Model) for {@code AddDoctorCommand}.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"public class AddDoctorCommandIntegrationTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"    public void execute_newDoctor_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        Doctor validPerson \u003d new PersonBuilder().buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"        expectedModel.addDoctor(validPerson);","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        assertCommandSuccess(new AddDoctorCommand(validPerson), model,","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"                String.format(AddDoctorCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"StefanosAv":8,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/AddDoctorCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"public class AddDoctorCommandTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddDoctorCommand(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        ModelStubAcceptingDoctorAdded modelStub \u003d new ModelStubAcceptingDoctorAdded();","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"        Doctor validPerson \u003d new PersonBuilder().buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"        CommandResult commandResult \u003d new AddDoctorCommand(validPerson).execute(modelStub);","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(String.format(AddDoctorCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.doctorsAdded);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"        Doctor validPerson \u003d new PersonBuilder().buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        AddDoctorCommand addCommand \u003d new AddDoctorCommand(validPerson);","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        ModelStub modelStub \u003d new ModelStubWithDoctor(validPerson);","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(CommandException.class, AddDoctorCommand.MESSAGE_DUPLICATE_PERSON, ()","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"                -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"        Doctor alice \u003d new PersonBuilder().withName(\"Alice\").buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"        Doctor bob \u003d new PersonBuilder().withName(\"Bob\").buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"        AddDoctorCommand addAliceCommand \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"StefanosAv"},"content":"        AddDoctorCommand addBobCommand \u003d new AddDoctorCommand(bob);","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"        AddDoctorCommand addAliceCommandCopy \u003d new AddDoctorCommand(alice);","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"StefanosAv"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"        public void setPatient(Patient target, Patient editedPerson) {","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"        public void setDoctor(Doctor target, Doctor editedPerson) {","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-21"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-03-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-03-09"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":185,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":186,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":187,"author":{"gitId":"StefanosAv"},"content":"        public void updateFilteredPersonListNric(Nric nric) {","lastModifiedDate":"2023-03-29"},{"lineNumber":188,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":190,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":191,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":192,"author":{"gitId":"mandykqh"},"content":"        public void bookAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-18"},{"lineNumber":193,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":194,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":195,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":196,"author":{"gitId":"mandykqh"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-18"},{"lineNumber":197,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":198,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":199,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":200,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":201,"author":{"gitId":"mandykqh"},"content":"        public boolean hasPatientByNric(Nric nric) {","lastModifiedDate":"2023-03-18"},{"lineNumber":202,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":203,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":204,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"mandykqh"},"content":"        public boolean hasDrByNric(Nric nric) {","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2023-03-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2023-03-09"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2023-03-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2023-03-09"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":234,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":235,"author":{"gitId":"StefanosAv"},"content":"     * A Model stub that contains a single doctor.","lastModifiedDate":"2023-03-09"},{"lineNumber":236,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":237,"author":{"gitId":"StefanosAv"},"content":"    private class ModelStubWithDoctor extends ModelStub {","lastModifiedDate":"2023-03-09"},{"lineNumber":238,"author":{"gitId":"StefanosAv"},"content":"        private final Doctor doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":239,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":240,"author":{"gitId":"StefanosAv"},"content":"        ModelStubWithDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":241,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":242,"author":{"gitId":"StefanosAv"},"content":"            this.doctor \u003d doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":243,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":244,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":245,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":246,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":247,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":248,"author":{"gitId":"StefanosAv"},"content":"            return this.doctor.isSamePerson(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":249,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":250,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":251,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":253,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2023-03-09"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2023-03-09"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":258,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2023-03-09"},{"lineNumber":262,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":264,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-03-09"},{"lineNumber":266,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2023-03-09"},{"lineNumber":268,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":269,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-09"},{"lineNumber":272,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2023-03-09"},{"lineNumber":273,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":276,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":277,"author":{"gitId":"StefanosAv"},"content":"     * A Model stub that always accept the doctor being added.","lastModifiedDate":"2023-03-09"},{"lineNumber":278,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":279,"author":{"gitId":"StefanosAv"},"content":"    private class ModelStubAcceptingDoctorAdded extends ModelStub {","lastModifiedDate":"2023-03-09"},{"lineNumber":280,"author":{"gitId":"StefanosAv"},"content":"        final ArrayList\u003cDoctor\u003e doctorsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":281,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":282,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":283,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":284,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":285,"author":{"gitId":"StefanosAv"},"content":"            return doctorsAdded.stream().anyMatch(doctor::isSamePerson);","lastModifiedDate":"2023-03-09"},{"lineNumber":286,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":287,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":288,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":289,"author":{"gitId":"StefanosAv"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":290,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":291,"author":{"gitId":"StefanosAv"},"content":"            doctorsAdded.add(doctor);","lastModifiedDate":"2023-03-09"},{"lineNumber":292,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":293,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":294,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":295,"author":{"gitId":"StefanosAv"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-09"},{"lineNumber":296,"author":{"gitId":"StefanosAv"},"content":"            return new AddressBook();","lastModifiedDate":"2023-03-09"},{"lineNumber":297,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":298,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":299,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"StefanosAv":95,"mandykqh":26,"-":178}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":" * Contains integration tests (interaction with the Model) for {@code AddPatientCommand}.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"public class AddPatientCommandIntegrationTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"    public void execute_newPatient_success() {","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        Patient validPerson \u003d new PersonBuilder().buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"        expectedModel.addPatient(validPerson);","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        assertCommandSuccess(new AddPatientCommand(validPerson), model,","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"                String.format(AddPatientCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"StefanosAv":8,"-":30}},{"path":"src/test/java/seedu/address/logic/commands/AddPatientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-18"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"public class AddPatientCommandTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddPatientCommand(null));","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        ModelStubAcceptingPatientAdded modelStub \u003d new ModelStubAcceptingPatientAdded();","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"        Patient validPerson \u003d new PersonBuilder().buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"        CommandResult commandResult \u003d new AddPatientCommand(validPerson).execute(modelStub);","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(String.format(AddPatientCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.patientsAdded);","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"        Patient validPerson \u003d new PersonBuilder().buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        AddPatientCommand addCommand \u003d new AddPatientCommand(validPerson);","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        ModelStub modelStub \u003d new ModelStubWithPatient(validPerson);","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(CommandException.class, AddPatientCommand.MESSAGE_DUPLICATE_PERSON, ()","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"                -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"        Patient alice \u003d new PersonBuilder().withName(\"Alice\").buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"        Patient bob \u003d new PersonBuilder().withName(\"Bob\").buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"        AddPatientCommand addAliceCommand \u003d new AddPatientCommand(alice);","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"StefanosAv"},"content":"        AddPatientCommand addBobCommand \u003d new AddPatientCommand(bob);","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"        AddPatientCommand addAliceCommandCopy \u003d new AddPatientCommand((Patient) alice);","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"StefanosAv"},"content":"        public void addDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"        public void setPatient(Patient target, Patient editedPerson) {","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-21"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"        public void setDoctor(Doctor target, Doctor editedPerson) {","lastModifiedDate":"2023-03-21"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-21"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-08"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasDoctor(Doctor doctor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":186,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":187,"author":{"gitId":"StefanosAv"},"content":"        public void updateFilteredPersonListNric(Nric nric) {","lastModifiedDate":"2023-03-29"},{"lineNumber":188,"author":{"gitId":"StefanosAv"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-29"},{"lineNumber":189,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":190,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":191,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":192,"author":{"gitId":"mandykqh"},"content":"        public void bookAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-18"},{"lineNumber":193,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":194,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":195,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":196,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":197,"author":{"gitId":"mandykqh"},"content":"        public boolean hasAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-18"},{"lineNumber":198,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":199,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":200,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":201,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-18"},{"lineNumber":202,"author":{"gitId":"mandykqh"},"content":"        public boolean hasPatientByNric(Nric nric) {","lastModifiedDate":"2023-03-18"},{"lineNumber":203,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-18"},{"lineNumber":204,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":205,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":206,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"mandykqh"},"content":"        public boolean hasDrByNric(Nric nric) {","lastModifiedDate":"2023-03-26"},{"lineNumber":208,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-26"},{"lineNumber":209,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":210,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"mandykqh"},"content":"        public void deleteAppointment(Appointment appointment) {","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"mandykqh"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":220,"author":{"gitId":"StefanosAv"},"content":"    private abstract class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2023-03-09"},{"lineNumber":221,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":232,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":236,"author":{"gitId":"StefanosAv"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":237,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":238,"author":{"gitId":"StefanosAv"},"content":"    private class ModelStubWithPatient extends ModelStub {","lastModifiedDate":"2023-03-08"},{"lineNumber":239,"author":{"gitId":"StefanosAv"},"content":"        private final Patient patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":240,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":241,"author":{"gitId":"StefanosAv"},"content":"        ModelStubWithPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":242,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":243,"author":{"gitId":"StefanosAv"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":244,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":245,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":246,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":247,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":248,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":249,"author":{"gitId":"StefanosAv"},"content":"            return this.patient.isSamePerson(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":250,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":251,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":252,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":254,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":255,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":259,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":260,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":261,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":266,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":271,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":273,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":274,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":275,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":277,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":278,"author":{"gitId":"StefanosAv"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2023-03-08"},{"lineNumber":279,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":280,"author":{"gitId":"StefanosAv"},"content":"    private class ModelStubAcceptingPatientAdded extends ModelStub {","lastModifiedDate":"2023-03-08"},{"lineNumber":281,"author":{"gitId":"StefanosAv"},"content":"        final ArrayList\u003cPatient\u003e patientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":282,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":283,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":284,"author":{"gitId":"StefanosAv"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":285,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":286,"author":{"gitId":"StefanosAv"},"content":"            return patientsAdded.stream().anyMatch(patient::isSamePerson);","lastModifiedDate":"2023-03-08"},{"lineNumber":287,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":288,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":289,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":290,"author":{"gitId":"StefanosAv"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":291,"author":{"gitId":"StefanosAv"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":292,"author":{"gitId":"StefanosAv"},"content":"            patientsAdded.add(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":293,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":294,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":295,"author":{"gitId":"StefanosAv"},"content":"        @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":296,"author":{"gitId":"StefanosAv"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-08"},{"lineNumber":297,"author":{"gitId":"StefanosAv"},"content":"            return new AddressBook();","lastModifiedDate":"2023-03-08"},{"lineNumber":298,"author":{"gitId":"StefanosAv"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":299,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"StefanosAv":96,"mandykqh":27,"-":177}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S1234567A\";","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALID_NRIC_BOB \u003d \"T1234567B\";","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"    public static final String VALID_MEDICATION_AMY \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"PeanutButters93"},"content":"    public static final String VALID_MEDICATION_BOB \u003d \"20 Paracetamol\";","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALID_ROLE_DOCTOR \u003d \"Doctor\";","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"    public static final String VALID_ROLE_PATIENT \u003d \"PATIENT\";","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"StefanosAv"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"PeanutButters93"},"content":"    public static final String MEDICATION_DESC_AMY \u003d \" \" + PREFIX_MEDICATION + VALID_MEDICATION_AMY;","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"    public static final String MEDICATION_DESC_BOB \u003d \" \" + PREFIX_MEDICATION + VALID_MEDICATION_BOB;","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"    public static final String INVALID_NRIC_DESC \u003d \" \" + PREFIX_NRIC + \"Q1234567A\"; // \u0027Q\u0027 not allowed in nric","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"PeanutButters93"},"content":"    public static final String INVALID_MEDICATION_DESC \u003d \" \" + PREFIX_MEDICATION + \"Histamine\"; // No qty","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":78,"author":{"gitId":"PeanutButters93"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"PeanutButters93"},"content":"                .withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-18"},{"lineNumber":80,"author":{"gitId":"StefanosAv"},"content":"                .withMedication(VALID_MEDICATION_AMY).withTags(VALID_TAG_FRIEND).withRole(VALID_ROLE_PATIENT).build();","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"PeanutButters93"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-18"},{"lineNumber":82,"author":{"gitId":"PeanutButters93"},"content":"                .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"StefanosAv"},"content":"                .withMedication(VALID_MEDICATION_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"StefanosAv"},"content":"                .withRole(VALID_ROLE_PATIENT).build();","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":113,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"PeanutButters93":10,"StefanosAv":11,"-":122,"thennant":1}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"thennant"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"thennant"},"content":"    public void execute_validNricUnfilteredList_success() {","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"thennant"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(personToDelete.getNric());","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"thennant"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS,","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"thennant"},"content":"                personToDelete.getName().toString());","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"thennant"},"content":"    public void execute_invalidNricUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"thennant"},"content":"        Nric nric \u003d new Nric(\"S1234567K\");","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"thennant"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(nric);","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"thennant"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_PERSON_NOT_FOUND);","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"thennant"},"content":"        Person firstPersonToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"thennant"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(firstPersonToDelete.getNric());","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"thennant"},"content":"        Person secondPersonToDelete \u003d model.getFilteredPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2023-03-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"thennant"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(secondPersonToDelete.getNric());","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        //same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"thennant"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(firstPersonToDelete.getNric());","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"-":71,"thennant":18}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"mandykqh"},"content":"// import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-18"},{"lineNumber":9,"author":{"gitId":"mandykqh"},"content":"// import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"mandykqh"},"content":"// import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2018-01-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"mandykqh"},"content":"// import seedu.address.model.AddressBook;","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"mandykqh"},"content":"// import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"mandykqh"},"content":"// import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-03-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":77,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":111,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":112,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":113,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":124,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":125,"author":{"gitId":"mandykqh"},"content":"    /*","lastModifiedDate":"2023-03-18"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":139,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":146,"author":{"gitId":"thennant"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);","lastModifiedDate":"2023-03-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":154,"author":{"gitId":"thennant"},"content":"    public void execute_invalidPersonNameFilteredList_failure() {","lastModifiedDate":"2023-03-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":163,"author":{"gitId":"thennant"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_NAME);","lastModifiedDate":"2023-03-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"mandykqh":24,"-":164,"thennant":3}},{"path":"src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"StefanosAv":5,"-":58}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"        Nric firstNric \u003d new Nric(\"S1234567X\");","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"        Nric secondNric \u003d new Nric(\"T1234567A\");","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstNric);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondNric);","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstNric);","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"StefanosAv":6,"-":40}},{"path":"src/test/java/seedu/address/logic/commands/PrescribeCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICATION_AMY;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_MEDICATION_BOB;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.commands.PrescribeCommand.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-18"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-17"},{"lineNumber":19,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"PeanutButters93"},"content":"public class PrescribeCommandTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"PeanutButters93"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"PeanutButters93"},"content":"    private Medication amyMedication \u003d new Medication(VALID_MEDICATION_AMY); // \" \" format","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"PeanutButters93"},"content":"    private Medication bobMedication \u003d new Medication(VALID_MEDICATION_BOB); // \"qty medication\" format","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"PeanutButters93"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-16"},{"lineNumber":33,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PrescribeCommand(null, null));","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PrescribeCommand(INDEX_FIRST_PERSON, null));","lastModifiedDate":"2023-03-16"},{"lineNumber":35,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(NullPointerException.class, () -\u003e new PrescribeCommand(null, amyMedication));","lastModifiedDate":"2023-03-16"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"    public void execute_addMedication_success() {","lastModifiedDate":"2023-03-16"},{"lineNumber":40,"author":{"gitId":"PeanutButters93"},"content":"        Person targetPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"        Person editedPerson \u003d new PersonBuilder(targetPerson).withMedication(bobMedication.value).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"PeanutButters93"},"content":"        PrescribeCommand prescribeCommand \u003d new PrescribeCommand(INDEX_FIRST_PERSON, bobMedication);","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"PeanutButters93"},"content":"        String expectedMessage \u003d String.format(PrescribeCommand.MESSAGE_ADD_PRESCRIBE_SUCCESS, editedPerson);","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"        expectedModel.setPerson(targetPerson, editedPerson);","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"        assertCommandSuccess(prescribeCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"    public void execute_removeMedication_success() {","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"        Person targetPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"PeanutButters93"},"content":"        Person editedPerson \u003d new PersonBuilder(targetPerson).withMedication(amyMedication.value).build();","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"PeanutButters93"},"content":"        PrescribeCommand prescribeCommand \u003d new PrescribeCommand(INDEX_FIRST_PERSON, amyMedication);","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"PeanutButters93"},"content":"        String expectedMessage \u003d String.format(PrescribeCommand.MESSAGE_DELETE_PRESCRIBE_SUCCESS, editedPerson);","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"PeanutButters93"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"PeanutButters93"},"content":"        expectedModel.setPerson(targetPerson, editedPerson);","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"PeanutButters93"},"content":"        assertCommandSuccess(prescribeCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"PeanutButters93"},"content":"    public void execute_invalidIndex_throwsCommandException() {","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"PeanutButters93"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"PeanutButters93"},"content":"        PrescribeCommand prescribeCommand \u003d new PrescribeCommand(outOfBoundIndex, amyMedication);","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":71,"author":{"gitId":"PeanutButters93"},"content":"        assertCommandFailure(prescribeCommand, model, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-18"},{"lineNumber":72,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":73,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"PeanutButters93"},"content":"    public void equals() {","lastModifiedDate":"2023-03-16"},{"lineNumber":76,"author":{"gitId":"PeanutButters93"},"content":"        PrescribeCommand prescribeAmy \u003d new PrescribeCommand(INDEX_FIRST_PERSON, amyMedication);","lastModifiedDate":"2023-03-16"},{"lineNumber":77,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":78,"author":{"gitId":"PeanutButters93"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-16"},{"lineNumber":79,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(prescribeAmy.equals(prescribeAmy));","lastModifiedDate":"2023-03-16"},{"lineNumber":80,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":81,"author":{"gitId":"PeanutButters93"},"content":"        // same values -\u003e return true","lastModifiedDate":"2023-03-16"},{"lineNumber":82,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(prescribeAmy.equals(new PrescribeCommand(INDEX_FIRST_PERSON, amyMedication)));","lastModifiedDate":"2023-03-16"},{"lineNumber":83,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":84,"author":{"gitId":"PeanutButters93"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":85,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(prescribeAmy.equals(1));","lastModifiedDate":"2023-03-16"},{"lineNumber":86,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":87,"author":{"gitId":"PeanutButters93"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":88,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(prescribeAmy.equals(null));","lastModifiedDate":"2023-03-16"},{"lineNumber":89,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":90,"author":{"gitId":"PeanutButters93"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(prescribeAmy.equals(new PrescribeCommand(INDEX_SECOND_PERSON, amyMedication)));","lastModifiedDate":"2023-03-16"},{"lineNumber":92,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(prescribeAmy.equals(new PrescribeCommand(INDEX_FIRST_PERSON, bobMedication)));","lastModifiedDate":"2023-03-16"},{"lineNumber":93,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(prescribeAmy.equals(new PrescribeCommand(INDEX_SECOND_PERSON, bobMedication)));","lastModifiedDate":"2023-03-16"},{"lineNumber":94,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"PeanutButters93"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"PeanutButters93":95}},{"path":"src/test/java/seedu/address/logic/parser/AddDoctorCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"public class AddDoctorCommandParserTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"    private AddDoctorCommandParser parser \u003d new AddDoctorCommandParser();","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"        Doctor expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"        // multiple NRICs - last nric accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_AMY","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"StefanosAv"},"content":"                new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"StefanosAv"},"content":"        Doctor expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"                .buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"                new AddDoctorCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"StefanosAv"},"content":"        Doctor expectedPerson \u003d new PersonBuilder(AMY).withTags().buildDoctor();","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_AMY","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_AMY, new AddDoctorCommand(expectedPerson));","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"StefanosAv"},"content":"                        + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":111,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"        // missing nric prefix","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_NRIC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":114,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2023-03-09"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_NRIC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2023-03-09"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"        // invalid nric","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_NRIC_DESC","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"StefanosAv"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2023-03-09"},{"lineNumber":148,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":149,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2023-03-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-09"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-09"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDoctorCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"StefanosAv":62,"-":98}},{"path":"src/test/java/seedu/address/logic/parser/AddPatientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.AMY;","lastModifiedDate":"2018-07-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-07-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-06-15"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"StefanosAv"},"content":"public class AddPatientCommandParserTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"    private AddPatientCommandParser parser \u003d new AddPatientCommandParser();","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        Patient expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"StefanosAv"},"content":"        // multiple NRICs - last nric accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_AMY","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"StefanosAv"},"content":"                new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"        Patient expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"StefanosAv"},"content":"                .buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"StefanosAv"},"content":"                new AddPatientCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"        Patient expectedPerson \u003d new PersonBuilder(AMY).withTags().buildPatient();","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + NRIC_DESC_AMY","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_AMY, new AddPatientCommand(expectedPerson));","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"StefanosAv"},"content":"                        + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"        // missing nric prefix","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_NRIC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_NRIC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"                + VALID_ADDRESS_BOB, expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"        // invalid nric","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_NRIC_DESC","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":145,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":146,"author":{"gitId":"StefanosAv"},"content":"                + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":149,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":150,"author":{"gitId":"StefanosAv"},"content":"                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + NRIC_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"StefanosAv"},"content":"                + INVALID_ADDRESS_DESC, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"                + NRIC_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPatientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"StefanosAv":86,"-":75}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"thennant"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.logic.commands.PrescribeCommand;","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"thennant"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"thennant"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"thennant"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"thennant"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"    public void parseCommand_addPatient() throws Exception {","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"        Patient patient \u003d new PersonBuilder(\"Patient\").buildPatient();","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"StefanosAv"},"content":"        AddPatientCommand command \u003d (AddPatientCommand) parser.parseCommand(PersonUtil.getAddPatientCommand(patient));","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(new AddPatientCommand(patient), command);","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"StefanosAv"},"content":"    public void parseCommand_addDoctor() throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        Doctor doctor \u003d new PersonBuilder(\"Doctor\").buildDoctor();","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"StefanosAv"},"content":"        AddDoctorCommand command \u003d (AddDoctorCommand) parser.parseCommand(PersonUtil.getAddDoctorCommand(doctor));","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(new AddDoctorCommand(doctor), command);","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"thennant"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"thennant"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + \" ic/S1234567A\");","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"thennant"},"content":"        assertEquals(new DeleteCommand(personToDelete.getNric()), command);","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":78,"author":{"gitId":"StefanosAv"},"content":"        System.out.println(command);","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"StefanosAv"},"content":"        Nric nric \u003d new Nric(\"S1234567A\");","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"                FindCommand.COMMAND_WORD + \" ic/\" + nric);","lastModifiedDate":"2023-03-29"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(new FindCommand(new Nric(\"S1234567A\")), command);","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":109,"author":{"gitId":"PeanutButters93"},"content":"    public void parseCommand_prescribe() throws Exception {","lastModifiedDate":"2023-03-16"},{"lineNumber":110,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(parser.parseCommand(","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"PeanutButters93"},"content":"                PrescribeCommand.COMMAND_WORD + \" 3 \" + PREFIX_MEDICATION) instanceof PrescribeCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":113,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":124,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"PeanutButters93":8,"StefanosAv":18,"-":88,"thennant":10}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"thennant"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"thennant"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"thennant"},"content":"    public void parse_emptyArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"thennant"},"content":"        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"thennant"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"thennant"},"content":"        Nric nric \u003d new Nric(\"S9876541C\");","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"thennant"},"content":"        assertParseSuccess(parser, \" ic/S9876541C\", new DeleteCommand(nric));","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"thennant"},"content":"        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":38,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"-":29,"thennant":10}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NRIC_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":93,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NRIC_DESC, Nric.MESSAGE_CONSTRAINTS); // invalid nric","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2017-05-04"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"StefanosAv"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_NRIC_AMY","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"                + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"                + EMAIL_DESC_AMY + NRIC_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"StefanosAv"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"StefanosAv"},"content":"                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":136,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":181,"author":{"gitId":"StefanosAv"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + NRIC_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"StefanosAv"},"content":"                .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":185,"author":{"gitId":"StefanosAv"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":186,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2017-05-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2017-05-25"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2017-05-04"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":220,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"StefanosAv":15,"-":205}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"    private static final String INVALID_NRIC \u003d \"A1234567C\";","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"    private static final String VALID_NRIC \u003d \"S1234567C\";","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":131,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":132,"author":{"gitId":"StefanosAv"},"content":"    public void parseNric_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNric((String) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"StefanosAv"},"content":"    public void parseNric_invalidValue_throwsParseException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNric(INVALID_NRIC));","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"StefanosAv"},"content":"    public void parseNric_validValueWithoutWhitespace_returnsNric() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"StefanosAv"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(VALID_NRIC));","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":146,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":148,"author":{"gitId":"StefanosAv"},"content":"    public void parseNric_validValueWithWhitespace_returnsTrimmedNric() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"StefanosAv"},"content":"        String nricWithWhitespace \u003d WHITESPACE + VALID_NRIC + WHITESPACE;","lastModifiedDate":"2023-03-06"},{"lineNumber":150,"author":{"gitId":"StefanosAv"},"content":"        Nric expectedNric \u003d new Nric(VALID_NRIC);","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"StefanosAv"},"content":"        assertEquals(expectedNric, ParserUtil.parseNric(nricWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":194,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":217,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"StefanosAv":26,"-":196}},{"path":"src/test/java/seedu/address/logic/parser/PrescribeCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-16"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-16"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.logic.commands.PrescribeCommand;","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"class PrescribeCommandParserTest {","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"    private PrescribeCommandParser parser \u003d new PrescribeCommandParser();","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"PeanutButters93"},"content":"    public void parse_validArgs_returnsPrescribeCommand() {","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"PeanutButters93"},"content":"        assertParseSuccess(parser, \"1 m/\", new PrescribeCommand(INDEX_FIRST_PERSON, new Medication(\"\")));","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"        assertParseSuccess(parser, \"1 m/1 a\", new PrescribeCommand(INDEX_FIRST_PERSON, new Medication(\"1 a\")));","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"PeanutButters93"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"PeanutButters93"},"content":"        assertParseFailure(parser, \"a m/1 a\",","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"PeanutButters93"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PrescribeCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"PeanutButters93"},"content":"        assertParseFailure(parser, \"1 m/a\", Medication.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"PeanutButters93"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"PeanutButters93":29}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons);","lastModifiedDate":"2018-03-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":92,"author":{"gitId":"mandykqh"},"content":"        private final ObservableList\u003cAppointment\u003e appointments \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-26"},{"lineNumber":93,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons) {","lastModifiedDate":"2018-03-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":104,"author":{"gitId":"mandykqh"},"content":"        @Override","lastModifiedDate":"2023-03-26"},{"lineNumber":105,"author":{"gitId":"mandykqh"},"content":"        public ObservableList\u003cAppointment\u003e getAppointmentList() {","lastModifiedDate":"2023-03-26"},{"lineNumber":106,"author":{"gitId":"mandykqh"},"content":"            return appointments;","lastModifiedDate":"2023-03-26"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"        }","lastModifiedDate":"2023-03-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"mandykqh":8,"-":102}},{"path":"src/test/java/seedu/address/model/person/MedicationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"PeanutButters93"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"PeanutButters93"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"PeanutButters93"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"PeanutButters93"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":8,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":9,"author":{"gitId":"PeanutButters93"},"content":"public class MedicationTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"PeanutButters93"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Medication(null));","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"    public void constructor_invalidMedication_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"PeanutButters93"},"content":"        String invalidMedication \u003d \"\";","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidMedication));","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(NullPointerException.class, () -\u003e Medication.isValidMedication(null));","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_whitespaceOnly_returnsFalse() {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(Medication.isValidMedication(\" \"));","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_oneLetter_returnsFalse() {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(Medication.isValidMedication(\"a\")); // 1 word","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_twoSeparateLetters_returnsFalse() {","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"        assertFalse(Medication.isValidMedication(\"a b\")); // 2 words","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_emptyString_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_simpleCase_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"50 drugA\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_medicationWithWhitespace_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"50 drug A\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_twoMedicationNoSpace_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"50 drug A;50 drug B\")); // Two medications with ; no space","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_twoMedicationWithSpace_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"50 drug A; 50 drug B\")); // Two medications with ; + space","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"PeanutButters93"},"content":"    public void isValidMedication_threeMedication_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"PeanutButters93"},"content":"        assertTrue(Medication.isValidMedication(\"20 Paracetamol 500mg; 1 DiHydrogen Monoxide; 1 physiotherapy\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"PeanutButters93"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"PeanutButters93":73}},{"path":"src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"thennant"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    //@@author chatGPT-reused","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    // Reused from chatGPT","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    // with minor modifications","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void testToString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"Alice\", \"John\", \"Nick\");","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(keywords);","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String expectedString \u003d keywords.toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String actualString \u003d predicate.toString();","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedString, actualString);","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"-":88,"thennant":3}},{"path":"src/test/java/seedu/address/model/person/NricTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"StefanosAv"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"public class NricTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Nric(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"    public void constructor_invalidNric_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"        String invalidNric \u003d \"\";","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Nric(invalidNric));","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"    public void isValidNric() {","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"        // null nric","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e Nric.isValidNric(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"        // invalid nric","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Nric.isValidNric(\"\")); // empty string","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Nric.isValidNric(\" \")); // spaces only","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Nric.isValidNric(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Nric.isValidNric(\"S1234*67L\")); // contains non-alphanumeric characters","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Nric.isValidNric(\"Q1234567L\")); // first character is not eligible","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        // valid nric","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Nric.isValidNric(\"S1234567P\")); // valid NRIC","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Nric.isValidNric(\"T1234567Q\")); // valid NRIC","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Nric.isValidNric(\"F1234567W\")); // valid NRIC","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Nric.isValidNric(\"G1234567E\")); // valid NRIC","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Nric.isValidNric(\"M1234567M\")); // valid NRIC","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"StefanosAv":41}},{"path":"src/test/java/seedu/address/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.person;","lastModifiedDate":"2018-03-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-04-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-03-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"        // same nric, all other attributes different -\u003e returns true","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"StefanosAv"},"content":"        // different nric, all other attributes same -\u003e returns false","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"StefanosAv"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"StefanosAv"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"StefanosAv"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"mandykqh"},"content":"    // todo add containsByName","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"StefanosAv":8,"mandykqh":2,"-":79}},{"path":"src/test/java/seedu/address/model/person/RoleTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"StefanosAv"},"content":"package seedu.address.model.person;","lastModifiedDate":"2023-03-22"},{"lineNumber":2,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"StefanosAv"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"StefanosAv"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-22"},{"lineNumber":5,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"public class RoleTest {","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":11,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Role(null));","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"    /*@Test","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"    public void constructor_invalidRole_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"        String invalidRole \u003d \"Nurse\";","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Role(invalidRole));","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"StefanosAv"},"content":"    }*/","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"StefanosAv"},"content":"    public void isValidRole() {","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"StefanosAv"},"content":"        // null role","lastModifiedDate":"2023-03-22"},{"lineNumber":25,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(NullPointerException.class, () -\u003e Role.isValidRole(null));","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"        // invalid role","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Role.isValidRole(\"\")); // empty string","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Role.isValidRole(\" \")); // spaces only","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Role.isValidRole(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"        assertFalse(Role.isValidRole(\"Doctor*\")); // contains non-alphanumeric characters","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"        // valid role","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Role.isValidRole(\"Doctor\")); // Doctor","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"        assertTrue(Role.isValidRole(\"Patient\")); // Patient","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"}","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"StefanosAv":37}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"PeanutButters93"},"content":"    private static final String INVALID_MEDICATION \u003d \"paracetamol\";","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"    private static final String INVALID_NRIC \u003d \"123456789\";","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"    private static final String INVALID_ROLE \u003d \"Staff\";","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"    private static final String VALID_MEDICATION \u003d BENSON.getMedication().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"mandykqh"},"content":"    private static final ArrayList\u003cJsonAdaptedAppointment\u003e VALID_APPOINTMENTS \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"            new ArrayList\u003c\u003e(BENSON.getPatientAppointments().stream()","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"mandykqh"},"content":"                    .map(JsonAdaptedAppointment::new)","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"mandykqh"},"content":"                    .collect(Collectors.toList()));","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"StefanosAv"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"StefanosAv"},"content":"    private static final String VALID_ROLE \u003d BENSON.getRole().toString();","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"PeanutButters93"},"content":"                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC, VALID_ADDRESS,","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"                        VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"mandykqh"},"content":"                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-16"},{"lineNumber":74,"author":{"gitId":"StefanosAv"},"content":"                        VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"StefanosAv"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"mandykqh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-16"},{"lineNumber":91,"author":{"gitId":"StefanosAv"},"content":"                        VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_NRIC,","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"StefanosAv"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"StefanosAv"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"mandykqh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_NRIC, VALID_ADDRESS,","lastModifiedDate":"2023-03-16"},{"lineNumber":108,"author":{"gitId":"StefanosAv"},"content":"                        VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"StefanosAv"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"StefanosAv"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"StefanosAv"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"mandykqh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-16"},{"lineNumber":125,"author":{"gitId":"StefanosAv"},"content":"                        INVALID_ADDRESS, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"mandykqh"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-18"},{"lineNumber":133,"author":{"gitId":"StefanosAv"},"content":"                null, VALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":138,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":139,"author":{"gitId":"PeanutButters93"},"content":"    public void toModelType_invalidMedication_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":140,"author":{"gitId":"PeanutButters93"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-18"},{"lineNumber":141,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, INVALID_MEDICATION, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":142,"author":{"gitId":"PeanutButters93"},"content":"        String expectedMessage \u003d Medication.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":144,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":145,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":146,"author":{"gitId":"PeanutButters93"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"PeanutButters93"},"content":"    public void toModelType_nullMedication_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"PeanutButters93"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-18"},{"lineNumber":149,"author":{"gitId":"StefanosAv"},"content":"                VALID_ADDRESS, null, VALID_TAGS, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":150,"author":{"gitId":"PeanutButters93"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Medication.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"PeanutButters93"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":152,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":153,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":159,"author":{"gitId":"mandykqh"},"content":"                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_NRIC,","lastModifiedDate":"2023-03-16"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"                        VALID_ADDRESS, VALID_MEDICATION, invalidTags, VALID_APPOINTMENTS, VALID_ROLE);","lastModifiedDate":"2023-03-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":164,"author":{"gitId":"mandykqh"},"content":"    // todo add invalid appmt test","lastModifiedDate":"2023-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"PeanutButters93":18,"StefanosAv":35,"mandykqh":11,"-":101}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.HOON;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.IDA;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"StefanosAv"},"content":"    /*@Test","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"    }*/","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"StefanosAv":2,"-":107}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"    //private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"StefanosAv"},"content":"    //private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"StefanosAv":2,"-":24}},{"path":"src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-12-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-12-23"},{"lineNumber":10,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-12-23"},{"lineNumber":12,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-12-23"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private EditPersonDescriptor descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"PeanutButters93"},"content":"    private boolean isDoctor;","lastModifiedDate":"2023-03-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.descriptor \u003d new EditPersonDescriptor(descriptor);","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":43,"author":{"gitId":"StefanosAv"},"content":"        descriptor.setNric(person.getNric());","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":46,"author":{"gitId":"mandykqh"},"content":"        descriptor.setAppointments(person.getPatientAppointments());","lastModifiedDate":"2023-03-18"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"PeanutButters93"},"content":"        if (person.isDoctor()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"            isDoctor \u003d true;","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"            // isPatient","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"            Patient patient \u003d (Patient) person;","lastModifiedDate":"2023-03-18"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"            descriptor.setMedication(patient.getMedication());","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":81,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"     * Sets the {@code Nric} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"StefanosAv"},"content":"    public EditPersonDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"StefanosAv"},"content":"        return this;","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":97,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"     * Sets the {@code Medication} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"PeanutButters93"},"content":"    public EditPersonDescriptorBuilder withMedication(String address) {","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"PeanutButters93"},"content":"        descriptor.setMedication(new Medication(address));","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"PeanutButters93"},"content":"        return this;","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":104,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":115,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"StefanosAv"},"content":"     * Sets the {@code Role} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"    public EditPersonDescriptorBuilder withRole(String role) {","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"        descriptor.setRole(new Role(role));","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"StefanosAv"},"content":"        return this;","lastModifiedDate":"2023-03-21"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public EditPersonDescriptor build() {","lastModifiedDate":"2017-05-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"PeanutButters93":18,"StefanosAv":20,"mandykqh":1,"-":87}},{"path":"src/test/java/seedu/address/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"mandykqh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":7,"author":{"gitId":"mandykqh"},"content":"import seedu.address.model.appointment.Appointment;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Role;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"    public static final String DEFAULT_NRIC \u003d \"S1234967G\";","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"    public static final String DEFAULT_MEDICATION \u003d \"\";","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"    public static final String DEFAULT_ROLE_PATIENT \u003d \"Patient\";","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"    private Nric nric;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"    private Medication medication;","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"mandykqh"},"content":"    private ArrayList\u003cAppointment\u003e appointments;","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"StefanosAv"},"content":"    private Role role;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"    private boolean isDoctor;","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":52,"author":{"gitId":"StefanosAv"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"        medication \u003d new Medication(DEFAULT_MEDICATION);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"mandykqh"},"content":"        appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"        role \u003d new Role(DEFAULT_ROLE_PATIENT);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"StefanosAv"},"content":"     * Initializes the PersonBuilder with the data of {@code role}.","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"StefanosAv"},"content":"    public PersonBuilder(String role) {","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"StefanosAv"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"StefanosAv"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2023-03-22"},{"lineNumber":66,"author":{"gitId":"StefanosAv"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"StefanosAv"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2023-03-22"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"        medication \u003d new Medication(DEFAULT_MEDICATION);","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"StefanosAv"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"StefanosAv"},"content":"        appointments \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"StefanosAv"},"content":"        this.role \u003d new Role(role);","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":82,"author":{"gitId":"StefanosAv"},"content":"        nric \u003d personToCopy.getNric();","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":84,"author":{"gitId":"PeanutButters93"},"content":"        if (personToCopy.isPatient()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"PeanutButters93"},"content":"            Patient patientToCopy \u003d (Patient) personToCopy;","lastModifiedDate":"2023-03-18"},{"lineNumber":86,"author":{"gitId":"PeanutButters93"},"content":"            medication \u003d patientToCopy.getMedication();","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"PeanutButters93"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"PeanutButters93"},"content":"            isDoctor \u003d true;","lastModifiedDate":"2023-03-18"},{"lineNumber":89,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":91,"author":{"gitId":"mandykqh"},"content":"        appointments \u003d new ArrayList\u003c\u003e(personToCopy.getPatientAppointments());","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"StefanosAv"},"content":"        role \u003d personToCopy.getRole();","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String ... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":135,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"PeanutButters93"},"content":"     * Sets the {@code Medication} of the {@code Person} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"PeanutButters93"},"content":"    public PersonBuilder withMedication(String medication) {","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"PeanutButters93"},"content":"        this.medication \u003d new Medication(medication);","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"PeanutButters93"},"content":"        return this;","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"PeanutButters93"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"mandykqh"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":144,"author":{"gitId":"mandykqh"},"content":"     * Sets the {@code Appointment} of the {@code Person} that we are building.","lastModifiedDate":"2023-03-18"},{"lineNumber":145,"author":{"gitId":"mandykqh"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":146,"author":{"gitId":"mandykqh"},"content":"    public PersonBuilder withAppointment(String ... appointment) {","lastModifiedDate":"2023-03-15"},{"lineNumber":147,"author":{"gitId":"mandykqh"},"content":"        this.appointments.add(SampleDataUtil.getAppointment(appointment));","lastModifiedDate":"2023-03-15"},{"lineNumber":148,"author":{"gitId":"mandykqh"},"content":"        return this;","lastModifiedDate":"2023-03-15"},{"lineNumber":149,"author":{"gitId":"mandykqh"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":150,"author":{"gitId":"mandykqh"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":151,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"StefanosAv"},"content":"     * Sets the {@code Nric} of the {@code Person} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"StefanosAv"},"content":"    public PersonBuilder withNric(String nric) {","lastModifiedDate":"2023-03-06"},{"lineNumber":155,"author":{"gitId":"StefanosAv"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"StefanosAv"},"content":"        return this;","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":158,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":160,"author":{"gitId":"StefanosAv"},"content":"     * Sets the {@code Role} of the {@code Person} that we are building.","lastModifiedDate":"2023-03-21"},{"lineNumber":161,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"StefanosAv"},"content":"    public PersonBuilder withRole(String role) {","lastModifiedDate":"2023-03-21"},{"lineNumber":163,"author":{"gitId":"StefanosAv"},"content":"        this.role \u003d new Role(role);","lastModifiedDate":"2023-03-21"},{"lineNumber":164,"author":{"gitId":"StefanosAv"},"content":"        return this;","lastModifiedDate":"2023-03-21"},{"lineNumber":165,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":166,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":167,"author":{"gitId":"PeanutButters93"},"content":"    /**","lastModifiedDate":"2023-03-18"},{"lineNumber":168,"author":{"gitId":"PeanutButters93"},"content":"     * Returns {@code Doctor} or {@code Patient} with all the details defined by the with functions.","lastModifiedDate":"2023-03-18"},{"lineNumber":169,"author":{"gitId":"PeanutButters93"},"content":"     * Undefined attributes will have default values","lastModifiedDate":"2023-03-18"},{"lineNumber":170,"author":{"gitId":"PeanutButters93"},"content":"     */","lastModifiedDate":"2023-03-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":172,"author":{"gitId":"PeanutButters93"},"content":"        if (isDoctor) {","lastModifiedDate":"2023-03-18"},{"lineNumber":173,"author":{"gitId":"PeanutButters93"},"content":"            return buildDoctor();","lastModifiedDate":"2023-03-18"},{"lineNumber":174,"author":{"gitId":"PeanutButters93"},"content":"        } else {","lastModifiedDate":"2023-03-18"},{"lineNumber":175,"author":{"gitId":"PeanutButters93"},"content":"            return buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":176,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":179,"author":{"gitId":"StefanosAv"},"content":"    public Patient buildPatient() {","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"StefanosAv"},"content":"        return new Patient(name, phone, email, nric, address, medication, tags, appointments, role);","lastModifiedDate":"2023-03-21"},{"lineNumber":181,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":182,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"StefanosAv"},"content":"    public Doctor buildDoctor() {","lastModifiedDate":"2023-03-09"},{"lineNumber":184,"author":{"gitId":"StefanosAv"},"content":"        return new Doctor(name, phone, email, nric, address, tags, appointments, role);","lastModifiedDate":"2023-03-21"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":187,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"PeanutButters93":28,"StefanosAv":47,"mandykqh":13,"-":99}},{"path":"src/test/java/seedu/address/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"PeanutButters93"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_MEDICATION;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":13,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddDoctorCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.logic.commands.AddPatientCommand;","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2018-03-26"},{"lineNumber":16,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":27,"author":{"gitId":"StefanosAv"},"content":"     * Returns an addDoctor command string for adding the {@code doctor}.","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"StefanosAv"},"content":"    public static String getAddDoctorCommand(Doctor doctor) {","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"StefanosAv"},"content":"        return AddDoctorCommand.COMMAND_WORD + \" \" + getPersonDetails(doctor);","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"StefanosAv"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"StefanosAv"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"StefanosAv"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"StefanosAv"},"content":"     * Returns an addPatient command string for adding the {@code patient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"StefanosAv"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"StefanosAv"},"content":"    public static String getAddPatientCommand(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"StefanosAv"},"content":"        return AddPatientCommand.COMMAND_WORD + \" \" + getPersonDetails(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2017-04-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2017-06-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"        sb.append(PREFIX_NRIC + person.getNric().nric + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2017-05-09"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"        if (person.isPatient() \u0026\u0026 !((Patient) person).getMedication().isEmpty()) {","lastModifiedDate":"2023-03-18"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"            sb.append(\"; Medication: \")","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"                    .append(((Patient) person).getMedication());","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"        }","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2017-05-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {","lastModifiedDate":"2018-03-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":69,"author":{"gitId":"StefanosAv"},"content":"        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.nric).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":71,"author":{"gitId":"PeanutButters93"},"content":"        descriptor.getMedication().ifPresent(medication -\u003e sb.append(PREFIX_MEDICATION).append(medication.value)","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"PeanutButters93"},"content":"                .append(\" \"));","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"PeanutButters93":8,"StefanosAv":17,"-":58}},{"path":"src/test/java/seedu/address/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"StefanosAv"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"StefanosAv"},"content":"import seedu.address.model.person.Doctor;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"PeanutButters93"},"content":"import seedu.address.model.person.Patient;","lastModifiedDate":"2023-03-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class TypicalPersons {","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":30,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient ALICE \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":31,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Alice Pauline\")","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\")","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"alice@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":35,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"S1234567A\")","lastModifiedDate":"2023-03-18"},{"lineNumber":36,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"\")","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"PeanutButters93"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2023-03-18"},{"lineNumber":38,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":40,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient BENSON \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":41,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Benson Meier\")","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":43,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"johnd@example.com\")","lastModifiedDate":"2023-03-18"},{"lineNumber":44,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"98765432\")","lastModifiedDate":"2023-03-18"},{"lineNumber":45,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"S1234567B\")","lastModifiedDate":"2023-03-18"},{"lineNumber":46,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"20 Paracetamol\")","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"PeanutButters93"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2023-03-18"},{"lineNumber":48,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":50,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient CARL \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":51,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Carl Kurz\")","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"95352563\")","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"T1234567C\")","lastModifiedDate":"2023-03-18"},{"lineNumber":54,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"heinz@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"20 Paracetamol; 20 Oprhenadrine\")","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"wall street\")","lastModifiedDate":"2023-03-18"},{"lineNumber":57,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":59,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient DANIEL \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":60,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Daniel Meier\")","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"87652533\")","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"cornelia@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"T1234567W\")","lastModifiedDate":"2023-03-18"},{"lineNumber":64,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"10th street\")","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"1 Cough Syrup\")","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"PeanutButters93"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2023-03-18"},{"lineNumber":67,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":69,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient ELLE \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":70,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Elle Meyer\")","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"9482224\")","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"werner@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"S1234569L\")","lastModifiedDate":"2023-03-18"},{"lineNumber":74,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"1 Physiotherapy\")","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"michegan ave\")","lastModifiedDate":"2023-03-18"},{"lineNumber":76,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":78,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient FIONA \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":79,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"Fiona Kunz\")","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"lydia@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"M1234067P\")","lastModifiedDate":"2023-03-18"},{"lineNumber":83,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"1 Drug A; 2 Drug B; 3 Drug C; 4 Drug D\")","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"little tokyo\")","lastModifiedDate":"2023-03-18"},{"lineNumber":85,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":86,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":87,"author":{"gitId":"PeanutButters93"},"content":"    public static final Patient GEORGE \u003d new PersonBuilder()","lastModifiedDate":"2023-03-18"},{"lineNumber":88,"author":{"gitId":"PeanutButters93"},"content":"            .withName(\"George Best\")","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"PeanutButters93"},"content":"            .withPhone(\"9482442\")","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"PeanutButters93"},"content":"            .withEmail(\"anna@example.com\")","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"PeanutButters93"},"content":"            .withMedication(\"1 annual checkup\")","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"PeanutButters93"},"content":"            .withNric(\"S9874567A\")","lastModifiedDate":"2023-03-18"},{"lineNumber":93,"author":{"gitId":"PeanutButters93"},"content":"            .withAddress(\"4th street\")","lastModifiedDate":"2023-03-18"},{"lineNumber":94,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\")","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"PeanutButters93"},"content":"            .buildPatient();","lastModifiedDate":"2023-03-18"},{"lineNumber":96,"author":{"gitId":"StefanosAv"},"content":"    public static final Doctor SARAH \u003d new PersonBuilder()","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"StefanosAv"},"content":"            .withName(\"Sarah Tan\")","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"StefanosAv"},"content":"            .withPhone(\"9482427\")","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"sarah@example.com\")","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"StefanosAv"},"content":"            .withNric(\"S1234567S\")","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"StefanosAv"},"content":"            .withMedication(\"\")","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"StefanosAv"},"content":"            .withAddress(\"Sarah Street\")","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Doctor\")","lastModifiedDate":"2023-03-21"},{"lineNumber":104,"author":{"gitId":"StefanosAv"},"content":"            .buildDoctor();","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"PeanutButters93"},"content":"","lastModifiedDate":"2023-03-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2018-01-10"},{"lineNumber":109,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withNric(\"S0934581L\").withRole(\"Patient\")","lastModifiedDate":"2023-03-22"},{"lineNumber":110,"author":{"gitId":"StefanosAv"},"content":"            .build();","lastModifiedDate":"2023-03-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withNric(\"S0134381S\").withRole(\"Patient\")","lastModifiedDate":"2023-03-22"},{"lineNumber":113,"author":{"gitId":"StefanosAv"},"content":"            .build();","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2018-01-10"},{"lineNumber":117,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(VALID_EMAIL_AMY).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"StefanosAv"},"content":"            .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).withRole(\"Patient\")","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"StefanosAv"},"content":"            .build();","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(VALID_EMAIL_BOB).withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"StefanosAv"},"content":"            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withRole(\"Patient\")","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":125,"author":{"gitId":"thennant"},"content":"    public static final Person JOHN1 \u003d new PersonBuilder().withName(\"John Doe\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withMedication(\"\").withNric(\"T2458659P\")","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\").build();","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"thennant"},"content":"    public static final Person JOHN2 \u003d new PersonBuilder().withName(\"John Tay\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withMedication(\"\").withNric(\"M3438159L\")","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\").build();","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"thennant"},"content":"    public static final Person JOHN3 \u003d new PersonBuilder().withName(\"John Sena\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"StefanosAv"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withMedication(\"\").withNric(\"S3458659P\")","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"StefanosAv"},"content":"            .withRole(\"Patient\").build();","lastModifiedDate":"2023-03-21"},{"lineNumber":136,"author":{"gitId":"thennant"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    private TypicalPersons() {} // prevents instantiation","lastModifiedDate":"2017-07-20"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2017-08-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            ab.addPerson(person);","lastModifiedDate":"2017-08-05"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2018-01-10"},{"lineNumber":153,"author":{"gitId":"StefanosAv"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, SARAH,","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"StefanosAv"},"content":"                JOHN1, JOHN2, JOHN3));","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"PeanutButters93":59,"StefanosAv":36,"-":55,"thennant":6}}]
