[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"[![Java CI](https://github.com/AY2223S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg?branch\u003dmaster)](https://github.com/AY2223S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-02-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"# Introduction","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"Mycelium is a desktop application aimed at helping freelance web developers","lastModifiedDate":"2023-02-27"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"manage clients and projects from multiple online sources. All interactions","lastModifiedDate":"2023-02-27"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"with Mycelium are through text commands, allowing for efficient manipulation","lastModifiedDate":"2023-02-27"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"of data while benefiting from the ease of viewing offered by the Graphical","lastModifiedDate":"2023-02-27"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"User Interface.","lastModifiedDate":"2023-02-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"# Main Layout","lastModifiedDate":"2023-02-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"As shown in the mockup above, Mycelium has two main tabs. One tab lists all","lastModifiedDate":"2023-02-27"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"existing projects, and the other lists existing clients.","lastModifiedDate":"2023-02-27"}],"authorContributionMap":{"immanuelhume":13,"-":5}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"mainClassName \u003d \u0027mycelium.mycelium.Main\u0027","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"//    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.5.1\u0027","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit5\u0027, version: \u00274.0.16-alpha\u0027","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"    testImplementation group: \u0027org.assertj\u0027, name: \u0027assertj-core\u0027, version: \u00273.13.2\u0027","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    archiveFileName \u003d \u0027addressbook.jar\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":71,"immanuelhume":1,"RubyNguyen07":3}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"### Nguyen Hong Ngoc","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"\u003cimg src\u003d\"images/rubynguyen07.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"[[github](http://github.com/RubyNguyen07)]","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"[[portfolio](team/rubynguyen07.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"* Role: Developer","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"* Responsibilities: UI for Clients view","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"### Douglas Chow","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"\u003cimg src\u003d\"images/douglch.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"StanleyNeoh"},"content":"[[github](http://github.com/douglch)]","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"[[portfolio](team/douglch.md)]","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"* Role: In charge of `Client`","lastModifiedDate":"2023-02-27"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"* Responsibilities: Writing and testing the class for Client Panel - Create, Delete.","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"### Li Junyi","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"StanleyNeoh"},"content":"\u003cimg src\u003d\"images/immanuelhume.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"[[github](http://github.com/immanuelhume)]","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"StanleyNeoh"},"content":"[[portfolio](team/immanuelhume.md)]","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"* Responsibilities: Project entity and CRUD","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"### Stanley Neoh","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"\u003cimg src\u003d\"images/stanleyneoh.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"StanleyNeoh"},"content":"[[github](https://github.com/StanleyNeoh)]","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"StanleyNeoh"},"content":"[[portfolio](team/stanleyneoh.md)]","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"* Responsibilities: Writing and testing the GUI for the Project Panel","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"### Sachin Kalinga","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"\u003cimg src\u003d\"images/sachindavid96.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"[[github](http://github.com/sachindavid96)]","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"[[portfolio](team/sachindavid96.md)]","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"* Responsibilities: Implementing the Parser","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"sachindavid96":5,"StanleyNeoh":12,"-":33,"RubyNguyen07":6,"Douglch":4}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2021-07-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2021-07-21"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"  * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"  * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":247,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":248,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":250,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"Douglch"},"content":"**Freelance Devs**","lastModifiedDate":"2023-02-27"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":261,"author":{"gitId":"Douglch"},"content":"Freelance web developers with postings on multiple online marketplaces for digital services (e.g. Fiverr) who want to manage projects and clients easily while tracking their contract terms and hours spent per project.","lastModifiedDate":"2023-02-27"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":263,"author":{"gitId":"Douglch"},"content":"**Value proposition**:","lastModifiedDate":"2023-02-27"},{"lineNumber":264,"author":{"gitId":"Douglch"},"content":"Mycelium strives to be a one-stop shop for freelance web developers to consolidate projects from multiple sources. Manage descriptive yet concise information about each client, all through an intuitive console-first interface. Mycelium is tailored for the modern web developer, enabling you to build strong and trusted relationships with clients.","lastModifiedDate":"2023-02-28"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"RubyNguyen07"},"content":"| Priority | As a …​                                                                                                        | I want to …​                     | So that …​                                                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":272,"author":{"gitId":"RubyNguyen07"},"content":"|----------|----------------------------------------------------------------------------------------------------------------| ------------------------------ |-----------------------------------------------------------------------------|","lastModifiedDate":"2023-03-02"},{"lineNumber":273,"author":{"gitId":"RubyNguyen07"},"content":"| ***      | user                  | easily access each project by name for convenience.                                                            |                                                                             |","lastModifiedDate":"2023-03-02"},{"lineNumber":274,"author":{"gitId":"RubyNguyen07"},"content":"| ***      | user                   | create new projects and contacts.                                                                              |                                                                             |","lastModifiedDate":"2023-03-02"},{"lineNumber":275,"author":{"gitId":"RubyNguyen07"},"content":"| ***      | user     | delete projects and contacts I no longer need.                                                                 |                                                                             |","lastModifiedDate":"2023-03-02"},{"lineNumber":276,"author":{"gitId":"RubyNguyen07"},"content":"| ***      | user     | use the application on different platforms and operating systems.                                              |                                                                             |","lastModifiedDate":"2023-03-02"},{"lineNumber":277,"author":{"gitId":"RubyNguyen07"},"content":"| *        | new user                  | experience an intuitive user-interface. There should be help messages to guide me around the features.         | I can refer to instructions when I forget how to use the App                |","lastModifiedDate":"2023-03-02"},{"lineNumber":278,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                  | efficiently log information about a new client                                                                 | I minimise the effort and time needed to start a project.                   |","lastModifiedDate":"2023-03-02"},{"lineNumber":279,"author":{"gitId":"RubyNguyen07"},"content":"| *        | new user              | login using my GitHub account                                                                                  | it is convenient to login.                                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":280,"author":{"gitId":"RubyNguyen07"},"content":"| *        | new user              | sign up using email and password                                                                               | I can avoid using third party authentication sources, like GitHub or Google. |","lastModifiedDate":"2023-03-02"},{"lineNumber":281,"author":{"gitId":"RubyNguyen07"},"content":"| *        | forgetful user        | be reminded of up coming deadlines                                                                             | I will not miss out any deliverables set by clients.                        |","lastModifiedDate":"2023-03-02"},{"lineNumber":282,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                  | easily categorise the type of each project I have been working on                                              | it is easier to reflect on in the future and navigate.                      |","lastModifiedDate":"2023-03-02"},{"lineNumber":283,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | view statistics related to productivity (which channel I gain most projects, money from)                       | I know which project to put more focus on to earn better money.             |","lastModifiedDate":"2023-03-02"},{"lineNumber":284,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | track my client’s payment status                                                                               | transaction management would be fuss-free.                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":285,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | track my project’s progress                                                                                    | I can provide timely updates to my clients.                                 |","lastModifiedDate":"2023-03-02"},{"lineNumber":286,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | track the time I have worked on for each project                                                               | I can ensure I have allocated time for the different projects I am working on. |","lastModifiedDate":"2023-03-02"},{"lineNumber":287,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | easily view all of my freelance job requests from Fiverr and Upwork in one place.                              |                                                                             |","lastModifiedDate":"2023-03-02"},{"lineNumber":288,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | update my availability status for each platform in one place                                                   | I don\u0027t miss out on job offers due to scheduling conflicts.                 |","lastModifiedDate":"2023-03-02"},{"lineNumber":289,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | store client information, such as contact details and project specifications, in one place                     | I can quickly access it when needed.                                        |","lastModifiedDate":"2023-03-02"},{"lineNumber":290,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user with many clients | easily communicate with clients through the product                                                            | I can streamline my workflow and avoid having to switch between different platforms. |","lastModifiedDate":"2023-03-02"},{"lineNumber":291,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | receive notifications when I receive new job offers or when deadlines are approaching                          | I can stay on top of my workload.                                           |","lastModifiedDate":"2023-03-02"},{"lineNumber":292,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | easily generate invoices for each freelance job and track payment status                                       | I can manage my finances more effectively.                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":293,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | easily rate and review clients                                                                                 | I can make informed decisions about which jobs to accept in the future.     |","lastModifiedDate":"2023-03-02"},{"lineNumber":294,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | follow the work of other developers                                                                            | I can find opportunities to collaborate.                                    |","lastModifiedDate":"2023-03-02"},{"lineNumber":295,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | use the app to estimate the amount of time that I will need for a project                                      | I can determine if I have the capacity to take on new projects.             |","lastModifiedDate":"2023-03-02"},{"lineNumber":296,"author":{"gitId":"RubyNguyen07"},"content":"| *        | user                   | keep in contact with other developers                                                                          | I can work on larger projects efficiently.                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":297,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | update details of existing projects and contacts                                                               | I can keep up with changing requirements of clients.                        |","lastModifiedDate":"2023-03-02"},{"lineNumber":298,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | personalize my contacts                                                                                        | I can know each client better                                               |","lastModifiedDate":"2023-03-02"},{"lineNumber":299,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | export data from the product in different formats, such as CSV or Excel                                        | I can use the information elsewhere.                                        |","lastModifiedDate":"2023-03-02"},{"lineNumber":300,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | securely store confidential information, such as client details                                                | I can keep sensitive information safe.                                      |","lastModifiedDate":"2023-03-02"},{"lineNumber":301,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | use the product offline                                                                                        | I can access my information when I don\u0027t have an internet connection.       |","lastModifiedDate":"2023-03-02"},{"lineNumber":302,"author":{"gitId":"RubyNguyen07"},"content":"| *       | user     | easily search and filter projects based on specific criteria, such as deadline, client name, or project status | I can quickly find the information I need.                                  |","lastModifiedDate":"2023-03-02"},{"lineNumber":303,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"immanuelhume"},"content":"(For all use cases below, the **System** is the `Mycelium` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-02-28"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"immanuelhume"},"content":"**Use case: Create a project**","lastModifiedDate":"2023-02-28"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"immanuelhume"},"content":"1. User enters command and submits details for new project","lastModifiedDate":"2023-02-28"},{"lineNumber":314,"author":{"gitId":"immanuelhume"},"content":"2. Mycelium creates the project","lastModifiedDate":"2023-02-28"},{"lineNumber":315,"author":{"gitId":"immanuelhume"},"content":"3. User can view the new project listed in panel","lastModifiedDate":"2023-02-28"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"immanuelhume"},"content":"* 1a. Required project details are not provided.","lastModifiedDate":"2023-02-28"},{"lineNumber":322,"author":{"gitId":"immanuelhume"},"content":"   * 1a1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":324,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":326,"author":{"gitId":"immanuelhume"},"content":"* 1b. Some projet details are invalid.","lastModifiedDate":"2023-02-28"},{"lineNumber":327,"author":{"gitId":"immanuelhume"},"content":"   * 1b1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":329,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":331,"author":{"gitId":"immanuelhume"},"content":"**Use case: Create a client**","lastModifiedDate":"2023-02-28"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":333,"author":{"gitId":"immanuelhume"},"content":"**MSS**","lastModifiedDate":"2023-02-28"},{"lineNumber":334,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":335,"author":{"gitId":"immanuelhume"},"content":"1. User enters command and submits details for new client","lastModifiedDate":"2023-02-28"},{"lineNumber":336,"author":{"gitId":"immanuelhume"},"content":"2. Mycelium creates the client","lastModifiedDate":"2023-02-28"},{"lineNumber":337,"author":{"gitId":"immanuelhume"},"content":"3. User can view the new client listed in panel","lastModifiedDate":"2023-02-28"},{"lineNumber":338,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"   Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"immanuelhume"},"content":"**Extensions**","lastModifiedDate":"2023-02-28"},{"lineNumber":342,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"immanuelhume"},"content":"* 1a. Required client details are not provided.","lastModifiedDate":"2023-02-28"},{"lineNumber":344,"author":{"gitId":"immanuelhume"},"content":"   * 1a1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"immanuelhume"},"content":"* 1b. Some project details are invalid.","lastModifiedDate":"2023-02-28"},{"lineNumber":349,"author":{"gitId":"immanuelhume"},"content":"   * 1b1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":350,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":351,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":352,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":353,"author":{"gitId":"immanuelhume"},"content":"**Use case: Delete a project**","lastModifiedDate":"2023-02-28"},{"lineNumber":354,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":355,"author":{"gitId":"immanuelhume"},"content":"**MSS**","lastModifiedDate":"2023-02-28"},{"lineNumber":356,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":357,"author":{"gitId":"immanuelhume"},"content":"1. User enters command and submits name of project to delete","lastModifiedDate":"2023-02-28"},{"lineNumber":358,"author":{"gitId":"immanuelhume"},"content":"2. Mycelium deletes the project","lastModifiedDate":"2023-02-28"},{"lineNumber":359,"author":{"gitId":"immanuelhume"},"content":"3. User can no longer see project listed in panel","lastModifiedDate":"2023-02-28"},{"lineNumber":360,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":361,"author":{"gitId":"immanuelhume"},"content":"   Use case ends.","lastModifiedDate":"2023-02-28"},{"lineNumber":362,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":363,"author":{"gitId":"immanuelhume"},"content":"**Extensions**","lastModifiedDate":"2023-02-28"},{"lineNumber":364,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":365,"author":{"gitId":"immanuelhume"},"content":"* 1a. Project with submitted name does not exist.","lastModifiedDate":"2023-02-28"},{"lineNumber":366,"author":{"gitId":"immanuelhume"},"content":"   * 1a1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":367,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":368,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":369,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":370,"author":{"gitId":"immanuelhume"},"content":"**Use case: Delete a client**","lastModifiedDate":"2023-02-28"},{"lineNumber":371,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":372,"author":{"gitId":"immanuelhume"},"content":"**MSS**","lastModifiedDate":"2023-02-28"},{"lineNumber":373,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":374,"author":{"gitId":"immanuelhume"},"content":"1. User enters command and submits email of client to delete","lastModifiedDate":"2023-02-28"},{"lineNumber":375,"author":{"gitId":"immanuelhume"},"content":"2. Mycelium deletes the client","lastModifiedDate":"2023-02-28"},{"lineNumber":376,"author":{"gitId":"immanuelhume"},"content":"3. User can no longer see client listed in panel","lastModifiedDate":"2023-02-28"},{"lineNumber":377,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":378,"author":{"gitId":"immanuelhume"},"content":"   Use case ends.","lastModifiedDate":"2023-02-28"},{"lineNumber":379,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":380,"author":{"gitId":"immanuelhume"},"content":"**Extensions**","lastModifiedDate":"2023-02-28"},{"lineNumber":381,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":382,"author":{"gitId":"immanuelhume"},"content":"* 1a. Client with submitted email does not exist.","lastModifiedDate":"2023-02-28"},{"lineNumber":383,"author":{"gitId":"immanuelhume"},"content":"   * 1a1. Mycelium shows an error message.","lastModifiedDate":"2023-02-28"},{"lineNumber":384,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":385,"author":{"gitId":"immanuelhume"},"content":"   Use case resumes at step 1.","lastModifiedDate":"2023-02-28"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"RubyNguyen07"},"content":"1.  Should be able to hold up to 1000 clients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-02"},{"lineNumber":391,"author":{"gitId":"RubyNguyen07"},"content":"1.  Should be able to hold up to 1000 projects without a noticable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-02"},{"lineNumber":392,"author":{"gitId":"RubyNguyen07"},"content":"1.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-03-02"},{"lineNumber":393,"author":{"gitId":"RubyNguyen07"},"content":"1.  All user operations should complete under 100ms.","lastModifiedDate":"2023-03-02"},{"lineNumber":394,"author":{"gitId":"RubyNguyen07"},"content":"1.  Should not lose any work in case the application crashes.","lastModifiedDate":"2023-03-02"},{"lineNumber":395,"author":{"gitId":"RubyNguyen07"},"content":"1.  Data persists when the application restarts.","lastModifiedDate":"2023-03-02"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":397,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":399,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":402,"author":{"gitId":"sachindavid96"},"content":"* **Console-first Interface**: An interface with interactions primarily through","lastModifiedDate":"2023-03-03"},{"lineNumber":403,"author":{"gitId":"sachindavid96"},"content":"                               text commands","lastModifiedDate":"2023-03-03"},{"lineNumber":404,"author":{"gitId":"sachindavid96"},"content":"* **Project**: A freelance software development job","lastModifiedDate":"2023-03-03"},{"lineNumber":405,"author":{"gitId":"sachindavid96"},"content":"* **Client**: An individual associated with a particular project","lastModifiedDate":"2023-03-03"},{"lineNumber":406,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":407,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":408,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":414,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":416,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":417,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":418,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":419,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":420,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":421,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":422,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":423,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":424,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":425,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":426,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":427,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":428,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":429,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":431,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":433,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":434,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":435,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":436,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":437,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":438,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":439,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":440,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":445,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":447,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":449,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":450,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":451,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":453,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":454,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":455,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":456,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":457,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"sachindavid96":7,"-":353,"immanuelhume":59,"Douglch":4,"RubyNguyen07":38}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"   1. Run the `mycelium.mycelium.Main` and try a few commands.","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBook’s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"-":54,"immanuelhume":1}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"   e.g. `mycelium.mycelium.commons.StringUtilTest`","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"   e.g. `mycelium.mycelium.storage.StorageManagerTest`","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"   e.g. `mycelium.mycelium.logic.LogicManagerTest`","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"-":33,"immanuelhume":3}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"Mycelium is a desktop application aimed at helping **freelance web developers manage clients and projects** from multiple online sources. All interactions with Mycelium are through text commands, allowing for efficient manipulation of data while benefiting from the ease of viewing offered by the Graphical User Interface.","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"## Main View - Projects and Clients","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"Mycelium has two main tabs. One tab lists all existing projects, and the other lists existing clients.","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"### Projects Tab","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"The Projects tab lists all the projects you\u0027ve created. Each project block contains the project’s","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"- Name","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"- Status, which would be either **not started, in progress, or done**","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"- Client","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"- Source, e.g. Fiverr","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"- Description","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"- Accepted date","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"- Deadline","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"### Clients Tab","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"The Clients tab lists all the clients you\u0027ve created. Each client block contains the client’s","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"- Name or username","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"- Year of birth","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"- Email","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"- Phone number","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"- List of associated platforms","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"## Command Layout","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"Commands in Mycelium take the general form of `command_name [arguments]`. Arguments may be compulsory or optional. For optional arguments, Mycelium uses sensible defaults in their place.","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"All arguments take the structure of `-arg arg_data`, and multiple arguments can be specified consecutively. Note that if `arg_data` consists of multiple white-space separated tokens, then it must be surrounded by single quotation marks.","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"As an example, the command below creates a new project with the name *Mycelium Desktop*, for client *Spiderman*, and sourced from *fiverr.com*.","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"```bash","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"p -pn \u0027Mycelium Desktop\u0027 -e spiderman@gmail.com -src fiverr.com","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"### A note on dates","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"For arguments which expect a date, Mycelium only accepts input of the format dd/MM/yyyy.","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"For example, \"14/03/2023\" is okay, but \"14/3/2023\", or \"14-03-2023\" are not okay.","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"## Managing Clients","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"### Creating a client contact: `c`","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"Creates a new client contact.","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"**Compulsory Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"RubyNguyen07"},"content":"- **`-cn client_name`**","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"RubyNguyen07"},"content":"    - The client’s name.","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"RubyNguyen07"},"content":"- **`-e email`**","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"RubyNguyen07"},"content":"    - The client’s email. Must be unique in Mycelium.","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"RubyNguyen07"},"content":"**Optional Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"RubyNguyen07"},"content":"- **`-y year_of_birth`**","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"RubyNguyen07"},"content":"    - The client’s year of birth.","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default**: *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"RubyNguyen07"},"content":"- **`-src source`**","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"RubyNguyen07"},"content":"    - The client’s digital service platform, e.g. Fiverr.","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":81,"author":{"gitId":"RubyNguyen07"},"content":"- **`-mn mobile_number`**","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"RubyNguyen07"},"content":"    - The client’s mobile number.","lastModifiedDate":"2023-02-28"},{"lineNumber":83,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"RubyNguyen07"},"content":"**Examples**","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"RubyNguyen07"},"content":"The following command creates a new client with name *Alice Baker*, whose email is *alice_baker@bakers.com*, born in the year *2000*.","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"RubyNguyen07"},"content":"```bash","lastModifiedDate":"2023-02-28"},{"lineNumber":90,"author":{"gitId":"RubyNguyen07"},"content":"c -cn \u0027Alice Baker\u0027 -e alice_baker@bakers.com -y 2000","lastModifiedDate":"2023-02-28"},{"lineNumber":91,"author":{"gitId":"RubyNguyen07"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"RubyNguyen07"},"content":"### Deleting a client contact: `dc`","lastModifiedDate":"2023-02-28"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"RubyNguyen07"},"content":"Deletes an *existing* client contact.","lastModifiedDate":"2023-02-28"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"RubyNguyen07"},"content":"**Compulsory Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"RubyNguyen07"},"content":"- **`-e email`**","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"RubyNguyen07"},"content":"    - Email of the client to delete.","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"RubyNguyen07"},"content":"**Examples**","lastModifiedDate":"2023-02-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"RubyNguyen07"},"content":"The command `dc -e alice_baker@bakers.com`  deletes the contact with the corresponding email.","lastModifiedDate":"2023-02-28"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"RubyNguyen07"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2023-02-28"},{"lineNumber":107,"author":{"gitId":"RubyNguyen07"},"content":"## Managing Projects","lastModifiedDate":"2023-02-28"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"RubyNguyen07"},"content":"### Creating a project: `p`","lastModifiedDate":"2023-02-28"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"RubyNguyen07"},"content":"Creates a new project.","lastModifiedDate":"2023-02-28"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"RubyNguyen07"},"content":"**Compulsory Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"RubyNguyen07"},"content":"- **`-pn project_name`**","lastModifiedDate":"2023-02-28"},{"lineNumber":116,"author":{"gitId":"RubyNguyen07"},"content":"    - The project’s name, which must be *unique.*","lastModifiedDate":"2023-02-28"},{"lineNumber":117,"author":{"gitId":"RubyNguyen07"},"content":"    - If another project with the same name already exists, then the command *overrides* the existing project with the new details.","lastModifiedDate":"2023-02-28"},{"lineNumber":118,"author":{"gitId":"StanleyNeoh"},"content":"- **`-e client_email`**","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"StanleyNeoh"},"content":"    - The email of the client who submitted this project. Note that this client must have already been created in Mycelium.","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"RubyNguyen07"},"content":"**Optional Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"RubyNguyen07"},"content":"- **`-s status`**","lastModifiedDate":"2023-02-28"},{"lineNumber":124,"author":{"gitId":"RubyNguyen07"},"content":"    - The `status` should be set to either **`not_started` , `in_progress` , or `done` .**","lastModifiedDate":"2023-02-28"},{"lineNumber":125,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** **`not_started`**","lastModifiedDate":"2023-02-28"},{"lineNumber":126,"author":{"gitId":"RubyNguyen07"},"content":"- **`-src source`**","lastModifiedDate":"2023-02-28"},{"lineNumber":127,"author":{"gitId":"RubyNguyen07"},"content":"    - The platform the project is sourced from, such as Fiverr. This can be any arbitrary string.","lastModifiedDate":"2023-02-28"},{"lineNumber":128,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":129,"author":{"gitId":"RubyNguyen07"},"content":"- **`-d description`**","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"RubyNguyen07"},"content":"    - A short description of the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":131,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"RubyNguyen07"},"content":"- **`-ad accepted_date`**","lastModifiedDate":"2023-02-28"},{"lineNumber":133,"author":{"gitId":"RubyNguyen07"},"content":"    - The date that the project was accepted.","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default**: the current date","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"RubyNguyen07"},"content":"- **`-dd deadline_date`**","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"RubyNguyen07"},"content":"    - The due date of the project.","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"RubyNguyen07"},"content":"    - **Default:** *null*","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"RubyNguyen07"},"content":"**Examples**","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"The following command creates a new project whose name is *Mycelium Desktop*, submitted from the client *Spiderman* from *fiverr.com*, with a deadline on *30 February, 2075*.","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":143,"author":{"gitId":"RubyNguyen07"},"content":"```bash","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"p -pn \u0027Mycelium Desktop\u0027 -e spiderman@gmail.com -src fiverr.com -dd 30/02/2075","lastModifiedDate":"2023-03-14"},{"lineNumber":145,"author":{"gitId":"RubyNguyen07"},"content":"```","lastModifiedDate":"2023-02-28"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":147,"author":{"gitId":"RubyNguyen07"},"content":"### Deleting a project: `dp`","lastModifiedDate":"2023-02-28"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":149,"author":{"gitId":"RubyNguyen07"},"content":"Deletes an *existing* project.","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"RubyNguyen07"},"content":"**Compulsory Arguments**","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"RubyNguyen07"},"content":"- `-pn project_name`","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"RubyNguyen07"},"content":"    - Name of the project to delete.","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"RubyNguyen07"},"content":"**Examples**","lastModifiedDate":"2023-02-28"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"RubyNguyen07"},"content":"Running `dp -pn Mycelium` would delete the project with name *Mycelium*.","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"RubyNguyen07"},"content":"Action | Format","lastModifiedDate":"2023-02-28"},{"lineNumber":165,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"RubyNguyen07"},"content":"**Create new client** | c -cn client_name -e email -y year_of_birth -src source -mn mobile_number \u003cbr\u003e e.g., `c -cn \u0027Alice Baker\u0027 -e alice_baker@bakers.com -y 2000`","lastModifiedDate":"2023-02-28"},{"lineNumber":167,"author":{"gitId":"RubyNguyen07"},"content":"**Delete an existing client** | dc -e email \u003cbr\u003e e.g., `dc -e alice_baker@bakers.com`","lastModifiedDate":"2023-02-28"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"**Create a project** | p -pn project_name -e client_email -s status -src source -d description -ad accepted_date -dd deadline_date \u003cbr\u003e e.g., `p -pn \u0027Mycelium Desktop\u0027 -e spiderman@gmail.com -src fiverr.com -dd 30/02/2075`","lastModifiedDate":"2023-03-14"},{"lineNumber":169,"author":{"gitId":"RubyNguyen07"},"content":"**Delete a project** | dp -pn project_name \u003cbr\u003e `e.g., dp -pn Mycelium`","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"StanleyNeoh":3,"-":66,"immanuelhume":6,"RubyNguyen07":94}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"title: Mycelium","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"[![Java CI](https://github.com/AY2223S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S2-CS2103T-W14-1/tp/actions/workflows/gradle.yml)","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"[![codecov](https://codecov.io/gh/AY2223S2-CS2103T-W14-1/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2223S2-CS2103T-W14-1/tp)","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"**Mycelium is a desktop application for freelance devs to manage clients and projects.**","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"* If you are interested in using Mycelium, head over to the [**User Guide**](UserGuide.html).","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"* If you are interested about developing Mycelium, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":13,"immanuelhume":9}},{"path":"docs/team/douglch.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"layout: page","lastModifiedDate":"2023-02-27"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"title: Douglch\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"### Project: Mycelium","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"* **New Feature**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"* **Code contributed**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"* **Project management**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"* **Enhancements to existing features**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"  * **Contributions to UG**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"  * **Contributions to DG**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"* **Community**: `to be added`","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"StanleyNeoh":14,"Douglch":6}},{"path":"docs/team/immanuelhume.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"title: Li Junyi\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"### Project: Mycelium","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"* **New Feature**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"* **Code contributed**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"* **Project management**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"* **Enhancements to existing features**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"  * **Contributions to UG**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"  * **Contributions to DG**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"* **Community**: `to be added`","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"immanuelhume":20}},{"path":"docs/team/rubynguyen07.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"title: Nguyen Hong Ngoc\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"### Project: Mycelium","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"* **New Feature**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"* **Code contributed**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"* **Project management**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"* **Enhancements to existing features**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    * **Contributions to UG**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    * **Contributions to DG**: `to be added`","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"* **Community**: `to be added`","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"RubyNguyen07":20}},{"path":"docs/team/sachindavid96.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"layout: page","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"title: Sachin Kalinga\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"---","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"### Project: Mycelium","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"* **New Feature**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"* **Code contributed**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"* **Project management**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"* **Enhancements to existing features**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    * **Contributions to UG**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    * **Contributions to DG**: `to be added`","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"* **Community**: `to be added`","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"sachindavid96":20}},{"path":"docs/team/stanleyneoh.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"StanleyNeoh"},"content":"layout: page","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"StanleyNeoh"},"content":"title: Stanley Neoh\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"StanleyNeoh"},"content":"---","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"### Project: Mycelium","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"* **New Feature**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"* **Code contributed**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"* **Project management**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"* **Enhancements to existing features**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"  * **Contributions to UG**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"  * **Contributions to DG**: `to be added`","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"* **Community**: `to be added`","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"StanleyNeoh":20}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new command — `remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"We’ll assume that you have already set up the development environment as outlined in the Developer’s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Let’s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, let’s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2020-07-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Changes the remark of an existing person in the address book.","lastModifiedDate":"2020-07-29"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Let’s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            + \": Edits the remark of the person identified \"","lastModifiedDate":"2021-08-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            + \"by the index number used in the last person listing. \"","lastModifiedDate":"2020-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, let’s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @param index of the person in the filtered person list to edit the remark","lastModifiedDate":"2020-07-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param remark of the person to be updated to","lastModifiedDate":"2020-07-29"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now let’s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"-"},"content":"Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2020-07-29"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Let’s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now let’s find out what we need to do in order to obtain the Index and String that we need. Let’s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the user’s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Don’t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"-"},"content":"Now that we have all the information that we need, let’s lay the groundwork for propagating the remarks added into the in-memory storage of person data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person’s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person.","lastModifiedDate":"2020-07-29"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"-"},"content":"Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2020-07-29"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Let’s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"-"},"content":"Without getting too deep into `fxml`, let’s go on a 5 minute adventure to get some placeholder text to show up for each person.","lastModifiedDate":"2020-07-29"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"Simply add the following to [`mycelium.mycelium.ui.PersonCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-03-06"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, don’t worry — we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"That’s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library — Jackson. Let’s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBook’s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"-"},"content":"public PersonCard(Person person, int displayedIndex) {","lastModifiedDate":"2020-07-29"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    remark.setText(person.getRemark().value);","lastModifiedDate":"2020-07-29"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regression — we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-07-29"},{"lineNumber":347,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new Person(","lastModifiedDate":"2021-08-01"},{"lineNumber":348,"author":{"gitId":"-"},"content":"                personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),","lastModifiedDate":"2021-08-01"},{"lineNumber":349,"author":{"gitId":"-"},"content":"                personToEdit.getAddress(), remark, personToEdit.getTags());","lastModifiedDate":"2020-07-29"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-07-29"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"-"},"content":"        return new CommandResult(generateSuccessMessage(editedPerson));","lastModifiedDate":"2020-07-29"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"-"},"content":"     * {@code personToEdit}.","lastModifiedDate":"2020-07-29"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"-"},"content":"    private String generateSuccessMessage(Person personToEdit) {","lastModifiedDate":"2020-07-29"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"-"},"content":"        return String.format(message, personToEdit);","lastModifiedDate":"2020-07-29"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs don’t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Let’s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Let’s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, let’s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Let’s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"-":398,"immanuelhume":3}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Let’s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"The `address` field in `Person` is actually an instance of the `mycelium.mycelium.model.person.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Let’s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. What’s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"  \"persons\": [ {","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":111,"immanuelhume":1}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `mycelium.mycelium.logic.Logic`.","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"A quick look at the `mycelium.mycelium.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2021-07-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"     FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2021-07-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":299,"immanuelhume":2}},{"path":"src/main/java/mycelium/mycelium/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.FileUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        return configPath;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"immanuelhume":11,"-":53}},{"path":"src/main/java/mycelium/mycelium/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"immanuelhume":5,"-":20}},{"path":"src/main/java/mycelium/mycelium/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Config;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Version;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.ConfigUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.StringUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.Logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.LogicManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.AddressBookStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.JsonAddressBookStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.Storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.StorageManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.UserPrefsStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.ui.UiManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.Ui;","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 2, 0, true);","lastModifiedDate":"2021-08-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook initialData;","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            addressBookOptional \u003d storage.readAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");","lastModifiedDate":"2016-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);","lastModifiedDate":"2016-12-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            initialData \u003d new AddressBook();","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"                + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":131,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"                + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");","lastModifiedDate":"2016-10-12"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        logger.info(\"Starting AddressBook \" + MainApp.VERSION);","lastModifiedDate":"2016-09-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":23,"-":159}},{"path":"src/main/java/mycelium/mycelium/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":1,"-":62}},{"path":"src/main/java/mycelium/mycelium/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":1,"-":78}},{"path":"src/main/java/mycelium/mycelium/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":3,"-":110}},{"path":"src/main/java/mycelium/mycelium/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_INVALID_CLIENT \u003d \"The client email entered does not match any client\";","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_INVALID_PROJECT \u003d \"The project name entered does not match any project\";","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_EMPTY_STR \u003d \"The source of the project / client cannot be empty\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_INVALID_DATE \u003d \"The date entered is invalid\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sachindavid96":2,"immanuelhume":3,"-":12}},{"path":"src/main/java/mycelium/mycelium/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    public int getMajor() {","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        return major;","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    public int getMinor() {","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        return minor;","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    public int getPatch() {","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        return patch;","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        return isEarlyAccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":16,"-":101}},{"path":"src/main/java/mycelium/mycelium/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core.index;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public int getZeroBased() {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    public int getOneBased() {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"immanuelhume":10,"-":44}},{"path":"src/main/java/mycelium/mycelium/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":1,"-":10}},{"path":"src/main/java/mycelium/mycelium/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause   of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":1,"-":20}},{"path":"src/main/java/mycelium/mycelium/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.MainApp;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"immanuelhume":2,"-":40}},{"path":"src/main/java/mycelium/mycelium/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * @see #requireAllNonNull(Collection)","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":4,"-":33}},{"path":"src/main/java/mycelium/mycelium/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Config;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":3,"-":20}},{"path":"src/main/java/mycelium/mycelium/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":3,"-":82}},{"path":"src/main/java/mycelium/mycelium/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param filePath                   cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e      The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":7,"-":139}},{"path":"src/main/java/mycelium/mycelium/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * \u003cbr\u003eexamples:\u003cpre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param sentence cannot be null","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static boolean containsWordIgnoreCase(String sentence, String word) {","lastModifiedDate":"2016-10-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(sentence);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String preppedSentence \u003d sentence;","lastModifiedDate":"2016-10-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":4,"-":66}},{"path":"src/main/java/mycelium/mycelium/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.CommandResult;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * @see Model#getAddressBook()","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"StanleyNeoh"},"content":"     * Returns an unmodifiable view of the filtered list of clients","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"     * Returns an unmodifiable view of the filtered list of projects","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"    ObservableList\u003cProject\u003e getFilteredProjectList();","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"StanleyNeoh":8,"immanuelhume":11,"-":41}},{"path":"src/main/java/mycelium/mycelium/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.Command;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.CommandResult;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.AddressBookParser;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.Storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"StanleyNeoh"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"StanleyNeoh"},"content":"        return model.getFilteredClientList();","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"StanleyNeoh"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"StanleyNeoh"},"content":"    public ObservableList\u003cProject\u003e getFilteredProjectList() {","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"StanleyNeoh"},"content":"        return model.getFilteredProjectList();","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"StanleyNeoh":7,"immanuelhume":11,"-":69}},{"path":"src/main/java/mycelium/mycelium/logic/commands/AddClientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":" * Adds a new client to Mycelium.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"public class AddClientCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"    public static final String COMMAND_ACRONYM \u003d \"c\";","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"        COMMAND_ACRONYM + \": Adds a client to Mycelium.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"            + \"Compulsory Arguments: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_NAME + \"CLIENT NAME \"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_EMAIL + \"CLIENT EMAIL\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"            + \"Optional Arguments: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_SOURCE + \"CLIENT SOURCE \"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_MOBILE_NUMBER + \"MOBILE NUMBER \"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_YEAR_OF_BIRTH + \"YEAR OF BIRTH\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"            + \"Example: \" + COMMAND_ACRONYM + \" \"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_NAME + \"Alice Baker \"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_EMAIL + \"alice_baker@bakers.com \"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_SOURCE + \"Fiverr \"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_MOBILE_NUMBER + \"98765432 \"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_YEAR_OF_BIRTH + \"2000\";","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT_NAME \u003d \"This client already exists in your client list\";","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"    private final Client toAdd;","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * Creates a command which adds the new client.","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     * @param client The new client.","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"    public AddClientCommand(Client client) {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(client);","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"        toAdd \u003d client;","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"        if (model.hasClient(toAdd)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLIENT_NAME);","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"        model.addClient(toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand that \u003d (AddClientCommand) o;","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"        return toAdd.isSame(that.toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":52,"StanleyNeoh":1,"immanuelhume":29}},{"path":"src/main/java/mycelium/mycelium/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * Adds a person to the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \"","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"        + \"Parameters: \"","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_TAG + \"friends \"","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    private final Person toAdd;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * Creates an AddCommand to add the specified {@code Person}","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public AddCommand(Person person) {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(person);","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        toAdd \u003d person;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        if (model.hasPerson(toAdd)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        model.addPerson(toAdd);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"            || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":63}},{"path":"src/main/java/mycelium/mycelium/logic/commands/AddProjectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":" * Adds a new project to Mycelium.","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"public class AddProjectCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"    public static final String COMMAND_ACRONYM \u003d \"p\";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"        COMMAND_ACRONYM + \": Adds a project to Mycelium.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"            + \"Compulsory Arguments: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_NAME + \"PROJECT NAME \"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_CLIENT_EMAIL + \"CLIENT EMAIL\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"            + \"Optional Arguments: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_STATUS + \"PROJECT STATUS \"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_SOURCE + \"PROJECT SOURCE \"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_DESCRIPTION + \"PROJECT DESCRIPTION \"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_ACCEPTED_DATE + \"DATE PROJECT WAS ACCEPTED \"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_DEADLINE_DATE + \"DEADLINE OF PROJECT\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"            + \"Example: \" + COMMAND_ACRONYM + \" \"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_NAME + \"Mycelium \"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"            + CliSyntax.PREFIX_CLIENT_EMAIL + \"alice_baker@gmail.com \"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_STATUS + \"done \"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_SOURCE + \"Fiverr \"","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"            + CliSyntax.PREFIX_PROJECT_DESCRIPTION + \"Cli-based project management app \"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"StanleyNeoh"},"content":"            + CliSyntax.PREFIX_ACCEPTED_DATE + \"01/12/2023 \"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"            + CliSyntax.PREFIX_DEADLINE_DATE + \"31/12/2023\";","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New project added: %1$s\";","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_DUPLICATE_PROJECT_NAME \u003d \"This project name already exists in your project list\";","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"    private final Project toAdd;","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"     * Creates a command to add the new project.","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * @param project The new project.","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"    public AddProjectCommand(Project project) {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(project);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"        toAdd \u003d project;","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"        if (model.hasProject(toAdd)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PROJECT_NAME);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"sachindavid96"},"content":"        model.addProject(toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"sachindavid96"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand that \u003d (AddProjectCommand) o;","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        return toAdd.isSame(that.toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(toAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":55,"StanleyNeoh":4,"immanuelhume":26}},{"path":"src/main/java/mycelium/mycelium/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Clears the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        model.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":3,"-":20}},{"path":"src/main/java/mycelium/mycelium/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":3,"-":17}},{"path":"src/main/java/mycelium/mycelium/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * Help information should be shown to the user.","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * The application should exit.","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":7,"-":68}},{"path":"src/main/java/mycelium/mycelium/logic/commands/DeleteClientCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"public class DeleteClientCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    public static final String COMMAND_ACRONYM \u003d \"dc\";","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"            COMMAND_ACRONYM + \": Deletes the client with the given email address.\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"            + \"Compulsory Argument: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            + CliSyntax.PREFIX_CLIENT_EMAIL + \" EMAIL \\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"            + \"Example: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"            + COMMAND_ACRONYM + \" \" + CliSyntax.PREFIX_CLIENT_EMAIL + \" alice_baker@bakers.com\";","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Client: %1$s\";","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"    private final Email targetEmail;","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"    public DeleteClientCommand(Email targetEmail) {","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"        this.targetEmail \u003d targetEmail;","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cClient\u003e targetClient \u003d model.getUniqueClient(c -\u003e c.getEmail().equals(targetEmail));","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        if (targetClient.isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        model.deleteClient(targetClient.get());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, targetClient.get()));","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"            || (other instanceof DeleteClientCommand // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"            \u0026\u0026 targetEmail.equals(((DeleteClientCommand) other).targetEmail)); // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":43,"immanuelhume":12}},{"path":"src/main/java/mycelium/mycelium/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Deletes a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2018-04-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \": Deletes the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        model.deletePerson(personToDelete);","lastModifiedDate":"2016-09-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":6,"-":47}},{"path":"src/main/java/mycelium/mycelium/logic/commands/DeleteProjectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":" * A command to delete an existing project.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"public class DeleteProjectCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"    public static final String COMMAND_ACRONYM \u003d \"dp\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_USAGE \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        COMMAND_ACRONYM","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"            + \": Deletes the project with the given project name.\\n\"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"            + \"Compulsory Argument: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"            + CliSyntax.PREFIX_PROJECT_NAME + \" PROJECT NAME\\n\"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"            + \"Example: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"            + COMMAND_ACRONYM + \" \" + CliSyntax.PREFIX_PROJECT_NAME + \" Mycelium\";","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    public static final String MESSAGE_DELETE_PROJECT_SUCCESS \u003d \"Deleted Project: %1$s\";","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"    private final String targetProjectName;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"    public DeleteProjectCommand(String targetProjectName) {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"        this.targetProjectName \u003d targetProjectName;","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"sachindavid96"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cProject\u003e targetProject \u003d model.getUniqueProject(p -\u003e p.getName().equals(targetProjectName));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        if (targetProject.isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PROJECT);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        model.deleteProject(targetProject.get());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PROJECT_SUCCESS, targetProject.get()));","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"sachindavid96"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"sachindavid96"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"sachindavid96"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"sachindavid96"},"content":"            || (other instanceof DeleteProjectCommand// instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"sachindavid96"},"content":"            \u0026\u0026 targetProjectName.equals(((DeleteProjectCommand) other).targetProjectName)); // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":36,"immanuelhume":18}},{"path":"src/main/java/mycelium/mycelium/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.CollectionUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Edits the details of an existing person in the address book.","lastModifiedDate":"2016-12-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \"","lastModifiedDate":"2016-12-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        + \"by the index number used in the displayed person list. \"","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        + \"[\" + CliSyntax.PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        + CliSyntax.PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";","lastModifiedDate":"2016-12-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private final EditPersonDescriptor editPersonDescriptor;","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @param index                of the person in the filtered person list to edit","lastModifiedDate":"2017-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param editPersonDescriptor details to edit the person with","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2017-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"     * Creates and returns a {@code Person} with the details of {@code personToEdit}","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * edited with {@code editPersonDescriptor}.","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        assert personToEdit !\u003d null;","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2017-08-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);","lastModifiedDate":"2018-04-19"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * Stores the details to edit the person with. Each non-empty field value will replace the","lastModifiedDate":"2016-12-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * corresponding field value of the person.","lastModifiedDate":"2016-12-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static class EditPersonDescriptor {","lastModifiedDate":"2016-12-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        public EditPersonDescriptor() {","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public EditPersonDescriptor(EditPersonDescriptor toCopy) {","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":145,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":146,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"        public void setName(Name name) {","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"            this.name \u003d name;","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2023-03-06"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"            this.email \u003d email;","lastModifiedDate":"2023-03-06"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2023-03-06"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"            this.address \u003d address;","lastModifiedDate":"2023-03-06"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":184,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":185,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":186,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":187,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"        /**","lastModifiedDate":"2023-03-06"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2023-03-06"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2023-03-06"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"         */","lastModifiedDate":"2023-03-06"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2023-03-06"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2023-03-06"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            if (!(other instanceof EditPersonDescriptor)) {","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":217,"author":{"gitId":"-"},"content":"                \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":218,"author":{"gitId":"-"},"content":"                \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":219,"author":{"gitId":"-"},"content":"                \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"immanuelhume":55,"-":167}},{"path":"src/main/java/mycelium/mycelium/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"immanuelhume":2,"-":17}},{"path":"src/main/java/mycelium/mycelium/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Finds and lists all persons in address book whose name contains any of the argument keywords.","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \"","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"immanuelhume":4,"-":38}},{"path":"src/main/java/mycelium/mycelium/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":19}},{"path":"src/main/java/mycelium/mycelium/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Lists all persons in the address book to the user.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":3,"-":20}},{"path":"src/main/java/mycelium/mycelium/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"immanuelhume":1,"-":16}},{"path":"src/main/java/mycelium/mycelium/logic/parser/AddClientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_EMAIL;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_MOBILE_NUMBER;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_YEAR_OF_BIRTH;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_SOURCE;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"sachindavid96"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.AddClientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":" * A command to add a new client.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"public class AddClientCommandParser implements Parser\u003cAddClientCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"     * Parses the given {@code String} of arguments in the context of the AddClientCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"     * and returns an AddClientCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"sachindavid96"},"content":"    public AddClientCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"sachindavid96"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_NAME, PREFIX_CLIENT_EMAIL, PREFIX_SOURCE,","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"                PREFIX_CLIENT_YEAR_OF_BIRTH, PREFIX_CLIENT_MOBILE_NUMBER);","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CLIENT_NAME, PREFIX_CLIENT_EMAIL)","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddClientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        // Only the client\u0027s name and email are required fields. We parse them into their respective types here.","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"sachindavid96"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_CLIENT_NAME).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"sachindavid96"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_CLIENT_EMAIL).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cPhone\u003e mobileNumber \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_CLIENT_MOBILE_NUMBER),","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            ParserUtil::parsePhone);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cString\u003e source \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_SOURCE),","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            ParserUtil::parseNonEmptyString);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cYearOfBirth\u003e yearOfBirth \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_CLIENT_YEAR_OF_BIRTH),","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            ParserUtil::parseYearOfBirth);","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"sachindavid96"},"content":"        Client client \u003d new Client(name, email, yearOfBirth, source, mobileNumber);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"sachindavid96"},"content":"        return new AddClientCommand(client);","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":39,"immanuelhume":22}},{"path":"src/main/java/mycelium/mycelium/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person person \u003d new Person(name, phone, email, address, tagList);","lastModifiedDate":"2018-01-10"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return new AddCommand(person);","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"immanuelhume":24,"-":37}},{"path":"src/main/java/mycelium/mycelium/logic/parser/AddProjectCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_ACCEPTED_DATE;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_EMAIL;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_PROJECT_DESCRIPTION;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_PROJECT_STATUS;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_SOURCE;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.AddProjectCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":" * A command to add a new project.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"public class AddProjectCommandParser implements Parser\u003cAddProjectCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"     * Parses the given {@code String} of arguments in the context of the AddProjectCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"     * and returns an AddProjectCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"    public AddProjectCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME, PREFIX_CLIENT_EMAIL,","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"                PREFIX_PROJECT_STATUS, PREFIX_SOURCE, PREFIX_PROJECT_DESCRIPTION,","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"                PREFIX_ACCEPTED_DATE, PREFIX_DEADLINE_DATE","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            );","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PROJECT_NAME, PREFIX_CLIENT_EMAIL)","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"sachindavid96"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"sachindavid96"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProjectCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        // For projects, the only required field is the project name and the client\u0027s email.","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        String name \u003d ParserUtil.parseNonEmptyString(argMultimap.getValue(PREFIX_PROJECT_NAME).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        Email clientEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_CLIENT_EMAIL).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        // The project\u0027s status and acceptedOn date take default values.","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cString\u003e maybeProjectStatus \u003d argMultimap.getValue(PREFIX_PROJECT_STATUS);","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        ProjectStatus projectStatus \u003d maybeProjectStatus.isPresent()","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            ? ParserUtil.parseProjectStatus(maybeProjectStatus.get())","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            : ProjectStatus.NOT_STARTED;","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cString\u003e maybeAcceptedOn \u003d argMultimap.getValue(PREFIX_ACCEPTED_DATE);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        LocalDate acceptedOn \u003d maybeAcceptedOn.isPresent()","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            ? ParserUtil.parseLocalDate(maybeAcceptedOn.get(), Project.DATE_FMT)","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            : LocalDate.now();","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cString\u003e source \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_SOURCE),","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"            ParserUtil::parseNonEmptyString);","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cString\u003e description \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_PROJECT_DESCRIPTION),","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            ParserUtil::parseNonEmptyString);","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        Optional\u003cLocalDate\u003e deadline \u003d ParserUtil.parseOptionalWith(","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            argMultimap.getValue(PREFIX_DEADLINE_DATE),","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            d -\u003e ParserUtil.parseLocalDate(d, Project.DATE_FMT));","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new Project(name, projectStatus, clientEmail, source, description, acceptedOn, deadline);","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"sachindavid96"},"content":"        return new AddProjectCommand(project);","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":31,"immanuelhume":40}},{"path":"src/main/java/mycelium/mycelium/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddClientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddProjectCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.Command;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteClientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteProjectCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.FindCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ListCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":75,"author":{"gitId":"sachindavid96"},"content":"        case AddClientCommand.COMMAND_ACRONYM:","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"sachindavid96"},"content":"            return new AddClientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"sachindavid96"},"content":"        case AddProjectCommand.COMMAND_ACRONYM:","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"sachindavid96"},"content":"            return new AddProjectCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"sachindavid96"},"content":"        case DeleteClientCommand.COMMAND_ACRONYM:","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"sachindavid96"},"content":"            return new DeleteClientCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"sachindavid96"},"content":"        case DeleteProjectCommand.COMMAND_ACRONYM:","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"sachindavid96"},"content":"            return new DeleteProjectCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"sachindavid96":13,"immanuelhume":17,"-":63}},{"path":"src/main/java/mycelium/mycelium/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     * Prefixes mapped to their respective arguments","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     **/","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"immanuelhume":4,"-":58}},{"path":"src/main/java/mycelium/mycelium/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                               PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                               PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        private int startPosition;","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"immanuelhume":3,"-":145}},{"path":"src/main/java/mycelium/mycelium/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    /* Common between project and client related commands. */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    public static final Prefix PREFIX_SOURCE \u003d new Prefix(\"-src \");","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    /* For client related commands. */","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_CLIENT_NAME \u003d new Prefix(\"-cn \");","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_CLIENT_EMAIL \u003d new Prefix(\"-e \");","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_CLIENT_YEAR_OF_BIRTH \u003d new Prefix(\"-y \");","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_CLIENT_MOBILE_NUMBER \u003d new Prefix(\"-mn \");","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    /* For project related commands. */","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_PROJECT_NAME \u003d new Prefix(\"-pn \");","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_PROJECT_DESCRIPTION \u003d new Prefix(\"-d \");","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_ACCEPTED_DATE \u003d new Prefix(\"-ad \");","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"-dd \");","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"    public static final Prefix PREFIX_PROJECT_STATUS \u003d new Prefix(\"-s \");","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"sachindavid96":9,"immanuelhume":7,"-":14}},{"path":"src/main/java/mycelium/mycelium/logic/parser/DeleteClientCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_CLIENT_EMAIL;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.DeleteClientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * A command to delete an existing client.","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"public class DeleteClientCommandParser implements Parser\u003cDeleteClientCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteClientCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"     * and returns a DeleteClientCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    public DeleteClientCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_CLIENT_EMAIL);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_CLIENT_EMAIL)","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteClientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"        Email targetEmail \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_CLIENT_EMAIL).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"        return new DeleteClientCommand(targetEmail);","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":26,"immanuelhume":6}},{"path":"src/main/java/mycelium/mycelium/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"immanuelhume":6,"-":24}},{"path":"src/main/java/mycelium/mycelium/logic/parser/DeleteProjectCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"sachindavid96"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"sachindavid96"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.commands.DeleteProjectCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * Parses a {@link DeleteProjectCommand} from string input.","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"sachindavid96"},"content":"public class DeleteProjectCommandParser implements Parser\u003cDeleteProjectCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"sachindavid96"},"content":"     * Parses the given {@code String} of arguments in the context of the AddClientCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"sachindavid96"},"content":"     * and returns an AddClientCommand object for execution.","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"sachindavid96"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"sachindavid96"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"sachindavid96"},"content":"    public DeleteProjectCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PROJECT_NAME);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PROJECT_NAME)","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"sachindavid96"},"content":"            || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"sachindavid96"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProjectCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"sachindavid96"},"content":"        String targetProjectName \u003d ParserUtil.parseNonEmptyString(argMultimap.getValue(PREFIX_PROJECT_NAME).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"sachindavid96"},"content":"        return new DeleteProjectCommand(targetProjectName);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"sachindavid96"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"sachindavid96":24,"immanuelhume":7}},{"path":"src/main/java/mycelium/mycelium/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"            ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                CliSyntax.PREFIX_NAME,","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                CliSyntax.PREFIX_PHONE,","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"                CliSyntax.PREFIX_EMAIL,","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"                CliSyntax.PREFIX_ADDRESS,","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"                CliSyntax.PREFIX_TAG);","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();","lastModifiedDate":"2017-01-26"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_NAME).isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(CliSyntax.PREFIX_NAME).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(CliSyntax.PREFIX_PHONE).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(CliSyntax.PREFIX_EMAIL).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        if (argMultimap.getValue(CliSyntax.PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(CliSyntax.PREFIX_ADDRESS)","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"                .get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        parseTagsForEdit(argMultimap.getAllValues(CliSyntax.PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!editPersonDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return new EditCommand(index, editPersonDescriptor);","lastModifiedDate":"2017-05-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"immanuelhume":24,"-":60}},{"path":"src/main/java/mycelium/mycelium/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.FindCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"immanuelhume":6,"-":28}},{"path":"src/main/java/mycelium/mycelium/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.Command;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"immanuelhume":4,"-":13}},{"path":"src/main/java/mycelium/mycelium/logic/parser/ParserFn.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * This is essentially a java.util.function.Function which might throw a {@link","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" * ParseException}. The type is made explicit here so that it is more convenient","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":" * to pass methods around as * lambdas. It defers from {@link Parser} in that it","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * returns any type, not just a command. Thus, its main use is in parsing","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * arguments within each command string.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"@FunctionalInterface","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"public interface ParserFn\u003cT, U\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    U parse(T t) throws ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":15}},{"path":"src/main/java/mycelium/mycelium/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.StringUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"sachindavid96"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":133,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"     * Parses a {@code String year of birth} into an {@code YearOfBirth}.","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"sachindavid96"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"sachindavid96"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"sachindavid96"},"content":"    public static YearOfBirth parseYearOfBirth(String yearOfBirth) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(yearOfBirth);","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"sachindavid96"},"content":"        String trimmedYearOfBirth \u003d yearOfBirth.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"sachindavid96"},"content":"        if (!YearOfBirth.isValidYearOfBirth(trimmedYearOfBirth)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"sachindavid96"},"content":"            throw new ParseException(YearOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"sachindavid96"},"content":"        return new YearOfBirth(trimmedYearOfBirth);","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"     * Parses a project\u0027s status from its string representation.","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"sachindavid96"},"content":"    public static ProjectStatus parseProjectStatus(String projectStatus) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(projectStatus);","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"        String trimmedProjectStatus \u003d projectStatus.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"        if (!ProjectStatus.isValidProjectStatus(trimmedProjectStatus)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"            throw new ParseException(ProjectStatus.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"        return ProjectStatus.fromString(trimmedProjectStatus);","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"     * Parses a string by asserting that it is non empty after trimming.","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"sachindavid96"},"content":"    public static String parseNonEmptyString(String source) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"sachindavid96"},"content":"        requireNonNull(source);","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"sachindavid96"},"content":"        String trimmedSource \u003d source.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"sachindavid96"},"content":"        if (source.isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"            throw new ParseException(Messages.MESSAGE_EMPTY_STR);","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"sachindavid96"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"sachindavid96"},"content":"        return trimmedSource;","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"sachindavid96"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"sachindavid96"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"     * Parses a string into a {@code LocalDate} using the formatter provided.","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"    public static LocalDate parseLocalDate(String s, DateTimeFormatter dateFmt) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(s);","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"        String trimmedSource \u003d s.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"            return LocalDate.parse(trimmedSource, dateFmt);","lastModifiedDate":"2023-03-13"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"            throw new ParseException(Messages.MESSAGE_INVALID_DATE);","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"     * Performs a map operation.","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"     * @param src The raw input to pass, which may be an {@code Optional.empty()}","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"     * @param f   The parsing function to use against the raw input","lastModifiedDate":"2023-03-13"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cT\u003e Type of the raw input","lastModifiedDate":"2023-03-13"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"     * @param \u003cU\u003e Type of the parsed result","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"     * @return The parsed result, wrapped in an {@code Optional}","lastModifiedDate":"2023-03-13"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"     * @throws ParseException If the parsing function throws it.","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"    public static \u003cT, U\u003e Optional\u003cU\u003e parseOptionalWith(Optional\u003cT\u003e src, ParserFn\u003cT, U\u003e f) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"        return src.isPresent() ? Optional.of(f.parse(src.get())) : Optional.empty();","lastModifiedDate":"2023-03-13"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-13"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-13"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"sachindavid96":26,"immanuelhume":64,"-":115}},{"path":"src/main/java/mycelium/mycelium/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"immanuelhume":1,"-":38}},{"path":"src/main/java/mycelium/mycelium/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"immanuelhume":2,"-":15}},{"path":"src/main/java/mycelium/mycelium/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import java.util.List;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.UniquePersonList;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.UniqueList;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    private final UniqueList\u003cProject\u003e projects;","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"    private final UniqueList\u003cClient\u003e clients;","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block,","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     * sometimes used to avoid duplication","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * between constructors. See","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     * Note that non-static init blocks are not recommended to use. There are other","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * ways to avoid duplication","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"        clients \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public AddressBook() {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"Douglch"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"    public void setClients(List\u003cClient\u003e clients) {","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"        this.clients.setItems(clients);","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"     * Replaces the contents of the project list with {@code projects}.","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"     * {@code projects} must not contain duplicate projects.","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"    public void setProjects(List\u003cProject\u003e projects) {","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"        this.projects.setItems(projects);","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"        setClients(newData.getClientList());","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"        setProjects(newData.getProjectList());","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"     * Returns true if a person with the same identity as {@code person} exists in","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"     * the address book.","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"     * Replaces the given person {@code target} in the list with","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     * {@code editedPerson}.","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"     * The person identity of {@code editedPerson} must not be the same as another","lastModifiedDate":"2023-03-07"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"     * existing person in the address book.","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":141,"author":{"gitId":"Douglch"},"content":"    public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"Douglch"},"content":"        return clients.contains(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":144,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":145,"author":{"gitId":"Douglch"},"content":"    public void removeClient(Client client) {","lastModifiedDate":"2023-03-08"},{"lineNumber":146,"author":{"gitId":"Douglch"},"content":"        clients.remove(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"Douglch"},"content":"    public void addClient(Client client) {","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"Douglch"},"content":"        clients.add(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":152,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":153,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":154,"author":{"gitId":"Douglch"},"content":"    public ObservableList\u003cClient\u003e getClientList() {","lastModifiedDate":"2023-03-08"},{"lineNumber":155,"author":{"gitId":"Douglch"},"content":"        return clients.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-08"},{"lineNumber":156,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":157,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"    public boolean hasProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"        return projects.contains(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"    public void removeProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"        projects.remove(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"    public void addProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"        projects.add(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"    public ObservableList\u003cProject\u003e getProjectList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"        return projects.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-07"},{"lineNumber":173,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":177,"author":{"gitId":"Douglch"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"Douglch"},"content":"            return true;","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":180,"author":{"gitId":"Douglch"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":181,"author":{"gitId":"Douglch"},"content":"            return false;","lastModifiedDate":"2023-03-09"},{"lineNumber":182,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"        AddressBook that \u003d (AddressBook) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":184,"author":{"gitId":"Douglch"},"content":"        return Objects.equals(persons, that.persons) \u0026\u0026 Objects.equals(projects, that.projects)","lastModifiedDate":"2023-03-09"},{"lineNumber":185,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 Objects.equals(clients, that.clients);","lastModifiedDate":"2023-03-09"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":190,"author":{"gitId":"Douglch"},"content":"        return Objects.hash(persons, projects, clients);","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":192,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":38,"-":99,"Douglch":55}},{"path":"src/main/java/mycelium/mycelium/model/ClientModel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" * The API for operations related to clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"public interface ClientModel {","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * Finds a single client that matches the specified predicate. Expects to","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * find either zero or one clients. If more than one client matches the","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * provided predicate, throws {@code DuplicateClientException}.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    Optional\u003cClient\u003e getUniqueClient(Predicate\u003cClient\u003e predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"     * Determines whether a given client is present in the list of clients.","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"     * @param client The client to check for existence.","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"     * @return true if the client is present in the list, false otherwise.","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"    boolean hasClient(Client client);","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"     * Deletes the specified client from the list of clients.","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"     * @param target The client to delete.","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"    void deleteClient(Client target);","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"     * Adds a new client to the list of clients.","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"     * @param client The client to add.","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"    void addClient(Client client);","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"     * Returns an observable list of clients that meet the specified filter predicate.","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"     * @return An observable list of clients that meet the specified filter predicate.","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"     * Updates the filter predicate used to generate the observable list of clients.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"     * @param predicate The new filter predicate.","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":19,"Douglch":38}},{"path":"src/main/java/mycelium/mycelium/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"public interface Model extends ClientModel, ProjectModel {","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     * Returns the AddressBook","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     * Returns an unmodifiable view of the filtered person list","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"immanuelhume":20,"-":74}},{"path":"src/main/java/mycelium/mycelium/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.exceptions.DuplicateClientException;","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.exceptions.DuplicateProjectException;","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.DuplicateItemException;","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"    private final FilteredList\u003cClient\u003e filteredClients;","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"    private final FilteredList\u003cProject\u003e filteredProjects;","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"        filteredProjects \u003d new FilteredList\u003c\u003e(this.addressBook.getProjectList());","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        return userPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        return addressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":105,"author":{"gitId":"StanleyNeoh"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":148,"author":{"gitId":"StanleyNeoh"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Client \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"    public Optional\u003cClient\u003e getUniqueClient(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        List\u003cClient\u003e clients \u003d addressBook.getClientList().stream().filter(predicate).collect(Collectors.toList());","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"        if (clients.size() \u003e 1) {","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateClientException();","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"        return clients.size() \u003d\u003d 0 ? Optional.empty() : Optional.of(clients.get(0));","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":159,"author":{"gitId":"Douglch"},"content":"    public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"Douglch"},"content":"        requireNonNull(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":161,"author":{"gitId":"Douglch"},"content":"        return addressBook.hasClient(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":162,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"Douglch"},"content":"    public void deleteClient(Client client) {","lastModifiedDate":"2023-03-12"},{"lineNumber":166,"author":{"gitId":"Douglch"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":167,"author":{"gitId":"Douglch"},"content":"            addressBook.removeClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":168,"author":{"gitId":"Douglch"},"content":"        } catch (ItemNotFoundException e) {","lastModifiedDate":"2023-03-12"},{"lineNumber":169,"author":{"gitId":"Douglch"},"content":"            logger.warning(String.format(","lastModifiedDate":"2023-03-12"},{"lineNumber":170,"author":{"gitId":"Douglch"},"content":"                \"Requested deletion for client with name %s not found in address book, ignoring...\",","lastModifiedDate":"2023-03-12"},{"lineNumber":171,"author":{"gitId":"Douglch"},"content":"                client.getName()));","lastModifiedDate":"2023-03-12"},{"lineNumber":172,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":173,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"Douglch"},"content":"    public void addClient(Client client) {","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"Douglch"},"content":"        try {","lastModifiedDate":"2023-03-12"},{"lineNumber":178,"author":{"gitId":"Douglch"},"content":"            addressBook.addClient(client);","lastModifiedDate":"2023-03-08"},{"lineNumber":179,"author":{"gitId":"Douglch"},"content":"        } catch (DuplicateItemException e) {","lastModifiedDate":"2023-03-12"},{"lineNumber":180,"author":{"gitId":"Douglch"},"content":"            throw new DuplicateClientException();","lastModifiedDate":"2023-03-12"},{"lineNumber":181,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":182,"author":{"gitId":"Douglch"},"content":"        updateFilteredClientList(x -\u003e true);","lastModifiedDate":"2023-03-12"},{"lineNumber":183,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":184,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"Douglch"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":186,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":187,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":188,"author":{"gitId":"Douglch"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"Douglch"},"content":"        return filteredClients;","lastModifiedDate":"2023-03-08"},{"lineNumber":190,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":192,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"Douglch"},"content":"    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-08"},{"lineNumber":194,"author":{"gitId":"Douglch"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"Douglch"},"content":"        filteredClients.setPredicate(predicate);","lastModifiedDate":"2023-03-08"},{"lineNumber":196,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":197,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"    public Optional\u003cProject\u003e getUniqueProject(Predicate\u003cProject\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"        List\u003cProject\u003e projects \u003d addressBook.getProjectList().stream().filter(predicate).collect(Collectors.toList());","lastModifiedDate":"2023-03-13"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"        if (projects.size() \u003e 1) {","lastModifiedDate":"2023-03-13"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateProjectException();","lastModifiedDate":"2023-03-13"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"        return projects.size() \u003d\u003d 0 ? Optional.empty() : Optional.of(projects.get(0));","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"    public boolean hasProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        return addressBook.hasProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"    public void deleteProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-03-07"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"            addressBook.removeProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"        } catch (ItemNotFoundException e) {","lastModifiedDate":"2023-03-07"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"            logger.warning(String.format(","lastModifiedDate":"2023-03-07"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"                \"Requested deletion for project with name %s not found in address book, ignoring...\",","lastModifiedDate":"2023-03-07"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"                project.getName()));","lastModifiedDate":"2023-03-07"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"    public void addProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-03-07"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"            addressBook.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"        } catch (DuplicateItemException e) {","lastModifiedDate":"2023-03-07"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateProjectException();","lastModifiedDate":"2023-03-07"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"        updateFilteredProjectList(x -\u003e true);","lastModifiedDate":"2023-03-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":232,"author":{"gitId":"Douglch"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Project List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":233,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"    public ObservableList\u003cProject\u003e getFilteredProjectList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"        return filteredProjects;","lastModifiedDate":"2023-03-07"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":240,"author":{"gitId":"immanuelhume"},"content":"    public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {","lastModifiedDate":"2023-03-07"},{"lineNumber":241,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-07"},{"lineNumber":242,"author":{"gitId":"immanuelhume"},"content":"        filteredProjects.setPredicate(predicate);","lastModifiedDate":"2023-03-07"},{"lineNumber":243,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":244,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":246,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":247,"author":{"gitId":"Douglch"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-09"},{"lineNumber":248,"author":{"gitId":"Douglch"},"content":"            return true;","lastModifiedDate":"2023-03-09"},{"lineNumber":249,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":250,"author":{"gitId":"Douglch"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":251,"author":{"gitId":"Douglch"},"content":"            return false;","lastModifiedDate":"2023-03-09"},{"lineNumber":252,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":253,"author":{"gitId":"immanuelhume"},"content":"        ModelManager that \u003d (ModelManager) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":254,"author":{"gitId":"Douglch"},"content":"        return Objects.equals(addressBook, that.addressBook)","lastModifiedDate":"2023-03-09"},{"lineNumber":255,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 Objects.equals(userPrefs, that.userPrefs)","lastModifiedDate":"2023-03-09"},{"lineNumber":256,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 Objects.equals(filteredPersons, that.filteredPersons)","lastModifiedDate":"2023-03-09"},{"lineNumber":257,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 Objects.equals(filteredClients, that.filteredClients)","lastModifiedDate":"2023-03-09"},{"lineNumber":258,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 Objects.equals(filteredProjects, that.filteredProjects);","lastModifiedDate":"2023-03-09"},{"lineNumber":259,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":260,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":261,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":262,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":263,"author":{"gitId":"Douglch"},"content":"        return Objects.hash(addressBook, userPrefs, filteredPersons, filteredClients, filteredProjects);","lastModifiedDate":"2023-03-09"},{"lineNumber":264,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":265,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":266,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":267,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StanleyNeoh":3,"immanuelhume":81,"-":123,"Douglch":60}},{"path":"src/main/java/mycelium/mycelium/model/ProjectModel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" * The API for operations related to projects.","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"public interface ProjectModel {","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"     * Finds a single project that matches the specified predicate. Expects to","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * find either zero or one projects. If more than one project matches the","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * provided predicate, throws {@code DuplicateProjectException}.","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    Optional\u003cProject\u003e getUniqueProject(Predicate\u003cProject\u003e predicate);","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * Checks if a project with the same name exists in Mycelium.","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    boolean hasProject(Project project); // TODO check if this should have a project\u0027s name overload","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * Deletes the project from Mycelium. If it does not exist, then this is a no-op.","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * @param project The project to delete","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    void deleteProject(Project project);","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     * Adds a project to Mycelium. If a project with the same name already exists, then a {@code","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * DuplicateProjectException} is thrown.","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"     * @param project The new project","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    void addProject(Project project);","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     * Retrieves a list of all the projects in Mycelium.","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"     * @return The list of existing projects","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    ObservableList\u003cProject\u003e getFilteredProjectList();","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * Mutates the list of projects by filtering with some predicate.","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     * @param predicate The predicate to filter by","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    void updateFilteredProjectList(Predicate\u003cProject\u003e predicate);","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":54}},{"path":"src/main/java/mycelium/mycelium/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"    ObservableList\u003cClient\u003e getClientList();","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    ObservableList\u003cProject\u003e getProjectList();","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":5,"-":15,"Douglch":3}},{"path":"src/main/java/mycelium/mycelium/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"immanuelhume":2,"-":14}},{"path":"src/main/java/mycelium/mycelium/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Path addressBookFilePath \u003d Paths.get(\"data\", \"addressbook.json\");","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    public UserPrefs() {","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        this.addressBookFilePath \u003d addressBookFilePath;","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        return Objects.hash(guiSettings, addressBookFilePath);","lastModifiedDate":"2018-08-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":83,"author":{"gitId":"Douglch"},"content":"        String sb \u003d \"Gui Settings : \" + guiSettings","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"            + \"\\nLocal data file location : \" + addressBookFilePath;","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"        return sb;","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":3,"-":80,"Douglch":5}},{"path":"src/main/java/mycelium/mycelium/model/client/Client.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.util.IsSame;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":" * Represents a client with their personal information, including their name, email address,","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":" * year of birth, source of information, and mobile phone number.","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":" * A client can be created with just a name and email or with all available information.","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":" * The name and email are required fields and cannot be null.","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"public class Client implements IsSame\u003cClient\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"    private final Name name;","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"    private final Email email;","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"    private final Optional\u003cYearOfBirth\u003e yearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"    private final Optional\u003cString\u003e source;","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"    private final Optional\u003cPhone\u003e mobileNumber;","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"     * Creates a new Client object with the given name and email address.","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"     * @param name  the name of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"     * @param email the email address of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"    public Client(Name name, Email email) {","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"        this.yearOfBirth \u003d Optional.empty();","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        this.source \u003d Optional.empty();","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        this.mobileNumber \u003d Optional.empty();","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"     * Creates a new Client object with the given personal information.","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"     * @param name        the name of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"     * @param email       the email address of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"     * @param yearOfBirth the year of birth of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"     * @param source      the source of information about the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"    public Client(Name name, Email email, Optional\u003cYearOfBirth\u003e yearOfBirth,","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"                  Optional\u003cString\u003e source, Optional\u003cPhone\u003e mobileNumber) {","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"        this.yearOfBirth \u003d yearOfBirth;","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"        this.mobileNumber \u003d mobileNumber;","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"Douglch"},"content":"     * Returns the name of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"Douglch"},"content":"     * @return the name of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"    public Name getName() {","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"        return name;","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"     * Returns the email address of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"     * @return the email address of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"    public Email getEmail() {","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"        return email;","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"Douglch"},"content":"     * Returns the year of birth of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"Douglch"},"content":"     * @return the year of birth of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"Douglch"},"content":"    public Optional\u003cYearOfBirth\u003e getYearOfBirth() {","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"Douglch"},"content":"        return yearOfBirth;","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"Douglch"},"content":"     * Returns the source where the developer found out about the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"Douglch"},"content":"     * @return the source where the developer found out about the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"Douglch"},"content":"    public Optional\u003cString\u003e getSource() {","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"Douglch"},"content":"        return source;","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"Douglch"},"content":"     * Returns the mobile number of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"Douglch"},"content":"     * @return the mobile number of the client.","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"Douglch"},"content":"    public Optional\u003cPhone\u003e getMobileNumber() {","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"Douglch"},"content":"        return mobileNumber;","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"Douglch"},"content":"     * Compares this client to another client to check if they are the same client.","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"Douglch"},"content":"     * Two clients are considered the same if they have the same email.","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"Douglch"},"content":"     * @param otherClient The client to compare with this client.","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"Douglch"},"content":"     * @return true if the two clients are the same client, false otherwise.","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":111,"author":{"gitId":"Douglch"},"content":"    public boolean isSame(Client otherClient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"Douglch"},"content":"        if (otherClient \u003d\u003d this) {","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"Douglch"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":115,"author":{"gitId":"Douglch"},"content":"        return otherClient !\u003d null","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 otherClient.getEmail().equals(getEmail());","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":120,"author":{"gitId":"Douglch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"Douglch"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"Douglch"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":125,"author":{"gitId":"Douglch"},"content":"        if (!(other instanceof Client)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":126,"author":{"gitId":"Douglch"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":127,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":129,"author":{"gitId":"Douglch"},"content":"        Client otherClient \u003d (Client) other;","lastModifiedDate":"2023-03-07"},{"lineNumber":130,"author":{"gitId":"Douglch"},"content":"        return otherClient.getName().equals(getName())","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 otherClient.getEmail().equals(getEmail())","lastModifiedDate":"2023-03-07"},{"lineNumber":132,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 otherClient.getYearOfBirth().equals(getYearOfBirth())","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 otherClient.getSource().equals(getSource())","lastModifiedDate":"2023-03-07"},{"lineNumber":134,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 otherClient.getMobileNumber().equals(getMobileNumber());","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":137,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":138,"author":{"gitId":"Douglch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":139,"author":{"gitId":"Douglch"},"content":"        return Objects.hash(name, email, yearOfBirth, source, mobileNumber);","lastModifiedDate":"2023-03-07"},{"lineNumber":140,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"    // TODO implement a user-friendly toString method","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":2,"Douglch":141}},{"path":"src/main/java/mycelium/mycelium/model/client/YearOfBirth.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":" * The YearOfBirth class represents a year of birth in the application.","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":" * It provides methods for validating a year of birth, and storing and retrieving a year of birth value.","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"public class YearOfBirth {","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"        \"Year of birth should only contain numbers, and it should be 4 digits long\";","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}\";","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":"    public final String value;","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":"     * Constructs a YearOfBirth object with the given year of birth value.","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"     * Throws a NullPointerException if the input value is null.","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"     * Throws an IllegalArgumentException if the input value is not a valid year of birth.","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"     * @param yearOfBirth The year of birth to be stored in the object.","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"    public YearOfBirth(String yearOfBirth) {","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"        checkArgument(isValidYearOfBirth(yearOfBirth), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"        value \u003d yearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"     * Determines whether the given string is a valid year of birth.","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"     * @param test The string to test.","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"     * @return true if the string is a valid year of birth, false otherwise.","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"    public static boolean isValidYearOfBirth(String test) {","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"     * Returns a string representation of the year of birth value.","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"     * @return The year of birth value as a string.","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"        return value;","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"     * Determines whether the given object is equal to this YearOfBirth object.","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"     * @param other The object to compare to this YearOfBirth object.","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"     * @return true if the objects are equal, false otherwise.","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"            || (other instanceof YearOfBirth // instanceof handles nulls","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"            \u0026\u0026 value.equals(((YearOfBirth) other).value)); // state check","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"     * Returns the hash code value for this YearOfBirth object.","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"     * @return The hash code value for this YearOfBirth object.","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"    @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"immanuelhume":5,"Douglch":64}},{"path":"src/main/java/mycelium/mycelium/model/client/exceptions/ClientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":" * Signals that the operation is unable to find the specified client.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"public class ClientNotFoundException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"Douglch":7}},{"path":"src/main/java/mycelium/mycelium/model/client/exceptions/DuplicateClientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":" * Signals that the operation will result in duplicate Client (Clients are considered duplicates if they have the same","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":" * email).","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"public class DuplicateClientException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"    public DuplicateClientException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"        super(\"Operation would result in duplicate clients\");","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"Douglch":11}},{"path":"src/main/java/mycelium/mycelium/model/person/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s address in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":55}},{"path":"src/main/java/mycelium/mycelium/model/person/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s email in the address book.","lastModifiedDate":"2018-02-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":69}},{"path":"src/main/java/mycelium/mycelium/model/person/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s name in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":57}},{"path":"src/main/java/mycelium/mycelium/model/person/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.commons.util.StringUtil;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {","lastModifiedDate":"2018-01-10"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public boolean test(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"immanuelhume":1,"-":29,"Douglch":1}},{"path":"src/main/java/mycelium/mycelium/model/person/Person.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Represents a Person in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Person {","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same name.","lastModifiedDate":"2020-12-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * This defines a weaker notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public boolean isSamePerson(Person otherPerson) {","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (otherPerson \u003d\u003d this) {","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return otherPerson !\u003d null","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            \u0026\u0026 otherPerson.getName().equals(getName());","lastModifiedDate":"2020-12-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Returns true if both persons have the same identity and data fields.","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * This defines a stronger notion of equality between two persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (!(other instanceof Person)) {","lastModifiedDate":"2018-01-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Person otherPerson \u003d (Person) other;","lastModifiedDate":"2018-01-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return otherPerson.getName().equals(getName())","lastModifiedDate":"2018-08-14"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            \u0026\u0026 otherPerson.getPhone().equals(getPhone())","lastModifiedDate":"2018-08-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            \u0026\u0026 otherPerson.getEmail().equals(getEmail())","lastModifiedDate":"2018-08-14"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            \u0026\u0026 otherPerson.getAddress().equals(getAddress())","lastModifiedDate":"2018-08-14"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            \u0026\u0026 otherPerson.getTags().equals(getTags());","lastModifiedDate":"2018-08-14"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        return Objects.hash(name, phone, email, address, tags);","lastModifiedDate":"2016-08-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            .append(getAddress());","lastModifiedDate":"2020-12-11"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":1,"-":120,"Douglch":2}},{"path":"src/main/java/mycelium/mycelium/model/person/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Person\u0027s phone number in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":51}},{"path":"src/main/java/mycelium/mycelium/model/person/UniquePersonList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A list of persons that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so","lastModifiedDate":"2018-04-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * as to ensure that the person with exactly the same fields will be removed.","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * @see Person#isSamePerson(Person)","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class UniquePersonList implements Iterable\u003cPerson\u003e {","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Returns true if the list contains an equivalent person as the given argument.","lastModifiedDate":"2016-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public boolean contains(Person toCheck) {","lastModifiedDate":"2018-01-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePerson);","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Adds a person to the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * The person must not already exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void add(Person toAdd) {","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Replaces the person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2017-06-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2016-12-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        internalList.set(index, editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2016-08-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * The person must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void remove(Person toRemove) {","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new PersonNotFoundException();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setPersons(UniquePersonList replacement) {","lastModifiedDate":"2016-10-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireAllNonNull(persons);","lastModifiedDate":"2018-01-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!personsAreUnique(persons)) {","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new DuplicatePersonException();","lastModifiedDate":"2018-01-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        internalList.setAll(persons);","lastModifiedDate":"2018-08-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2018-04-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public Iterator\u003cPerson\u003e iterator() {","lastModifiedDate":"2016-08-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            || (other instanceof UniquePersonList // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));","lastModifiedDate":"2018-08-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2018-04-19"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private boolean personsAreUnique(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-04-19"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            for (int j \u003d i + 1; j \u003c persons.size(); j++) {","lastModifiedDate":"2018-04-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                if (persons.get(i).isSamePerson(persons.get(j))) {","lastModifiedDate":"2018-04-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":132,"Douglch":3}},{"path":"src/main/java/mycelium/mycelium/model/person/exceptions/DuplicatePersonException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class DuplicatePersonException extends RuntimeException {","lastModifiedDate":"2018-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public DuplicatePersonException() {","lastModifiedDate":"2017-06-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"immanuelhume":1,"-":10}},{"path":"src/main/java/mycelium/mycelium/model/person/exceptions/PersonNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class PersonNotFoundException extends RuntimeException {","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":7}},{"path":"src/main/java/mycelium/mycelium/model/project/Project.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.IsSame;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * Represents a project.","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"public class Project implements IsSame\u003cProject\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    public static final DateTimeFormatter DATE_FMT \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     * The project\u0027s name","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    private final String name;","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     * The project\u0027s status","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    private final ProjectStatus status;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"     * The email of the client who submitted this project. We only keep the client\u0027s email here for more convenient","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"     * (de)serializing.","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    private final Email clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * The project\u0027s source, e.g. Fiverr","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    private final Optional\u003cString\u003e source;","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * Arbitrary description for the project","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    private final Optional\u003cString\u003e description;","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"     * The date on which this project was accepted","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    private final LocalDate acceptedOn;","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"     * A potential deadline for this project","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"    private final Optional\u003cLocalDate\u003e deadline;","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new project from the minimal set of required fields. The remaining fields are filled with default","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"     * values.","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    public Project(String name, Email clientEmail) {","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        this.status \u003d ProjectStatus.NOT_STARTED;","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        this.source \u003d Optional.empty();","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        this.description \u003d Optional.empty();","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d LocalDate.now(); // use current date","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d Optional.empty();","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new {@code Project} with every field present and not null.","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    public Project(String name,","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                   ProjectStatus status,","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"                   Email clientEmail,","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                   Optional\u003cString\u003e source,","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"                   Optional\u003cString\u003e description,","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"                   LocalDate acceptedOn,","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"                   Optional\u003cLocalDate\u003e deadline) {","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d acceptedOn;","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"    public String getName() {","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        return name;","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"    public ProjectStatus getStatus() {","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        return status;","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"    public Email getClientEmail() {","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        return clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"    public Optional\u003cString\u003e getSource() {","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        return source;","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"    public Optional\u003cString\u003e getDescription() {","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        return description;","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    public LocalDate getAcceptedOn() {","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        return acceptedOn;","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"    public Optional\u003cLocalDate\u003e getDeadline() {","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"        return deadline;","lastModifiedDate":"2023-03-07"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"     * Checks if two projects refer to the same project. For now, two projects are considered the same if they have","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"     * the same name.","lastModifiedDate":"2023-03-07"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"     * @param other The other project","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"     * @return True if the two projects refer to the same physical project","lastModifiedDate":"2023-03-07"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    public boolean isSame(Project other) {","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d other) {","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        return other !\u003d null \u0026\u0026 this.name.equals(other.name);","lastModifiedDate":"2023-03-07"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-07"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d (Project) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"        return Objects.equals(name, project.name)","lastModifiedDate":"2023-03-07"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 status \u003d\u003d project.status","lastModifiedDate":"2023-03-07"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 Objects.equals(clientEmail,","lastModifiedDate":"2023-03-07"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"            project.clientEmail)","lastModifiedDate":"2023-03-07"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 Objects.equals(source, project.source)","lastModifiedDate":"2023-03-07"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 Objects.equals(description, project.description)","lastModifiedDate":"2023-03-07"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 Objects.equals(acceptedOn, project.acceptedOn)","lastModifiedDate":"2023-03-07"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"            \u0026\u0026 Objects.equals(deadline, project.deadline);","lastModifiedDate":"2023-03-07"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(name, status, clientEmail, source, description, acceptedOn, deadline);","lastModifiedDate":"2023-03-07"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"    // TODO implement a user-friendly toString()","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":154}},{"path":"src/main/java/mycelium/mycelium/model/project/ProjectStatus.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Represents a project\u0027s status.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public enum ProjectStatus {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    NOT_STARTED,","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    IN_PROGRESS,","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    DONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Project status should be one of the following: \"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"            + \"not_started, in_progress, done.\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"     * Parses a project\u0027s status from its string representation. Throws an","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * {@code IllegalArgumentException} if the input string is not valid. To","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * avoid having to catch this error, consider calling {@code","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     * isValidProjectStatus} first.","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public static ProjectStatus fromString(String s) {","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        switch (s.toLowerCase()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        case \"not_started\":","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"            return NOT_STARTED;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        case \"in_progress\":","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            return IN_PROGRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        case \"done\":","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"            return DONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        default:","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"            throw new IllegalArgumentException(\"Invalid project status: \" + s);","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    public String toString() {","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        return this \u003d\u003d NOT_STARTED ? \"not_started\" : this \u003d\u003d IN_PROGRESS ? \"in_progress\" : \"done\";","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * Checks if a string represents a valid project status.","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public static boolean isValidProjectStatus(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        test \u003d test.toLowerCase();","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        return test.equals(\"not_started\") || test.equals(\"in_progress\") || test.equals(\"done\");","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":45}},{"path":"src/main/java/mycelium/mycelium/model/project/exceptions/DuplicateProjectException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Signals that the operation would result in duplicate projects.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class DuplicateProjectException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    public DuplicateProjectException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"        super(\"Operation would result in duplicate projects\");","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":10}},{"path":"src/main/java/mycelium/mycelium/model/project/exceptions/ProjectNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Signals that a requested project could not be found.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class ProjectNotFoundException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":7}},{"path":"src/main/java/mycelium/mycelium/model/tag/Tag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Tag in the address book.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Tag {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public final String tagName;","lastModifiedDate":"2016-10-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Constructs a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param tagName A valid tag name.","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Tag(String tagName) {","lastModifiedDate":"2017-05-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        requireNonNull(tagName);","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid tag name.","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static boolean isValidTagName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            || (other instanceof Tag // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return tagName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Format state as text for viewing.","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"immanuelhume":2,"-":52}},{"path":"src/main/java/mycelium/mycelium/model/util/IsSame.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Represents something which requires a different notion from Java\u0027s {@code equals}.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public interface IsSame\u003cT\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    boolean isSame(T other);","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":8}},{"path":"src/main/java/mycelium/mycelium/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-03-08"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Person[] getSamplePersons() {","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return new Person[]{","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                getTagSet(\"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\", \"friends\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                getTagSet(\"neighbours\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                getTagSet(\"family\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                getTagSet(\"classmates\")),","lastModifiedDate":"2017-03-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                getTagSet(\"colleagues\"))","lastModifiedDate":"2017-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"    public static Client[] getSampleClients() {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"        return new Client[]{","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"Alex Yeoh\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"1998\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.fiverr.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"87438807\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"Bernice Yu\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"1972\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.upwork.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"99272758\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"Charlotte Oliveiro\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"charlotte@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"1999\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.guru.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"91234567\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"David Li\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"lidavid@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"1998\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.fiverr.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"91031282\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"Irfan Ibrahim\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"irfan@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"1964\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.linkedin.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"92492021\"))),","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"StanleyNeoh"},"content":"            new Client(","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"StanleyNeoh"},"content":"                new Name(\"Roy Balakrishnan\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"royb@example.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new YearOfBirth(\"2001\")),","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"www.simplyhired.com\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(new Phone(\"92624417\")))","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"StanleyNeoh"},"content":"        };","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"StanleyNeoh"},"content":"    public static Project[] getSampleProjects() {","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"StanleyNeoh"},"content":"        return new Project[]{","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"StanleyNeoh"},"content":"            new Project(","lastModifiedDate":"2023-03-08"},{"lineNumber":93,"author":{"gitId":"StanleyNeoh"},"content":"                \"Bing\",","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"StanleyNeoh"},"content":"                ProjectStatus.NOT_STARTED,","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"johndoe@gmail.com\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"fiver\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"Create the next google AKA bing\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now(),","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.empty()","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"StanleyNeoh"},"content":"            ),","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"StanleyNeoh"},"content":"            new Project(","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"StanleyNeoh"},"content":"                \"Havard2.0\",","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"StanleyNeoh"},"content":"                ProjectStatus.IN_PROGRESS,","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"EluidKipchoge@gmail.com\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"Behind the alley\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"University on the streets\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now(),","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"                Optional.ofNullable(LocalDate.now())","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"StanleyNeoh"},"content":"            ),","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"StanleyNeoh"},"content":"            new Project(","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"StanleyNeoh"},"content":"                \"Build Skynet\",","lastModifiedDate":"2023-03-08"},{"lineNumber":112,"author":{"gitId":"StanleyNeoh"},"content":"                ProjectStatus.DONE,","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"StanleyNeoh"},"content":"                new Email(\"VladPutin@hotmale.com\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"Russia\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.ofNullable(\"Conquer the world\"),","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now(),","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"StanleyNeoh"},"content":"                Optional.empty()","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"StanleyNeoh"},"content":"            )","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"StanleyNeoh"},"content":"        };","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        for (Person samplePerson : getSamplePersons()) {","lastModifiedDate":"2016-12-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"            sampleAb.addPerson(samplePerson);","lastModifiedDate":"2017-04-07"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":127,"author":{"gitId":"StanleyNeoh"},"content":"        for (Project sampleProject : getSampleProjects()) {","lastModifiedDate":"2023-03-08"},{"lineNumber":128,"author":{"gitId":"StanleyNeoh"},"content":"            sampleAb.addProject(sampleProject);","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"StanleyNeoh"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":130,"author":{"gitId":"StanleyNeoh"},"content":"        for (Client sampleClient : getSampleClients()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"StanleyNeoh"},"content":"            sampleAb.addClient(sampleClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"StanleyNeoh"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"StanleyNeoh":80,"immanuelhume":11,"-":47,"Douglch":7}},{"path":"src/main/java/mycelium/mycelium/model/util/UniqueList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.stream.IntStream;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.DuplicateItemException;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":" * A list with invariant that every item is unique. The items must implement {@link IsSame}, which is used to check","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":" * if uniqueness is violated, rather than {@code equals}.","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"public class UniqueList\u003cT extends IsSame\u003cT\u003e\u003e implements Iterable\u003cT\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"     * Checks if the current list contains some object.","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    public boolean contains(T toCheck) {","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        return internalList.stream().anyMatch(toCheck::isSame);","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * Adds an item to the list.","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public void add(T toAdd) {","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateItemException(toAdd);","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"     * Removes an item from the list. Note that the item to remove to checked via {@link IsSame}, not {@code equals}.","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    public void remove(T toRemove) {","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        FilteredList\u003cT\u003e filtered \u003d internalList.filtered(toRemove::isSame);","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        if (filtered.size() \u003d\u003d 0) {","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            throw new ItemNotFoundException(toRemove);","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        assert filtered.size() \u003d\u003d 1 : \"Invariant violated: list contains duplicate items\";","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        boolean isRemoved \u003d internalList.remove(filtered.get(0));","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        assert isRemoved : \"Invariant violated: list does not contain item to remove\";","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"     * Replaces an item with another at the same index. The two items do not have to be the same.","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    public void setItem(T target, T newItem) {","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        requireAllNonNull(target, newItem);","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        int[] idxs \u003d IntStream.range(0, internalList.size()).filter(i -\u003e internalList.get(i).isSame(target)).toArray();","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        if (idxs.length \u003d\u003d 0) {","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            throw new ItemNotFoundException(target);","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        assert idxs.length \u003d\u003d 1 : \"Invariant violated: list contains duplicate items\";","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        if (!target.isSame(newItem) \u0026\u0026 contains(newItem)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateItemException(newItem);","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        internalList.set(idxs[0], newItem);","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     * Replaces the current list with another.","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    public void setItems(UniqueList\u003cT\u003e replacement) {","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"     * Replaces the current list with another. Items in the list must be unique.","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"    public void setItems(List\u003cT\u003e items) {","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        requireAllNonNull(items);","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        if (!itemsAreUnique(items)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"            throw new DuplicateItemException();","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        internalList.setAll(items);","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"    private boolean itemsAreUnique(List\u003cT\u003e items) {","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        for (int i \u003d 0; i \u003c items.size() - 1; i++) {","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"            for (int j \u003d i + 1; j \u003c items.size(); j++) {","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"                if (items.get(i).isSame(items.get(j))) {","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"                    return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"                }","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"        return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"     * Returns an immutable reference to the internal list.","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"    public Iterator\u003cT\u003e iterator() {","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-07"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003c?\u003e that \u003d (UniqueList\u003c?\u003e) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"        return Objects.equals(internalList, that.internalList);","lastModifiedDate":"2023-03-07"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(internalList);","lastModifiedDate":"2023-03-07"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":133}},{"path":"src/main/java/mycelium/mycelium/model/util/exceptions/DuplicateItemException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Signals that a duplicate item cannot be allowed.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class DuplicateItemException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"    public DuplicateItemException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Operation would result in duplicate item.\"));","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"    public DuplicateItemException(Object dup) {","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"Operation would result in duplicate item %s.\", dup));","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":14}},{"path":"src/main/java/mycelium/mycelium/model/util/exceptions/ItemNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util.exceptions;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":" * Signals that some requested item was not available.","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"public class ItemNotFoundException extends RuntimeException {","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"    public ItemNotFoundException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"A requested item was not found.\"));","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    public ItemNotFoundException(Object dup) {","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"        super(String.format(\"The requested item %s was not found.\", dup));","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":15}},{"path":"src/main/java/mycelium/mycelium/storage/AddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * Represents a storage for {@link AddressBook}.","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface AddressBookStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns AddressBook data as a {@link ReadOnlyAddressBook}.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see #getAddressBookFilePath()","lastModifiedDate":"2016-10-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Saves the given {@link ReadOnlyAddressBook} to the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @see #saveAddressBook(ReadOnlyAddressBook)","lastModifiedDate":"2016-10-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":7,"-":41}},{"path":"src/main/java/mycelium/mycelium/storage/JsonAdaptedClient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":" * Jackson-friendly version of {@link Client}. This class is used to convert a {@code Client} object into a","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":" * JSON-friendly format for serialization and deserialization using Jackson library. It contains methods for","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":" * converting a {@code Client} object to this class for serialization, and for converting this class back to a","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":" * {@code Client} object for deserialization. It also contains methods for null and validity checks of the adapted","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":" * client object\u0027s fields.","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"class JsonAdaptedClient {","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"    private final String name;","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"    private final String email;","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"    private final String yearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"    private final String source;","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"    private final String mobileNumber;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"email\") String email,","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"                             @JsonProperty(\"year_of_birth\") String yearOfBirth,","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"                             @JsonProperty(\"source\") String source,","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"                             @JsonProperty(\"mobile_number\") String mobileNumber) {","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"        this.email \u003d email;","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"        this.yearOfBirth \u003d yearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"        this.mobileNumber \u003d mobileNumber;","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"     * Converts a given {@code Client} into this class for Jackson use.","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"    public JsonAdaptedClient(Client client) {","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"        System.out.println(client);","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"        name \u003d client.getName().fullName;","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"        email \u003d client.getEmail().value;","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"        yearOfBirth \u003d client.getYearOfBirth().map(x -\u003e x.value).orElse(null);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"        source \u003d client.getSource().orElse(null);","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"StanleyNeoh"},"content":"        mobileNumber \u003d client.getMobileNumber().map(x -\u003e x.value).orElse(null);","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"Douglch"},"content":"     * Throws an {@code IllegalValueException} with the given message if the given boolean is true.","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"Douglch"},"content":"     * @param check         The boolean to be checked.","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"     * @param attributeName The name of the attribute being checked.","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"     * @throws IllegalValueException if the given boolean is true.","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"    public void nullCheck(boolean check, String attributeName) throws IllegalValueException {","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"        if (check) {","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, attributeName));","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"     * Throws an {@code IllegalValueException} with the given message if the boolean is true.","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"     * @param check   The boolean to be checked.","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"     * @param message The error message to be displayed if the check fails.","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"Douglch"},"content":"     * @throws IllegalValueException if the given boolean is true.","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"Douglch"},"content":"    public void validityCheck(boolean check, String message) throws IllegalValueException {","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"Douglch"},"content":"        if (check) {","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"Douglch"},"content":"            throw new IllegalValueException(message);","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"Douglch"},"content":"     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object.","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"Douglch"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"Douglch"},"content":"     * @return the model\u0027s {@code Client} object.","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"Douglch"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted client.","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"Douglch"},"content":"    public Client toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"Douglch"},"content":"        nullCheck(name \u003d\u003d null, Name.class.getSimpleName());","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"Douglch"},"content":"        validityCheck(!Name.isValidName(name), Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"Douglch"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"Douglch"},"content":"        nullCheck(email \u003d\u003d null, Email.class.getSimpleName());","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"Douglch"},"content":"        validityCheck(!Email.isValidEmail(email), Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"Douglch"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"Douglch"},"content":"        if (yearOfBirth !\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"Douglch"},"content":"            validityCheck(!YearOfBirth.isValidYearOfBirth(yearOfBirth), YearOfBirth.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"Douglch"},"content":"        // TODO validityCheck for source","lastModifiedDate":"2023-03-09"},{"lineNumber":104,"author":{"gitId":"Douglch"},"content":"        if (mobileNumber !\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"Douglch"},"content":"            validityCheck(!Phone.isValidPhone(mobileNumber), Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"Douglch"},"content":"        return new Client(modelName,","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"Douglch"},"content":"            modelEmail,","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"StanleyNeoh"},"content":"            Optional.ofNullable(yearOfBirth).map(YearOfBirth::new),","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"Douglch"},"content":"            Optional.ofNullable(source),","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"StanleyNeoh"},"content":"            Optional.ofNullable(mobileNumber).map(Phone::new));","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"StanleyNeoh":7,"immanuelhume":2,"Douglch":105}},{"path":"src/main/java/mycelium/mycelium/storage/JsonAdaptedPerson.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Person}.","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"class JsonAdaptedPerson {","lastModifiedDate":"2018-12-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedPerson} with the given person details.","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts a given {@code Person} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public JsonAdaptedPerson(Person source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted person.","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public Person toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            personTags.add(tag.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":8,"-":101}},{"path":"src/main/java/mycelium/mycelium/storage/JsonAdaptedProject.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import com.fasterxml.jackson.annotation.JsonFormat;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":" * Jackson friendly version of {@link Project}.","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"public class JsonAdaptedProject {","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Project\u0027s %s field is missing\";","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    private final String name;","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    private final ProjectStatus status;","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    private final String clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private final String source;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    private final String description;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    @JsonFormat(shape \u003d JsonFormat.Shape.STRING, pattern \u003d \"dd/MM/yyyy\")","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    private final LocalDate acceptedOn;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    @JsonFormat(shape \u003d JsonFormat.Shape.STRING, pattern \u003d \"dd/MM/yyyy\")","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    private final LocalDate deadline; // NOTE: it is okay for the deadline to be null","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     * Constructs this class from its properties.","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    public JsonAdaptedProject(@JsonProperty(\"name\") String name,","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"status\") ProjectStatus status,","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"clientEmail\") String clientEmail,","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"source\") String source,","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"description\") String description,","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"acceptedOn\") LocalDate acceptedOn,","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"                              @JsonProperty(\"deadline\") LocalDate deadline) {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d clientEmail;","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d acceptedOn;","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"     * Constructs this class from a vanilla {@link Project}.","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    public JsonAdaptedProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        name \u003d project.getName();","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        status \u003d project.getStatus();","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        clientEmail \u003d project.getClientEmail().value;","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        source \u003d project.getSource().orElse(null);","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        description \u003d project.getDescription().orElse(null);","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        acceptedOn \u003d project.getAcceptedOn();","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        deadline \u003d project.getDeadline().orElse(null);","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"    private static void assertField(boolean cond, String fieldName) throws IllegalValueException {","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        if (!cond) {","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, fieldName));","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"     * Constructs a {@link Project} from this class.","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"     * @return The new {@code Project}","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"     * @throws IllegalValueException if some null fields exist","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    public Project toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"        assertField(name !\u003d null, \"name\");","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        assertField(status !\u003d null, \"status\");","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        assertField(clientEmail !\u003d null, \"clientEmail\");","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        assertField(acceptedOn !\u003d null, \"acceptedOn\");","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        // NOTE: it is okay for the deadline to be null.","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        return new Project(name,","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            status,","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            new Email(clientEmail),","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(source),","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(description),","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            acceptedOn,","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(deadline));","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        JsonAdaptedProject that \u003d (JsonAdaptedProject) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        return Objects.equals(name, that.name) \u0026\u0026 status \u003d\u003d that.status \u0026\u0026 Objects.equals(clientEmail,","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"            that.clientEmail) \u0026\u0026 Objects.equals(source, that.source) \u0026\u0026 Objects.equals(description,","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"            that.description) \u0026\u0026 Objects.equals(acceptedOn, that.acceptedOn) \u0026\u0026 Objects.equals(deadline,","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"            that.deadline);","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(name, status, clientEmail, source, description, acceptedOn, deadline);","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":110}},{"path":"src/main/java/mycelium/mycelium/storage/JsonAdaptedTag.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Jackson-friendly version of {@link Tag}.","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"class JsonAdaptedTag {","lastModifiedDate":"2018-12-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(String tagName) {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.tagName \u003d tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Converts a given {@code Tag} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public JsonAdaptedTag(Tag source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        tagName \u003d source.tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getTagName() {","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return tagName;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted tag.","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Tag toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Tag(tagName);","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":3,"-":45}},{"path":"src/main/java/mycelium/mycelium/storage/JsonAddressBookStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.FileUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.JsonUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * A class to access AddressBook data stored as a json file on the hard disk.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorage implements AddressBookStorage {","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public JsonAddressBookStorage(Path filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return readAddressBook(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Similar to {@link #readAddressBook()}.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            filePath, JsonSerializableAddressBook.class);","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        if (!jsonAddressBook.isPresent()) {","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Optional.of(jsonAddressBook.get().toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}.","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":7,"-":73}},{"path":"src/main/java/mycelium/mycelium/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Clients list contains duplicate client(s).\";","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public static final String MESSAGE_DUPLICATE_PROJECT \u003d \"Projects list contains duplicate project(s).\";","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    private final List\u003cJsonAdaptedProject\u003e projects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"                                       @JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients,","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"                                       @JsonProperty(\"projects\") List\u003cJsonAdaptedProject\u003e projects) {","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"        this.clients.addAll(clients);","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        this.projects.addAll(projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        projects.addAll(source.getProjectList().stream().map(JsonAdaptedProject::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"        for (JsonAdaptedClient jsonAdaptedClient : clients) {","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"            Client client \u003d jsonAdaptedClient.toModelType();","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"            if (addressBook.hasClient(client)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"            }","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"            addressBook.addClient(client);","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        for (JsonAdaptedProject jsonAdaptedProject : projects) {","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            Project project \u003d jsonAdaptedProject.toModelType();","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"            if (addressBook.hasProject(project)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PROJECT);","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            addressBook.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":19,"-":54,"Douglch":13}},{"path":"src/main/java/mycelium/mycelium/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.JsonUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":6,"-":42}},{"path":"src/main/java/mycelium/mycelium/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * API of the Storage component","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public interface Storage extends AddressBookStorage, UserPrefsStorage {","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;","lastModifiedDate":"2016-09-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"immanuelhume":5,"-":27}},{"path":"src/main/java/mycelium/mycelium/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Manages storage of AddressBook data in local storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private AddressBookStorage addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates a {@code StorageManager} with the given {@code AddressBookStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2016-10-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        this.addressBookStorage \u003d addressBookStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2016-10-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2017-02-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return addressBookStorage.getAddressBookFilePath();","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {","lastModifiedDate":"2016-10-01"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return readAddressBook(addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return addressBookStorage.readAddressBook(filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-01"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        addressBookStorage.saveAddressBook(addressBook, filePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":6,"-":72}},{"path":"src/main/java/mycelium/mycelium/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * Represents a storage for {@link UserPrefs}.","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws IOException             if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     * Saves the given {@link ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":8,"-":30}},{"path":"src/main/java/mycelium/mycelium/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.Logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.CommandResult;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"         * @see Logic#execute(String)","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":6,"-":80}},{"path":"src/main/java/mycelium/mycelium/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     * @throws IllegalStateException \u003cul\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"     *                               if this method is called on a thread other than the JavaFX","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     *                               Application Thread.","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *                               if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *                               if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *                               \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *                               if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     *                               \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *                               \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":6,"-":97}},{"path":"src/main/java/mycelium/mycelium/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.control.TabPane;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.Logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.CommandResult;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.client.ClientListCard;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.ListPanel;","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.TabPage;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.project.ProjectListCard;","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"    private ListPanel\u003cClient\u003e clientListPanel;","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"StanleyNeoh"},"content":"    private ListPanel\u003cProject\u003e projectListPanel;","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":47,"author":{"gitId":"StanleyNeoh"},"content":"    private TabPage projectTab;","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"StanleyNeoh"},"content":"    private TabPage clientTab;","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"StanleyNeoh"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"StanleyNeoh"},"content":"    private TabPane tabPane;","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":113,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"StanleyNeoh"},"content":"        projectListPanel \u003d new ListPanel\u003cProject\u003e(logic.getFilteredProjectList(), ProjectListCard::new);","lastModifiedDate":"2023-03-08"},{"lineNumber":127,"author":{"gitId":"StanleyNeoh"},"content":"        clientListPanel \u003d new ListPanel\u003cClient\u003e(logic.getFilteredClientList(), ClientListCard::new);","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"StanleyNeoh"},"content":"        projectTab \u003d new TabPage(\"Projects\", projectListPanel);","lastModifiedDate":"2023-03-07"},{"lineNumber":129,"author":{"gitId":"StanleyNeoh"},"content":"        clientTab \u003d new TabPage(\"Client\", clientListPanel);","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"StanleyNeoh"},"content":"        projectTab.fillInnerContent();","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"StanleyNeoh"},"content":"        clientTab.fillInnerContent();","lastModifiedDate":"2023-03-07"},{"lineNumber":132,"author":{"gitId":"StanleyNeoh"},"content":"        tabPane.getTabs().addAll(projectTab.getRoot(), clientTab.getRoot());","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":157,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":164,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"            (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":184,"author":{"gitId":"StanleyNeoh"},"content":"    public ListPanel\u003cClient\u003e getClientListPanel() {","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"StanleyNeoh"},"content":"        return clientListPanel;","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":188,"author":{"gitId":"StanleyNeoh"},"content":"    public ListPanel\u003cProject\u003e getProjectListPanel() {","lastModifiedDate":"2023-03-07"},{"lineNumber":189,"author":{"gitId":"StanleyNeoh"},"content":"        return projectListPanel;","lastModifiedDate":"2023-03-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"     * @see Logic#execute(String)","lastModifiedDate":"2023-03-06"},{"lineNumber":196,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"StanleyNeoh":26,"immanuelhume":9,"-":183}},{"path":"src/main/java/mycelium/mycelium/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":1,"-":27}},{"path":"src/main/java/mycelium/mycelium/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public StatusBarFooter(Path saveLocation) {","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2018-12-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":1,"-":27}},{"path":"src/main/java/mycelium/mycelium/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.MainApp;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.StringUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.Logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.Ui;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"                                               String contentText) {","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        alert.setTitle(title);","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        alert.showAndWait();","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":25,"-":62}},{"path":"src/main/java/mycelium/mycelium/ui/client/ClientListCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.client;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"public class ClientListCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"    public final Client client;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"StanleyNeoh"},"content":"    private Label name;","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"    private Label yearOfBirth;","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"    private Label source;","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"    private Label mobileNumber;","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"StanleyNeoh"},"content":"    public ClientListCard(Client client, int displayedIndex) {","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"        this.client \u003d client;","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"        name.setText(client.getName().toString());","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"        email.setText(client.getEmail().toString());","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"        yearOfBirth.setText(client.getYearOfBirth().map(YearOfBirth::toString).orElse(\"No year of birth\").toString());","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"        source.setText(client.getSource().orElse(\"No source\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"StanleyNeoh"},"content":"        mobileNumber.setText(client.getMobileNumber().map(Phone::toString).orElse(\"No mobile number\").toString());","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"StanleyNeoh"},"content":"        if (!(other instanceof ClientListCard)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"StanleyNeoh"},"content":"        ClientListCard card \u003d (ClientListCard) other;","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"StanleyNeoh"},"content":"            \u0026\u0026 client.equals(card.client);","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"StanleyNeoh":24,"-":51}},{"path":"src/main/java/mycelium/mycelium/ui/common/ListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.common;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"StanleyNeoh"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"import java.util.function.BiFunction;","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.commons.core.LogsCenter;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":" * Panel containing the list of {@code T}.","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"public class ListPanel\u003cT\u003e extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"    private static final String FXML \u003d \"ListPanel.fxml\";","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"StanleyNeoh"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ListPanel.class);","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"StanleyNeoh"},"content":"    @FXML","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"StanleyNeoh"},"content":"    private ListView\u003cT\u003e listView;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"     * Creates a {@code ListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"StanleyNeoh"},"content":"    public ListPanel(ObservableList\u003cT\u003e list) {","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"StanleyNeoh"},"content":"        super(FXML);","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"StanleyNeoh"},"content":"        requireNonNull(list);","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"        listView.setItems(list);","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"     * Creates a {@code ListPanel} with the given {@cpde list} after transforming with {@code biMap}","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"     * @param list  ObservableList of items","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"     * @param biMap BiFunction that transform the list to the approproate {@code UiPart}","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"    public ListPanel(","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"        ObservableList\u003cT\u003e list,","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"StanleyNeoh"},"content":"        BiFunction\u003c","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"            ? super T,","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"StanleyNeoh"},"content":"            ? super Integer,","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"StanleyNeoh"},"content":"            ? extends UiPart\u003c? extends Node\u003e\u003e biMap","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"StanleyNeoh"},"content":"    ) {","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"StanleyNeoh"},"content":"        this(list);","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"        listView.setCellFactory(listView -\u003e new ListViewCell(biMap));","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code T}.","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"StanleyNeoh"},"content":"    class ListViewCell extends ListCell\u003cT\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"StanleyNeoh"},"content":"        private BiFunction\u003c? super T, ? super Integer, ? extends UiPart\u003c? extends Node\u003e\u003e biMap;","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"StanleyNeoh"},"content":"        ListViewCell(BiFunction\u003c? super T, ? super Integer, ? extends UiPart\u003c? extends Node\u003e\u003e biMap) {","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"StanleyNeoh"},"content":"            super();","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"StanleyNeoh"},"content":"            this.biMap \u003d biMap;","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"StanleyNeoh"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"StanleyNeoh"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"StanleyNeoh"},"content":"        protected void updateItem(T item, boolean empty) {","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"StanleyNeoh"},"content":"            super.updateItem(item, empty);","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"StanleyNeoh"},"content":"            if (empty || item \u003d\u003d null) {","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"StanleyNeoh"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"StanleyNeoh"},"content":"                setText(null);","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"StanleyNeoh"},"content":"            } else {","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"StanleyNeoh"},"content":"                setGraphic(biMap.apply(item, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"StanleyNeoh"},"content":"            }","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"StanleyNeoh"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"StanleyNeoh"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"StanleyNeoh":74,"immanuelhume":1}},{"path":"src/main/java/mycelium/mycelium/ui/common/TabPage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.common;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.control.Tab;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":" * The ui for the page of a given tab.","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"public class TabPage extends UiPart\u003cTab\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"    private static final String FXML \u003d \"TabPage.fxml\";","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"    private UiPart\u003c? extends Node\u003e content;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"    @FXML","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"    private StackPane contentPlaceholder;","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"     * Initialises a {@code TabPage} with a given title.","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"StanleyNeoh"},"content":"     * @param title   Title of the Tab","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"StanleyNeoh"},"content":"     * @param content Content the tab should be poulated with","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"StanleyNeoh"},"content":"    public TabPage(String title, UiPart\u003c? extends Node\u003e content) {","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"StanleyNeoh"},"content":"        super(FXML);","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"StanleyNeoh"},"content":"        getRoot().setText(title);","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"StanleyNeoh"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"StanleyNeoh"},"content":"     * Populate the content of the Tab.","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"    public void fillInnerContent() {","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"StanleyNeoh"},"content":"        contentPlaceholder.getChildren().add(content.getRoot());","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"StanleyNeoh"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"StanleyNeoh":35,"immanuelhume":1}},{"path":"src/main/java/mycelium/mycelium/ui/common/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.common;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"     * Starts the UI (and the App).","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"StanleyNeoh":1,"-":11,"immanuelhume":3}},{"path":"src/main/java/mycelium/mycelium/ui/common/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.common;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.MainApp;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     * Resource folder where FXML files are stored.","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @param root     Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"StanleyNeoh":1,"-":75,"immanuelhume":17}},{"path":"src/main/java/mycelium/mycelium/ui/project/ProjectListCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"package mycelium.mycelium.ui.project;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * An UI component that displays information of a {@code Person}.","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"StanleyNeoh"},"content":"public class ProjectListCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"StanleyNeoh"},"content":"    private static final String FXML \u003d \"ProjectListCard.fxml\";","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"StanleyNeoh"},"content":"    public final Project project;","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"    private Label id;","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"StanleyNeoh"},"content":"    private Label status;","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"    private Label email;","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"StanleyNeoh"},"content":"    private Label source;","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"StanleyNeoh"},"content":"    private Label description;","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"    @FXML","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"    private Label acceptedOn;","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"    private Label deadline;","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonCode} with the given {@code Person} and index to display.","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":46,"author":{"gitId":"StanleyNeoh"},"content":"    public ProjectListCard(Project p, int displayedIndex) {","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"StanleyNeoh"},"content":"        project \u003d p;","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"        name.setText(p.getName());","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"        status.setText(p.getStatus().toString());","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"        email.setText(p.getClientEmail().toString());","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"        source.setText(p.getSource().orElse(\"Unknown\"));","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"        description.setText(p.getDescription().orElse(\"No description given\"));","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        acceptedOn.setText(p.getAcceptedOn().format(Project.DATE_FMT));","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        deadline.setText(p.getDeadline().map(d -\u003e d.format(Project.DATE_FMT)).orElse(\"No Deadline\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"StanleyNeoh"},"content":"        if (!(other instanceof ProjectListCard)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"StanleyNeoh"},"content":"        ProjectListCard card \u003d (ProjectListCard) other;","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"StanleyNeoh"},"content":"            \u0026\u0026 project.equals(card.project);","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"StanleyNeoh":24,"-":50,"immanuelhume":2}},{"path":"src/main/resources/view/ClientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":29,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cFlowPane fx:id\u003d\"emailHolder\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"fieldE\" styleClass\u003d\"cell_small_label\" text\u003d\"Email: \"/\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cFlowPane fx:id\u003d\"yearOfBirthHolder\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"fieldY\" styleClass\u003d\"cell_small_label\" text\u003d\"Year of Birth: \"/\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"yearOfBirth\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$yearOfBirth\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cFlowPane fx:id\u003d\"sourceHolder\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"fieldS\" styleClass\u003d\"cell_small_label\" text\u003d\"Source: \"/\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cFlowPane fx:id\u003d\"mobileNumberHolder\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cchildren\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"fieldM\" styleClass\u003d\"cell_small_label\" text\u003d\"Mobile Number: \"/\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cLabel fx:id\u003d\"mobileNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$mobileNumber\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/children\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"StanleyNeoh"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"StanleyNeoh"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StanleyNeoh":31,"-":28,"immanuelhume":1}},{"path":"src/main/resources/view/ListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"  \u003cListView fx:id\u003d\"listView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"StanleyNeoh":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.control.TabPane?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cStackPane styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cchildren\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"StanleyNeoh"},"content":"          \u003c/children\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"StanleyNeoh":12,"-":48,"immanuelhume":1}},{"path":"src/main/resources/view/ProjectListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.FlowPane?\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":7,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"StanleyNeoh"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"StanleyNeoh"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"StanleyNeoh"},"content":"    \u003cVBox alignment\u003d\"CENTER_LEFT\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"StanleyNeoh"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"StanleyNeoh"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"StanleyNeoh"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"StanleyNeoh"},"content":"        \u003cFlowPane fx:id\u003d\"tags\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"StanleyNeoh"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"StanleyNeoh"},"content":"                \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$status\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"StanleyNeoh"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"StanleyNeoh"},"content":"        \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"        \u003cFlowPane fx:id\u003d\"emailHolder\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"                \u003cLabel fx:id\u003d\"fieldE\" styleClass\u003d\"cell_small_label\" text\u003d\"Email: \"/\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"                \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"         \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"         \u003cFlowPane fx:id\u003d\"sourceHolder\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"                \u003cLabel fx:id\u003d\"fieldS\" styleClass\u003d\"cell_small_label\" text\u003d\"Source: \"/\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"StanleyNeoh"},"content":"                \u003cLabel fx:id\u003d\"source\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$source\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"         \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"        \u003cFlowPane fx:id\u003d\"descriptionHolder\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"               \u003cLabel fx:id\u003d\"fieldD\" styleClass\u003d\"cell_small_label\" text\u003d\"Description: \" /\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"StanleyNeoh"},"content":"               \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"         \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"         \u003cFlowPane fx:id\u003d\"acceptedOnHolder\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"            \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"                \u003cLabel fx:id\u003d\"fieldA\" styleClass\u003d\"cell_small_label\" text\u003d\"Accepted on: \" /\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"StanleyNeoh"},"content":"                \u003cLabel fx:id\u003d\"acceptedOn\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$acceptedOn\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"         \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"         \u003cFlowPane fx:id\u003d\"deadlineHolder\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"             \u003cchildren\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"             \u003cLabel fx:id\u003d\"fieldDe\" styleClass\u003d\"cell_small_label\" text\u003d\"Deadline: \" /\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"StanleyNeoh"},"content":"                \u003cLabel fx:id\u003d\"deadline\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$deadline\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"            \u003c/children\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"         \u003c/FlowPane\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":67,"author":{"gitId":"StanleyNeoh"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"StanleyNeoh"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"StanleyNeoh"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"StanleyNeoh"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"StanleyNeoh"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"StanleyNeoh"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"StanleyNeoh":45,"immanuelhume":1,"RubyNguyen07":26}},{"path":"src/main/resources/view/TabPage.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.control.Tab?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"StanleyNeoh"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"StanleyNeoh"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"\u003cTab text\u003d\"Untitled Tab\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"StanleyNeoh"},"content":"   \u003ccontent\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"StanleyNeoh"},"content":"      \u003cStackPane fx:id\u003d\"contentPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"StanleyNeoh"},"content":"   \u003c/content\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"StanleyNeoh"},"content":"\u003c/Tab\u003e","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"StanleyNeoh":10,"immanuelhume":1}},{"path":"src/test/java/guitests/GuiRobot.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.function.BooleanSupplier;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import org.testfx.api.FxRobot;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.guiexceptions.StageNotFoundException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":" * Robot used to simulate user actions on the GUI.","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds.","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"public class GuiRobot extends FxRobot {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"    private final boolean isHeadlessMode;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"     * Creates a {@code GuiRobot} to facilitate GUI testing.","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    public GuiRobot() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"        System.setProperty(\"testfx.robot\", \"glass\");","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"        System.setProperty(\"prism.order\", \"sw\");","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"        System.setProperty(\"prism.text\", \"t2k\");","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"        System.setProperty(\"java.awt.headless\", \"true\");","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"     * unnecessary delays.","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"    public void pauseForHuman() {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"        if (isHeadlessMode) {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"            return;","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns true if tests are run in headless mode.","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"    public boolean isHeadlessMode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"        return isHeadlessMode;","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds.","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} ms.","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"    public void waitForEvent(BooleanSupplier event) {","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"     * Waits for {@code event} to be true.","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"RubyNguyen07"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"RubyNguyen07"},"content":"     * @param timeOut in milliseconds","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"RubyNguyen07"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}.","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"RubyNguyen07"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"RubyNguyen07"},"content":"        int timePassed \u003d 0;","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"RubyNguyen07"},"content":"        final int retryInterval \u003d 50;","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"RubyNguyen07"},"content":"        while (!event.getAsBoolean()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"RubyNguyen07"},"content":"            sleep(retryInterval);","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"RubyNguyen07"},"content":"            timePassed +\u003d retryInterval;","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"RubyNguyen07"},"content":"            if (timePassed \u003e\u003d timeOut) {","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"RubyNguyen07"},"content":"                throw new EventTimeoutException();","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"RubyNguyen07"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"RubyNguyen07"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"RubyNguyen07"},"content":"        pauseForHuman();","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns true if the window with {@code stageTitle} is currently open.","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"RubyNguyen07"},"content":"    public boolean isWindowShown(String stageTitle) {","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"RubyNguyen07"},"content":"        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns the number of windows with {@code stageTitle} that are currently open.","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"RubyNguyen07"},"content":"    public int getNumberOfWindowsShown(String stageTitle) {","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"RubyNguyen07"},"content":"        return (int) listTargetWindows().stream()","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"RubyNguyen07"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"RubyNguyen07"},"content":"                .count();","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title.","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"RubyNguyen07"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"RubyNguyen07"},"content":"     * children of the target window, rest of the windows.","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"RubyNguyen07"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"RubyNguyen07"},"content":"     * @throws StageNotFoundException if the stage is not found.","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"RubyNguyen07"},"content":"    public Stage getStage(String stageTitle) {","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"RubyNguyen07"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"RubyNguyen07"},"content":"                .filter(Stage.class::isInstance) // checks that the window is of type Stage","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"RubyNguyen07"},"content":"                .map(Stage.class::cast)","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"RubyNguyen07"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"RubyNguyen07"},"content":"                .findFirst();","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"RubyNguyen07"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"RubyNguyen07"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event.","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"RubyNguyen07"},"content":"    private class EventTimeoutException extends RuntimeException {","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":125}},{"path":"src/test/java/guitests/guihandles/ClientListCardHandle.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests.guihandles;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":" * Provides a handle to a person card in the person list panel.","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"public class ClientListCardHandle extends NodeHandle\u003cNode\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String EMAIL_FIELD_ID \u003d \"#email\";","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String SOURCE_FIELD_ID \u003d \"#source\";","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String YEAR_OF_BIRTH_FIELD_ID \u003d \"#yearOfBirth\";","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String MOBILE_NUMBER_FIELD_ID \u003d \"#mobileNumber\";","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label idLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label nameLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label emailLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label sourceLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label yearOfBirthLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label mobileNumberLabel;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"     * Creates a {@code ProjectListCardHandle} with the default details.","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"    public ClientListCardHandle(Node cardNode) {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"        super(cardNode);","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"        idLabel \u003d getChildNode(ID_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"        nameLabel \u003d getChildNode(NAME_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"        sourceLabel \u003d getChildNode(SOURCE_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"        yearOfBirthLabel \u003d getChildNode(YEAR_OF_BIRTH_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"        mobileNumberLabel \u003d getChildNode(MOBILE_NUMBER_FIELD_ID);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"    public String getId() {","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"        return idLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"    public String getName() {","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"        return nameLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"    public String getEmail() {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"        return emailLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"    public String getSource() {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"        return sourceLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"    public String getYearOfBirth() {","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"        return yearOfBirthLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"    public String getMobileNumber() {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"        return mobileNumberLabel.getText();","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns true if this handle contains {@code person}.","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"RubyNguyen07"},"content":"    public boolean equals(Client client) {","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"RubyNguyen07"},"content":"        return getName().equals(client.getName().toString())","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getEmail().equals(client.getEmail())","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getSource().equals(client.getSource())","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getYearOfBirth().equals(client.getYearOfBirth())","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getMobileNumber().equals(client.getMobileNumber());","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"RubyNguyen07":74}},{"path":"src/test/java/guitests/guihandles/NodeHandle.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests.guihandles;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.GuiRobot;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.guiexceptions.NodeNotFoundException;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":" * Provides access to a node in a JavaFx application for GUI testing purposes.","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"public abstract class NodeHandle\u003cT extends Node\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    private final T rootNode;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    protected NodeHandle(T rootNode) {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"        this.rootNode \u003d requireNonNull(rootNode);","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"    protected T getRootNode() {","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"        return rootNode;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}.","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"     * @param query name of the CSS selector for the node to retrieve.","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"     * @throws NodeNotFoundException if no such node exists.","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"    protected \u003cQ extends Node\u003e Q getChildNode(String query) {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"        Optional\u003cQ\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"        return node.orElseThrow(NodeNotFoundException::new);","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"     * Clicks on the root node (i.e. itself).","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"    public void click() {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"        guiRobot.clickOn(rootNode);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":44}},{"path":"src/test/java/guitests/guihandles/ProjectListCardHandle.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests.guihandles;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":" * Provides a handle to a person card in the person list panel.","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"public class ProjectListCardHandle extends NodeHandle\u003cNode\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String STATUS_FIELD_ID \u003d \"#status\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String CLIENT_EMAIL_FIELD_ID \u003d \"#email\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String SOURCE_FIELD_ID \u003d \"#source\";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String DESCRIPTION_FIELD_ID \u003d \"#description\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String ACCEPTED_ON_FIELD_ID \u003d \"#acceptedOn\";","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String DEADLINE_FIELD_ID \u003d \"#deadline\";","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label idLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label nameLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label statusLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label clientEmailLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label sourceLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label descriptionLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label acceptedOnLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"    private final Label deadlineLabel;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"     * Creates a {@code ProjectListCardHandle} with the default details.","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"    public ProjectListCardHandle(Node cardNode) {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"        super(cardNode);","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"        idLabel \u003d getChildNode(ID_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"        nameLabel \u003d getChildNode(NAME_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"        statusLabel \u003d getChildNode(STATUS_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"        clientEmailLabel \u003d getChildNode(CLIENT_EMAIL_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"        sourceLabel \u003d getChildNode(SOURCE_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"        descriptionLabel \u003d getChildNode(DESCRIPTION_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"        acceptedOnLabel \u003d getChildNode(ACCEPTED_ON_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"        deadlineLabel \u003d getChildNode(DEADLINE_FIELD_ID);","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"    public String getId() {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"        return idLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"    public String getName() {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"        return nameLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"    public String getStatus() {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"        return statusLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"    public String getClientEmail() {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"        return clientEmailLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"    public String getSource() {","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"        return sourceLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"RubyNguyen07"},"content":"    public String getDescription() {","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"RubyNguyen07"},"content":"        return descriptionLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"RubyNguyen07"},"content":"    public String getAcceptedOn() {","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"RubyNguyen07"},"content":"        return acceptedOnLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"RubyNguyen07"},"content":"    public String getDeadline() {","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"RubyNguyen07"},"content":"        return deadlineLabel.getText();","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"RubyNguyen07"},"content":"     * Returns true if this handle contains {@code person}.","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"RubyNguyen07"},"content":"    public boolean equals(Project project) {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"RubyNguyen07"},"content":"        return getName().equals(project.getName().toString())","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getStatus().equals(project.getStatus())","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getClientEmail().equals(project.getClientEmail())","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getSource().equals(project.getSource())","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getDescription().equals(project.getDescription())","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getAcceptedOn().equals(project.getAcceptedOn())","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"RubyNguyen07"},"content":"                \u0026\u0026 getDeadline().equals(project.getDeadline());","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":91}},{"path":"src/test/java/guitests/guihandles/guiexceptions/NodeNotFoundException.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests.guihandles.guiexceptions;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":" * Signals that the node cannot be found.","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"public class NodeNotFoundException extends NoSuchElementException {","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":10}},{"path":"src/test/java/guitests/guihandles/guiexceptions/StageNotFoundException.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package guitests.guihandles.guiexceptions;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.NoSuchElementException;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":" * Signals that the stage cannot be found.","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"public class StageNotFoundException extends NoSuchElementException {","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":9}},{"path":"src/test/java/mycelium/mycelium/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"immanuelhume":1,"-":57}},{"path":"src/test/java/mycelium/mycelium/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"immanuelhume":1,"-":26}},{"path":"src/test/java/mycelium/mycelium/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"                                              int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":2,"-":133}},{"path":"src/test/java/mycelium/mycelium/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.core.index;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"immanuelhume":5,"-":56}},{"path":"src/test/java/mycelium/mycelium/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(IllegalArgumentException.class,","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"immanuelhume":7,"-":31}},{"path":"src/test/java/mycelium/mycelium/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(objects));","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e CollectionUtil.requireAllNonNull(collection));","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"        CollectionUtil.requireAllNonNull(objects);","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        CollectionUtil.requireAllNonNull(collection);","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"immanuelhume":6,"-":101}},{"path":"src/test/java/mycelium/mycelium/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Config;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":4,"-":112}},{"path":"src/test/java/mycelium/mycelium/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":4,"-":20}},{"path":"src/test/java/mycelium/mycelium/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.SerializableTestClass;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TestUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":3,"-":42}},{"path":"src/test/java/mycelium/mycelium/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.commons.util;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"immanuelhume":2,"-":141}},{"path":"src/test/java/mycelium/mycelium/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.CommandResult;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ListCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.JsonAddressBookStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.storage.StorageManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        assertParseException(invalidCommand, Messages.MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        assertCommandException(deleteCommand, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(expectedPerson);","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"StanleyNeoh"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":104,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":30,"-":135}},{"path":"src/test/java/mycelium/mycelium/logic/commands/AddClientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"public class AddClientCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * We don\u0027t use a stub for the model, and directly use the ModelManager","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * class. This is because the ModelManager already has unit and integration","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * tests.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private ModelManager model \u003d new ModelManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public void constructor_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new AddClientCommand(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        // For this test, we create a dummy client, add it through the model,","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        // and assert that the model now sees the client, and that the command\u0027s","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        // feedback is what we expect.","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        CommandResult res \u003d new AddClientCommand(client).execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(String.format(AddClientCommand.MESSAGE_SUCCESS, client), res.getFeedbackToUser());","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasClient(client));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    public void execute_duplicateClient_throwsCommandException() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand cmd \u003d new AddClientCommand(client);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        // Execute this command once. Then we execute it again.","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        cmd.execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasClient(client));","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(CommandException.class, () -\u003e cmd.execute(model));","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        // Create two clients with different emails. All else identical.","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        Client alice \u003d new ClientBuilder().withEmail(\"alice@silkroad.com\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        Client bob \u003d new ClientBuilder().withEmail(\"bob@silkroad.com\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand addAlice \u003d new AddClientCommand(alice);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand addBob \u003d new AddClientCommand(bob);","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cAddClientCommand, AddClientCommand\u003e\u003e equalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            \"same object\",","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addAlice, addAlice),","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            \"same fields, different object\",","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addAlice, new AddClientCommand(alice)),","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"            \"same email, different fields\",","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addAlice,","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                new AddClientCommand(new ClientBuilder().withEmail(alice.getEmail().value)","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"                    .withName(\"not alice\")","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                    .build()))","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        equalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cAddClientCommand, Object\u003e\u003e notEqualTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            \"different email\", Pair.of(addAlice, addBob),","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            \"null\", Pair.of(addAlice, null),","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            \"different type\", Pair.of(addAlice, 1)","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        notEqualTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            assertNotEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":90}},{"path":"src/test/java/mycelium/mycelium/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        expectedModel.addPerson(validPerson);","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new AddCommand(validPerson), model,","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(0);","lastModifiedDate":"2018-01-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"immanuelhume":9,"-":36}},{"path":"src/test/java/mycelium/mycelium/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(CommandException.class,","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":156,"author":{"gitId":"Douglch"},"content":"        public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-09"},{"lineNumber":157,"author":{"gitId":"Douglch"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":158,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":159,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":161,"author":{"gitId":"Douglch"},"content":"        public void deleteClient(Client client) {","lastModifiedDate":"2023-03-09"},{"lineNumber":162,"author":{"gitId":"Douglch"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":163,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":164,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":165,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":166,"author":{"gitId":"Douglch"},"content":"        public void addClient(Client client) {","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"Douglch"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":168,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":169,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":170,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":171,"author":{"gitId":"Douglch"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":172,"author":{"gitId":"Douglch"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":174,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":175,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":176,"author":{"gitId":"Douglch"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-09"},{"lineNumber":177,"author":{"gitId":"Douglch"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        public boolean hasProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"        public void deleteProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"        public void addProject(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"        public ObservableList\u003cProject\u003e getFilteredProjectList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"        public void updateFilteredProjectList(Predicate\u003cProject\u003e predicate) {","lastModifiedDate":"2023-03-07"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-07"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"        public Optional\u003cClient\u003e getUniqueClient(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"        public Optional\u003cProject\u003e getUniqueProject(Predicate\u003cProject\u003e predicate) {","lastModifiedDate":"2023-03-13"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":217,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":218,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":224,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":225,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":229,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":232,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":234,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":238,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":242,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":243,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":244,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":249,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":252,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":253,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":254,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":255,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":258,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"immanuelhume":54,"-":179,"Douglch":25}},{"path":"src/test/java/mycelium/mycelium/logic/commands/AddProjectCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"public class AddProjectCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"     * We don\u0027t use a stub for the model, and directly use the ModelManager","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"     * class. This is because the ModelManager already has unit and integration","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"     * tests.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private ModelManager model \u003d new ModelManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public void constructor_nullProject_throwsNullPointerException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new AddProjectCommand(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    public void execute_projectAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        CommandResult res \u003d new AddProjectCommand(project).execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(String.format(AddProjectCommand.MESSAGE_SUCCESS, project), res.getFeedbackToUser());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasProject(project));","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public void execute_duplicateProject_throwsCommandException() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand cmd \u003d new AddProjectCommand(project);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        // Execute this command once. Then we execute it again.","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        cmd.execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasProject(project));","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(CommandException.class, () -\u003e cmd.execute(model));","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        Project bing \u003d new ProjectBuilder().withName(\"Bing\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        Project bard \u003d new ProjectBuilder().withName(\"Bard\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand addBing \u003d new AddProjectCommand(bing);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand addBard \u003d new AddProjectCommand(bard);","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cAddProjectCommand, AddProjectCommand\u003e\u003e equalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            \"same object\",","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addBing, addBing),","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            \"same fields, different object\",","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addBing, new AddProjectCommand(bing)),","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            \"same name, different fields\",","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            Pair.of(addBing,","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"                new AddProjectCommand(new ProjectBuilder().withName(\"Bing\")","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"                    .withClientEmail(\"hogriders@coc.org\")","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"                    .build()))","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        equalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cAddProjectCommand, Object\u003e\u003e unequalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            \"different name\", Pair.of(addBing, addBard),","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"            \"null\", Pair.of(addBing, null),","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            \"different type\", Pair.of(addBing, 1)","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        unequalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            assertNotEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":86}},{"path":"src/test/java/mycelium/mycelium/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"immanuelhume":7,"-":25}},{"path":"src/test/java/mycelium/mycelium/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"immanuelhume":1,"-":53}},{"path":"src/test/java/mycelium/mycelium/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + CliSyntax.PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + CliSyntax.PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + CliSyntax.PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + CliSyntax.PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + CliSyntax.PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + CliSyntax.PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    public static final String","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        INVALID_ADDRESS_DESC \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        \" \" + CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    // empty string not allowed for addresses","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + CliSyntax.PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"immanuelhume":31,"-":97}},{"path":"src/test/java/mycelium/mycelium/logic/commands/DeleteClientCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"public class DeleteClientCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    // TODO add more tests in the manner of DeleteCommandTest.java! The tests we","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    // have now are very basic, and I have written them in a rush.","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    private ModelManager model \u003d new ModelManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    public void execute_validEmail_success() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        model.addClient(client);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasClient(client));","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand cmd \u003d new DeleteClientCommand(client.getEmail());","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        CommandResult res \u003d cmd.execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(model.hasClient(client));","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(String.format(DeleteClientCommand.MESSAGE_DELETE_PERSON_SUCCESS, client), res.getFeedbackToUser());","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public void execute_nonExistentEmail_throwsCommandException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand cmd \u003d new DeleteClientCommand(new Email(\"hogriders@coc.org\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(CommandException.class, () -\u003e cmd.execute(model));","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand deleteAlice \u003d new DeleteClientCommand(new Email(\"alice@coc.org\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand deleteBob \u003d new DeleteClientCommand(new Email(\"bob@coc.org\"));","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cDeleteClientCommand, DeleteClientCommand\u003e\u003e equalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            \"same object\", Pair.of(deleteAlice, deleteAlice),","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            \"same email, different object\", Pair.of(deleteAlice, new DeleteClientCommand(new Email(\"alice@coc.org\")))","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        equalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cDeleteClientCommand, Object\u003e\u003e unequalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            \"different email\", Pair.of(deleteAlice, deleteBob),","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            \"different type\", Pair.of(deleteAlice, new Object()),","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            \"null\", Pair.of(deleteAlice, null)","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        unequalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            assertNotEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":69}},{"path":"src/test/java/mycelium/mycelium/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-06-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        expectedModel.deletePerson(personToDelete);","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(p -\u003e false);","lastModifiedDate":"2017-06-12"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertTrue(model.getFilteredPersonList().isEmpty());","lastModifiedDate":"2018-02-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"immanuelhume":13,"-":96}},{"path":"src/test/java/mycelium/mycelium/logic/commands/DeleteProjectCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"public class DeleteProjectCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    // TODO add more tests in the manner of DeleteCommandTest.java! The tests we","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    // have now are very basic, and I have written them in a rush.","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    private ModelManager model \u003d new ModelManager();","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    public void execute_validName_success() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        model.addProject(project);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(model.hasProject(project));","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand cmd \u003d new DeleteProjectCommand(project.getName());","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        CommandResult res \u003d cmd.execute(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(model.hasProject(project));","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(String.format(DeleteProjectCommand.MESSAGE_DELETE_PROJECT_SUCCESS, project),","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            res.getFeedbackToUser());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public void execute_nonExistentName_throwsCommandException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand cmd \u003d new DeleteProjectCommand(\"Team Fortress 3\");","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(CommandException.class, () -\u003e cmd.execute(model));","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand deleteBing \u003d new DeleteProjectCommand(\"Bing\");","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand deleteBard \u003d new DeleteProjectCommand(\"Bard\");","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cDeleteProjectCommand, DeleteProjectCommand\u003e\u003e equalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            \"same object\", Pair.of(deleteBing, deleteBing),","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            \"same name, different object\", Pair.of(deleteBing, new DeleteProjectCommand(\"Bing\"))","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        equalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(tt.first, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cDeleteProjectCommand, Object\u003e\u003e unequalTests \u003d Map.of(","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"            \"different type\", Pair.of(deleteBing, new Object()),","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            \"different name\", Pair.of(deleteBing, deleteBard),","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            \"null\", Pair.of(deleteBing, null)","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        unequalTests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            assertFalse(tt.first.equals(tt.second), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":68}},{"path":"src/test/java/mycelium/mycelium/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-05-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(lastPerson, editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        // edit person in filtered list into a duplicate in address book","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2018-01-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            new EditPersonDescriptorBuilder(personInList).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);","lastModifiedDate":"2017-05-18"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());","lastModifiedDate":"2017-05-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2017-05-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2019-01-25"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":173,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"immanuelhume":23,"-":150}},{"path":"src/test/java/mycelium/mycelium/logic/commands/EditPersonDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorTest {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"immanuelhume":11,"-":47}},{"path":"src/test/java/mycelium/mycelium/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"immanuelhume":5,"-":15}},{"path":"src/test/java/mycelium/mycelium/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.CARL;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ELLE;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.FIONA;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_zeroKeywords_noPersonFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_multipleKeywords_multiplePersonsFound() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        expectedModel.updateFilteredPersonList(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"immanuelhume":11,"-":72}},{"path":"src/test/java/mycelium/mycelium/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"public class HelpCommandTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    public void execute_help_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(HelpCommand.SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"        CommandTestUtil.assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":17}},{"path":"src/test/java/mycelium/mycelium/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.commands;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ModelManager;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"immanuelhume":8,"-":31}},{"path":"src/test/java/mycelium/mycelium/logic/parser/AddClientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddClientCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"public class AddClientCommandParserTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    // TODO I noticed the argument tokenizer takes the LAST instance of a","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    // prefix, not the first. We must add this to the user guide or something.","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    public void parse_missingRequiredArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        // Just a silly little check, so that we can use -cn and -e verbatim in","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        // our test cases instead of relying on this variable.","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_NAME.getPrefix(), \"-cn \");","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        // For each of the following cases, we expect the parser to throw an exception.","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, String\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"empty string\", \"\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"only whitespace\", \" \"),","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no name\", \"-cn\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no name (whitespace)\", \"-cn \"),","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no whitespace\", \"-cnBob\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no email\", \"-e\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no email (whitespace)\", \"-e \"),","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no whitespace\", \"-ehogrider@coc.org\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"prefixes are not separated\", \"-cn-e\"),","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name and email not separated\", \"-cnBob-ehogrider@coc.org\")","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            // Don\u0027t know why the argument tokenizer is written in this way","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            // where it expects an initial whitespace. But this is why I added","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            // the \" \" in front.","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            assertParseFailure(new AddClientCommandParser(), input, String.format(","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"                Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                AddClientCommand.MESSAGE_USAGE","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            ), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_NAME.getPrefix(), \"-cn \");","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        // For each of the following cases, we expect the parser to throw an exception.","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cString, String\u003e\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name is whitespace\", Pair.of(\"-cn   -e hogrider@coc.org\", Name.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"email is whitespace\", Pair.of(\"-cn Bob -e   \", Email.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid email\", Pair.of(\"-cn Bob -e foobar\", Email.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid name\", Pair.of(\"-cn SHA-256 -e hogrider@coc.org\", Name.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid mobile number\",","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn Jamal -e jamal@hogriders.org -mn hogridaaaa\", Phone.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid source (empty)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn Jamal -e jamal@hogriders.org -src \", Messages.MESSAGE_EMPTY_STR)),","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid year of birth\",","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn Jamal -e jamal@hogriders.org -y 42069\", YearOfBirth.MESSAGE_CONSTRAINTS))","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt.first;","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"            assertParseFailure(new AddClientCommandParser(), input, tt.second, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"    public void parse_validInput_success() throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_NAME.getPrefix(), \"-cn \");","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        // Suppose we are trying to add Jamal (or Jamal the Hogrider) from jamal@hogriders.org.","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand addJamal \u003d new AddClientCommand(","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            new ClientBuilder().withName(\"jamal\").withEmail(\"jamal@hogriders.org\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            addJamalTheHogrider \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"            new AddClientCommand(new ClientBuilder().withName(\"Jamal the Hogrider\")","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"                .withEmail(\"jamal@hogriders.org\")","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"                .build());","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cString, AddClientCommand\u003e\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name first, then email\", Pair.of(\"-cn Jamal -e jamal@hogriders.org\", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"email first, then name\", Pair.of(\"-e jamal@hogriders.org -cn Jamal\", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"trailing whitespace\", Pair.of(\"-cn Jamal -e jamal@hogriders.org  \", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple words in name\",","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn Jamal the Hogrider -e jamal@hogriders.org\", addJamalTheHogrider)),","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple names\", Pair.of(\"-e jamal@hogriders.org -cn Alice -cn jamal\", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple emails\", Pair.of(\"-cn jamal -e alice@bakers.com -e jamal@hogriders.org\", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple names and emails\",","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn Alice -e alice@bakers.com -cn jamal -e jamal@hogriders.org\", addJamal)),","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"all arguments present\",","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-cn jamal -e jamal@hogriders.org -mn 62353535 -src Fiverr -y 1843\", addJamal))","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"        for (String desc : tests.keySet()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tests.get(desc).first;","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"            AddClientCommand want \u003d tests.get(desc).second;","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"            assertParseSuccess(new AddClientCommandParser(), input, want, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"immanuelhume":118}},{"path":"src/test/java/mycelium/mycelium/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalPersons;","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        Person","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"            expectedPersonMultipleTags \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            new PersonBuilder(TypicalPersons.BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                .build();","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        // zero tags","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        Person expectedPerson \u003d new PersonBuilder(TypicalPersons.AMY).withTags().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            new AddCommand(expectedPerson));","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        String expectedMessage \u003d String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        // missing name prefix","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        // missing phone prefix","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        // missing email prefix","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        // missing address prefix","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"        // all prefixes missing","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage);","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"        // invalid name","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"        // invalid phone","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        // invalid email","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        // invalid address","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        // invalid tag","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"            + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"            Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"        // non-empty preamble","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":142}},{"path":"src/test/java/mycelium/mycelium/logic/parser/AddProjectCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddProjectCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"public class AddProjectCommandParserTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    public void parse_missingRequiredArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_PROJECT_NAME.getPrefix(), \"-pn \");","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        // For each of the following cases, we expect the parser to throw an exception.","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, String\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"empty string\", \"\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"only whitespace\", \" \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no name\", \"-pn\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no name (whitespace)\", \"-pn \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has name prefix only, but no whitespace\", \"-pnBing\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no email\", \"-e\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no email (whitespace)\", \"-e \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"has email prefix only, but no whitespace\", \"-ejamal@hogriders.org\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"prefixes are not separated\", \"-pn-e\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"no name nor email\", \"-pn -e\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name, but no email\", \"-pn Bing -e\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name and email not separated\", \"-pnBing-ejamal@hogriders.org\")","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            assertParseFailure(new AddProjectCommandParser(), input, String.format(","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"                Messages.MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"                AddProjectCommand.MESSAGE_USAGE","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            ), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_PROJECT_NAME.getPrefix(), \"-pn \");","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        String basic \u003d \"-pn Bing -e jamal@hogriders.org \";","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        // For each of the following cases, we expect the parser to throw an exception.","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cString, String\u003e\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid name (whitespace)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn  -e jamal@hogriders.org\", Name.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid email (whitespace)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -e \", Email.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid email\",","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -e foobar\", Email.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            // NOTE: no restrictions on project name (except being non-empty), so no test case for that","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid acceptedOn (not even a date)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-ad notadate\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid acceptedOn (wrong date format)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-ad 2020-01-01\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid acceptedOn (date but with time)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-ad 2020-01-01 12:00\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid deadline (not even a date)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-dd notadate\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid deadline (wrong date format)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-dd 2020-01-01\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid deadline (date but with time)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-dd 2020/01/01 12:00\", Messages.MESSAGE_INVALID_DATE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid source (empty)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-src \", Messages.MESSAGE_EMPTY_STR)),","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid description (empty)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-d \", Messages.MESSAGE_EMPTY_STR)),","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid status (empty)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-s \", ProjectStatus.MESSAGE_CONSTRAINTS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid status (wrong words)\",","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(basic + \"-s hog_riders\", ProjectStatus.MESSAGE_CONSTRAINTS))","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"            Assertions.assertThrows(ParseException.class, ()","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"                    -\u003e new AddProjectCommandParser().parse(input),","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"                \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"    public void parse_validArgs_success() throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_PROJECT_NAME.getPrefix(), \"-pn \");","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(CliSyntax.PREFIX_CLIENT_EMAIL.getPrefix(), \"-e \");","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand addBing \u003d new AddProjectCommand(new ProjectBuilder().withName(\"Bing\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"            addMicrosoftBing \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"            new AddProjectCommand(new ProjectBuilder().withName(\"Microsoft Bing\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"        // For each of the following cases, we expect the parser to return the correct command.","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cString, AddProjectCommand\u003e\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"name first, email second\",","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -e jamal@hogriders.org\", addBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"email first, name second\",","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-e jamal@hogriders.org -pn Bing\", addBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"trailing whitespace\",","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -e jamal@hogriders.org  \", addBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple words in project name\",","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Microsoft Bing -e jamal@hogriders.org\", addMicrosoftBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple names\",","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-e jamal@hogriders.org -pn Bing -pn Microsoft Bing\", addMicrosoftBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple emails\",","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -e jamar@hogriders.org -e jamal@hogriders.org\", addBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple names and emails\",","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(\"-pn Bing -pn Microsoft Bing -e jamar@hogriders.org -e jamal@hogriders.org\", addMicrosoftBing)),","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"all arguments present\",","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"                    \"-pn Bing -e jamal@hogriders.org -ad 01/01/1970 -dd 02/01/1970 -src Fiverr -d This is a \"","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"                        + \"description -s in_progress\",","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"                    addBing))","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"        for (String desc : tests.keySet()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tests.get(desc).first;","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            AddProjectCommand expected \u003d tests.get(desc).second;","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"            assertParseSuccess(new AddProjectCommandParser(), input, expected,","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"                \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"immanuelhume":144}},{"path":"src/test/java/mycelium/mycelium/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddClientCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddProjectCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteClientCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteProjectCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.FindCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.ListCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalIndexes;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + TypicalIndexes.INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON), command);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            + TypicalIndexes.INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            descriptor));","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(new EditCommand(TypicalIndexes.INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"    public void parseCommand_createClient() throws Exception {","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        String input \u003d AddClientCommand.COMMAND_ACRONYM + \" -cn Jamal -e jamal@hogriders.org\";","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand got \u003d (AddClientCommand) parser.parseCommand(input);","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"        AddClientCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"            want \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"            new AddClientCommand(new ClientBuilder().withName(\"Jamal\").withEmail(\"jamal@hogriders.org\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(want, got);","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    public void parseCommand_createProject() throws Exception {","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        String input \u003d AddProjectCommand.COMMAND_ACRONYM + \" -pn Bing -e jamal@hogriders.org\";","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand got \u003d (AddProjectCommand) parser.parseCommand(input);","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"        AddProjectCommand","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"            want \u003d","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"            new AddProjectCommand(new ProjectBuilder().withName(\"Bing\").withClientEmail(\"jamal@hogriders.org\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(want, got);","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"    public void parseCommand_deleteClient() throws Exception {","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"        String input \u003d DeleteClientCommand.COMMAND_ACRONYM + \" -e jamal@hogriders.org\";","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand got \u003d (DeleteClientCommand) parser.parseCommand(input);","lastModifiedDate":"2023-03-14"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand want \u003d new DeleteClientCommand(new Email(\"jamal@hogriders.org\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(want, got);","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    public void parseCommand_deleteProject() throws Exception {","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"        String input \u003d DeleteProjectCommand.COMMAND_ACRONYM + \" -pn Bing\";","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand got \u003d (DeleteProjectCommand) parser.parseCommand(input);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        DeleteProjectCommand want \u003d new DeleteProjectCommand(\"Bing\");","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(want, got);","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class,","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class,","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"            Messages.MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"immanuelhume":71,"-":74}},{"path":"src/test/java/mycelium/mycelium/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"immanuelhume":1,"-":149}},{"path":"src/test/java/mycelium/mycelium/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.Command;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"                                          Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"     * The same as {@code assertParseSuccess} but with a custom message.","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                                          Command expectedCommand, String msg) {","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(expectedCommand, command, msg);","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            Assertions.assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"     * The same as {@code assertParseFailure} but with a custom message.","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser,","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"                                          String userInput,","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"                                          String expectedMessage,","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                                          String msg) {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        try {","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"            parser.parse(userInput);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"            Assertions.assertEquals(expectedMessage, pe.getMessage(), msg);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"immanuelhume":34,"-":35}},{"path":"src/test/java/mycelium/mycelium/logic/parser/DeleteClientCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteClientCommand;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"public class DeleteClientCommandParserTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    // This command is simple, as it should look like this:","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    //   dc -e EMAIL","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    // So our tests are simple as well!","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    private DeleteClientCommandParser parser \u003d new DeleteClientCommandParser();","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    public void parse_missingRequiredArgs_fails() {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, String\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"empty string\", \"\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"only whitespace\", \" \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"no email\", \"-e\")","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            assertParseFailure(parser,","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"                input,","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteClientCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidEmail_fails() {","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, String\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"email is whitespace\", \"-e \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"invalid email\", \"-e foobar\")","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            assertParseFailure(parser, input, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    public void parse_validEmail_success() {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        DeleteClientCommand want \u003d new DeleteClientCommand(new Email(\"jamal@hogriders.org\"));","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, String\u003e tests \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"valid email\", \"-e jamal@hogriders.org\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"valid email with trailing whitespace\", \"-e jamal@hogriders.org   \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"multiple emails\", \"-e jamar@hogriders.org -e jamal@hogriders.org\")","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        tests.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            String input \u003d \" \" + tt;","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"            assertParseSuccess(parser, input, want);","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"immanuelhume":61}},{"path":"src/test/java/mycelium/mycelium/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalIndexes;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(TypicalIndexes.INDEX_FIRST_PERSON));","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"            \"a\",","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"immanuelhume":10,"-":24}},{"path":"src/test/java/mycelium/mycelium/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalIndexes;","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    private static final String TAG_EMPTY \u003d \" \" + CliSyntax.PREFIX_TAG;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        // no index specified","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        // no field specified","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        // no index and no field specified","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        // negative index","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        // zero index","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_NAME_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"            Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_PHONE_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_EMAIL_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_ADDRESS_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"            Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_TAG_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"            Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY,","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"            Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC,","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"            Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY,","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"            Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND,","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"            Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND,","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"            Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"            \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"            Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"            + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"            .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"            .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        // name","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor","lastModifiedDate":"2023-03-06"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"            descriptor \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"            new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"        // phone","lastModifiedDate":"2023-03-06"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"        // email","lastModifiedDate":"2023-03-06"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"        // address","lastModifiedDate":"2023-03-06"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"        // tags","lastModifiedDate":"2023-03-06"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2023-03-06"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2023-03-06"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"            + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2023-03-06"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"            + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"            .build();","lastModifiedDate":"2023-03-06"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"        // no other valid values specified","lastModifiedDate":"2023-03-06"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor","lastModifiedDate":"2023-03-06"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"            descriptor \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"            new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"        // other valid values specified","lastModifiedDate":"2023-03-06"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2023-03-06"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"            + PHONE_DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"            .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"        Index targetIndex \u003d TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2023-03-06"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"        EditCommand.EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":230}},{"path":"src/test/java/mycelium/mycelium/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.Messages;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.FindCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseFailure(parser,","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"            \"     \",","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"            new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        CommandParserTestUtil.assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":33}},{"path":"src/test/java/mycelium/mycelium/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.logic.parser;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Assert;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalIndexes;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, ParserUtil.MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(TypicalIndexes.INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2023-03-06"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2023-03-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2023-03-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"immanuelhume":36,"-":160}},{"path":"src/test/java/mycelium/mycelium/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.DuplicateItemException;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        // Here, we\u0027re just checking that all the default lists are empty. This is because they are meant to be","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        // populated after initialization by external sources, e.g. JSON files.","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        assertEquals(Collections.emptyList(), addressBook.getClientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(Collections.emptyList(), addressBook.getProjectList());","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, List.of(), List.of());","lastModifiedDate":"2023-03-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"    public void resetData_withDuplicateClients_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"        // Two clients with the same identity fields","lastModifiedDate":"2023-03-12"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"        List\u003cClient\u003e newClients \u003d List.of(","lastModifiedDate":"2023-03-12"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"                new ClientBuilder().build(),","lastModifiedDate":"2023-03-12"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"                new ClientBuilder().build()","lastModifiedDate":"2023-03-12"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"        );","lastModifiedDate":"2023-03-12"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"        AddressBookStub newData \u003d new AddressBookStub(List.of(), newClients, List.of());","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    public void resetData_withDuplicateProjects_throwsDuplicateProjectException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        List\u003cProject\u003e newProjects \u003d List.of(","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            new ProjectBuilder().build(),","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"            new ProjectBuilder().build()","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"        AddressBookStub newData \u003d new AddressBookStub(List.of(), List.of(), newProjects);","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":116,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"Douglch"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"Douglch"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"Douglch"},"content":"        assertFalse(addressBook.hasClient(new ClientBuilder().build()));","lastModifiedDate":"2023-03-12"},{"lineNumber":124,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":125,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":126,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":127,"author":{"gitId":"Douglch"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-12"},{"lineNumber":128,"author":{"gitId":"Douglch"},"content":"        Client john \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":129,"author":{"gitId":"Douglch"},"content":"        addressBook.addClient(john);","lastModifiedDate":"2023-03-12"},{"lineNumber":130,"author":{"gitId":"Douglch"},"content":"        assertTrue(addressBook.hasClient(john));","lastModifiedDate":"2023-03-12"},{"lineNumber":131,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":132,"author":{"gitId":"Douglch"},"content":"    // Should this be included?","lastModifiedDate":"2023-03-12"},{"lineNumber":133,"author":{"gitId":"Douglch"},"content":"    //    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":134,"author":{"gitId":"Douglch"},"content":"    //    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-12"},{"lineNumber":135,"author":{"gitId":"Douglch"},"content":"    //        addressBook.addClient(new ClientBuilder.build());","lastModifiedDate":"2023-03-12"},{"lineNumber":136,"author":{"gitId":"Douglch"},"content":"    //        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-12"},{"lineNumber":137,"author":{"gitId":"Douglch"},"content":"    //                .build();","lastModifiedDate":"2023-03-12"},{"lineNumber":138,"author":{"gitId":"Douglch"},"content":"    //        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2023-03-12"},{"lineNumber":139,"author":{"gitId":"Douglch"},"content":"    //    }","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":141,"author":{"gitId":"Douglch"},"content":"    public void getClientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":142,"author":{"gitId":"Douglch"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));","lastModifiedDate":"2023-03-12"},{"lineNumber":143,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":144,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_nullProject_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasProject(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_projectNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-07"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(addressBook.hasProject(new ProjectBuilder().build()));","lastModifiedDate":"2023-03-07"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_projectInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-07"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"        addressBook.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(addressBook.hasProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_projectWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-07"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"        addressBook.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"        Project editedProject \u003d new ProjectBuilder(project).withClientEmail(\"chungus@chungus.org\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(addressBook.hasProject(editedProject));","lastModifiedDate":"2023-03-07"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"    public void getProjectList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getProjectList().remove(0));","lastModifiedDate":"2023-03-07"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"    // TODO add tests for AddressBook#equals","lastModifiedDate":"2023-03-07"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":182,"author":{"gitId":"Douglch"},"content":"        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-09"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"        private final ObservableList\u003cProject\u003e projects \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-07"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"        // TODO update the constructor here to take in a list of projects too","lastModifiedDate":"2023-03-07"},{"lineNumber":186,"author":{"gitId":"Douglch"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cClient\u003e clients, Collection\u003cProject\u003e projects) {","lastModifiedDate":"2023-03-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":188,"author":{"gitId":"Douglch"},"content":"            this.clients.setAll(clients);","lastModifiedDate":"2023-03-09"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"            this.projects.setAll(projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":194,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":197,"author":{"gitId":"Douglch"},"content":"        @Override","lastModifiedDate":"2023-03-09"},{"lineNumber":198,"author":{"gitId":"Douglch"},"content":"        public ObservableList\u003cClient\u003e getClientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":199,"author":{"gitId":"Douglch"},"content":"            return clients;","lastModifiedDate":"2023-03-09"},{"lineNumber":200,"author":{"gitId":"Douglch"},"content":"        }","lastModifiedDate":"2023-03-09"},{"lineNumber":201,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        public ObservableList\u003cProject\u003e getProjectList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"            return projects;","lastModifiedDate":"2023-03-07"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"immanuelhume":63,"-":91,"Douglch":54}},{"path":"src/test/java/mycelium/mycelium/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.WEST;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.exceptions.DuplicateClientException;","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.exceptions.DuplicateProjectException;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.AddressBookBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":105,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":106,"author":{"gitId":"Douglch"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":107,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));","lastModifiedDate":"2023-03-12"},{"lineNumber":108,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":109,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":110,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"Douglch"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"Douglch"},"content":"        assertFalse(modelManager.hasClient(WEST));","lastModifiedDate":"2023-03-12"},{"lineNumber":113,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":114,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":115,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":116,"author":{"gitId":"Douglch"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-12"},{"lineNumber":117,"author":{"gitId":"Douglch"},"content":"        modelManager.addClient(WEST);","lastModifiedDate":"2023-03-12"},{"lineNumber":118,"author":{"gitId":"Douglch"},"content":"        assertTrue(modelManager.hasClient(WEST));","lastModifiedDate":"2023-03-12"},{"lineNumber":119,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":120,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueClient_addressBookIsEmpty_returnsEmpty() {","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(modelManager.getUniqueClient(c -\u003e c.getName().equals(new Name(\"Jamal\"))).isEmpty());","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueClient_clientNotInAddressBook_returnsEmpty() {","lastModifiedDate":"2023-03-14"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addClient(WEST);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(modelManager.getUniqueClient(c -\u003e c.getName().equals(new Name(\"Jamal\"))).isEmpty());","lastModifiedDate":"2023-03-14"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueClient_clientInAddressBook_returnsClient() {","lastModifiedDate":"2023-03-14"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addClient(WEST);","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(modelManager.getUniqueClient(c -\u003e c.equals(WEST)).get(), WEST);","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":139,"author":{"gitId":"Douglch"},"content":"    public void deleteClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":140,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteClient(null));","lastModifiedDate":"2023-03-12"},{"lineNumber":141,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":142,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":143,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":144,"author":{"gitId":"Douglch"},"content":"    public void deleteClient_clientNotInAddressBook_nothingHappens() {","lastModifiedDate":"2023-03-12"},{"lineNumber":145,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":146,"author":{"gitId":"Douglch"},"content":"        assertFalse(modelManager.hasClient(client));","lastModifiedDate":"2023-03-12"},{"lineNumber":147,"author":{"gitId":"Douglch"},"content":"        modelManager.deleteClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":148,"author":{"gitId":"Douglch"},"content":"        assertFalse(modelManager.hasClient(client));","lastModifiedDate":"2023-03-12"},{"lineNumber":149,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":150,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":151,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":152,"author":{"gitId":"Douglch"},"content":"    public void deleteClient_clientInAddressBook_success() {","lastModifiedDate":"2023-03-12"},{"lineNumber":153,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":154,"author":{"gitId":"Douglch"},"content":"        modelManager.addClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":155,"author":{"gitId":"Douglch"},"content":"        modelManager.deleteClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":156,"author":{"gitId":"Douglch"},"content":"        assertFalse(modelManager.hasClient(client));","lastModifiedDate":"2023-03-12"},{"lineNumber":157,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":158,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":159,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"Douglch"},"content":"    public void addClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":161,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.addClient(null));","lastModifiedDate":"2023-03-12"},{"lineNumber":162,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":163,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":164,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":165,"author":{"gitId":"Douglch"},"content":"    public void addClient_clientInAddressBook_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":166,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":167,"author":{"gitId":"Douglch"},"content":"        modelManager.addClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":168,"author":{"gitId":"Douglch"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e modelManager.addClient(client));","lastModifiedDate":"2023-03-12"},{"lineNumber":169,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":170,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":171,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":172,"author":{"gitId":"Douglch"},"content":"    public void addClient_clientWithSameIdentityFieldsInAddressBook_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":173,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":174,"author":{"gitId":"Douglch"},"content":"        modelManager.addClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":175,"author":{"gitId":"Douglch"},"content":"        Client editedClient \u003d new ClientBuilder(client).withEmail(\"John@gmail.com\").build();","lastModifiedDate":"2023-03-12"},{"lineNumber":176,"author":{"gitId":"Douglch"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e modelManager.addClient(editedClient));","lastModifiedDate":"2023-03-12"},{"lineNumber":177,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":178,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":179,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":180,"author":{"gitId":"Douglch"},"content":"    public void addClient_clientNotInAddressBook_success() {","lastModifiedDate":"2023-03-12"},{"lineNumber":181,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-12"},{"lineNumber":182,"author":{"gitId":"Douglch"},"content":"        modelManager.addClient(client);","lastModifiedDate":"2023-03-12"},{"lineNumber":183,"author":{"gitId":"Douglch"},"content":"        assertTrue(modelManager.hasClient(client));","lastModifiedDate":"2023-03-12"},{"lineNumber":184,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":185,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":186,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":187,"author":{"gitId":"Douglch"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-12"},{"lineNumber":188,"author":{"gitId":"Douglch"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));","lastModifiedDate":"2023-03-12"},{"lineNumber":189,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":190,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_nullProject_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasProject(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_projectNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-07"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(modelManager.hasProject(new ProjectBuilder().build()));","lastModifiedDate":"2023-03-07"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"    public void hasProject_projectInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-07"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Project\u003e cases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same reference\", project),","lastModifiedDate":"2023-03-07"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same fields\", new ProjectBuilder().withName(project.getName()).build()),","lastModifiedDate":"2023-03-07"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name diff email\", new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build())","lastModifiedDate":"2023-03-07"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"        cases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"            assertTrue(modelManager.hasProject(project), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueProject_addressBookIsEmpty_returnsEmpty() {","lastModifiedDate":"2023-03-14"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(modelManager.getUniqueProject(p -\u003e p.getName().equals(\"Bing\")).isEmpty());","lastModifiedDate":"2023-03-14"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueProject_projectNotInAddressBook_returnsEmpty() {","lastModifiedDate":"2023-03-14"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(new ProjectBuilder().withName(\"Bard\").build());","lastModifiedDate":"2023-03-14"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(modelManager.getUniqueProject(p -\u003e p.getName().equals(\"Bing\")).isEmpty());","lastModifiedDate":"2023-03-14"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"    public void getUniqueProject_projectInAddressBook_returnsProject() {","lastModifiedDate":"2023-03-14"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().withName(\"Bing\").build();","lastModifiedDate":"2023-03-14"},{"lineNumber":231,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-14"},{"lineNumber":232,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(modelManager.getUniqueProject(p -\u003e p.equals(project)).get(), project);","lastModifiedDate":"2023-03-14"},{"lineNumber":233,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"    public void deleteProject_nullProject_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.deleteProject(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":240,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":241,"author":{"gitId":"immanuelhume"},"content":"    public void deleteProject_projectNotInAddressBook_nothingHappens() {","lastModifiedDate":"2023-03-07"},{"lineNumber":242,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":243,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(modelManager.hasProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":244,"author":{"gitId":"immanuelhume"},"content":"        modelManager.deleteProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":245,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(modelManager.hasProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":246,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":247,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":248,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":249,"author":{"gitId":"immanuelhume"},"content":"    public void deleteProject_projectInAddressBook_success() {","lastModifiedDate":"2023-03-07"},{"lineNumber":250,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":251,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":252,"author":{"gitId":"immanuelhume"},"content":"        modelManager.deleteProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":253,"author":{"gitId":"immanuelhume"},"content":"        assertFalse(modelManager.hasProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":254,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":255,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":256,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":257,"author":{"gitId":"immanuelhume"},"content":"    public void addProject_nullProject_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":258,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.addProject(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":259,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":260,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":261,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":262,"author":{"gitId":"immanuelhume"},"content":"    public void addProject_projectInAddressBook_throwsDuplicateProjectException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":263,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":264,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":265,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(DuplicateProjectException.class, () -\u003e modelManager.addProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":266,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":267,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":268,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":269,"author":{"gitId":"immanuelhume"},"content":"    public void addProject_projectWithSameIdentityFieldsInAddressBook_throwsDuplicateProjectException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":270,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":271,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":272,"author":{"gitId":"immanuelhume"},"content":"        Project editedProject \u003d new ProjectBuilder(project).withClientEmail(\"chungus@chungus.org\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":273,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(DuplicateProjectException.class, () -\u003e modelManager.addProject(editedProject));","lastModifiedDate":"2023-03-07"},{"lineNumber":274,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":275,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":276,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":277,"author":{"gitId":"immanuelhume"},"content":"    public void addProject_projectNotInAddressBook_success() {","lastModifiedDate":"2023-03-07"},{"lineNumber":278,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":279,"author":{"gitId":"immanuelhume"},"content":"        modelManager.addProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":280,"author":{"gitId":"immanuelhume"},"content":"        assertTrue(modelManager.hasProject(project));","lastModifiedDate":"2023-03-07"},{"lineNumber":281,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":282,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":283,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":284,"author":{"gitId":"immanuelhume"},"content":"    public void getFilteredProjectList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":285,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredProjectList().remove(0));","lastModifiedDate":"2023-03-07"},{"lineNumber":286,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":287,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":288,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":290,"author":{"gitId":"immanuelhume"},"content":"        // TODO account for Project and Client too","lastModifiedDate":"2023-03-07"},{"lineNumber":291,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();","lastModifiedDate":"2017-07-19"},{"lineNumber":292,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":296,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":297,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":298,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":300,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":301,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":303,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":304,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":306,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":307,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":310,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":311,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":312,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":313,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":314,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":315,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":317,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":318,"author":{"gitId":"immanuelhume"},"content":"        modelManager.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2023-03-06"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":320,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":321,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":322,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":323,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":325,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"immanuelhume":131,"-":121,"Douglch":73}},{"path":"src/test/java/mycelium/mycelium/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"immanuelhume":2,"-":19}},{"path":"src/test/java/mycelium/mycelium/model/client/ClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.FUTA;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.RANTARO;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.WEST;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"public class ClientTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"    public void isSamePerson() {","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"        assertTrue(WEST.isSame(WEST));","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"        assertFalse(WEST.isSame(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"        // same name, diff email -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"        assertFalse(FUTA.isSame(RANTARO));","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"        // TODO -\u003e handle case for different name, same email","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"    public void equals() {","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"        Client westCopy \u003d new ClientBuilder(WEST).build();","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"        assertTrue(WEST.equals(westCopy));","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"        assertTrue(WEST.equals(WEST));","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        assertFalse(WEST.equals(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"        assertFalse(WEST.equals(\"I love it\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"        assertFalse(WEST.equals(FUTA));","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"        // TODO -\u003e handle case for different name, same email","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"    public void fillCompulsoryFieldsOnly() {","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"        Name name \u003d new Name(\"Walter Hartwell White\");","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"        Email email \u003d new Email(\"albqq@gmail.com\");","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"        Client client \u003d new Client(name, email);","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"        assertEquals(client.getName(), new Name(\"Walter Hartwell White\"));","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"        assertEquals(client.getEmail(), new Email(\"albqq@gmail.com\"));","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"        assertEquals(client.getYearOfBirth(), Optional.empty());","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"        assertEquals(client.getSource(), Optional.empty());","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"        assertEquals(client.getMobileNumber(), Optional.empty());","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"Douglch":58}},{"path":"src/test/java/mycelium/mycelium/model/client/YearOfBirthTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.model.client;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"public class YearOfBirthTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e new YearOfBirth(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"    public void constructor_invalidYearOfBirth_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"        String invalidYearOfBirth \u003d \"\";","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new YearOfBirth(invalidYearOfBirth));","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"    public void isValidYearOfBirth() {","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"        // null years","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"        assertThrows(NullPointerException.class, () -\u003e YearOfBirth.isValidYearOfBirth(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"        // invalid years","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"\")); // empty string","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\" \")); // spaces only","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"91\")); // less than 4 numbers","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"9 1\")); // spaces between digits","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"91333\")); // more than 4 numbers","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"phone\")); // non-numeric","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"        assertFalse(YearOfBirth.isValidYearOfBirth(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"        // valid years","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        assertTrue(YearOfBirth.isValidYearOfBirth(\"2004\")); // exactly 4 numbers","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        assertTrue(YearOfBirth.isValidYearOfBirth(\"1534\"));","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"    public void isCorrectString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"        YearOfBirth year \u003d new YearOfBirth(\"2099\");","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"        assertEquals(year.toString(), \"2099\");","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"        assertNotEquals(year.toString(), \"0\");","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"Douglch":48}},{"path":"src/test/java/mycelium/mycelium/model/person/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"immanuelhume":2,"-":34}},{"path":"src/test/java/mycelium/mycelium/model/person/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"immanuelhume":2,"-":66}},{"path":"src/test/java/mycelium/mycelium/model/person/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"immanuelhume":2,"-":73}},{"path":"src/test/java/mycelium/mycelium/model/person/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"immanuelhume":2,"-":38}},{"path":"src/test/java/mycelium/mycelium/model/person/PersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class PersonTest {","lastModifiedDate":"2018-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2018-03-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void isSamePerson() {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2020-12-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.isSamePerson(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Person editedBob \u003d new PersonBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        editedBob \u003d new PersonBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(BOB.isSamePerson(editedBob));","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person aliceCopy \u003d new PersonBuilder(ALICE).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2018-04-19"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2018-04-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"immanuelhume":11,"-":80}},{"path":"src/test/java/mycelium/mycelium/model/person/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"immanuelhume":2,"-":38}},{"path":"src/test/java/mycelium/mycelium/model/person/UniquePersonListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.person;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.exceptions.PersonNotFoundException;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.PersonBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class UniquePersonListTest {","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(ALICE));","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(uniquePersonList.contains(editedAlice));","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));","lastModifiedDate":"2019-03-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(editedAlice);","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        uniquePersonList.setPerson(ALICE, BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        uniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        uniquePersonList.remove(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(expectedUniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));","lastModifiedDate":"2019-03-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        uniquePersonList.add(ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        uniquePersonList.setPersons(personList);","lastModifiedDate":"2018-08-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();","lastModifiedDate":"2018-08-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        expectedUniquePersonList.add(BOB);","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedUniquePersonList, uniquePersonList);","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));","lastModifiedDate":"2019-03-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":170,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"immanuelhume":9,"-":161}},{"path":"src/test/java/mycelium/mycelium/model/project/ProjectStatusTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.model.project.ProjectStatus.DONE;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.model.project.ProjectStatus.IN_PROGRESS;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.model.project.ProjectStatus.NOT_STARTED;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"public class ProjectStatusTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    private static final Map\u003cString, Pair\u003cString, ProjectStatus\u003e\u003e okInput \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"not started\", Pair.of(\"not_started\", NOT_STARTED)),","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"in progress\", Pair.of(\"in_progress\", IN_PROGRESS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"done\", Pair.of(\"done\", DONE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"not started (uppercase)\", Pair.of(\"NOT_STARTED\", NOT_STARTED)),","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"in progress (uppercase)\", Pair.of(\"IN_PROGRESS\", IN_PROGRESS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"done (uppercase)\", Pair.of(\"DONE\", DONE)),","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"not started (mixed case)\", Pair.of(\"NoT_sTaRtEd\", NOT_STARTED)),","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"in progress (mixed case)\", Pair.of(\"In_PrOgReSs\", IN_PROGRESS)),","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"done (mixed case)\", Pair.of(\"dOnE\", DONE))","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    );","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    private static final Map\u003cString, String\u003e badInput \u003d Map.ofEntries(","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"empty string\", \"\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"only whitespace\", \" \"),","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        Map.entry(\"invalid status\", \"foobar\")","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    );","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public void isValidProjectStatus_validStatus_returnsTrue() {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        okInput.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"            assertTrue(ProjectStatus.isValidProjectStatus(tt.first), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    public void isValidProjectStatus_invalidStatus_returnsFalse() {","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        // We reject the status if it is not one of the three valid statuses.","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        badInput.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            assertFalse(ProjectStatus.isValidProjectStatus(tt), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    public void fromString_validString_returnsStatus() {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        okInput.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            ProjectStatus status \u003d ProjectStatus.fromString(tt.first);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(tt.second, status, \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"    public void fromString_invalidString_throwsException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        badInput.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            Assertions.assertThrows(IllegalArgumentException.class, (","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                ) -\u003e ProjectStatus.fromString(tt), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"immanuelhume":66}},{"path":"src/test/java/mycelium/mycelium/model/project/ProjectTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.project;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"public class ProjectTest {","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public void isSame() {","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cProject, Project\u003e\u003e sameCases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same reference\", Pair.of(defaultProject, defaultProject)),","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name\", Pair.of(defaultProject, new ProjectBuilder().withName(\"Default Project\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff status\",","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withStatus(ProjectStatus.IN_PROGRESS).build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff client email\",","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff source\",","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withSource(\"google\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff description\",","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withDescription(\"Different description\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff acceptedOn\",","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withAcceptedOn(LocalDate.now()).build())),","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff deadline\",","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withDeadline(LocalDate.now()).build()))","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        sameCases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"            assertTrue(tt.first.isSame(tt.second), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cProject, Project\u003e\u003e notSameCases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"different name\",","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withName(\"Different Project\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with different case\",","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withName(\"default project\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"against null\", Pair.of(defaultProject, null))","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        notSameCases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            assertFalse(tt.first.isSame(tt.second), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    public void equals() {","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cProject, Project\u003e\u003e equalCases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same reference\", Pair.of(defaultProject, defaultProject)),","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same fields\", Pair.of(defaultProject, new ProjectBuilder().build()))","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        equalCases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"            assertTrue(tt.first.equals(tt.second), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cProject, Project\u003e\u003e notEqualCases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"different name\",","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withName(\"Different Project\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with different case\",","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withName(\"default project\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"against null\", Pair.of(defaultProject, null)),","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff status\",","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withStatus(ProjectStatus.IN_PROGRESS).build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff client email\",","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff source\",","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withSource(\"google\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff description\",","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withDescription(\"Different description\").build())),","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff acceptedOn\",","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withAcceptedOn(LocalDate.now()).build())),","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same name with diff deadline\",","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(defaultProject, new ProjectBuilder().withDeadline(LocalDate.now()).build()))","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        notEqualCases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            assertFalse(tt.first.equals(tt.second), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    public void constructor_minimalFields_isOk() {","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new Project(\"my awesome project\", new Email(\"chungus@chungus.org\"));","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getName(), \"my awesome project\");","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getClientEmail(), new Email(\"chungus@chungus.org\"));","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getSource(), Optional.empty());","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getDescription(), Optional.empty());","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getAcceptedOn(), LocalDate.now());","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project.getDeadline(), Optional.empty());","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":101}},{"path":"src/test/java/mycelium/mycelium/model/tag/TagTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class TagTest {","lastModifiedDate":"2017-12-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Tag(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        String invalidTagName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));","lastModifiedDate":"2019-03-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void isValidTagName() {","lastModifiedDate":"2017-12-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null tag name","lastModifiedDate":"2017-12-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-12-04"}],"authorContributionMap":{"immanuelhume":2,"-":24}},{"path":"src/test/java/mycelium/mycelium/model/util/UniqueListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.model.util;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.DuplicateItemException;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.exceptions.ItemNotFoundException;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.Pair;","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"public class UniqueListTest {","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public void contains() {","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        projects.add(defaultProject);","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Pair\u003cProject, Boolean\u003e\u003e cases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same reference\", Pair.of(defaultProject, true)),","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same item\", Pair.of(new ProjectBuilder().build(), true)),","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same item with diff field\",","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"                Pair.of(new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build(), true)),","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"different item\", Pair.of(new ProjectBuilder().withName(\"different\").build(), false))","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        cases.forEach((desc, tt) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"            Project project \u003d tt.first;","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            boolean expected \u003d tt.second;","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"            assertEquals(expected, projects.contains(project), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    public void contains_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.contains(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    public void add_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.add(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"    public void add_duplicate_throwsDuplicateItemException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"        projects.add(defaultProject);","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, Project\u003e cases \u003d Map.ofEntries(","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same reference\", defaultProject),","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same item\", new ProjectBuilder().build()),","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"            Map.entry(\"same item with diff field\", new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build())","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"        cases.forEach((desc, project) -\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"            assertThrows(DuplicateItemException.class, () -\u003e projects.add(project), \"While testing case: \" + desc);","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    public void remove_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.remove(null));","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"    public void remove_itemDoesNotExist_throwsItemNotFoundException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"        projects.add(new ProjectBuilder().build()); // add a default project","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(ItemNotFoundException.class, ()","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"            -\u003e projects.remove(new ProjectBuilder().withName(\"different name\").build()));","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"    public void remove_existingItem_removesItem() {","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        projects.add(defaultProject);","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        projects.remove(defaultProject);","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e expectedProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        projects.add(defaultProject);","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"        projects.remove(new ProjectBuilder().withClientEmail(\"chungus@chungus.org\").build());","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_nullTarget_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.setItem(null, new ProjectBuilder().build()));","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_nullNewItem_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.setItem(new ProjectBuilder().build(), null));","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_targetItemDoesNotExist_throwsItemNotFoundException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"        Project defaulProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(ItemNotFoundException.class, ()","lastModifiedDate":"2023-03-07"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"            -\u003e projects.setItem(defaulProject, defaulProject));","lastModifiedDate":"2023-03-07"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_duplicateItem_throwsDuplicateItemException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"        Project projB \u003d new ProjectBuilder().withName(\"B\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e projects.setItem(projA, projB));","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_diffNewItem_replacesItem() {","lastModifiedDate":"2023-03-07"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        Project projB \u003d new ProjectBuilder().withName(\"B\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"        Project projC \u003d new ProjectBuilder().withName(\"C\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"        projects.setItem(projA, projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e expectedProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_identicalNewItem_nothingChanges() {","lastModifiedDate":"2023-03-07"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":145,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":146,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":147,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":148,"author":{"gitId":"immanuelhume"},"content":"        projects.setItem(projA, projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":149,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":150,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e expectedProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":151,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":152,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":153,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":154,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":155,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":156,"author":{"gitId":"immanuelhume"},"content":"    public void setItem_sameNewItemNotEquals_replacesItem() {","lastModifiedDate":"2023-03-07"},{"lineNumber":157,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":158,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":159,"author":{"gitId":"immanuelhume"},"content":"        Project projB \u003d new ProjectBuilder().withName(\"B\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":160,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":161,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":162,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":163,"author":{"gitId":"immanuelhume"},"content":"        Project newProjA \u003d new ProjectBuilder().withName(\"A\").withClientEmail(\"chungus@chungus.org\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":164,"author":{"gitId":"immanuelhume"},"content":"        projects.setItem(projA, newProjA);","lastModifiedDate":"2023-03-07"},{"lineNumber":165,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":166,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e expectedProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":167,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(newProjA);","lastModifiedDate":"2023-03-07"},{"lineNumber":168,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":169,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":170,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":171,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":172,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":173,"author":{"gitId":"immanuelhume"},"content":"    public void setItems_nullInput_throwsNullPointerException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":174,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":175,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.setItems((UniqueList\u003cProject\u003e) null));","lastModifiedDate":"2023-03-07"},{"lineNumber":176,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(NullPointerException.class, () -\u003e projects.setItems((List\u003cProject\u003e) null));","lastModifiedDate":"2023-03-07"},{"lineNumber":177,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":178,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":179,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":180,"author":{"gitId":"immanuelhume"},"content":"    public void setItems_uniqueList_replacesOwnListWithProvidedUniqueList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":181,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":182,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":183,"author":{"gitId":"immanuelhume"},"content":"        Project projB \u003d new ProjectBuilder().withName(\"B\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":184,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":185,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":186,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":187,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e newProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":188,"author":{"gitId":"immanuelhume"},"content":"        Project projC \u003d new ProjectBuilder().withName(\"C\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":189,"author":{"gitId":"immanuelhume"},"content":"        Project projD \u003d new ProjectBuilder().withName(\"D\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":190,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":191,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projD);","lastModifiedDate":"2023-03-07"},{"lineNumber":192,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":193,"author":{"gitId":"immanuelhume"},"content":"        projects.setItems(newProjects);","lastModifiedDate":"2023-03-07"},{"lineNumber":194,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":195,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(newProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":196,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":197,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":198,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":199,"author":{"gitId":"immanuelhume"},"content":"    public void setItems_validList_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-03-07"},{"lineNumber":200,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":201,"author":{"gitId":"immanuelhume"},"content":"        Project projA \u003d new ProjectBuilder().withName(\"A\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":202,"author":{"gitId":"immanuelhume"},"content":"        Project projB \u003d new ProjectBuilder().withName(\"B\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":203,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projA);","lastModifiedDate":"2023-03-07"},{"lineNumber":204,"author":{"gitId":"immanuelhume"},"content":"        projects.add(projB);","lastModifiedDate":"2023-03-07"},{"lineNumber":205,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":206,"author":{"gitId":"immanuelhume"},"content":"        List\u003cProject\u003e newProjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":207,"author":{"gitId":"immanuelhume"},"content":"        Project projC \u003d new ProjectBuilder().withName(\"C\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":208,"author":{"gitId":"immanuelhume"},"content":"        Project projD \u003d new ProjectBuilder().withName(\"D\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":209,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":210,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projD);","lastModifiedDate":"2023-03-07"},{"lineNumber":211,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":212,"author":{"gitId":"immanuelhume"},"content":"        projects.setItems(newProjects);","lastModifiedDate":"2023-03-07"},{"lineNumber":213,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":214,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e expectedProjects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":215,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":216,"author":{"gitId":"immanuelhume"},"content":"        expectedProjects.add(projD);","lastModifiedDate":"2023-03-07"},{"lineNumber":217,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(expectedProjects, projects);","lastModifiedDate":"2023-03-07"},{"lineNumber":218,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":219,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":220,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":221,"author":{"gitId":"immanuelhume"},"content":"    public void setItems_duplicateItems_throwsDuplicateItemException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":222,"author":{"gitId":"immanuelhume"},"content":"        UniqueList\u003cProject\u003e projects \u003d new UniqueList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":223,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":224,"author":{"gitId":"immanuelhume"},"content":"        List\u003cProject\u003e newProjects \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-07"},{"lineNumber":225,"author":{"gitId":"immanuelhume"},"content":"        Project projC \u003d new ProjectBuilder().withName(\"C\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":226,"author":{"gitId":"immanuelhume"},"content":"        Project projD \u003d new ProjectBuilder().withName(\"D\").build();","lastModifiedDate":"2023-03-07"},{"lineNumber":227,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":228,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projD);","lastModifiedDate":"2023-03-07"},{"lineNumber":229,"author":{"gitId":"immanuelhume"},"content":"        newProjects.add(projC);","lastModifiedDate":"2023-03-07"},{"lineNumber":230,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":231,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(DuplicateItemException.class, () -\u003e projects.setItems(newProjects));","lastModifiedDate":"2023-03-07"},{"lineNumber":232,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":233,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":234,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":235,"author":{"gitId":"immanuelhume"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-07"},{"lineNumber":236,"author":{"gitId":"immanuelhume"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-03-07"},{"lineNumber":237,"author":{"gitId":"immanuelhume"},"content":"            -\u003e new UniqueList\u003c\u003e().asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-07"},{"lineNumber":238,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":239,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":239}},{"path":"src/test/java/mycelium/mycelium/storage/JsonAdaptedClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.WEST;","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":"public class JsonAdaptedClientTest {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"    private static final String INVALID_NAME \u003d \"K@NY3 W3ST\";","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"    private static final String INVALID_MOBILE_NUMBER \u003d \"+651234\";","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"    private static final String INVALID_EMAIL \u003d \"12312113\";","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"    private static final String INVALID_YEAR_OF_BIRTH \u003d \"123\";","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"    private static final String VALID_NAME \u003d WEST.getName().toString();","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"    private static final String VALID_EMAIL \u003d WEST.getEmail().toString();","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"    private static final String VALID_YEAR_OF_BIRTH \u003d WEST.getYearOfBirth().get().value;","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"    private static final String VALID_SOURCE \u003d WEST.getSource().get();","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"    private static final String VALID_MOBILE_NUMBER \u003d WEST.getMobileNumber().get().value;","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"    public void toModelType_validClientDetails_returnsClient() throws Exception {","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(WEST);","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"        assertEquals(WEST, client.toModelType());","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"                new JsonAdaptedClient(INVALID_NAME, VALID_EMAIL, VALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"                        VALID_SOURCE, VALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_EMAIL, VALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"                VALID_SOURCE, VALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"        String","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"                expectedMessage \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"                String.format(JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"                new JsonAdaptedClient(VALID_NAME, INVALID_EMAIL, VALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"                        VALID_SOURCE, VALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"Douglch"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"                VALID_SOURCE, VALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"        String","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"                expectedMessage \u003d","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"                String.format(JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"    public void toModelType_invalidYearOfBirth_throwsIllegalValueException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_EMAIL, INVALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"                        VALID_SOURCE, VALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"        String expectedMessage \u003d YearOfBirth.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"Douglch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"Douglch"},"content":"    public void toModelType_invalidMobileNumber_throwsIllegalValueException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"Douglch"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"Douglch"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_EMAIL, VALID_YEAR_OF_BIRTH,","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"Douglch"},"content":"                        VALID_SOURCE, INVALID_MOBILE_NUMBER);","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"Douglch":88}},{"path":"src/test/java/mycelium/mycelium/storage/JsonAdaptedPersonTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonAdaptedPersonTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void toModelType_validPersonDetails_returnsPerson() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(BENSON, person.toModelType());","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        String","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"            String.format(JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"        String","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"            String.format(JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        String","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"            String.format(JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"        String","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"            expectedMessage \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"            String.format(JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        JsonAdaptedPerson person \u003d","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, person::toModelType);","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":20,"-":97}},{"path":"src/test/java/mycelium/mycelium/storage/JsonAdaptedProjectTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import java.util.Map;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.JsonUtil;","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"public class JsonAdaptedProjectTest {","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    public void basicSerialization() throws JsonProcessingException, IOException {","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"        // Here, we just serialize a project and assert that deserializing it produces the same project","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build(); // create a default project","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"        JsonAdaptedProject se \u003d new JsonAdaptedProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        String jsonStr \u003d JsonUtil.toJsonString(se);","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        JsonAdaptedProject de \u003d JsonUtil.fromJsonString(jsonStr, JsonAdaptedProject.class);","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(se, de);","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    public void toModelType_validProjectDetails_returnsProject() throws Exception {","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        JsonAdaptedProject jsonAdaptedProject \u003d new JsonAdaptedProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project, jsonAdaptedProject.toModelType());","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    public void toModelType_nonNullDeadline_returnsProject() throws Exception {","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"        Project project \u003d new ProjectBuilder().withDeadline(LocalDate.now()).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        JsonAdaptedProject jsonAdaptedProject \u003d new JsonAdaptedProject(project);","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        assertEquals(project, jsonAdaptedProject.toModelType());","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-07"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"    public void toModelType_invalidNullFields_throwsIllegalValueException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        UnaryOperator\u003cString\u003e withErr \u003d (fieldName)","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            -\u003e String.format(JsonAdaptedProject.MISSING_FIELD_MESSAGE_FORMAT, fieldName);","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, JsonAdaptedProject\u003e cases \u003d Map.of(","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"name\"),","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(null,","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"                \"chungus@chungus.org\",","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now()),","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"status\"),","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(\"owo\",","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"                null,","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"                \"chungus@chungus.org\",","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now()),","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"clientEmail\"),","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(\"owo\",","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"                null,","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now()),","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"acceptedOn\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(\"owo\",","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"                \"chungus@chungus.org\",","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"                null,","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now())","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        cases.forEach((errMsg, project) -\u003e {","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"            assertThrows(IllegalValueException.class, errMsg, project::toModelType);","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"        });","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"    public void toModelType_validNullFields_returnsProject() throws Exception {","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"        UnaryOperator\u003cString\u003e withErr \u003d (fieldName)","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"                -\u003e String.format(JsonAdaptedProject.MISSING_FIELD_MESSAGE_FORMAT, fieldName);","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"        Map\u003cString, JsonAdaptedProject\u003e cases \u003d Map.of(","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"source\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_NAME,","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_CLIENT_EMAIL.toString(),","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"                null,","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now()),","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"description\"),","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_NAME,","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_CLIENT_EMAIL.toString(),","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-07"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"                null,","lastModifiedDate":"2023-03-07"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-07"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"                LocalDate.now()),","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"            withErr.apply(\"deadline\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"            new JsonAdaptedProject(","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_NAME,","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_STATUS,","lastModifiedDate":"2023-03-07"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_CLIENT_EMAIL.toString(),","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_SOURCE,","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_DESCRIPTION,","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"                ProjectBuilder.DEFAULT_ACCEPTED_ON,","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"                null)","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"        Project defaultProject \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"        for (String desc : cases.keySet()) {","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"            assertTrue(cases.get(desc).toModelType().isSame(defaultProject));","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":128}},{"path":"src/test/java/mycelium/mycelium/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.HOON;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.IDA;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        original.addPerson(HOON);","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        original.removePerson(ALICE);","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        original.addPerson(IDA);","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":9,"-":101}},{"path":"src/test/java/mycelium/mycelium/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.util.JsonUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.testutil.TypicalPersons;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void toModelType_typicalPersonsFile_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(addressBookFromFile, typicalPersonsAddressBook);","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"immanuelhume":6,"-":41}},{"path":"src/test/java/mycelium/mycelium/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"immanuelhume":5,"-":118}},{"path":"src/test/java/mycelium/mycelium/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.GuiSettings;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.UserPrefs;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":6,"-":62}},{"path":"src/test/java/mycelium/mycelium/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":3,"-":31}},{"path":"src/test/java/mycelium/mycelium/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Date;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                                    Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    public static void assertDatesAlmostEqual(Date a, Date b) {","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertTrue(Math.abs(a.getTime() - b.getTime()) \u003c 1000);","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public static void assertDatesAlmostEqual(Date a, Date b, String message) {","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        Assertions.assertTrue(Math.abs(a.getTime() - b.getTime()) \u003c 1000, message);","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"immanuelhume":10,"-":34}},{"path":"src/test/java/mycelium/mycelium/testutil/ClientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"Douglch"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-09"},{"lineNumber":2,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"Douglch"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":5,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":6,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"Douglch"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"Douglch"},"content":" * A utility class to help with building Client objects.","lastModifiedDate":"2023-03-09"},{"lineNumber":13,"author":{"gitId":"Douglch"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"Douglch"},"content":"public class ClientBuilder {","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"Douglch"},"content":"    public static final String DEFAULT_NAME \u003d \"John Doe\";","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"Douglch"},"content":"    public static final String DEFAULT_EMAIL \u003d \"John@gmail.com\";","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"Douglch"},"content":"    public static final String DEFAULT_YEAR_OF_BIRTH \u003d \"2023\";","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"    public static final String DEFAULT_SOURCE \u003d \"whited.com\";","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"Douglch"},"content":"    public static final String DEFAULT_MOBILE_NUMBER \u003d \"999\";","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"Douglch"},"content":"    private Name name;","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"Douglch"},"content":"    private Email email;","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"    private YearOfBirth yearOfBirth;","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"    private String source;","lastModifiedDate":"2023-03-09"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"    private Phone mobileNumber;","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"     * Creates a {@code ClientBuilder} with the default details.","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder() {","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        yearOfBirth \u003d new YearOfBirth(DEFAULT_YEAR_OF_BIRTH);","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        source \u003d DEFAULT_SOURCE;","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"        mobileNumber \u003d new Phone(DEFAULT_MOBILE_NUMBER);","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"Douglch"},"content":"     * Initializes the ClientBuilder with the data of {@code client}.","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder(Client client) {","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"Douglch"},"content":"        name \u003d client.getName();","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"Douglch"},"content":"        email \u003d client.getEmail();","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"Douglch"},"content":"        yearOfBirth \u003d client.getYearOfBirth().orElse(null);","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"Douglch"},"content":"        source \u003d client.getSource().orElse(null);","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"Douglch"},"content":"        mobileNumber \u003d client.getMobileNumber().orElse(null);","lastModifiedDate":"2023-03-09"},{"lineNumber":52,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"Douglch"},"content":"     * Sets the {@code Name} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder withName(String name) {","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"Douglch"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"Douglch"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":62,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"Douglch"},"content":"     * Sets the {@code Email} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder withEmail(String email) {","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"Douglch"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"Douglch"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":68,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":70,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"Douglch"},"content":"     * Sets the {@code YearOfBirth} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder withYearOfBirth(String yearOfBirth) {","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"Douglch"},"content":"        this.yearOfBirth \u003d new YearOfBirth(yearOfBirth);","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"Douglch"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"Douglch"},"content":"     * Sets the client\u0027s source.","lastModifiedDate":"2023-03-09"},{"lineNumber":80,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder withSource(String source) {","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"Douglch"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"Douglch"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":86,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"Douglch"},"content":"     * Sets the {@code Phone} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-09"},{"lineNumber":88,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"Douglch"},"content":"    public ClientBuilder withMobileNumber(String phone) {","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"Douglch"},"content":"        this.mobileNumber \u003d new Phone(phone);","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"Douglch"},"content":"        return this;","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"Douglch"},"content":"    /**","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"Douglch"},"content":"     *  Builds the {@code Client} with the given fields.","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"Douglch"},"content":"     * @return a {@code Client} with the given fields.","lastModifiedDate":"2023-03-09"},{"lineNumber":97,"author":{"gitId":"Douglch"},"content":"     */","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"Douglch"},"content":"    public Client build() {","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"Douglch"},"content":"        return new Client(name, email, Optional.ofNullable(yearOfBirth),","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"Douglch"},"content":"                Optional.ofNullable(source), Optional.ofNullable(mobileNumber));","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"Douglch"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"Douglch"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":103,"author":{"gitId":"Douglch"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"Douglch":103}},{"path":"src/test/java/mycelium/mycelium/testutil/EditPersonDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * A utility class to help with building EditPersonDescriptor objects.","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class EditPersonDescriptorBuilder {","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    private EditCommand.EditPersonDescriptor descriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder() {","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditCommand.EditPersonDescriptor();","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public EditPersonDescriptorBuilder(EditCommand.EditPersonDescriptor descriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        this.descriptor \u003d new EditCommand.EditPersonDescriptor(descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        descriptor \u003d new EditCommand.EditPersonDescriptor();","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        descriptor.setName(person.getName());","lastModifiedDate":"2017-06-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        descriptor.setPhone(person.getPhone());","lastModifiedDate":"2017-06-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        descriptor.setEmail(person.getEmail());","lastModifiedDate":"2017-06-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        descriptor.setAddress(person.getAddress());","lastModifiedDate":"2017-06-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        descriptor.setTags(person.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}","lastModifiedDate":"2017-07-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public EditPersonDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"    public EditCommand.EditPersonDescriptor build() {","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"immanuelhume":14,"-":73}},{"path":"src/test/java/mycelium/mycelium/testutil/Pair.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-07"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":" * A generic pair class.","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":" *","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":" * @param \u003cA\u003e Type of the first item.","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":" * @param \u003cB\u003e Type of the second item.","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"public class Pair\u003cA, B\u003e {","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"    public final A first;","lastModifiedDate":"2023-03-07"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"    public final B second;","lastModifiedDate":"2023-03-07"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new {@code Pair} from two items.","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public Pair(A first, B second) {","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"        this.first \u003d first;","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        this.second \u003d second;","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * Creates a new {@code Pair}. Just a convenience method.","lastModifiedDate":"2023-03-07"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public static \u003cS, T\u003e Pair\u003cS, T\u003e of(S first, T second) {","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        return new Pair\u003c\u003e(first, second);","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        if (this \u003d\u003d o) {","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            return true;","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        if (o \u003d\u003d null || getClass() !\u003d o.getClass()) {","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"        Pair\u003c?, ?\u003e pair \u003d (Pair\u003c?, ?\u003e) o;","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"        return Objects.equals(first, pair.first) \u0026\u0026 Objects.equals(second, pair.second);","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        return Objects.hash(first, second);","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":46}},{"path":"src/test/java/mycelium/mycelium/testutil/PersonBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * A utility class to help with building Person objects.","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class PersonBuilder {","lastModifiedDate":"2016-09-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public PersonBuilder() {","lastModifiedDate":"2017-08-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public PersonBuilder(Person personToCopy) {","lastModifiedDate":"2018-01-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        name \u003d personToCopy.getName();","lastModifiedDate":"2017-12-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        phone \u003d personToCopy.getPhone();","lastModifiedDate":"2017-12-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        email \u003d personToCopy.getEmail();","lastModifiedDate":"2017-12-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        address \u003d personToCopy.getAddress();","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());","lastModifiedDate":"2017-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the {@code Name} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public PersonBuilder withName(String name) {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public PersonBuilder withTags(String... tags) {","lastModifiedDate":"2017-08-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Sets the {@code Address} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public PersonBuilder withAddress(String address) {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Sets the {@code Phone} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public PersonBuilder withPhone(String phone) {","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Sets the {@code Email} of the {@code Person} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public PersonBuilder withEmail(String email) {","lastModifiedDate":"2017-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public Person build() {","lastModifiedDate":"2017-04-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        return new Person(name, phone, email, address, tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"immanuelhume":8,"-":88}},{"path":"src/test/java/mycelium/mycelium/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.util.Set;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.AddCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.logic.parser.CliSyntax;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.tag.Tag;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * A utility class for Person.","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"public class PersonUtil {","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"     * Returns an add command string for adding the {@code person}.","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public static String getAddCommand(Person person) {","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"     * Returns the part of command string for the given {@code person}\u0027s details.","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    public static String getPersonDetails(Person person) {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"        sb.append(CliSyntax.PREFIX_NAME + person.getName().fullName + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"        sb.append(CliSyntax.PREFIX_PHONE + person.getPhone().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"        sb.append(CliSyntax.PREFIX_EMAIL + person.getEmail().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"        sb.append(CliSyntax.PREFIX_ADDRESS + person.getAddress().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"        person.getTags().stream().forEach(","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"            s -\u003e sb.append(CliSyntax.PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"        );","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"    public static String getEditPersonDescriptorDetails(EditCommand.EditPersonDescriptor descriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(CliSyntax.PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(CliSyntax.PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(CliSyntax.PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        descriptor.getAddress()","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"            .ifPresent(address -\u003e sb.append(CliSyntax.PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"                sb.append(CliSyntax.PREFIX_TAG);","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"            } else {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"                tags.forEach(s -\u003e sb.append(CliSyntax.PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"            }","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        return sb.toString();","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":58}},{"path":"src/test/java/mycelium/mycelium/testutil/ProjectBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-07"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-07"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import java.util.function.UnaryOperator;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Email;","lastModifiedDate":"2023-03-07"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.project.ProjectStatus;","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":" * A utility class to easily construct Projects. Offers some sensible defaults for each field of a {@code Project} to","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":" * use in testing. In particular, note that the default {@code acceptedOn} date is 01/01/1970, and the deadline is","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":" * not set.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"public class ProjectBuilder {","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"    public static final String DEFAULT_NAME \u003d \"Default Project\";","lastModifiedDate":"2023-03-07"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"    public static final ProjectStatus DEFAULT_STATUS \u003d ProjectStatus.NOT_STARTED;","lastModifiedDate":"2023-03-07"},{"lineNumber":19,"author":{"gitId":"immanuelhume"},"content":"    public static final Email DEFAULT_CLIENT_EMAIL \u003d new Email(\"ruido@gossum.co\");","lastModifiedDate":"2023-03-07"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"    public static final String DEFAULT_SOURCE \u003d \"fiverr\";","lastModifiedDate":"2023-03-07"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"    public static final String DEFAULT_DESCRIPTION \u003d \"Do this, and then that, and finally those.\";","lastModifiedDate":"2023-03-07"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"    public static final LocalDate DEFAULT_ACCEPTED_ON \u003d LocalDate.of(1970, 1, 1);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":"    /* Initialize our builder with the defaults. */","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"    private String name \u003d DEFAULT_NAME;","lastModifiedDate":"2023-03-07"},{"lineNumber":26,"author":{"gitId":"immanuelhume"},"content":"    private ProjectStatus status \u003d DEFAULT_STATUS;","lastModifiedDate":"2023-03-07"},{"lineNumber":27,"author":{"gitId":"immanuelhume"},"content":"    private Email clientEmail \u003d DEFAULT_CLIENT_EMAIL;","lastModifiedDate":"2023-03-07"},{"lineNumber":28,"author":{"gitId":"immanuelhume"},"content":"    private String source \u003d DEFAULT_SOURCE;","lastModifiedDate":"2023-03-07"},{"lineNumber":29,"author":{"gitId":"immanuelhume"},"content":"    private String description \u003d DEFAULT_DESCRIPTION;","lastModifiedDate":"2023-03-07"},{"lineNumber":30,"author":{"gitId":"immanuelhume"},"content":"    private LocalDate acceptedOn \u003d DEFAULT_ACCEPTED_ON;","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"immanuelhume"},"content":"    private LocalDate deadline \u003d null;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":33,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":34,"author":{"gitId":"immanuelhume"},"content":"     * Initializes a new {@code PersonBuilder} with default fields.","lastModifiedDate":"2023-03-07"},{"lineNumber":35,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":36,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder() {","lastModifiedDate":"2023-03-07"},{"lineNumber":37,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":38,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":39,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":40,"author":{"gitId":"immanuelhume"},"content":"     * Constructs a new {@code PersonBuilder} using existing fields on some {@code Project}.","lastModifiedDate":"2023-03-07"},{"lineNumber":41,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder(Project project) {","lastModifiedDate":"2023-03-07"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        this.name \u003d project.getName();","lastModifiedDate":"2023-03-07"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        this.status \u003d project.getStatus();","lastModifiedDate":"2023-03-07"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d project.getClientEmail();","lastModifiedDate":"2023-03-07"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"        this.source \u003d project.getSource().orElse(null);","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        this.description \u003d project.getDescription().orElse(null);","lastModifiedDate":"2023-03-08"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d project.getAcceptedOn();","lastModifiedDate":"2023-03-07"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d project.getDeadline().orElse(null);","lastModifiedDate":"2023-03-07"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s name.","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withName(String name) {","lastModifiedDate":"2023-03-07"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-07"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s status.","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withStatus(ProjectStatus status) {","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-07"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s client email.","lastModifiedDate":"2023-03-07"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withClientEmail(Email email) {","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d email;","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s client email.","lastModifiedDate":"2023-03-07"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withClientEmail(String email) {","lastModifiedDate":"2023-03-07"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"        this.clientEmail \u003d new Email(email);","lastModifiedDate":"2023-03-07"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s source.","lastModifiedDate":"2023-03-07"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withSource(String source) {","lastModifiedDate":"2023-03-07"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        this.source \u003d source;","lastModifiedDate":"2023-03-07"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s description.","lastModifiedDate":"2023-03-07"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":95,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withDescription(String desc) {","lastModifiedDate":"2023-03-07"},{"lineNumber":96,"author":{"gitId":"immanuelhume"},"content":"        this.description \u003d desc;","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":100,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s accepted on date.","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withAcceptedOn(LocalDate acceptedOn) {","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d acceptedOn;","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":107,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":108,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"immanuelhume"},"content":"     * Updates the project\u0027s accepted on date using the given function.","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withAcceptedOn(UnaryOperator\u003cLocalDate\u003e fn) {","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"immanuelhume"},"content":"        this.acceptedOn \u003d fn.apply(this.acceptedOn);","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":117,"author":{"gitId":"immanuelhume"},"content":"     * Sets the project\u0027s deadline.","lastModifiedDate":"2023-03-07"},{"lineNumber":118,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":119,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withDeadline(LocalDate deadline) {","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-03-07"},{"lineNumber":121,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":123,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":124,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"immanuelhume"},"content":"     * Updates the project\u0027s deadline using the given function.","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"immanuelhume"},"content":"    public ProjectBuilder withDeadline(UnaryOperator\u003cLocalDate\u003e fn) {","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"immanuelhume"},"content":"        this.deadline \u003d fn.apply(this.deadline);","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"immanuelhume"},"content":"        return this;","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":133,"author":{"gitId":"immanuelhume"},"content":"     * Builds a project with the given fields.","lastModifiedDate":"2023-03-07"},{"lineNumber":134,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"immanuelhume"},"content":"    public Project build() {","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"immanuelhume"},"content":"        return new Project(name,","lastModifiedDate":"2023-03-08"},{"lineNumber":137,"author":{"gitId":"immanuelhume"},"content":"            status,","lastModifiedDate":"2023-03-08"},{"lineNumber":138,"author":{"gitId":"immanuelhume"},"content":"            clientEmail,","lastModifiedDate":"2023-03-08"},{"lineNumber":139,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(source),","lastModifiedDate":"2023-03-08"},{"lineNumber":140,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(description),","lastModifiedDate":"2023-03-08"},{"lineNumber":141,"author":{"gitId":"immanuelhume"},"content":"            acceptedOn,","lastModifiedDate":"2023-03-08"},{"lineNumber":142,"author":{"gitId":"immanuelhume"},"content":"            Optional.ofNullable(deadline));","lastModifiedDate":"2023-03-08"},{"lineNumber":143,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":144,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-07"}],"authorContributionMap":{"immanuelhume":144}},{"path":"src/test/java/mycelium/mycelium/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":1,"-":71}},{"path":"src/test/java/mycelium/mycelium/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.Model;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the middle index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns the last index of the person in the {@code model}\u0027s person list.","lastModifiedDate":"2017-07-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(model.getFilteredPersonList().size());","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Returns the person in the {@code model}\u0027s person list at {@code index}.","lastModifiedDate":"2017-07-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static Person getPerson(Model model, Index index) {","lastModifiedDate":"2018-01-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        return model.getFilteredPersonList().get(index.getZeroBased());","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"immanuelhume":4,"-":51}},{"path":"src/test/java/mycelium/mycelium/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.commons.core.index.Index;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"immanuelhume":2,"-":10}},{"path":"src/test/java/mycelium/mycelium/testutil/TypicalPersons.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.testutil;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"immanuelhume"},"content":"import java.util.List;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.AddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"Douglch"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.model.person.Person;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"immanuelhume"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"immanuelhume"},"content":" * A utility class containing a list of {@code Person} objects to be used in tests.","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"immanuelhume"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"immanuelhume"},"content":"public class TypicalPersons {","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"Douglch"},"content":"    // Temporary placement of clients","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"Douglch"},"content":"    public static final Client FUTA \u003d new ClientBuilder().withName(\"Rantaro Futanari\")","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"Douglch"},"content":"            .withEmail(\"Futanari@example.com\")","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"Douglch"},"content":"            .withYearOfBirth(\"1958\")","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"Douglch"},"content":"            .withSource(\"www.nippon.com\")","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"Douglch"},"content":"            .withMobileNumber(\"99910102\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"Douglch"},"content":"    public static final Client RANTARO \u003d new ClientBuilder().withName(\"Rantaro Futanari\")","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"Douglch"},"content":"            .withEmail(\"Rantaro@example.com\")","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"Douglch"},"content":"            .withYearOfBirth(\"1958\")","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"Douglch"},"content":"            .withSource(\"www.futanariinflation.com\")","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"Douglch"},"content":"            .withMobileNumber(\"99923442\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"Douglch"},"content":"    public static final Client WEST \u003d new ClientBuilder().withName(\"Kanye West\")","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"Douglch"},"content":"        .withEmail(\"alice@example.com\")","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"Douglch"},"content":"        .withYearOfBirth(\"2000\")","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"Douglch"},"content":"        .withSource(\"www.kanyewest.com\")","lastModifiedDate":"2023-03-09"},{"lineNumber":41,"author":{"gitId":"Douglch"},"content":"        .withMobileNumber(\"99923444\").build();","lastModifiedDate":"2023-03-09"},{"lineNumber":42,"author":{"gitId":"immanuelhume"},"content":"    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"immanuelhume"},"content":"        .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"immanuelhume"},"content":"        .withPhone(\"94351253\")","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"immanuelhume"},"content":"        .withTags(\"friends\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"immanuelhume"},"content":"    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"immanuelhume"},"content":"        .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"immanuelhume"},"content":"        .withTags(\"owesMoney\", \"friends\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"immanuelhume"},"content":"    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"immanuelhume"},"content":"    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"immanuelhume"},"content":"    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"immanuelhume"},"content":"    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"immanuelhume"},"content":"    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"immanuelhume"},"content":"    // Manually added","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"immanuelhume"},"content":"    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"immanuelhume"},"content":"    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"immanuelhume"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"immanuelhume"},"content":"    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"immanuelhume"},"content":"    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"immanuelhume"},"content":"        .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"immanuelhume"},"content":"        .build();","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"immanuelhume"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"immanuelhume"},"content":"    private TypicalPersons() {","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"immanuelhume"},"content":"    } // prevents instantiation","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"immanuelhume"},"content":"    /**","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"immanuelhume"},"content":"     * Returns an {@code AddressBook} with all the typical persons.","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"immanuelhume"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"immanuelhume"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"immanuelhume"},"content":"        // TODO add Project and Client data here also","lastModifiedDate":"2023-03-07"},{"lineNumber":84,"author":{"gitId":"immanuelhume"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"immanuelhume"},"content":"        for (Person person : getTypicalPersons()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"immanuelhume"},"content":"            ab.addPerson(person);","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"immanuelhume"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"immanuelhume"},"content":"        return ab;","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"immanuelhume"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"immanuelhume"},"content":"    public static List\u003cPerson\u003e getTypicalPersons() {","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"immanuelhume"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"immanuelhume"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"immanuelhume":77,"Douglch":17}},{"path":"src/test/java/mycelium/mycelium/ui/GuiUnitTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.extension.RegisterExtension;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.GuiRobot;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.guiexceptions.NodeNotFoundException;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.ui.testutil.UiPartExtension;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":" * A GUI unit test class for AddressBook.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"public abstract class GuiUnitTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    // TODO: Remove this workaround after using JavaFX version 13 or above","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    // This is a workaround to solve headless test failure on Windows OS","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    // Refer to https://github.com/javafxports/openjdk-jfx/issues/66 for more details.","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"    static {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"        if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"            System.loadLibrary(\"WindowsCodecs\");","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"    @RegisterExtension","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    public final UiPartExtension uiPartExtension \u003d new UiPartExtension();","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}.","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"     * @param query name of the CSS selector of the node to retrieve.","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"     * @throws NodeNotFoundException if no such node exists.","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"        return node.orElseThrow(NodeNotFoundException::new);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":41}},{"path":"src/test/java/mycelium/mycelium/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"immanuelhume"},"content":"    public TestFxmlObject() {","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"immanuelhume":3,"-":33}},{"path":"src/test/java/mycelium/mycelium/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"immanuelhume"},"content":"package mycelium.mycelium.ui;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"import static mycelium.mycelium.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"immanuelhume"},"content":"import mycelium.mycelium.MainApp;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"StanleyNeoh"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"StanleyNeoh":1,"immanuelhume":3,"-":111,"RubyNguyen07":1}},{"path":"src/test/java/mycelium/mycelium/ui/client/ClientListCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui.client;","lastModifiedDate":"2023-03-14"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import static mycelium.mycelium.ui.testutil.GuiTestAssert.assertCardDisplaysClient;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.ClientListCardHandle;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.testutil.ClientBuilder;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.ui.GuiUnitTest;","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"public class ClientListCardTest extends GuiUnitTest {","lastModifiedDate":"2023-03-14"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    public void display() {","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"        ClientListCard clientListCard \u003d new ClientListCard(client, 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"        uiPartExtension.setUiPart(clientListCard);","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"        assertCardDisplay(clientListCard, client, 1);","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"    public void equals() {","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"        ClientListCard clientCard \u003d new ClientListCard(client, 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"        // same person, same index -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"        ClientListCard copy \u003d new ClientListCard(client, 0);","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"        assertTrue(clientCard.equals(copy));","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"        assertTrue(clientCard.equals(clientCard));","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(clientCard.equals(null));","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(clientCard.equals(0));","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"        // different person, same index -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"        Client differentPerson \u003d new ClientBuilder().withName(\"differentName\").build();","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(clientCard.equals(new ClientListCard(differentPerson, 0)));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"        // same person, different index -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(clientCard.equals(new ClientListCard(client, 1)));","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"     * {@code expectedId}.","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"    private void assertCardDisplay(ClientListCard clientListCard, Client expectedClient, int expectedId) {","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"        guiRobot.pauseForHuman();","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"        ClientListCardHandle clientListCardHandle \u003d new ClientListCardHandle(clientListCard.getRoot());","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"        // verify id is displayed correctly","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", clientListCardHandle.getId());","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"        // verify person details are displayed correctly","lastModifiedDate":"2023-03-14"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"        assertCardDisplaysClient(expectedClient, clientListCardHandle);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-14"}],"authorContributionMap":{"RubyNguyen07":66}},{"path":"src/test/java/mycelium/mycelium/ui/project/ProjectListCardTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui.project;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import static mycelium.mycelium.ui.testutil.GuiTestAssert.assertCardDisplaysProject;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.ProjectListCardHandle;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.testutil.ProjectBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.ui.GuiUnitTest;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"public class ProjectListCardTest extends GuiUnitTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    public void display() {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"        ProjectListCard projectListCard \u003d new ProjectListCard(project, 1);","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"        uiPartExtension.setUiPart(projectListCard);","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"        assertCardDisplay(projectListCard, project, 1);","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"        Project project \u003d new ProjectBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"        ProjectListCard projectCard \u003d new ProjectListCard(project, 0);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"        // same person, same index -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"        ProjectListCard copy \u003d new ProjectListCard(project, 0);","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"        assertTrue(projectCard.equals(copy));","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"        assertTrue(projectCard.equals(projectCard));","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"RubyNguyen07"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(projectCard.equals(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"RubyNguyen07"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(projectCard.equals(0));","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"RubyNguyen07"},"content":"        // different person, same index -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"        Project differentPerson \u003d new ProjectBuilder().withName(\"differentName\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(projectCard.equals(new ProjectListCard(differentPerson, 0)));","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"        // same person, different index -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"        assertFalse(projectCard.equals(new ProjectListCard(project, 1)));","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"     * {@code expectedId}.","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"    private void assertCardDisplay(ProjectListCard projectListCard, Project expectedProject, int expectedId) {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"        guiRobot.pauseForHuman();","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"        ProjectListCardHandle projectListCardHandle \u003d new ProjectListCardHandle(projectListCard.getRoot());","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"RubyNguyen07"},"content":"        // verify id is displayed correctly","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", projectListCardHandle.getId());","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"RubyNguyen07"},"content":"        // verify person details are displayed correctly","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"RubyNguyen07"},"content":"        assertCardDisplaysProject(expectedProject, projectListCardHandle);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":67}},{"path":"src/test/java/mycelium/mycelium/ui/testutil/GuiTestAssert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui.testutil;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.ClientListCardHandle;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import guitests.guihandles.ProjectListCardHandle;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.client.Client;","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.client.YearOfBirth;","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.person.Phone;","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.model.project.Project;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":" * A set of assertion methods useful for writing GUI tests.","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"public class GuiTestAssert {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    public static void assertCardEquals(ProjectListCardHandle expectedCard, ProjectListCardHandle actualCard) {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getStatus(), actualCard.getStatus());","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getClientEmail(), actualCard.getClientEmail());","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getSource(), actualCard.getSource());","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getAcceptedOn(), actualCard.getAcceptedOn());","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getDeadline(), actualCard.getDeadline());","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedCard.getDescription(), actualCard.getDescription());","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}.","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"RubyNguyen07"},"content":"    public static void assertCardDisplaysProject(Project expectedProject, ProjectListCardHandle actualCard) {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getName(), actualCard.getName());","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getStatus().toString(), actualCard.getStatus());","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getClientEmail().value, actualCard.getClientEmail());","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getSource().orElse(\"Unknown\"), actualCard.getSource());","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"StanleyNeoh"},"content":"        assertEquals(expectedProject.getAcceptedOn().format(Project.DATE_FMT), actualCard.getAcceptedOn());","lastModifiedDate":"2023-03-14"},{"lineNumber":39,"author":{"gitId":"StanleyNeoh"},"content":"        assertEquals(","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"StanleyNeoh"},"content":"            expectedProject","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"StanleyNeoh"},"content":"                .getDeadline()","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"StanleyNeoh"},"content":"                .map(d -\u003e d.format(Project.DATE_FMT))","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"StanleyNeoh"},"content":"                .orElse(\"No Deadline\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"StanleyNeoh"},"content":"            actualCard.getDeadline());","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getDescription().orElse(\"No description given\"), actualCard.getDescription());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"RubyNguyen07"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"RubyNguyen07"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}.","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"RubyNguyen07"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"RubyNguyen07"},"content":"    public static void assertCardDisplaysClient(Client expectedProject, ClientListCardHandle actualCard) {","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getName().toString(), actualCard.getName());","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getEmail().value, actualCard.getEmail());","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getSource().orElse(\"No source\"), actualCard.getSource());","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getYearOfBirth().map(YearOfBirth::toString).orElse(\"No year of birth\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"RubyNguyen07"},"content":"                actualCard.getYearOfBirth());","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"RubyNguyen07"},"content":"        assertEquals(expectedProject.getMobileNumber().map(Phone::toString).orElse(\"No mobile number\"),","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"RubyNguyen07"},"content":"                actualCard.getMobileNumber());","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"StanleyNeoh":7,"RubyNguyen07":53}},{"path":"src/test/java/mycelium/mycelium/ui/testutil/StageExtension.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui.testutil;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.extension.AfterEachCallback;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.extension.BeforeEachCallback;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"import org.junit.jupiter.api.extension.ExtensionContext;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import org.testfx.api.FxToolkit;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":" * Properly sets up and tears down a JavaFx stage for our testing purposes.","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"public class StageExtension implements BeforeEachCallback, AfterEachCallback {","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"    public void beforeEach(ExtensionContext context) throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":"        FxToolkit.registerPrimaryStage();","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"    public void afterEach(ExtensionContext context) throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"        FxToolkit.cleanupStages();","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":21}},{"path":"src/test/java/mycelium/mycelium/ui/testutil/UiPartExtension.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"RubyNguyen07"},"content":"package mycelium.mycelium.ui.testutil;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"RubyNguyen07"},"content":"import java.util.concurrent.TimeoutException;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"RubyNguyen07"},"content":"import org.testfx.api.FxToolkit;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Parent;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"RubyNguyen07"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"RubyNguyen07"},"content":"import mycelium.mycelium.ui.common.UiPart;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"RubyNguyen07"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"RubyNguyen07"},"content":" * Provides an isolated stage to test an individual {@code UiPart}.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"RubyNguyen07"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"RubyNguyen07"},"content":"public class UiPartExtension extends StageExtension {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"RubyNguyen07"},"content":"    private static final String[] CSS_FILES \u003d {\"view/DarkTheme.css\", \"view/Extensions.css\"};","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"RubyNguyen07"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"RubyNguyen07"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"RubyNguyen07"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"RubyNguyen07"},"content":"            FxToolkit.setupScene(() -\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"RubyNguyen07"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"RubyNguyen07"},"content":"                scene.getStylesheets().setAll(CSS_FILES);","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"RubyNguyen07"},"content":"                return scene;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"RubyNguyen07"},"content":"            });","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"RubyNguyen07"},"content":"            FxToolkit.showStage();","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"RubyNguyen07"},"content":"        } catch (TimeoutException te) {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"RubyNguyen07"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"RubyNguyen07"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"RubyNguyen07"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"RubyNguyen07"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"RubyNguyen07":31}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"\u003c?import mycelium.mycelium.ui.TestFxmlObject?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"-":3,"immanuelhume":1}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"immanuelhume"},"content":"\u003c?import mycelium.mycelium.ui.TestFxmlObject?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"immanuelhume"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml\" type\u003d\"mycelium.mycelium.ui.TestFxmlObject\"","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"immanuelhume"},"content":"         xmlns\u003d\"http://javafx.com/javafx\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"-":4,"immanuelhume":3}}]
