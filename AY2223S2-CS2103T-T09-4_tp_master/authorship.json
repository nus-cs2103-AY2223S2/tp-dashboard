[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/AY2223S2-CS2103T-T09-4/tp/branch/master/graph/badge.svg?token\u003d86RA4OKJCG)](https://codecov.io/gh/AY2223S2-CS2103T-T09-4/tp)","lastModifiedDate":"2023-02-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"* The project simulates an ongoing software project for a desktop application (called _Advisio_) used by financial advisors to manage their clients\u0027 financial portfolio.","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"  * This application follows the **OOP Paradigm**.","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  * It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"  * It provides the necessary resources for financial advisors to keep track of their clients.","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"  * This application is optimal for users who are able to type fast. ","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"* It is named `Advisio` (`AVO` for short).","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"* For the detailed documentation of this project, see the **[Advisio Product Website](https://ay2223s2-cs2103t-t09-4.github.io/tp/)**.","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"pangrwa":7,"-":5}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"### Titus Lowe","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"\u003cimg src\u003d\"images/tituswe.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[[homepage](http://www.comp.nus.edu.sg/~damithch)]","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"[[github](https://github.com/tituswe)]","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"[[portfolio](team/tituswe.md)]","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Role: Project Advisor","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"### Ang Yuze","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"\u003cimg src\u003d\"images/yzmunchmunch.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"[[github](http://github.com/yzmunchmunch)]","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"[[portfolio](team/yzmunchmunch.md)]","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* Role: Team Lead","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"### Pang Rui Wei","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"\u003cimg src\u003d\"images/pangrwa.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"[[github](https://github.com/pangrwa)]","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"[[portfolio](team/pangrwa.md)]","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"* Role: -To be Added soon-","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"* Responsibilities: -To be Added soon-","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"adam07018"},"content":"### Lu Chenyu","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"adam07018"},"content":"\u003cimg src\u003d\"images/adam07018.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"adam07018"},"content":"[[github](http://github.com/adam07018)]","lastModifiedDate":"2023-02-22"},{"lineNumber":47,"author":{"gitId":"adam07018"},"content":"[[portfolio](team/adam07018.md)]","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"adam07018"},"content":"* Responsibilities: Policy Management Features","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"### Anunaya Joshi","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"\u003cimg src\u003d\"images/anunayajoshi.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"[[github](http://github.com/anunayajoshi)]","lastModifiedDate":"2023-02-22"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"[[portfolio](team/anunayajoshi.md)]","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* Role: Developer","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"* Responsibilities: UI","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tituswe":7,"YZmunchmunch":4,"pangrwa":3,"anunayajoshi":4,"-":37,"adam07018":5}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"* {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"  original source as well}","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2021-07-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"diagrams.","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"The ***Architecture Diagram*** given above explains the high-level design of the App.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"**`Main`** has two classes","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"is responsible for,","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"* [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"* [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"tituswe"},"content":"The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"tituswe"},"content":"the command `delete 1`.","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"* defines its *API* in an `interface` with the same name as the Component.","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"tituswe"},"content":"* implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"tituswe"},"content":"  API `interface` mentioned in the previous point.","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"tituswe"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"tituswe"},"content":"the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"tituswe"},"content":"through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"tituswe"},"content":"implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"tituswe"},"content":"The **API** of this component is specified","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"tituswe"},"content":"in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"tituswe"},"content":"The UI consists of a `MainWindow` that is made up of parts","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"tituswe"},"content":"e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`,","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"tituswe"},"content":"inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"tituswe"},"content":"visible GUI.","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"tituswe"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"tituswe"},"content":"are in the `src/main/resources/view` folder. For example, the layout of","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"tituswe"},"content":"the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"tituswe"},"content":"is specified","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"tituswe"},"content":"in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"* executes user commands using the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2021-07-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"tituswe"},"content":"**API","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"tituswe"},"content":"** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":118,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"tituswe"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is","lastModifiedDate":"2023-03-10"},{"lineNumber":121,"author":{"gitId":"tituswe"},"content":"   executed by the `LogicManager`.","lastModifiedDate":"2023-03-10"},{"lineNumber":122,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"tituswe"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"tituswe"},"content":"call.","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":138,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"tituswe"},"content":"* When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"tituswe"},"content":"  placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"tituswe"},"content":"  the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"tituswe"},"content":"  a `Command` object.","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"tituswe"},"content":"* All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser`","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"tituswe"},"content":"  interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":147,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"tituswe"},"content":"**API","lastModifiedDate":"2023-03-10"},{"lineNumber":149,"author":{"gitId":"tituswe"},"content":"** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"* stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"tituswe"},"content":"* stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"tituswe"},"content":"  is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"tituswe"},"content":"  this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"tituswe"},"content":"* stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"tituswe"},"content":"  a `ReadOnlyUserPref` objects.","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"tituswe"},"content":"* does not depend on any of the other three components (as the `Model` represents data entities of the domain, they","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"tituswe"},"content":"  should make sense on their own without depending on other components)","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":165,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":167,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"tituswe"},"content":"**API","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"tituswe"},"content":"** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2023-03-10"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"tituswe"},"content":"* can save both address book data and user preference data in json format, and read them back into corresponding","lastModifiedDate":"2023-03-10"},{"lineNumber":181,"author":{"gitId":"tituswe"},"content":"  objects.","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"tituswe"},"content":"* inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"tituswe"},"content":"  the functionality of only one is needed).","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"tituswe"},"content":"* depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"tituswe"},"content":"  that belong to the `Model`)","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"tituswe"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo","lastModifiedDate":"2023-03-10"},{"lineNumber":202,"author":{"gitId":"tituswe"},"content":"history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the","lastModifiedDate":"2023-03-10"},{"lineNumber":203,"author":{"gitId":"tituswe"},"content":"following operations:","lastModifiedDate":"2023-03-10"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"tituswe"},"content":"* `VersionedAddressBook#commit()`— Saves the current address book state in its history.","lastModifiedDate":"2023-03-10"},{"lineNumber":206,"author":{"gitId":"tituswe"},"content":"* `VersionedAddressBook#undo()`— Restores the previous address book state from its history.","lastModifiedDate":"2023-03-10"},{"lineNumber":207,"author":{"gitId":"tituswe"},"content":"* `VersionedAddressBook#redo()`— Restores a previously undone address book state from its history.","lastModifiedDate":"2023-03-10"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"tituswe"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()`","lastModifiedDate":"2023-03-10"},{"lineNumber":210,"author":{"gitId":"tituswe"},"content":"and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2023-03-10"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"tituswe"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the","lastModifiedDate":"2023-03-10"},{"lineNumber":215,"author":{"gitId":"tituswe"},"content":"initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2023-03-10"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"tituswe"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command","lastModifiedDate":"2023-03-10"},{"lineNumber":220,"author":{"gitId":"tituswe"},"content":"calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes","lastModifiedDate":"2023-03-10"},{"lineNumber":221,"author":{"gitId":"tituswe"},"content":"to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book","lastModifiedDate":"2023-03-10"},{"lineNumber":222,"author":{"gitId":"tituswe"},"content":"state.","lastModifiedDate":"2023-03-10"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"tituswe"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also","lastModifiedDate":"2023-03-10"},{"lineNumber":227,"author":{"gitId":"tituswe"},"content":"calls `Model#commitAddressBook()`, causing another modified address book state to be saved into","lastModifiedDate":"2023-03-10"},{"lineNumber":228,"author":{"gitId":"tituswe"},"content":"the `addressBookStateList`.","lastModifiedDate":"2023-03-10"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"tituswe"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing","lastModifiedDate":"2023-03-10"},{"lineNumber":237,"author":{"gitId":"tituswe"},"content":"the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer`","lastModifiedDate":"2023-03-10"},{"lineNumber":238,"author":{"gitId":"tituswe"},"content":"once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2023-03-10"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"tituswe"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once","lastModifiedDate":"2023-03-10"},{"lineNumber":256,"author":{"gitId":"tituswe"},"content":"to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2023-03-10"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"tituswe"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such","lastModifiedDate":"2023-03-10"},{"lineNumber":263,"author":{"gitId":"tituswe"},"content":"as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`.","lastModifiedDate":"2023-03-10"},{"lineNumber":264,"author":{"gitId":"tituswe"},"content":"Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2023-03-10"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"tituswe"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not","lastModifiedDate":"2023-03-10"},{"lineNumber":269,"author":{"gitId":"tituswe"},"content":"pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be","lastModifiedDate":"2023-03-10"},{"lineNumber":270,"author":{"gitId":"tituswe"},"content":"purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern","lastModifiedDate":"2023-03-10"},{"lineNumber":271,"author":{"gitId":"tituswe"},"content":"desktop applications follow.","lastModifiedDate":"2023-03-10"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    * Pros: Easy to implement.","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    * Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"anunayajoshi"},"content":"    * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2023-03-06"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    * Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"* [Documentation guide](Documentation.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":304,"author":{"gitId":"-"},"content":"* [Testing guide](Testing.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":305,"author":{"gitId":"-"},"content":"* [Logging guide](Logging.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":306,"author":{"gitId":"-"},"content":"* [Configuration guide](Configuration.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":307,"author":{"gitId":"-"},"content":"* [DevOps guide](DevOps.md)","lastModifiedDate":"2020-06-07"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"YZmunchmunch"},"content":"* For student financial advisors managing a growing client base","lastModifiedDate":"2023-02-22"},{"lineNumber":318,"author":{"gitId":"YZmunchmunch"},"content":"* Needs to keep track of individual client information","lastModifiedDate":"2023-02-22"},{"lineNumber":319,"author":{"gitId":"YZmunchmunch"},"content":"* Prefer desktop apps over other types","lastModifiedDate":"2023-02-22"},{"lineNumber":320,"author":{"gitId":"YZmunchmunch"},"content":"* Can type fast","lastModifiedDate":"2023-02-22"},{"lineNumber":321,"author":{"gitId":"YZmunchmunch"},"content":"* Prefers typing to mouse interactions","lastModifiedDate":"2023-02-22"},{"lineNumber":322,"author":{"gitId":"YZmunchmunch"},"content":"* Is reasonably comfortable using CLI apps","lastModifiedDate":"2023-02-22"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":324,"author":{"gitId":"YZmunchmunch"},"content":"**Value proposition**:","lastModifiedDate":"2023-02-22"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":326,"author":{"gitId":"anunayajoshi"},"content":"* Provide a way to view all clients\u0027 records easily and compare and analyze their financial information.","lastModifiedDate":"2023-03-06"},{"lineNumber":327,"author":{"gitId":"YZmunchmunch"},"content":"* Keep track of client information such as financial goals, current financial status, and investment plans purchased.","lastModifiedDate":"2023-02-22"},{"lineNumber":328,"author":{"gitId":"YZmunchmunch"},"content":"* Make it easier to remind financial advisors on follow-up tasks and future advising sessions.","lastModifiedDate":"2023-02-22"},{"lineNumber":329,"author":{"gitId":"tituswe"},"content":"* Personalized recommendations: propose personalized financial advice and recommendations tailored to the student’s","lastModifiedDate":"2023-03-10"},{"lineNumber":330,"author":{"gitId":"tituswe"},"content":"  unique needs and circumstances","lastModifiedDate":"2023-03-10"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"anunayajoshi"},"content":"#### [Epic] As a financial advisor, I can easily find my client","lastModifiedDate":"2023-03-06"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":338,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                            | So that I can…​                  |","lastModifiedDate":"2023-03-06"},{"lineNumber":339,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|-----------------------------------------------------|----------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":340,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | easily search for clients by name or other criteria | quickly access their information |","lastModifiedDate":"2023-03-06"},{"lineNumber":341,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":342,"author":{"gitId":"anunayajoshi"},"content":"#### [Epic] As a financial advisor, I can manage my client’s financial goals","lastModifiedDate":"2023-03-06"},{"lineNumber":343,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":344,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                                | So that I can…​                                     |","lastModifiedDate":"2023-03-06"},{"lineNumber":345,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|---------------------------------------------------------|-----------------------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":346,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | create and store client profiles                        | easily access their information                     |","lastModifiedDate":"2023-03-06"},{"lineNumber":347,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | view all my clients\u0027 financial information in one place | make comparisons and analyze their financial status |","lastModifiedDate":"2023-03-06"},{"lineNumber":348,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | add and update client financial goals                   | have a clear understanding of their objectives      |","lastModifiedDate":"2023-03-06"},{"lineNumber":349,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | remove client’s information from my client list         | have a well-updated contact list                    |","lastModifiedDate":"2023-03-06"},{"lineNumber":350,"author":{"gitId":"anunayajoshi"},"content":"| `**`     | As a financial advisor | track my client interactions and notes                  | have a clear history of my advising sessions        |","lastModifiedDate":"2023-03-06"},{"lineNumber":351,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":352,"author":{"gitId":"anunayajoshi"},"content":"##### [Epic] As a financial advisor, I can manage my client investment and insurance plans","lastModifiedDate":"2023-03-06"},{"lineNumber":353,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":354,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                                 | So that I can…​                                                                             |","lastModifiedDate":"2023-03-06"},{"lineNumber":355,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|----------------------------------------------------------|---------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":356,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | keep track of my clients\u0027 investment and insurance plans | provide relevant advice                                                                     |","lastModifiedDate":"2023-03-06"},{"lineNumber":357,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | input my clients\u0027 insurance and investment plans         | ensure they have adequate coverage and help them find more cost-effective options if needed |","lastModifiedDate":"2023-03-06"},{"lineNumber":358,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | remove my client’s insurance and investment plans        | have a well-updated plan list                                                               |","lastModifiedDate":"2023-03-06"},{"lineNumber":359,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":360,"author":{"gitId":"anunayajoshi"},"content":"#### [Epic] As a financial advisor, I can create reminders for myself and clients","lastModifiedDate":"2023-03-06"},{"lineNumber":361,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":362,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                                        | So that I can…​                       |","lastModifiedDate":"2023-03-06"},{"lineNumber":363,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|-----------------------------------------------------------------|---------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":364,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | set reminders for follow-up tasks and future advising sessions  | don\u0027t miss any important appointments |","lastModifiedDate":"2023-03-06"},{"lineNumber":365,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | send automated reminders to clients about their financial goals | stay on track.                        |","lastModifiedDate":"2023-03-06"},{"lineNumber":366,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":367,"author":{"gitId":"anunayajoshi"},"content":"### **General**","lastModifiedDate":"2023-03-06"},{"lineNumber":368,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":369,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                               | So that I can…​                                                             |","lastModifiedDate":"2023-03-06"},{"lineNumber":370,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|--------------------------------------------------------|-----------------------------------------------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":371,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | generate reports on client financial information       | analyze trends and make informed decisions                                  |","lastModifiedDate":"2023-03-06"},{"lineNumber":372,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | share client information with colleagues               | collaborate and provide the best advice.                                    |","lastModifiedDate":"2023-03-06"},{"lineNumber":373,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | store client financial documents securely              | ensure their sensitive information is protected                             |","lastModifiedDate":"2023-03-06"},{"lineNumber":374,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | access the platform on any device                      | manage my clients\u0027 information even when I am on-the-go                     |","lastModifiedDate":"2023-03-06"},{"lineNumber":375,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | create custom categories for client information        | I can organize and categorize their data in a way that makes sense to me    |","lastModifiedDate":"2023-03-06"},{"lineNumber":376,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | view a summary of my clients\u0027 overall financial health | I can quickly assess their current situation and make recommendations       |","lastModifiedDate":"2023-03-06"},{"lineNumber":377,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | access real-time market data                           | make informed recommendations and stay up-to-date on current market trends. |","lastModifiedDate":"2023-03-06"},{"lineNumber":378,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":379,"author":{"gitId":"anunayajoshi"},"content":"### **Novice**","lastModifiedDate":"2023-03-06"},{"lineNumber":380,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":381,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                                   | So that I can…​                                                             |","lastModifiedDate":"2023-03-06"},{"lineNumber":382,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|------------------------------------------------------------|-----------------------------------------------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":383,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | view clients\u0027 information in a visual and intuitive format | quickly understand their financial situation and recommend a plan of action |","lastModifiedDate":"2023-03-06"},{"lineNumber":384,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | have access to a library of pre-written financial plans    | provide my clients with best-practices advice and recommendations           |","lastModifiedDate":"2023-03-06"},{"lineNumber":385,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | track my clients\u0027 investment performance                   | monitor the success of my advice and identify areas for improvement.        |","lastModifiedDate":"2023-03-06"},{"lineNumber":386,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":387,"author":{"gitId":"anunayajoshi"},"content":"### **Expert**","lastModifiedDate":"2023-03-06"},{"lineNumber":388,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":389,"author":{"gitId":"anunayajoshi"},"content":"| Priority | As a …​                | I can …​                                                                            | So that I can…​                               |","lastModifiedDate":"2023-03-06"},{"lineNumber":390,"author":{"gitId":"tituswe"},"content":"|----------|------------------------|-------------------------------------------------------------------------------------|-----------------------------------------------|","lastModifiedDate":"2023-03-10"},{"lineNumber":391,"author":{"gitId":"anunayajoshi"},"content":"| `***`    | As a financial advisor | customize the financial planning software to fit my specific advising methodologies | provide clients with the best possible advice |","lastModifiedDate":"2023-03-06"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":395,"author":{"gitId":"anunayajoshi"},"content":"(For all use cases below, the **System** is `Advis.io` and the **Actor** is the `user (Financial Advisor)`, unless","lastModifiedDate":"2023-03-06"},{"lineNumber":396,"author":{"gitId":"anunayajoshi"},"content":"specified otherwise)","lastModifiedDate":"2023-03-06"},{"lineNumber":397,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":398,"author":{"gitId":"anunayajoshi"},"content":"**Use case: Manage client’s personal information**","lastModifiedDate":"2023-03-06"},{"lineNumber":399,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":400,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":402,"author":{"gitId":"anunayajoshi"},"content":"1. Actor inputs the client’s personal information","lastModifiedDate":"2023-03-06"},{"lineNumber":403,"author":{"gitId":"anunayajoshi"},"content":"2. System confirms and creates the client profile","lastModifiedDate":"2023-03-06"},{"lineNumber":404,"author":{"gitId":"anunayajoshi"},"content":"3. Use case ends","lastModifiedDate":"2023-03-06"},{"lineNumber":405,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":406,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"anunayajoshi"},"content":"* 1a. The financial advisor input the wrong format for the client’s information and tags","lastModifiedDate":"2023-03-06"},{"lineNumber":409,"author":{"gitId":"anunayajoshi"},"content":"* 1b. The system requests for the actor to input the correct data.","lastModifiedDate":"2023-03-06"},{"lineNumber":410,"author":{"gitId":"anunayajoshi"},"content":"* 1c. Steps 1a-1b are repeated until the data entered are correct.","lastModifiedDate":"2023-03-06"},{"lineNumber":411,"author":{"gitId":"anunayajoshi"},"content":"* 1d. Use case resumes from step 2.","lastModifiedDate":"2023-03-06"},{"lineNumber":412,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":413,"author":{"gitId":"anunayajoshi"},"content":"**Use case: Manage client’s policy**","lastModifiedDate":"2023-03-06"},{"lineNumber":414,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":415,"author":{"gitId":"anunayajoshi"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":416,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":417,"author":{"gitId":"anunayajoshi"},"content":"1. Actor inputs client’s personal information","lastModifiedDate":"2023-03-06"},{"lineNumber":418,"author":{"gitId":"anunayajoshi"},"content":"2. System confirms and creates the client profile","lastModifiedDate":"2023-03-06"},{"lineNumber":419,"author":{"gitId":"anunayajoshi"},"content":"3. Use case ends","lastModifiedDate":"2023-03-06"},{"lineNumber":420,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":421,"author":{"gitId":"anunayajoshi"},"content":"**Use case: Create Reminder**","lastModifiedDate":"2023-03-06"},{"lineNumber":422,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":423,"author":{"gitId":"anunayajoshi"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":424,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":425,"author":{"gitId":"anunayajoshi"},"content":"1. The financial advisor selects the client for whom they want to create a reminder.","lastModifiedDate":"2023-03-06"},{"lineNumber":426,"author":{"gitId":"anunayajoshi"},"content":"2. The system requests for the type of reminder and the date and time it should be set for.","lastModifiedDate":"2023-03-06"},{"lineNumber":427,"author":{"gitId":"anunayajoshi"},"content":"3. The financial advisor enters the details of the reminder.","lastModifiedDate":"2023-03-06"},{"lineNumber":428,"author":{"gitId":"anunayajoshi"},"content":"4. The system saves the reminder and confirms the creation of the reminder.","lastModifiedDate":"2023-03-06"},{"lineNumber":429,"author":{"gitId":"anunayajoshi"},"content":"5. Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":430,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":431,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2023-03-06"},{"lineNumber":432,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":433,"author":{"gitId":"anunayajoshi"},"content":"* 3a. The financial advisor enters an invalid type of reminder or an invalid date and time.","lastModifiedDate":"2023-03-06"},{"lineNumber":434,"author":{"gitId":"anunayajoshi"},"content":"* 3a1. The system requests for the correct data.","lastModifiedDate":"2023-03-06"},{"lineNumber":435,"author":{"gitId":"anunayajoshi"},"content":"* 3a2. The financial advisor enters the correct data.","lastModifiedDate":"2023-03-06"},{"lineNumber":436,"author":{"gitId":"anunayajoshi"},"content":"* 3a3. Steps 3a1-3a2 are repeated until the data entered are correct.","lastModifiedDate":"2023-03-06"},{"lineNumber":437,"author":{"gitId":"anunayajoshi"},"content":"* 3a4. Use case resumes from step 4.","lastModifiedDate":"2023-03-06"},{"lineNumber":438,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":439,"author":{"gitId":"anunayajoshi"},"content":"**Use case: Find Client**","lastModifiedDate":"2023-03-06"},{"lineNumber":440,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":441,"author":{"gitId":"anunayajoshi"},"content":"**MSS**","lastModifiedDate":"2023-03-06"},{"lineNumber":442,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":443,"author":{"gitId":"tituswe"},"content":"1. The financial advisor enters the name, account number, or any other relevant information of the client they want to","lastModifiedDate":"2023-03-10"},{"lineNumber":444,"author":{"gitId":"tituswe"},"content":"   find","lastModifiedDate":"2023-03-10"},{"lineNumber":445,"author":{"gitId":"anunayajoshi"},"content":"2. The system searches for the client based on the entered information.","lastModifiedDate":"2023-03-06"},{"lineNumber":446,"author":{"gitId":"anunayajoshi"},"content":"3. The system displays a list of clients matching the entered information.","lastModifiedDate":"2023-03-06"},{"lineNumber":447,"author":{"gitId":"anunayajoshi"},"content":"4. The financial advisor selects the desired client from the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":448,"author":{"gitId":"anunayajoshi"},"content":"5. The system displays the client\u0027s information and account details.","lastModifiedDate":"2023-03-06"},{"lineNumber":449,"author":{"gitId":"anunayajoshi"},"content":"6. Use case ends.","lastModifiedDate":"2023-03-06"},{"lineNumber":450,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":451,"author":{"gitId":"anunayajoshi"},"content":"**Extensions**","lastModifiedDate":"2023-03-06"},{"lineNumber":452,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":453,"author":{"gitId":"anunayajoshi"},"content":"* 2a. The system does not find any clients matching the entered information.","lastModifiedDate":"2023-03-06"},{"lineNumber":454,"author":{"gitId":"anunayajoshi"},"content":"* 2a1. The system displays a message indicating that no clients were found and prompts the financial advisor to enter","lastModifiedDate":"2023-03-06"},{"lineNumber":455,"author":{"gitId":"anunayajoshi"},"content":"  different information.","lastModifiedDate":"2023-03-06"},{"lineNumber":456,"author":{"gitId":"anunayajoshi"},"content":"* 2a2. Use case resumes from step 1.","lastModifiedDate":"2023-03-06"},{"lineNumber":457,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":458,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":459,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":460,"author":{"gitId":"-"},"content":"1. Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":461,"author":{"gitId":"anunayajoshi"},"content":"2. Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-06"},{"lineNumber":462,"author":{"gitId":"tituswe"},"content":"3. A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be","lastModifiedDate":"2023-03-10"},{"lineNumber":463,"author":{"gitId":"tituswe"},"content":"   able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2023-03-10"},{"lineNumber":464,"author":{"gitId":"tituswe"},"content":"4. As a financial advisor, I can access the platform offline, so that I can manage client information even when I don\u0027t","lastModifiedDate":"2023-03-10"},{"lineNumber":465,"author":{"gitId":"tituswe"},"content":"   have an internet connection.","lastModifiedDate":"2023-03-10"},{"lineNumber":466,"author":{"gitId":"tituswe"},"content":"5. As a user, I want the application to have a user-friendly interface, so that I can navigate the platform with ease","lastModifiedDate":"2023-03-10"},{"lineNumber":467,"author":{"gitId":"tituswe"},"content":"   and efficiency.","lastModifiedDate":"2023-03-10"},{"lineNumber":468,"author":{"gitId":"anunayajoshi"},"content":"6. As a user, I want the application to be easily scalable, so that it can handle a growing client base.","lastModifiedDate":"2023-03-06"},{"lineNumber":469,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":470,"author":{"gitId":"-"},"content":"*{More to be added}*","lastModifiedDate":"2020-05-23"},{"lineNumber":471,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":472,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":473,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":474,"author":{"gitId":"-"},"content":"* **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2020-05-23"},{"lineNumber":475,"author":{"gitId":"-"},"content":"* **Private contact detail**: A contact detail that is not meant to be shared with others","lastModifiedDate":"2020-05-23"},{"lineNumber":476,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":477,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":479,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":480,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":481,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":482,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":483,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":484,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":485,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":486,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":487,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":488,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":489,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":490,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":491,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":492,"author":{"gitId":"-"},"content":"    1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":493,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":494,"author":{"gitId":"tituswe"},"content":"    1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be","lastModifiedDate":"2023-03-10"},{"lineNumber":495,"author":{"gitId":"tituswe"},"content":"       optimum.","lastModifiedDate":"2023-03-10"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":498,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":499,"author":{"gitId":"-"},"content":"    1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":500,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":501,"author":{"gitId":"-"},"content":"    1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":502,"author":{"gitId":"-"},"content":"       Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2023-03-06"},{"lineNumber":507,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":508,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2023-03-06"},{"lineNumber":509,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"anunayajoshi"},"content":"    1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":511,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":512,"author":{"gitId":"-"},"content":"    1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"tituswe"},"content":"       Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message.","lastModifiedDate":"2023-03-10"},{"lineNumber":514,"author":{"gitId":"tituswe"},"content":"       Timestamp in the status bar is updated.","lastModifiedDate":"2023-03-10"},{"lineNumber":515,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"    1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"anunayajoshi"},"content":"       Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2023-03-06"},{"lineNumber":518,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":519,"author":{"gitId":"-"},"content":"    1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":520,"author":{"gitId":"-"},"content":"       Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":521,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":522,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":523,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":524,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":525,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":526,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":527,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":528,"author":{"gitId":"-"},"content":"    1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":529,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":530,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"tituswe":120,"YZmunchmunch":9,"anunayajoshi":92,"-":309}},{"path":"docs/README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"# README","lastModifiedDate":"2023-02-22"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"## Figma Wireframe","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"\u003cimg src\u003d\"images/Ui.png\"\u003e","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"tituswe":5}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"# User Guide","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"Advis.io (AIO) is a desktop app for managing clients information, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AIO can get your contact management tasks done faster than traditional GUI apps.","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"  * Quick start","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"  * Features","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"    * General Management","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"      * Viewing help : `help`","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"      * Exiting the program : `exit`","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"      * Saving the data","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"      * Editing the data file","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"    * Client Management","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"      * Adding a client: `add`","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"      * Listing all clients : `list`","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"      * Editing a client : `edit`","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"      * Locating clients by name: `find`","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"      * Deleting a client : `delete`","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"      * Policy Management","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"      * Adding a policy: `addPolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"      * Deleting a policy : `deletePolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    * FAQ","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    * Command summary","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"1. Download the latest `advisio.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar advisio.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2023-01-01"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":78,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":80,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"anunayajoshi"},"content":"## Client Management","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"### Adding a client: `add`","lastModifiedDate":"2023-02-22"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":90,"author":{"gitId":"anunayajoshi"},"content":"Adds a client to the list of client profiles.","lastModifiedDate":"2023-02-22"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`","lastModifiedDate":"2023-02-22"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"Examples:","lastModifiedDate":"2023-02-22"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":96,"author":{"gitId":"anunayajoshi"},"content":"- `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2023-02-22"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"- `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2023-02-22"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":99,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":100,"author":{"gitId":"anunayajoshi"},"content":"### Listing all clients: `list`","lastModifiedDate":"2023-02-22"},{"lineNumber":101,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":102,"author":{"gitId":"anunayajoshi"},"content":"Shows a list of all client profiles.","lastModifiedDate":"2023-02-22"},{"lineNumber":103,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":104,"author":{"gitId":"anunayajoshi"},"content":"Format: `list`","lastModifiedDate":"2023-02-22"},{"lineNumber":105,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":106,"author":{"gitId":"anunayajoshi"},"content":"### Editing a client : `edit`","lastModifiedDate":"2023-02-22"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"Edits an existing client in the list of client profiles.","lastModifiedDate":"2023-02-22"},{"lineNumber":109,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":110,"author":{"gitId":"anunayajoshi"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`","lastModifiedDate":"2023-02-22"},{"lineNumber":111,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":112,"author":{"gitId":"anunayajoshi"},"content":"* Edits the client at the specified `INDEX`. The index refers to the index number shown in the displayed client","lastModifiedDate":"2023-02-22"},{"lineNumber":113,"author":{"gitId":"anunayajoshi"},"content":"  list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-02-22"},{"lineNumber":114,"author":{"gitId":"anunayajoshi"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2023-02-22"},{"lineNumber":115,"author":{"gitId":"anunayajoshi"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2023-02-22"},{"lineNumber":116,"author":{"gitId":"anunayajoshi"},"content":"* When editing tags, the existing tags of the client will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"anunayajoshi"},"content":"* You can remove all the client’s tags by typing `t/` without","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"anunayajoshi"},"content":"  specifying any tags after it.","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":120,"author":{"gitId":"anunayajoshi"},"content":"Examples:","lastModifiedDate":"2023-02-22"},{"lineNumber":121,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":122,"author":{"gitId":"anunayajoshi"},"content":"- `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st client to be 91234567","lastModifiedDate":"2023-02-22"},{"lineNumber":123,"author":{"gitId":"anunayajoshi"},"content":"and johndoe@example.com respectively.","lastModifiedDate":"2023-02-22"},{"lineNumber":124,"author":{"gitId":"anunayajoshi"},"content":"- `edit 2 n/Betsy Crower t/` Edits the name of the 2nd client to be Betsy Crower and clears all existing tags.","lastModifiedDate":"2023-02-22"},{"lineNumber":125,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":126,"author":{"gitId":"anunayajoshi"},"content":"### Locating clients by name: find","lastModifiedDate":"2023-02-22"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":128,"author":{"gitId":"anunayajoshi"},"content":"Finds clients whose names contain any of the given keywords.","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":130,"author":{"gitId":"anunayajoshi"},"content":"Format: `find KEYWORD \\[MORE_KEYWORDS\\]`","lastModifiedDate":"2023-02-22"},{"lineNumber":131,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":132,"author":{"gitId":"anunayajoshi"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2023-02-22"},{"lineNumber":133,"author":{"gitId":"anunayajoshi"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2023-02-22"},{"lineNumber":134,"author":{"gitId":"anunayajoshi"},"content":"* Only the name is searched.","lastModifiedDate":"2023-02-22"},{"lineNumber":135,"author":{"gitId":"anunayajoshi"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2023-02-22"},{"lineNumber":136,"author":{"gitId":"anunayajoshi"},"content":"* Clients matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2023-02-22"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2023-02-22"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"Examples:","lastModifiedDate":"2023-02-22"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":141,"author":{"gitId":"anunayajoshi"},"content":"-   `find John` returns `john` and `John Doe`","lastModifiedDate":"2023-02-22"},{"lineNumber":142,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":143,"author":{"gitId":"anunayajoshi"},"content":"-   `find alex david` returns `Alex Yeoh, David Li`","lastModifiedDate":"2023-02-22"},{"lineNumber":144,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":145,"author":{"gitId":"anunayajoshi"},"content":"![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2023-02-22"},{"lineNumber":146,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":147,"author":{"gitId":"anunayajoshi"},"content":"### Deleting a client : `delete`","lastModifiedDate":"2023-02-22"},{"lineNumber":148,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":149,"author":{"gitId":"anunayajoshi"},"content":"Deletes the specified client from the list of client profiles.","lastModifiedDate":"2023-02-22"},{"lineNumber":150,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":151,"author":{"gitId":"anunayajoshi"},"content":"Format: `delete INDEX`","lastModifiedDate":"2023-02-22"},{"lineNumber":152,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":153,"author":{"gitId":"anunayajoshi"},"content":"* Deletes the client at the specified `INDEX`.","lastModifiedDate":"2023-02-22"},{"lineNumber":154,"author":{"gitId":"anunayajoshi"},"content":"* The index refers to the index number shown in the displayed client list.","lastModifiedDate":"2023-02-22"},{"lineNumber":155,"author":{"gitId":"anunayajoshi"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-02-22"},{"lineNumber":156,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":157,"author":{"gitId":"anunayajoshi"},"content":"Examples:","lastModifiedDate":"2023-02-22"},{"lineNumber":158,"author":{"gitId":"anunayajoshi"},"content":"* `list` followed by `delete 2` deletes the 2nd client in the list of clients list.","lastModifiedDate":"2023-02-22"},{"lineNumber":159,"author":{"gitId":"anunayajoshi"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st client in the results of the `find` command.","lastModifiedDate":"2023-02-22"},{"lineNumber":160,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":161,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":162,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"anunayajoshi"},"content":"### Adding a client: `add`","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"anunayajoshi"},"content":"Adds a client to the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"anunayajoshi"},"content":"A client can have any number of tags (including 0)","lastModifiedDate":"2023-03-06"},{"lineNumber":179,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"anunayajoshi"},"content":"### Listing all clients : `list`","lastModifiedDate":"2023-03-06"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"anunayajoshi"},"content":"Shows a list of all clients in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"anunayajoshi"},"content":"### Editing a client : `edit`","lastModifiedDate":"2023-03-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"anunayajoshi"},"content":"Edits an existing client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"anunayajoshi"},"content":"* Edits the client at the specified `INDEX`. The index refers to the index number shown in the displayed client list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-03-06"},{"lineNumber":198,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"anunayajoshi"},"content":"* When editing tags, the existing tags of the client will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2023-03-06"},{"lineNumber":201,"author":{"gitId":"anunayajoshi"},"content":"* You can remove all the client’s tags by typing `t/` without","lastModifiedDate":"2023-03-06"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"anunayajoshi"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st client to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2023-03-06"},{"lineNumber":206,"author":{"gitId":"anunayajoshi"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd client to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2023-03-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"anunayajoshi"},"content":"### Locating clients by name: `find`","lastModifiedDate":"2023-03-06"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"anunayajoshi"},"content":"Finds clients whose names contain any of the given keywords.","lastModifiedDate":"2023-03-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"anunayajoshi"},"content":"### Deleting a client : `delete`","lastModifiedDate":"2023-03-06"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"anunayajoshi"},"content":"Deletes the specified client from the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"anunayajoshi"},"content":"* Deletes the client at the specified `INDEX`.","lastModifiedDate":"2023-03-06"},{"lineNumber":233,"author":{"gitId":"anunayajoshi"},"content":"* The index refers to the index number shown in the displayed client list.","lastModifiedDate":"2023-03-06"},{"lineNumber":234,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"anunayajoshi"},"content":"* `list` followed by `delete 2` deletes the 2nd client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":238,"author":{"gitId":"anunayajoshi"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st client in the results of the `find` command.","lastModifiedDate":"2023-03-06"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":258,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-02-04"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":260,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":261,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":264,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"adam07018"},"content":"### Policy Management (todo)","lastModifiedDate":"2023-02-22"},{"lineNumber":269,"author":{"gitId":"adam07018"},"content":"### Adding a policy.","lastModifiedDate":"2023-02-22"},{"lineNumber":270,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":271,"author":{"gitId":"adam07018"},"content":"Adds a policy to a specific client","lastModifiedDate":"2023-02-22"},{"lineNumber":272,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":273,"author":{"gitId":"anunayajoshi"},"content":"Format: `addPolicy INDEX n/NAME pn/POLICY-NAME d/START-DATE pr/PREMIUM fr/FREQUENCY`","lastModifiedDate":"2023-03-13"},{"lineNumber":274,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":275,"author":{"gitId":"anunayajoshi"},"content":"Examples: `addPolicy INDEX n/John Doe pn/Health d/28/05/2022 pr/300 fr/MONTHLY`","lastModifiedDate":"2023-03-13"},{"lineNumber":276,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":277,"author":{"gitId":"adam07018"},"content":"### Listing all policies.","lastModifiedDate":"2023-02-22"},{"lineNumber":278,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":279,"author":{"gitId":"adam07018"},"content":"Format: `listPolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":280,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":281,"author":{"gitId":"adam07018"},"content":"### Editing a policy.","lastModifiedDate":"2023-02-22"},{"lineNumber":282,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":283,"author":{"gitId":"adam07018"},"content":"Format: `editPolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":284,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":285,"author":{"gitId":"adam07018"},"content":"### Locating policies by name.","lastModifiedDate":"2023-02-22"},{"lineNumber":286,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":287,"author":{"gitId":"adam07018"},"content":"Format: `findPolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":288,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":289,"author":{"gitId":"adam07018"},"content":"### Deleting a policy.","lastModifiedDate":"2023-02-22"},{"lineNumber":290,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":291,"author":{"gitId":"adam07018"},"content":"Deletes the indexed policy from a specific client","lastModifiedDate":"2023-02-22"},{"lineNumber":292,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":293,"author":{"gitId":"adam07018"},"content":"Format: `deletePolicy n/NAME INDEX`","lastModifiedDate":"2023-02-22"},{"lineNumber":294,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":295,"author":{"gitId":"adam07018"},"content":"Examples: `deletePolicy n/John Doe 1`","lastModifiedDate":"2023-02-22"},{"lineNumber":296,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":297,"author":{"gitId":"adam07018"},"content":"### Adding a claim.","lastModifiedDate":"2023-02-22"},{"lineNumber":298,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":299,"author":{"gitId":"adam07018"},"content":"Format: `claimPolicy`","lastModifiedDate":"2023-02-22"},{"lineNumber":300,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":301,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":302,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"**Add** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​` \u003cbr\u003e e.g., `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"-"},"content":"**Delete** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2020-05-23"},{"lineNumber":318,"author":{"gitId":"-"},"content":"**Edit** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"**Find** | `find KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g., `find James Jake`","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"**List** | `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"anunayajoshi"},"content":"**Add a Policy** | `addPolicy INDEX n/NAME pn/POLICY-NAME d/START-DATE pr/PREMIUM fr/FREQUENCY` \u003cbr\u003e e.g., `addPolicy n/John Doe pn/Health d/28/05/2022 pr/300 fr/MONTHLY`","lastModifiedDate":"2023-03-13"},{"lineNumber":323,"author":{"gitId":"tituswe"},"content":"**Delete a Policy** | `deletePolicy n/NAME INDEX` \u003cbr\u003e e.g., `deletePolicy n/John Doe 1`","lastModifiedDate":"2023-02-22"}],"authorContributionMap":{"tituswe":1,"YZmunchmunch":24,"anunayajoshi":100,"-":166,"adam07018":32}},{"path":"docs/team/adam07018.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"title: Chenyu\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-07-30"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"### to be added soon","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"-":45,"adam07018":2}},{"path":"docs/team/anunayajoshi.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"layout: page","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"title: Anun\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"### Project: Advis.io","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"Advis.io (AIO) is a desktop app for managing clients information, optimized for use via a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"`to be added soon`","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"* **Project management**:","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"    * User Guide:","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"* **Community**:","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"* **Tools**:","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-02-22"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-22"}],"authorContributionMap":{"anunayajoshi":48}},{"path":"docs/team/pangrwa.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: John Doe\u0027s Project Portfolio Page","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2021-07-30"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"(To be added soon)","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"pangrwa":1,"-":46}},{"path":"docs/team/tituswe.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"layout: page","lastModifiedDate":"2023-02-22"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"title: Titus Lowe\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"### Project: Adviso.io (to be added)","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-22"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"    * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"    * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"    * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"    * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-22"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2023-02-22"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"* **Project management**:","lastModifiedDate":"2023-02-22"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"    * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2023-02-22"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-22"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-02-22"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-02-22"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-22"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"    * User Guide:","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-02-22"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-02-22"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    * Developer Guide:","lastModifiedDate":"2023-02-22"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"* **Community**:","lastModifiedDate":"2023-02-22"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-02-22"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-02-22"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-02-22"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"* **Tools**:","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-22"}],"authorContributionMap":{"tituswe":46}},{"path":"docs/team/yzmunchmunch.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"title: Ang Yuze\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"### Project: Adviso.io (to be added)","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* **New Feature**: Added the ability to undo/redo previous commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands.","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* **Code contributed**: [RepoSense link]()","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* **Project management**:","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"* **Documentation**:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  * User Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  * Developer Guide:","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    * Added implementation details of the `delete` feature.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"* **Community**:","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"* **Tools**:","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"  * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"  * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"YZmunchmunch":2,"-":44}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. …​\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e —  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEA’s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"-"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.address.logic.Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"-"},"content":"A quick look at the `seedu.address.logic.Logic` (an extract given below) confirms that this indeed might be what we’re looking for.","lastModifiedDate":"2021-07-31"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what we’re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now let’s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so let’s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"   ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Let’s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let’s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"   ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Let’s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Let’s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"   The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"   ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"       Person personToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"       Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);","lastModifiedDate":"2023-03-07"},{"lineNumber":194,"author":{"gitId":"-"},"content":"       if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {","lastModifiedDate":"2023-03-07"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"       model.setPerson(personToEdit, editedPerson);","lastModifiedDate":"2023-03-07"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));","lastModifiedDate":"2023-03-07"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"anunayajoshi"},"content":"    * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the person data.","lastModifiedDate":"2023-03-07"},{"lineNumber":205,"author":{"gitId":"anunayajoshi"},"content":"    * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ persons.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":206,"author":{"gitId":"anunayajoshi"},"content":"      FYI, The \u0027filtered list\u0027 is the list of persons resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the persons so that the user can see the edited person along with all other persons. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2023-03-07"},{"lineNumber":207,"author":{"gitId":"anunayajoshi"},"content":"      To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of persons is being tracked.","lastModifiedDate":"2023-03-07"},{"lineNumber":208,"author":{"gitId":"-"},"content":"      \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"        persons.addAll(","lastModifiedDate":"2023-03-07"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"   **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/アリス ユー`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"anunayajoshi":4,"-":297}},{"path":"src/main/java/seedu/address/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"tituswe"},"content":"        String sb \u003d \"Width : \" + windowWidth + \"\\n\"","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"tituswe"},"content":"                + \"Height : \" + windowHeight + \"\\n\"","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"tituswe"},"content":"                + \"Position : \" + windowCoordinates;","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"tituswe"},"content":"        return sb;","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tituswe":4,"-":74}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core;","lastModifiedDate":"2016-09-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX \u003d \"The client index provided is invalid\";","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_CLIENTS_LISTED_OVERVIEW \u003d \"%1$d clients listed!\";","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_CANNOT_UNDO \u003d \"There is no more operations to undo!\";","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_CANNOT_REDO \u003d \"There is no more operations to redo!\";","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"-":10,"adam07018":4}},{"path":"src/main/java/seedu/address/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException   If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the AddressBook.","lastModifiedDate":"2018-12-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @see seedu.address.model.Model#getAddressBook()","lastModifiedDate":"2018-12-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"     * Returns an unmodifiable view of the filtered list of clients","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"     * Returns an unmodifiable view of the filtered list of policies of the selected client","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"    ObservableList\u003cPolicy\u003e getFilteredPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"     * Updates the selected Client","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"    void updateSelectedClient(Client targetClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tituswe":14,"anunayajoshi":2,"-":48}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.AddressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-03"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.storage.Storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final AddressBookParser addressBookParser;","lastModifiedDate":"2017-07-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        addressBookParser \u003d new AddressBookParser();","lastModifiedDate":"2018-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2017-07-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2018-12-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return model.getAddressBook();","lastModifiedDate":"2018-12-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"        return model.getFilteredClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":68,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"tituswe"},"content":"    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"tituswe"},"content":"        return model.getFilteredPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"tituswe"},"content":"     * Updates the selected Client","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"tituswe"},"content":"    public void updateSelectedClient(Client targetClient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"tituswe"},"content":"        model.updateSelectedClient(targetClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        return model.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tituswe":12,"anunayajoshi":3,"-":80}},{"path":"src/main/java/seedu/address/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":" * Adds a client to the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a client to the address book. \"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2017-06-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"PHONE \"","lastModifiedDate":"2017-05-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"EMAIL \"","lastModifiedDate":"2017-05-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"ADDRESS \"","lastModifiedDate":"2017-05-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + PREFIX_NAME + \"John Doe \"","lastModifiedDate":"2017-06-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"98765432 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johnd@example.com \"","lastModifiedDate":"2017-05-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"friends \"","lastModifiedDate":"2017-05-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + PREFIX_TAG + \"owesMoney\";","lastModifiedDate":"2017-05-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New client added: %1$s\";","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book\";","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"    private final Client toAdd;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"     * Creates an AddCommand to add the specified {@code Client}","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"    public AddCommand(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        toAdd \u003d client;","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        if (model.hasClient(toAdd)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"        model.addClient(toAdd);","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        return new CommandResult(MESSAGE_SUCCESS, toAdd);","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":1,"anunayajoshi":13,"-":53}},{"path":"src/main/java/seedu/address/logic/commands/AddPolicyCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":" * Adds a policy to a specific client in the program","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"public class AddPolicyCommand extends Command {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Policy: %2$s\";","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"    public static final String COMMAND_WORD \u003d \"addPolicy\";","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a policy to a client in the program. \"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"            + \"INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"            + \"POLICY (must be a valid policy)\"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"            + \"1 \"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"            + \"pn/Fire Insurance\"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"            + \"d/01-01-2021 \"","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"            + \"pr/1000\"","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"            + \"fr/YEARLY\";","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"    public final Index index;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"    public final Policy policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"     * Creates an AddPolicyCommand to add the specified {@code Policy}","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"     * @param index of the person to add the policy to","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"     * @param policy to be added","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"    public AddPolicyCommand(Index index, Policy policy) {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        requireAllNonNull(index, policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        this.policy \u003d policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e lastshownList \u003d model.getFilteredClientList();","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        if (index.getZeroBased() \u003e\u003d lastshownList.size()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToAddPolicy \u003d lastshownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"        // handle duplicate policies","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"        if (clientToAddPolicy.getPolicyList().contains(policy)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(\"This policy already exists in the client\u0027s policy list\");","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        clientToAddPolicy.getPolicyList().add(policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"        model.setClient(clientToAddPolicy, clientToAddPolicy);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        return new CommandResult(generateSuccessMessage());","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"     * Generates a command execution success message based on the policy added","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"     * @return success message","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"    private String generateSuccessMessage() {","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"        return String.format(\"Added policy: %1$s to client: %2$s\", policy, index.getOneBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"anunayajoshi"},"content":"        if (!(other instanceof AddPolicyCommand)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"        // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"anunayajoshi"},"content":"        AddPolicyCommand otherPolicy \u003d (AddPolicyCommand) other;","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"        return index.equals(otherPolicy.index)","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 policy.equals(otherPolicy.policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"anunayajoshi":94}},{"path":"src/main/java/seedu/address/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"    private final Client targetClient;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"     * Selects a particular client","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"    private final boolean select;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"     * Help information should be shown to the user.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"     * The application should exit.","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"    public CommandResult(String feedbackToUser, Client targetClient, boolean select, boolean showHelp, boolean exit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"        this.targetClient \u003d targetClient;","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"        this.select \u003d select;","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"    public CommandResult(String feedbackToUser, boolean select, boolean showHelp, boolean exit) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"        this.targetClient \u003d null;","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"        this.select \u003d select;","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser} and {@code targetClient},","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"    public CommandResult(String feedbackToUser, Client targetClient) {","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"tituswe"},"content":"        this(feedbackToUser, targetClient, false, false, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"tituswe"},"content":"        this(feedbackToUser, false, false, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"tituswe"},"content":"        if (targetClient \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"tituswe"},"content":"        return String.format(feedbackToUser, targetClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"tituswe"},"content":"    public Client getTargetClient() {","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"tituswe"},"content":"        return targetClient;","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"tituswe"},"content":"    public boolean isSelect() {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"tituswe"},"content":"        return select;","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":106,"author":{"gitId":"tituswe"},"content":"        boolean isEqualTargetClients;","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"tituswe"},"content":"        // handles case where targetClient is null","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"tituswe"},"content":"        if (targetClient \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"tituswe"},"content":"            isEqualTargetClients \u003d otherCommandResult.targetClient \u003d\u003d null;","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"tituswe"},"content":"        } else {","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"tituswe"},"content":"            isEqualTargetClients \u003d targetClient.equals(otherCommandResult.targetClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"tituswe"},"content":"                \u0026\u0026 isEqualTargetClients","lastModifiedDate":"2023-03-10"},{"lineNumber":117,"author":{"gitId":"tituswe"},"content":"                \u0026\u0026 select \u003d\u003d otherCommandResult.select","lastModifiedDate":"2023-03-10"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"tituswe"},"content":"        return Objects.hash(feedbackToUser, targetClient, select, showHelp, exit);","lastModifiedDate":"2023-03-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":60,"-":67}},{"path":"src/main/java/seedu/address/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-09-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":" * Deletes a client identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"            + \": Deletes the client identified by the index number used in the displayed client list.\\n\"","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_DELETE_CLIENT_SUCCESS \u003d \"Deleted Client: %1$s\";","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        model.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"        return new CommandResult(MESSAGE_DELETE_CLIENT_SUCCESS, clientToDelete);","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":1,"anunayajoshi":8,"-":44}},{"path":"src/main/java/seedu/address/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-12-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-01-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-01-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2016-12-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.CollectionUtil;","lastModifiedDate":"2016-12-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":" * Edits the details of an existing client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the client identified \"","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"            + \"by the index number used in the displayed client list. \"","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_NAME + \"NAME] \"","lastModifiedDate":"2017-06-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_PHONE + \"PHONE] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_EMAIL + \"EMAIL] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \"","lastModifiedDate":"2017-05-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            + \"[\" + PREFIX_TAG + \"TAG]...\\n\"","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            + PREFIX_PHONE + \"91234567 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            + PREFIX_EMAIL + \"johndoe@example.com\";","lastModifiedDate":"2017-05-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_EDIT_CLIENT_SUCCESS \u003d \"Edited Client: %1$s\";","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"This client already exists in the address book.\";","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"    private final EditClientDescriptor editClientDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"     * @param index of the client in the filtered client list to edit","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"     * @param editClientDescriptor details to edit the client with","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"    public EditCommand(Index index, EditClientDescriptor editClientDescriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(editClientDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"        this.editClientDescriptor \u003d new EditClientDescriptor(editClientDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"        Client editedClient \u003d createEditedClient(clientToEdit, editClientDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"        if (!clientToEdit.isSameClient(editedClient) \u0026\u0026 model.hasClient(editedClient)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        model.setClient(clientToEdit, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"anunayajoshi"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_CLIENT_SUCCESS, editedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"     * Creates and returns a {@code Client} with the details of {@code clientToEdit}","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"     * edited with {@code editClientDescriptor}.","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"    private static Client createEditedClient(Client clientToEdit, EditClientDescriptor editClientDescriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"        assert clientToEdit !\u003d null;","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"        Name updatedName \u003d editClientDescriptor.getName().orElse(clientToEdit.getName());","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"        Phone updatedPhone \u003d editClientDescriptor.getPhone().orElse(clientToEdit.getPhone());","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"anunayajoshi"},"content":"        Email updatedEmail \u003d editClientDescriptor.getEmail().orElse(clientToEdit.getEmail());","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"anunayajoshi"},"content":"        Address updatedAddress \u003d editClientDescriptor.getAddress().orElse(clientToEdit.getAddress());","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"YZmunchmunch"},"content":"        //UniquePolicyList updatedPolicyList \u003d editClientDescriptor.getPolicyList().orElse(clientToEdit.getAddress());","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"anunayajoshi"},"content":"        Set\u003cTag\u003e updatedTags \u003d editClientDescriptor.getTags().orElse(clientToEdit.getTags());","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"        UniquePolicyList policyList \u003d clientToEdit.getPolicyList(); // To change policyList you must use EditPolicy","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"        return new Client(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, policyList);","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":123,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 editClientDescriptor.equals(e.editClientDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"     * Stores the details to edit the client with. Each non-empty field value will replace the","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"anunayajoshi"},"content":"     * corresponding field value of the client.","lastModifiedDate":"2023-03-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":130,"author":{"gitId":"anunayajoshi"},"content":"    public static class EditClientDescriptor {","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private Phone phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Email email;","lastModifiedDate":"2017-06-21"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        private Address address;","lastModifiedDate":"2017-06-21"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-06-21"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"        public EditClientDescriptor() {}","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":141,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":143,"author":{"gitId":"anunayajoshi"},"content":"        public EditClientDescriptor(EditClientDescriptor toCopy) {","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            setPhone(toCopy.phone);","lastModifiedDate":"2018-01-15"},{"lineNumber":146,"author":{"gitId":"-"},"content":"            setEmail(toCopy.email);","lastModifiedDate":"2018-01-15"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            setAddress(toCopy.address);","lastModifiedDate":"2018-01-15"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            setTags(toCopy.tags);","lastModifiedDate":"2018-01-11"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);","lastModifiedDate":"2018-08-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":159,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        public void setPhone(Phone phone) {","lastModifiedDate":"2017-06-21"},{"lineNumber":167,"author":{"gitId":"-"},"content":"            this.phone \u003d phone;","lastModifiedDate":"2017-06-21"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        public Optional\u003cPhone\u003e getPhone() {","lastModifiedDate":"2016-12-26"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(phone);","lastModifiedDate":"2017-06-21"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        public void setEmail(Email email) {","lastModifiedDate":"2017-06-21"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            this.email \u003d email;","lastModifiedDate":"2017-06-21"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        public Optional\u003cEmail\u003e getEmail() {","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(email);","lastModifiedDate":"2017-06-21"},{"lineNumber":180,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        public void setAddress(Address address) {","lastModifiedDate":"2017-06-21"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            this.address \u003d address;","lastModifiedDate":"2017-06-21"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        public Optional\u003cAddress\u003e getAddress() {","lastModifiedDate":"2016-12-26"},{"lineNumber":187,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(address);","lastModifiedDate":"2017-06-21"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":191,"author":{"gitId":"-"},"content":"         * Sets {@code tags} to this object\u0027s {@code tags}.","lastModifiedDate":"2018-01-11"},{"lineNumber":192,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":193,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public void setTags(Set\u003cTag\u003e tags) {","lastModifiedDate":"2017-06-21"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;","lastModifiedDate":"2018-01-11"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":199,"author":{"gitId":"-"},"content":"         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2018-01-11"},{"lineNumber":200,"author":{"gitId":"-"},"content":"         * if modification is attempted.","lastModifiedDate":"2018-01-11"},{"lineNumber":201,"author":{"gitId":"-"},"content":"         * Returns {@code Optional#empty()} if {@code tags} is null.","lastModifiedDate":"2018-01-11"},{"lineNumber":202,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();","lastModifiedDate":"2018-01-11"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":211,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":214,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":215,"author":{"gitId":"anunayajoshi"},"content":"            if (!(other instanceof EditClientDescriptor)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":216,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":219,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":220,"author":{"gitId":"anunayajoshi"},"content":"            EditClientDescriptor e \u003d (EditClientDescriptor) other;","lastModifiedDate":"2023-03-06"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":222,"author":{"gitId":"-"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2017-06-21"},{"lineNumber":223,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getPhone().equals(e.getPhone())","lastModifiedDate":"2017-06-21"},{"lineNumber":224,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getEmail().equals(e.getEmail())","lastModifiedDate":"2017-06-21"},{"lineNumber":225,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getAddress().equals(e.getAddress())","lastModifiedDate":"2017-06-21"},{"lineNumber":226,"author":{"gitId":"-"},"content":"                    \u0026\u0026 getTags().equals(e.getTags());","lastModifiedDate":"2017-06-21"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"YZmunchmunch":1,"anunayajoshi":43,"pangrwa":3,"-":182}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, null, false, false, true);","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"tituswe":1,"-":18}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2018-04-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":" * Finds and lists all clients in address book whose name contains any of the argument keywords.","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Keyword matching is case insensitive.","lastModifiedDate":"2018-04-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all clients whose names contain any of \"","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final NameContainsKeywordsPredicate predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public FindCommand(NameContainsKeywordsPredicate predicate) {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        model.updateFilteredClientList(predicate);","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"                String.format(Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW, model.getFilteredClientList().size()));","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"anunayajoshi":5,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, false, true, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":" * Lists all clients in the address book to the user.","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Listed all clients\";","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"        model.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anunayajoshi":4,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/RedoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"/**","lastModifiedDate":"2023-03-07"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":" * Command to redo an action","lastModifiedDate":"2023-03-07"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":" */","lastModifiedDate":"2023-03-07"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"public class RedoCommand extends Command {","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"    public static final String COMMAND_WORD \u003d \"redo\";","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_REDO_SUCCESS \u003d \"Redo success\";","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"        if (!model.canRedo()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"            throw new CommandException(Messages.MESSAGE_CANNOT_REDO);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"        model.redo();","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"        return new CommandResult(MESSAGE_REDO_SUCCESS);","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"adam07018":25}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import java.util.List;","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"/**","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":" * Selects a person identified using it\u0027s displayed index from the address book.","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":" */","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"public class SelectCommand extends Command {","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"    public static final String COMMAND_WORD \u003d \"select\";","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"            + \": Selects the person identified by the index number used in the displayed person list.\\n\"","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"    public static final String MESSAGE_SELECT_CLIENT_SUCCESS \u003d \"Selected Person: %1$s\";","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"    public SelectCommand(Index targetIndex) {","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-05"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-05"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-05"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"        requireAllNonNull(model);","lastModifiedDate":"2023-03-05"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"        List\u003cClient\u003e lastShownList \u003d model.getFilteredClientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-05"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-05"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"        Client clientToSelect \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"        return new CommandResult(MESSAGE_SELECT_CLIENT_SUCCESS, clientToSelect, true, false, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-05"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-05"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-05"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls","lastModifiedDate":"2023-03-05"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check","lastModifiedDate":"2023-03-05"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"tituswe":52}},{"path":"src/main/java/seedu/address/logic/commands/UndoCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-07"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":" * Undo the previous command by tracing back to previous AddressBook","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"public class UndoCommand extends Command {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"    public static final String COMMAND_WORD \u003d \"undo\";","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"    public static final String MESSAGE_UNDO_SUCCESS \u003d \"Undo success\";","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"        if (!model.canUndo()) {","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"            throw new CommandException(Messages.MESSAGE_CANNOT_UNDO);","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"        model.undo();","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"        return new CommandResult(MESSAGE_UNDO_SUCCESS);","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"adam07018":26}},{"path":"src/main/java/seedu/address/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-02-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-17"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)","lastModifiedDate":"2017-12-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"        //UniquePolicyList policyList \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));","lastModifiedDate":"2017-03-17"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        UniquePolicyList policyList \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        Client client \u003d new Client(name, phone, email, address, tagList, policyList);","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        return new AddCommand(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2017-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"YZmunchmunch":1,"anunayajoshi":6,"pangrwa":3,"-":53}},{"path":"src/main/java/seedu/address/logic/parser/AddPolicyCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_FREQUENCY;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_PREMIUM;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_START_DATE;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.AddPolicyCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.CustomDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Frequency;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.PolicyName;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Premium;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":" * Parses input arguments and creates a new {@code AddPolicyCommand} object","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"public class AddPolicyCommandParser implements Parser\u003cAddPolicyCommand\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"     * Parses the given {@code String} of arguments in the context of the {@code AddPolicyCommand}","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"     * @return an {@code AddPolicyCommand} object for execution","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"    public AddPolicyCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_POLICY_NAME, PREFIX_POLICY_START_DATE,","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"                PREFIX_POLICY_PREMIUM, PREFIX_POLICY_FREQUENCY);","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        Index index;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        try {","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_POLICY_NAME, PREFIX_POLICY_START_DATE,","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"                PREFIX_POLICY_PREMIUM, PREFIX_POLICY_FREQUENCY) || argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        PolicyName policyName \u003d ParserUtil.parsePolicyName(argMultimap.getValue(PREFIX_POLICY_NAME).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        CustomDate startDate \u003d ParserUtil.parseCustomDate(argMultimap.getValue(PREFIX_POLICY_START_DATE).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        Premium premium \u003d ParserUtil.parsePremium(argMultimap.getValue(PREFIX_POLICY_PREMIUM).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        Frequency frequency \u003d ParserUtil.parseFrequency(argMultimap.getValue(PREFIX_POLICY_FREQUENCY).get());","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        Policy policy \u003d new Policy(policyName, startDate, premium, frequency);","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        return new AddPolicyCommand(index, policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"anunayajoshi":65}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.AddPolicyCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"import seedu.address.logic.commands.RedoCommand;","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"import seedu.address.logic.commands.UndoCommand;","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"tituswe"},"content":"        case SelectCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-05"},{"lineNumber":72,"author":{"gitId":"tituswe"},"content":"            return new SelectCommandParser().parse(arguments);","lastModifiedDate":"2023-03-05"},{"lineNumber":73,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"        case AddPolicyCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"            return new AddPolicyCommandParser().parse(arguments);","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"adam07018"},"content":"        case UndoCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-01"},{"lineNumber":84,"author":{"gitId":"adam07018"},"content":"            return new UndoCommand();","lastModifiedDate":"2023-03-01"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"adam07018"},"content":"        case RedoCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-01"},{"lineNumber":87,"author":{"gitId":"adam07018"},"content":"            return new RedoCommand();","lastModifiedDate":"2023-03-01"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":4,"anunayajoshi":6,"-":76,"adam07018":8}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"    /* Policy Prefix definitions */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"    public static final Prefix PREFIX_POLICY_NAME \u003d new Prefix(\"pn/\");","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    public static final Prefix PREFIX_POLICY_START_DATE \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"    public static final Prefix PREFIX_POLICY_PREMIUM \u003d new Prefix(\"pr/\");","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"    public static final Prefix PREFIX_POLICY_FREQUENCY \u003d new Prefix(\"fr/\");","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"anunayajoshi":5,"pangrwa":1,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the EditCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2017-03-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);","lastModifiedDate":"2017-06-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor editClientDescriptor \u003d new EditClientDescriptor();","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"            editClientDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"            editClientDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"            editClientDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {","lastModifiedDate":"2018-07-10"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"            editClientDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editClientDescriptor::setTags);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"        if (!editClientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        return new EditCommand(index, editClientDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty.","lastModifiedDate":"2017-03-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * If {@code tags} contain only one element which is an empty string, it will be parsed into a","lastModifiedDate":"2017-01-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code Set\u003cTag\u003e} containing zero tags.","lastModifiedDate":"2017-03-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assert tags !\u003d null;","lastModifiedDate":"2017-01-26"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (tags.isEmpty()) {","lastModifiedDate":"2017-01-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2017-01-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        return Optional.of(ParserUtil.parseTags(tagSet));","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"anunayajoshi":9,"-":73}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-01-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        String trimmedArgs \u003d args.trim();","lastModifiedDate":"2017-02-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"anunayajoshi":1,"-":32}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.CustomDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Frequency;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.PolicyName;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Premium;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":128,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"anunayajoshi"},"content":"     * Parses a {@code String policyName} into a {@code PolicyName}.","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"anunayajoshi"},"content":"     * @param policyName String to be parsed","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"anunayajoshi"},"content":"     * @return PolicyName","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"anunayajoshi"},"content":"     * @throws ParseException if the given {@code policyName} is invalid.","lastModifiedDate":"2023-03-13"},{"lineNumber":134,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":135,"author":{"gitId":"anunayajoshi"},"content":"    public static PolicyName parsePolicyName(String policyName) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":136,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(policyName);","lastModifiedDate":"2023-03-13"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"        String trimmedPolicyName \u003d policyName.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"        if (!PolicyName.isValidName(trimmedPolicyName)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(PolicyName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"anunayajoshi"},"content":"        return new PolicyName(trimmedPolicyName);","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":145,"author":{"gitId":"anunayajoshi"},"content":"     * Parses a {@code String customDate} into a {@code CustomDate}.","lastModifiedDate":"2023-03-13"},{"lineNumber":146,"author":{"gitId":"anunayajoshi"},"content":"     * @param customDate","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"anunayajoshi"},"content":"     * @return CustomDate","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"anunayajoshi"},"content":"     * @throws ParseException if the given {@code customDate} is invalid.","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"anunayajoshi"},"content":"    public static CustomDate parseCustomDate(String customDate) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(customDate);","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"anunayajoshi"},"content":"        String trimmedCustomDate \u003d customDate.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"anunayajoshi"},"content":"        if (!CustomDate.isValidDate(trimmedCustomDate)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(CustomDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"anunayajoshi"},"content":"        return new CustomDate(trimmedCustomDate);","lastModifiedDate":"2023-03-13"},{"lineNumber":157,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":158,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":159,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":160,"author":{"gitId":"anunayajoshi"},"content":"     * Parses a {@code String premium} into a {@code Premium}.","lastModifiedDate":"2023-03-13"},{"lineNumber":161,"author":{"gitId":"anunayajoshi"},"content":"     * @param premium String to be parsed","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"anunayajoshi"},"content":"     * @return Premium","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"anunayajoshi"},"content":"     * @throws ParseException if the given {@code premium} is invalid.","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"anunayajoshi"},"content":"    public static Premium parsePremium(String premium) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(premium);","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"anunayajoshi"},"content":"        String trimmedPremium \u003d premium.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"anunayajoshi"},"content":"        if (!Premium.isValidPremium(trimmedPremium)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(Premium.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":170,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"anunayajoshi"},"content":"        return new Premium(trimmedPremium);","lastModifiedDate":"2023-03-13"},{"lineNumber":172,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"anunayajoshi"},"content":"     * Parses a {@code String frequency} into a {@code Frequency}.","lastModifiedDate":"2023-03-13"},{"lineNumber":176,"author":{"gitId":"anunayajoshi"},"content":"     * @param frequency String to be parsed","lastModifiedDate":"2023-03-13"},{"lineNumber":177,"author":{"gitId":"anunayajoshi"},"content":"     * @return Frequency","lastModifiedDate":"2023-03-13"},{"lineNumber":178,"author":{"gitId":"anunayajoshi"},"content":"     * @throws ParseException if the given {@code frequency} is invalid.","lastModifiedDate":"2023-03-13"},{"lineNumber":179,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"anunayajoshi"},"content":"    public static Frequency parseFrequency(String frequency) throws ParseException {","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(frequency);","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"anunayajoshi"},"content":"        String trimmedFrequency \u003d frequency.trim();","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"anunayajoshi"},"content":"        if (!Frequency.isValidFrequency(trimmedFrequency)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"anunayajoshi"},"content":"            throw new ParseException(Frequency.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"anunayajoshi"},"content":"        return new Frequency(trimmedFrequency);","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"anunayajoshi":68,"-":120}},{"path":"src/main/java/seedu/address/logic/parser/SelectCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"/**","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":" * Parses input arguments and creates a new SelectCommand object","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":" */","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"public class SelectCommandParser implements Parser\u003cSelectCommand\u003e {","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"     * Parses the given {@code String} of arguments in the context of the SelectCommand","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"    public SelectCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"        try {","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"            return new SelectCommand(index);","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-05"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"tituswe":30}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.UniqueClientList;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":" * Duplicates are not allowed (by .isSameClient comparison)","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    private final UniqueClientList clients;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"        clients \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    public AddressBook() {","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"     * Creates an AddressBook using the Clients in the {@code toBeCopied}","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"     * Replaces the contents of the client list with {@code clients}.","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"     * {@code clients} must not contain duplicate clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients(List\u003cClient\u003e clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        this.clients.setClients(clients);","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"        setClients(newData.getClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"    //// client-level operations","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if a client with the same identity as {@code client} exists in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"    public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        return clients.contains(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"     * Adds a client to the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"     * The client must not already exist in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"    public void addClient(Client p) {","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"        clients.add(p);","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"     * Replaces the given client {@code target} in the list with {@code editedClient}.","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient(Client target, Client editedClient) {","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"        clients.setClient(target, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"    public void removeClient(Client key) {","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"        clients.remove(key);","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"anunayajoshi"},"content":"        return clients.asUnmodifiableObservableList().size() + \" clients\";","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"    public ObservableList\u003cClient\u003e getClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"        return clients.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":115,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 clients.equals(((AddressBook) other).clients));","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"anunayajoshi"},"content":"        return clients.hashCode();","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"adam07018"},"content":"    @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"adam07018"},"content":"    public AddressBook clone() {","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"adam07018"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-03-01"},{"lineNumber":126,"author":{"gitId":"adam07018"},"content":"        ab.setClients(this.getClientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"adam07018"},"content":"        return ab;","lastModifiedDate":"2023-03-01"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tituswe":3,"anunayajoshi":32,"-":88,"adam07018":7}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"     * {@code Predicate} that always evaluate to true","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"    Predicate\u003cClient\u003e PREDICATE_SHOW_ALL_CLIENTS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"     * Returns the AddressBook","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if a client with the same identity as {@code client} exists in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    boolean hasClient(Client client);","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"     * Deletes the given client.","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"     * The client must exist in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"    void deleteClient(Client target);","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"     * Adds the given client.","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"     * {@code client} must not already exist in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"    void addClient(Client client);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"     * Replaces the given client {@code target} with {@code editedClient}.","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"    void setClient(Client target, Client editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"tituswe"},"content":"     * Returns an unmodifiable view of the filtered client list","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"    ObservableList\u003cClient\u003e getFilteredClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"tituswe"},"content":"     * Returns an unmodifiable view of the filtered policy list of the selected client","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"tituswe"},"content":"    ObservableList\u003cPolicy\u003e getFilteredPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"tituswe"},"content":"     * Updates the selected Client","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"tituswe"},"content":"    void updateSelectedClient(Client targetClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":100,"author":{"gitId":"anunayajoshi"},"content":"     * Updates the filter of the filtered client list to filter by the given {@code predicate}.","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":104,"author":{"gitId":"adam07018"},"content":"    void updateFilteredClientList(Predicate\u003cClient\u003e predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"adam07018"},"content":"    boolean canRedo();","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":108,"author":{"gitId":"adam07018"},"content":"    //todo","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"adam07018"},"content":"    void commit();","lastModifiedDate":"2023-03-01"},{"lineNumber":110,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"adam07018"},"content":"    boolean canUndo();","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"adam07018"},"content":"    void redo();","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"adam07018"},"content":"    void undo();","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"tituswe":28,"anunayajoshi":14,"-":64,"adam07018":10}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    private final FilteredList\u003cClient\u003e filteredClients;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"adam07018"},"content":"    private final VersionedAddressBook versionedAddressBook;","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    private Client selectedClient \u003d null;","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"adam07018"},"content":"        versionedAddressBook \u003d new VersionedAddressBook(this.addressBook);","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"        filteredClients \u003d new FilteredList\u003c\u003e(this.addressBook.getClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"        return userPrefs;","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"tituswe"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"tituswe"},"content":"        return addressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":93,"author":{"gitId":"adam07018"},"content":"        commit();","lastModifiedDate":"2023-03-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":97,"author":{"gitId":"adam07018"},"content":"     * Overload","lastModifiedDate":"2023-03-07"},{"lineNumber":98,"author":{"gitId":"adam07018"},"content":"     * This version doesn\u0027t do commit","lastModifiedDate":"2023-03-07"},{"lineNumber":99,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"adam07018"},"content":"     * @param addressBook","lastModifiedDate":"2023-03-07"},{"lineNumber":101,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":102,"author":{"gitId":"adam07018"},"content":"    public void setAddressBook(AddressBook addressBook) {","lastModifiedDate":"2023-03-07"},{"lineNumber":103,"author":{"gitId":"adam07018"},"content":"        this.addressBook.resetData(addressBook.clone());","lastModifiedDate":"2023-03-07"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"    public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"        requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"anunayajoshi"},"content":"        return addressBook.hasClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":111,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":112,"author":{"gitId":"adam07018"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Versioned Address Book \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-01"},{"lineNumber":113,"author":{"gitId":"adam07018"},"content":"    public void commit() {","lastModifiedDate":"2023-03-01"},{"lineNumber":114,"author":{"gitId":"adam07018"},"content":"        versionedAddressBook.commit(addressBook);","lastModifiedDate":"2023-03-01"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":117,"author":{"gitId":"adam07018"},"content":"    public boolean canUndo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":118,"author":{"gitId":"adam07018"},"content":"        return versionedAddressBook.canUndo();","lastModifiedDate":"2023-03-01"},{"lineNumber":119,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":120,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":121,"author":{"gitId":"adam07018"},"content":"    public boolean canRedo() {","lastModifiedDate":"2023-03-07"},{"lineNumber":122,"author":{"gitId":"adam07018"},"content":"        return versionedAddressBook.canRedo();","lastModifiedDate":"2023-03-01"},{"lineNumber":123,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":124,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":125,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":126,"author":{"gitId":"adam07018"},"content":"     * Undo and checkout the version of AddressBook that we want","lastModifiedDate":"2023-03-07"},{"lineNumber":127,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":128,"author":{"gitId":"adam07018"},"content":"    public void undo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":129,"author":{"gitId":"adam07018"},"content":"        AddressBook ab \u003d versionedAddressBook.undo();","lastModifiedDate":"2023-03-01"},{"lineNumber":130,"author":{"gitId":"adam07018"},"content":"        setAddressBook(ab);","lastModifiedDate":"2023-03-01"},{"lineNumber":131,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":132,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":133,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":134,"author":{"gitId":"adam07018"},"content":"     * Redo and checkout the version of AddressBook that we want","lastModifiedDate":"2023-03-07"},{"lineNumber":135,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":136,"author":{"gitId":"adam07018"},"content":"    public void redo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":137,"author":{"gitId":"adam07018"},"content":"        AddressBook ab \u003d versionedAddressBook.redo();","lastModifiedDate":"2023-03-01"},{"lineNumber":138,"author":{"gitId":"adam07018"},"content":"        setAddressBook(ab);","lastModifiedDate":"2023-03-01"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":142,"author":{"gitId":"anunayajoshi"},"content":"    public void deleteClient(Client target) {","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.removeClient(target);","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"adam07018"},"content":"        commit();","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":148,"author":{"gitId":"anunayajoshi"},"content":"    public void addClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.addClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":150,"author":{"gitId":"anunayajoshi"},"content":"        updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"adam07018"},"content":"        commit();","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":155,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient(Client target, Client editedClient) {","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"anunayajoshi"},"content":"        requireAllNonNull(target, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":158,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.setClient(target, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"adam07018"},"content":"        commit();","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":162,"author":{"gitId":"anunayajoshi"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Client List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":165,"author":{"gitId":"anunayajoshi"},"content":"     * Returns an unmodifiable view of the list of {@code Client} backed by the internal list of","lastModifiedDate":"2023-03-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":169,"author":{"gitId":"anunayajoshi"},"content":"    public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":170,"author":{"gitId":"anunayajoshi"},"content":"        return filteredClients;","lastModifiedDate":"2023-03-06"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":174,"author":{"gitId":"anunayajoshi"},"content":"    public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-06"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":176,"author":{"gitId":"anunayajoshi"},"content":"        filteredClients.setPredicate(predicate);","lastModifiedDate":"2023-03-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":179,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":180,"author":{"gitId":"tituswe"},"content":"    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":181,"author":{"gitId":"tituswe"},"content":"        if (selectedClient \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"tituswe"},"content":"            return FXCollections.observableArrayList();","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"tituswe"},"content":"        return selectedClient.getFilteredPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"tituswe"},"content":"     * Updates the selected Client","lastModifiedDate":"2023-03-13"},{"lineNumber":189,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":190,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":191,"author":{"gitId":"tituswe"},"content":"    public void updateSelectedClient(Client targetClient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":192,"author":{"gitId":"tituswe"},"content":"        this.selectedClient \u003d targetClient;","lastModifiedDate":"2023-03-13"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":210,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":211,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 filteredClients.equals(other.filteredClients);","lastModifiedDate":"2023-03-06"},{"lineNumber":212,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"tituswe":28,"anunayajoshi":21,"-":125,"adam07018":40}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"    ObservableList\u003cClient\u003e getClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anunayajoshi":2,"-":15}},{"path":"src/main/java/seedu/address/model/VersionedAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.model;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-03-01"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"/**","lastModifiedDate":"2023-03-01"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":" * Stores a addressBookStateList which holds history of AddressBook","lastModifiedDate":"2023-03-01"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":" */","lastModifiedDate":"2023-03-01"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"public class VersionedAddressBook extends AddressBook {","lastModifiedDate":"2023-03-01"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":"    private LinkedList\u003cAddressBook\u003e addressBookStateList \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":"    private int currentStatePointer;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"    public VersionedAddressBook() {}","lastModifiedDate":"2023-03-01"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"     * Constructs a VersionedAddressBook.","lastModifiedDate":"2023-03-01"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"     * @param ab","lastModifiedDate":"2023-03-01"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"    public VersionedAddressBook(AddressBook ab) {","lastModifiedDate":"2023-03-01"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"        addressBookStateList.add(ab.clone());","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"        currentStatePointer \u003d addressBookStateList.size() - 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"     * Insert node (address book) after currentStatePointer","lastModifiedDate":"2023-03-01"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"     * 1. Delete the following node at currentStatePointer","lastModifiedDate":"2023-03-01"},{"lineNumber":26,"author":{"gitId":"adam07018"},"content":"     * 2. Add node","lastModifiedDate":"2023-03-01"},{"lineNumber":27,"author":{"gitId":"adam07018"},"content":"     * 3. Reset currentStatePointer","lastModifiedDate":"2023-03-01"},{"lineNumber":28,"author":{"gitId":"adam07018"},"content":"     * @param ab","lastModifiedDate":"2023-03-01"},{"lineNumber":29,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":30,"author":{"gitId":"adam07018"},"content":"    public void commit(AddressBook ab) {","lastModifiedDate":"2023-03-01"},{"lineNumber":31,"author":{"gitId":"adam07018"},"content":"        // Step 1. Delete the following nodes at currentStatePointer","lastModifiedDate":"2023-03-01"},{"lineNumber":32,"author":{"gitId":"adam07018"},"content":"        for (int i \u003d currentStatePointer + 1; i \u003c addressBookStateList.size(); i++) {","lastModifiedDate":"2023-03-01"},{"lineNumber":33,"author":{"gitId":"adam07018"},"content":"            addressBookStateList.remove(i);","lastModifiedDate":"2023-03-01"},{"lineNumber":34,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":35,"author":{"gitId":"adam07018"},"content":"        // Step 2. Add node","lastModifiedDate":"2023-03-01"},{"lineNumber":36,"author":{"gitId":"adam07018"},"content":"        addressBookStateList.add(ab.clone());","lastModifiedDate":"2023-03-01"},{"lineNumber":37,"author":{"gitId":"adam07018"},"content":"        // Step 3. Increment currentStatePointer by 1","lastModifiedDate":"2023-03-01"},{"lineNumber":38,"author":{"gitId":"adam07018"},"content":"        currentStatePointer \u003d addressBookStateList.size() - 1;","lastModifiedDate":"2023-03-01"},{"lineNumber":39,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":40,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":41,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-01"},{"lineNumber":42,"author":{"gitId":"adam07018"},"content":"     * Move currentStatePointer one before","lastModifiedDate":"2023-03-01"},{"lineNumber":43,"author":{"gitId":"adam07018"},"content":"     * Return the target AddressBook (Not clone yet)","lastModifiedDate":"2023-03-01"},{"lineNumber":44,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-01"},{"lineNumber":45,"author":{"gitId":"adam07018"},"content":"    public AddressBook undo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":46,"author":{"gitId":"adam07018"},"content":"        currentStatePointer--;","lastModifiedDate":"2023-03-01"},{"lineNumber":47,"author":{"gitId":"adam07018"},"content":"        return addressBookStateList.get(currentStatePointer);","lastModifiedDate":"2023-03-01"},{"lineNumber":48,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":49,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":50,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":51,"author":{"gitId":"adam07018"},"content":"     * Move currentStatePointer one after","lastModifiedDate":"2023-03-07"},{"lineNumber":52,"author":{"gitId":"adam07018"},"content":"     * Return the target AddressBook (Not clone yet)","lastModifiedDate":"2023-03-07"},{"lineNumber":53,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":54,"author":{"gitId":"adam07018"},"content":"    public AddressBook redo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":55,"author":{"gitId":"adam07018"},"content":"        currentStatePointer++;","lastModifiedDate":"2023-03-01"},{"lineNumber":56,"author":{"gitId":"adam07018"},"content":"        return addressBookStateList.get(currentStatePointer);","lastModifiedDate":"2023-03-01"},{"lineNumber":57,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":58,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":59,"author":{"gitId":"adam07018"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d helper function \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-01"},{"lineNumber":60,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":61,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":62,"author":{"gitId":"adam07018"},"content":"     * @return true if we can undo AddressBook","lastModifiedDate":"2023-03-07"},{"lineNumber":63,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":64,"author":{"gitId":"adam07018"},"content":"    public boolean canUndo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":65,"author":{"gitId":"adam07018"},"content":"        if (currentStatePointer \u003d\u003d 0) {","lastModifiedDate":"2023-03-01"},{"lineNumber":66,"author":{"gitId":"adam07018"},"content":"            return false;","lastModifiedDate":"2023-03-01"},{"lineNumber":67,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":68,"author":{"gitId":"adam07018"},"content":"        return true;","lastModifiedDate":"2023-03-01"},{"lineNumber":69,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":71,"author":{"gitId":"adam07018"},"content":"    /**","lastModifiedDate":"2023-03-07"},{"lineNumber":72,"author":{"gitId":"adam07018"},"content":"     * @return true if we can redo AddressBook","lastModifiedDate":"2023-03-07"},{"lineNumber":73,"author":{"gitId":"adam07018"},"content":"     */","lastModifiedDate":"2023-03-07"},{"lineNumber":74,"author":{"gitId":"adam07018"},"content":"    public boolean canRedo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":75,"author":{"gitId":"adam07018"},"content":"        if (currentStatePointer \u003d\u003d addressBookStateList.size() - 1) {","lastModifiedDate":"2023-03-01"},{"lineNumber":76,"author":{"gitId":"adam07018"},"content":"            return false;","lastModifiedDate":"2023-03-01"},{"lineNumber":77,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":78,"author":{"gitId":"adam07018"},"content":"        return true;","lastModifiedDate":"2023-03-01"},{"lineNumber":79,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":80,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"adam07018":80}},{"path":"src/main/java/seedu/address/model/client/Address.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":" * Represents a Client\u0027s address in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Address {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param address A valid address.","lastModifiedDate":"2017-05-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Address(String address) {","lastModifiedDate":"2017-05-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        value \u003d address;","lastModifiedDate":"2018-08-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static boolean isValidAddress(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                || (other instanceof Address // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Address) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anunayajoshi":2,"-":55}},{"path":"src/main/java/seedu/address/model/client/Client.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-03-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-03-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":" * Represents a Client in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2017-12-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"public class Client {","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Address address;","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"    private final UniquePolicyList policyList;","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    private final FilteredList\u003cPolicy\u003e filteredPolicies;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"    public Client(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, UniquePolicyList policyList) {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        requireAllNonNull(name, phone, email, address, tags);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.tags.addAll(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"        this.policyList \u003d policyList; // TODO: @pangrwa Need to read from Storage","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"        filteredPolicies \u003d new FilteredList\u003c\u003e(this.policyList.asUnmodifiableObservableList());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public Phone getPhone() {","lastModifiedDate":"2017-07-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public Email getEmail() {","lastModifiedDate":"2017-07-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return email;","lastModifiedDate":"2017-12-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public Address getAddress() {","lastModifiedDate":"2017-07-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return address;","lastModifiedDate":"2017-12-20"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-12"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    public UniquePolicyList getPolicyList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        return policyList;","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"tituswe"},"content":"    public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"tituswe"},"content":"        return filteredPolicies;","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":71,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-07"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}","lastModifiedDate":"2017-03-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * if modification is attempted.","lastModifiedDate":"2017-03-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public Set\u003cTag\u003e getTags() {","lastModifiedDate":"2017-03-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return Collections.unmodifiableSet(tags);","lastModifiedDate":"2018-03-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if both clients have the same name.","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"     * This defines a weaker notion of equality between two clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"anunayajoshi"},"content":"    public boolean isSameClient(Client otherClient) {","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        if (otherClient \u003d\u003d this) {","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"        return otherClient !\u003d null","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getName().equals(getName());","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if both clients have the same identity and data fields.","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"     * This defines a stronger notion of equality between two clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":103,"author":{"gitId":"anunayajoshi"},"content":"        if (!(other instanceof Client)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"        Client otherClient \u003d (Client) other;","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"        return otherClient.getName().equals(getName())","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getPhone().equals(getPhone())","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getEmail().equals(getEmail())","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getAddress().equals(getAddress())","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getTags().equals(getTags())","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 otherClient.getPolicyList().equals(getPolicyList());","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"anunayajoshi"},"content":"        return Objects.hash(name, phone, email, address, tags, policyList);","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        builder.append(getName())","lastModifiedDate":"2018-01-10"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                .append(\"; Phone: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":127,"author":{"gitId":"-"},"content":"                .append(getPhone())","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .append(\"; Email: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"                .append(getEmail())","lastModifiedDate":"2018-01-10"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                .append(\"; Address: \")","lastModifiedDate":"2020-12-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                .append(getAddress());","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-11"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tags \u003d getTags();","lastModifiedDate":"2020-12-11"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        if (!tags.isEmpty()) {","lastModifiedDate":"2020-12-11"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            builder.append(\"; Tags: \");","lastModifiedDate":"2020-12-11"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            tags.forEach(builder::append);","lastModifiedDate":"2020-12-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-11"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"        if (!policyList.isEmpty()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"            builder.append(\"; Policies: \");","lastModifiedDate":"2023-03-13"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"            policyList.forEach(builder::append);","lastModifiedDate":"2023-03-13"},{"lineNumber":141,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":7,"YZmunchmunch":2,"anunayajoshi":28,"pangrwa":4,"-":104}},{"path":"src/main/java/seedu/address/model/client/Email.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":" * Represents a Client\u0027s email in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Email {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private static final String SPECIAL_CHARACTERS \u003d \"+_.-\";","lastModifiedDate":"2021-07-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \"","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"and adhere to the following constraints:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \"","lastModifiedDate":"2018-02-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). The local-part may not start or end with any special \"","lastModifiedDate":"2021-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"characters.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. The domain name is made up of domain labels \"","lastModifiedDate":"2021-07-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"separated by periods.\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"The domain name must:\\n\"","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"    - end with a domain label at least 2 characters long\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"    - have each domain label start and end with alphanumeric characters\\n\"","lastModifiedDate":"2021-07-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"    - have each domain label consist of alphanumeric characters, separated only by hyphens, if any.\";","lastModifiedDate":"2021-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    // alphanumeric and special characters","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String ALPHANUMERIC_NO_UNDERSCORE \u003d \"[^\\\\W_]+\"; // alphanumeric characters except underscore","lastModifiedDate":"2021-07-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^\" + ALPHANUMERIC_NO_UNDERSCORE + \"([\" + SPECIAL_CHARACTERS + \"]\"","lastModifiedDate":"2021-07-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_PART_REGEX \u003d ALPHANUMERIC_NO_UNDERSCORE","lastModifiedDate":"2021-07-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            + \"(-\" + ALPHANUMERIC_NO_UNDERSCORE + \")*\";","lastModifiedDate":"2021-07-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_LAST_PART_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"){2,}$\"; // At least two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String DOMAIN_REGEX \u003d \"(\" + DOMAIN_PART_REGEX + \"\\\\.)*\" + DOMAIN_LAST_PART_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\" + DOMAIN_REGEX;","lastModifiedDate":"2021-07-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Constructs an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param email A valid email address.","lastModifiedDate":"2017-05-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public Email(String email) {","lastModifiedDate":"2017-05-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        value \u003d email;","lastModifiedDate":"2018-08-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Returns if a given string is a valid email.","lastModifiedDate":"2018-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static boolean isValidEmail(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                || (other instanceof Email // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Email) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anunayajoshi":2,"-":69}},{"path":"src/main/java/seedu/address/model/client/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":" * Represents a Client\u0027s name in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2018-04-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2017-01-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anunayajoshi":2,"-":57}},{"path":"src/main/java/seedu/address/model/client/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":" * Tests that a {@code Client}\u0027s {@code Name} matches any of the keywords given.","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cClient\u003e {","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"    public boolean test(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(client.getName().fullName, keyword));","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anunayajoshi":5,"-":26}},{"path":"src/main/java/seedu/address/model/client/Phone.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2017-05-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":" * Represents a Client\u0027s phone number in the address book.","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Phone {","lastModifiedDate":"2016-09-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2018-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";","lastModifiedDate":"2018-04-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";","lastModifiedDate":"2018-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public final String value;","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param phone A valid phone number.","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public Phone(String phone) {","lastModifiedDate":"2017-05-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        value \u003d phone;","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2018-04-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isValidPhone(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return value;","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                || (other instanceof Phone // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                \u0026\u0026 value.equals(((Phone) other).value)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return value.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"anunayajoshi":2,"-":51}},{"path":"src/main/java/seedu/address/model/client/UniqueClientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Iterator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":" * A list of clients that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":" * A client is considered unique by comparing using {@code Client#isSameClient(Client)}. As such, adding and updating of","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":" * clients uses client#isSameclient(client) for equality so as to ensure that the client being added or updated is","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":" * unique in terms of identity in the UniqueclientList. However, the removal of a client uses client#equals(Object) so","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":" * as to ensure that the client with exactly the same fields will be removed.","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":" * @see Client#isSameClient(Client)","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"public class UniqueClientList implements Iterable\u003cClient\u003e {","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"    private final ObservableList\u003cClient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"    private final ObservableList\u003cClient\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if the list contains an equivalent client as the given argument.","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"    public boolean contains(Client toCheck) {","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        return internalList.stream().anyMatch(toCheck::isSameClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"     * Adds a client to the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"     * The client must not already exist in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"    public void add(Client toAdd) {","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2017-05-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"            throw new DuplicateClientException();","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2018-01-10"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"     * Replaces the client {@code target} in the list with {@code editedClient}.","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2018-08-07"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"     * The client identity of {@code editedClient} must not be the same as another existing client in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient(Client target, Client editedClient) {","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"        requireAllNonNull(target, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2017-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2017-06-07"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"            throw new ClientNotFoundException();","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-07"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        if (!target.isSameClient(editedClient) \u0026\u0026 contains(editedClient)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"            throw new DuplicateClientException();","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        internalList.set(index, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"     * Removes the equivalent client from the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"     * The client must exist in the list.","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"    public void remove(Client toRemove) {","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2017-05-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2018-02-28"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"            throw new ClientNotFoundException();","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients(UniqueClientList replacement) {","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"     * Replaces the contents of this list with {@code clients}.","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"     * {@code clients} must not contain duplicate clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients(List\u003cClient\u003e clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"        requireAllNonNull(clients);","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"        if (!clientsAreUnique(clients)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"            throw new DuplicateClientException();","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-21"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"        internalList.setAll(clients);","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-09-01"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2017-09-01"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-09-01"},{"lineNumber":103,"author":{"gitId":"anunayajoshi"},"content":"    public ObservableList\u003cClient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2018-12-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":107,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"tituswe"},"content":"     * Returns the size of the internal list","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"tituswe"},"content":"     * @return size","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"tituswe"},"content":"    public int size() {","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"        return internalList.size();","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":117,"author":{"gitId":"anunayajoshi"},"content":"    public Iterator\u003cClient\u003e iterator() {","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        return internalList.iterator();","lastModifiedDate":"2016-08-24"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"anunayajoshi"},"content":"                || (other instanceof UniqueClientList // instanceof handles nulls","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 internalList.equals(((UniqueClientList) other).internalList));","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        return internalList.hashCode();","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":134,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if {@code clients} contains only unique clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":136,"author":{"gitId":"anunayajoshi"},"content":"    private boolean clientsAreUnique(List\u003cClient\u003e clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"        for (int i \u003d 0; i \u003c clients.size() - 1; i++) {","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"            for (int j \u003d i + 1; j \u003c clients.size(); j++) {","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"                if (clients.get(i).isSameClient(clients.get(j))) {","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"                    return false;","lastModifiedDate":"2018-04-19"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                }","lastModifiedDate":"2018-04-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-04-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-19"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"tituswe":10,"anunayajoshi":48,"-":88}},{"path":"src/main/java/seedu/address/model/client/exceptions/ClientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":" * Signals that the operation is unable to find the specified client.","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"public class ClientNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"anunayajoshi":6}},{"path":"src/main/java/seedu/address/model/client/exceptions/DuplicateClientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client.exceptions;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2018-04-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * identity).","lastModifiedDate":"2018-04-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"public class DuplicateClientException extends RuntimeException {","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"    public DuplicateClientException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"        super(\"Operation would result in duplicate persons\");","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"anunayajoshi":3,"-":8}},{"path":"src/main/java/seedu/address/model/client/exceptions/DuplicatePolicyException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":" * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":" * identity).","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"public class DuplicatePolicyException extends RuntimeException {","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"    public DuplicatePolicyException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"        super(\"Operation would result in duplicate policies\");","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":11}},{"path":"src/main/java/seedu/address/model/client/exceptions/PolicyNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.exceptions;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":" * Signals that the operation is unable to find the specified person.","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"public class PolicyNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":6}},{"path":"src/main/java/seedu/address/model/client/policy/CustomDate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":" * A class that represents a date in the format of dd.mm.yyyy.","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"public class CustomDate {","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"            \"date should only contain numbers, in the format of dd.mm.yyyy\";","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String VALIDATION_REGEX \u003d \"^\\\\d{2}\\\\.\\\\d{2}\\\\.\\\\d{4}$\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    public final LocalDate date;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"     * Constructs a {@code Phone}.","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"     * @param stringDate A valid date.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"    public CustomDate(String stringDate) {","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(stringDate);","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"        checkArgument(isValidDate(stringDate), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        this.date \u003d stringToDate(stringDate);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"     * Converts a string into a LocalDate object.","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"     * String has to be in the format of dd.MM.yyyy.","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"     * @param date String to be converted into LocalDate object.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"     * @return LocalDate object.","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"    public static LocalDate stringToDate(String date) {","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"        DateTimeFormatter sf \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"        LocalDate localDate \u003d LocalDate.from(sf.parse(date));","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"        return localDate;","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if a given string is a valid phone number.","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"    public static boolean isValidDate(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"        DateTimeFormatter outputFormat \u003d DateTimeFormatter.ofPattern(\"dd.MM.yyyy\");","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        return outputFormat.format(date);","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"                || (other instanceof CustomDate // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 date.equals(((CustomDate) other).date)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"        return date.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":67,"pangrwa":2}},{"path":"src/main/java/seedu/address/model/client/policy/Frequency.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":" * Represents the frequency of an insurance policy.","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":" * Frequency can only take on any of the 3 values: \"weekly\", \"monthly\", \"yearly\", and it should not be blank.","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"public class Frequency {","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Frequency can only take on any of the 3 values, \"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"            + \"\\\"weekly\\\", \\\"monthly\\\", \\\"yearly\\\", and it should not be blank\";","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"     * The first character of the frequency must not be a whitespace,","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public static final String[] VALIDATION_REGEX \u003d {\"monthly\", \"weekly\", \"yearly\"};","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    public final String frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"     * Constructs an {@code Frequency}.","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"     * @param freq A valid frequency.","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"    public Frequency(String freq) {","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(freq);","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"        checkArgument(isValidFrequency(freq), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"        this.frequency \u003d freq;","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if a given string is a valid frequency.","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"    public static boolean isValidFrequency(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"        return Arrays.asList(VALIDATION_REGEX).contains(test);","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"        return frequency.toString();","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"                || (other instanceof Frequency // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 frequency.equals(((Frequency) other).frequency)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"        return frequency.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":60,"pangrwa":1}},{"path":"src/main/java/seedu/address/model/client/policy/Policy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":" * Represents an insurance policy that contains its name, start date, premium, frequency, and tags.","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":" * A policy object is immutable, and all fields must be present and not null.","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"public class Policy {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"    // fields","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    private final PolicyName policyName;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private final CustomDate startDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    private final Premium premium;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"    private final Frequency frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    public Policy(PolicyName policyName, CustomDate startDate, Premium premium, Frequency frequency) {","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"        requireAllNonNull(policyName, startDate, premium, frequency);","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"        this.policyName \u003d policyName;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        this.premium \u003d premium;","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"        this.frequency \u003d frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyName getPolicyName() {","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        return policyName;","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"    public CustomDate getStartDate() {","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        return startDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"    public Premium getPremium() {","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"        return premium;","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    public Frequency getFrequency() {","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"        return frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if both policies have the same policy name.","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"     * This defines a weaker notion of equality between two policies.","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean isSamePolicy(Policy otherPolicy) {","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"        if (otherPolicy \u003d\u003d this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"            return true;","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"        return otherPolicy !\u003d null","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 otherPolicy.getPolicyName().equals(getPolicyName());","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if both policies have the same identity and data fields.","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"     * This defines a stronger notion of equality between two policies.","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YZmunchmunch"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"            return true;","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YZmunchmunch"},"content":"        if (!(other instanceof Policy)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"YZmunchmunch"},"content":"            return false;","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YZmunchmunch"},"content":"        Policy otherPolicy \u003d (Policy) other;","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YZmunchmunch"},"content":"        return otherPolicy.getPolicyName().equals(getPolicyName())","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 otherPolicy.getStartDate().equals(getStartDate())","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 otherPolicy.getPremium().equals(getPremium())","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 otherPolicy.getFrequency().equals(getFrequency());","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"YZmunchmunch"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"        return Objects.hash(policyName, startDate, premium, frequency);","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"YZmunchmunch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"YZmunchmunch"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"YZmunchmunch"},"content":"        builder.append(getPolicyName())","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"YZmunchmunch"},"content":"                .append(\"; Start Date: \")","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"                .append(getStartDate())","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"YZmunchmunch"},"content":"                .append(\"; Premium: \")","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"                .append(getPremium())","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"                .append(\"; Frequency: \")","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"                .append(getFrequency())","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"                .append(\"; \");","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"YZmunchmunch"},"content":"        return builder.toString();","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":85,"pangrwa":11,"anunayajoshi":3}},{"path":"src/main/java/seedu/address/model/client/policy/PolicyName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":" * Represents the name of a policy.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"public class PolicyName {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"            \"Policy names should only contain alphanumeric characters and spaces, and it should not be blank\";","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"     * The first character of the address must not be a whitespace,","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"    public final String policyName;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"     * Constructs a {@code Policy Name}.","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"     * @param name A valid policy name.","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyName(String name) {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"        policyName \u003d name;","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if a given string is a valid policy name.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"        return policyName;","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"                || (other instanceof PolicyName // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 policyName.equals(((PolicyName) other).policyName)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"        return policyName.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":58}},{"path":"src/main/java/seedu/address/model/client/policy/Premium.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":" * Represents a premium of a policy. A premium should only contain numbers and can be either an integer or a double.","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":" * Provides methods to check if a given string is a valid premium amount and to construct a premium object","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":" * from a valid string.","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"public class Premium {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"            \"Premiums should only contain numbers, it can be either integer, or a double\";","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String VALIDATION_REGEX \u003d \"\\\\d{1,}.*..*\\\\d{0,}\";","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    public final String value;","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"     * Constructs a {@code Premium}.","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"     * @param amount A valid premium amount.","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    public Premium(String amount) {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(amount);","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"        checkArgument(isValidPremium(amount), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        value \u003d amount;","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if a given string is a valid premium amount","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    public static boolean isValidPremium(String test) {","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"    public String toString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"        return value;","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"                || (other instanceof Premium // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 value.equals(((Premium) other).value)); // state check","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":52}},{"path":"src/main/java/seedu/address/model/client/policy/UniquePolicyList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.List;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.exceptions.DuplicatePolicyException;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.exceptions.PolicyNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":" * Represents a list of policies that enforces no two policies in the list have the same identity.","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":" * A policy is considered the same as another policy in the list if they have the same identity.","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":" * Identity is defined by {@code Policy#isSamePolicy(Policy)}.","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":" *","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":" * @see Policy#isSamePolicy(Policy)","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"public class UniquePolicyList implements Iterable\u003cPolicy\u003e {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"    private final ObservableList\u003cPolicy\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"    private final ObservableList\u003cPolicy\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"     * Returns true if {@code persons} contains only unique persons.","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    static boolean policiesAreUnique(List\u003cPolicy\u003e policies) {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"        for (int i \u003d 0; i \u003c policies.size() - 1; i++) {","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"            for (int j \u003d i + 1; j \u003c policies.size(); j++) {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"                if (policies.get(i).isSamePolicy(policies.get(j))) {","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"                    return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"                }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"        return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns true if the list contains an equivalent policy as the given argument.","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean contains(Policy toCheck) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePolicy);","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"     * Adds a policy to the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"     * The policy must not already exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"    public void add(Policy toAdd) {","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"     * Returns true if the list is empty.","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"     * @return true if the list is empty.","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"anunayajoshi"},"content":"        return internalList.isEmpty();","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YZmunchmunch"},"content":"     * Replaces the policy {@code target} in the list with {@code editedPolicy}.","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"YZmunchmunch"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"YZmunchmunch"},"content":"     * The policy identity of {@code editedPolicy} must not be the same as another existing policy in the list.","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YZmunchmunch"},"content":"    public void setPolicy(Policy target, Policy editedPolicy) {","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"YZmunchmunch"},"content":"        requireAllNonNull(target, editedPolicy);","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YZmunchmunch"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"YZmunchmunch"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"YZmunchmunch"},"content":"            throw new PolicyNotFoundException();","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"YZmunchmunch"},"content":"        if (!target.isSamePolicy(editedPolicy) \u0026\u0026 contains(editedPolicy)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"YZmunchmunch"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"YZmunchmunch"},"content":"        internalList.set(index, editedPolicy);","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"YZmunchmunch"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"YZmunchmunch"},"content":"    public void setPolicies(UniquePolicyList replacement) {","lastModifiedDate":"2023-03-10"},{"lineNumber":95,"author":{"gitId":"YZmunchmunch"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-10"},{"lineNumber":96,"author":{"gitId":"YZmunchmunch"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":98,"author":{"gitId":"YZmunchmunch"},"content":"    */","lastModifiedDate":"2023-03-10"},{"lineNumber":99,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":101,"author":{"gitId":"YZmunchmunch"},"content":"    /*","lastModifiedDate":"2023-03-10"},{"lineNumber":102,"author":{"gitId":"YZmunchmunch"},"content":"     * Replaces the contents of this list with {@code persons}.","lastModifiedDate":"2023-03-10"},{"lineNumber":103,"author":{"gitId":"YZmunchmunch"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2023-03-10"},{"lineNumber":104,"author":{"gitId":"YZmunchmunch"},"content":"     *","lastModifiedDate":"2023-03-10"},{"lineNumber":105,"author":{"gitId":"YZmunchmunch"},"content":"    public void setPolicies(List\u003cPolicy\u003e policies) {","lastModifiedDate":"2023-03-10"},{"lineNumber":106,"author":{"gitId":"YZmunchmunch"},"content":"        requireAllNonNull(policies);","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"YZmunchmunch"},"content":"        if (!policiesAreUnique(policies)) {","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"YZmunchmunch"},"content":"            throw new DuplicatePolicyException();","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"YZmunchmunch"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"YZmunchmunch"},"content":"        internalList.setAll(policies);","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"YZmunchmunch"},"content":"    */","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"tituswe"},"content":"     * Removes the equivalent person from the list.","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"tituswe"},"content":"     * The person must exist in the list.","lastModifiedDate":"2023-03-13"},{"lineNumber":117,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"tituswe"},"content":"    public void remove(Policy toRemove) {","lastModifiedDate":"2023-03-13"},{"lineNumber":119,"author":{"gitId":"tituswe"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-13"},{"lineNumber":120,"author":{"gitId":"tituswe"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":121,"author":{"gitId":"tituswe"},"content":"            throw new PolicyNotFoundException();","lastModifiedDate":"2023-03-13"},{"lineNumber":122,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":126,"author":{"gitId":"YZmunchmunch"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"YZmunchmunch"},"content":"    public ObservableList\u003cPolicy\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-10"},{"lineNumber":129,"author":{"gitId":"YZmunchmunch"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-10"},{"lineNumber":130,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":131,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":132,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":133,"author":{"gitId":"YZmunchmunch"},"content":"    public Iterator\u003cPolicy\u003e iterator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":134,"author":{"gitId":"YZmunchmunch"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-10"},{"lineNumber":135,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":136,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":137,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":138,"author":{"gitId":"YZmunchmunch"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-10"},{"lineNumber":139,"author":{"gitId":"YZmunchmunch"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-10"},{"lineNumber":140,"author":{"gitId":"YZmunchmunch"},"content":"                || (other instanceof UniquePolicyList // instanceof handles nulls","lastModifiedDate":"2023-03-10"},{"lineNumber":141,"author":{"gitId":"YZmunchmunch"},"content":"                \u0026\u0026 internalList.equals(((UniquePolicyList) other).internalList));","lastModifiedDate":"2023-03-10"},{"lineNumber":142,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":144,"author":{"gitId":"YZmunchmunch"},"content":"    @Override","lastModifiedDate":"2023-03-10"},{"lineNumber":145,"author":{"gitId":"YZmunchmunch"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":146,"author":{"gitId":"YZmunchmunch"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-10"},{"lineNumber":147,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":148,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"tituswe":28,"YZmunchmunch":112,"anunayajoshi":8}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model.util;","lastModifiedDate":"2016-12-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-03-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2016-12-20"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-03-14"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Contains utility methods for populating {@code AddressBook} with sample data.","lastModifiedDate":"2017-08-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"    public static Client[] getSampleClients() {","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"        return new Client[] {","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Geylang Street 29, #06-40\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"friends\"), new UniquePolicyList()),","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"colleagues\", \"friends\"), new UniquePolicyList()),","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"neighbours\"), new UniquePolicyList()),","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"family\"), new UniquePolicyList()),","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                new Address(\"Blk 47 Tampines Street 20, #17-35\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"classmates\"), new UniquePolicyList()),","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"            new Client(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),","lastModifiedDate":"2016-12-20"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"                getTagSet(\"colleagues\"), new UniquePolicyList())","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static ReadOnlyAddressBook getSampleAddressBook() {","lastModifiedDate":"2016-12-20"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        AddressBook sampleAb \u003d new AddressBook();","lastModifiedDate":"2017-04-07"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        for (Client sampleClient : getSampleClients()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"            sampleAb.addClient(sampleClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Returns a tag set containing the list of strings given.","lastModifiedDate":"2017-03-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-14"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        return Arrays.stream(strings)","lastModifiedDate":"2018-01-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .map(Tag::new)","lastModifiedDate":"2018-01-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                .collect(Collectors.toSet());","lastModifiedDate":"2018-01-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"anunayajoshi":15,"pangrwa":7,"-":39}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedClient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import java.util.stream.StreamSupport;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":" * Jackson-friendly version of {@link Client}.","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"class JsonAdaptedClient {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Client\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final String phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private final String email;","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private final String address;","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    private final List\u003cJsonAdaptedPolicy\u003e policies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"     * Constructs a {@code JsonAdaptedClient} with the given client details.","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"    public JsonAdaptedClient(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                             @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"            @JsonProperty(\"policies\") List\u003cJsonAdaptedPolicy\u003e policies) {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        this.phone \u003d phone;","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.email \u003d email;","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this.address \u003d address;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (tagged !\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            this.tagged.addAll(tagged);","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"        if (policies !\u003d null) {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"            this.policies.addAll(policies);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"     * Converts a given {@code Client} into this class for Jackson use.","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"    public JsonAdaptedClient(Client source) {","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        phone \u003d source.getPhone().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        email \u003d source.getEmail().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        address \u003d source.getAddress().value;","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        tagged.addAll(source.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        policies.addAll(StreamSupport.stream(source.getPolicyList().spliterator(), false)","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"                .map(JsonAdaptedPolicy::new)","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"                .collect(Collectors.toList())); // is it considered breaking Law of Demeter?","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"     * Converts this Jackson-friendly adapted client object into the model\u0027s {@code Client} object.","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted client.","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"    public Client toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"        final List\u003cTag\u003e clientTags \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        for (JsonAdaptedTag tag : tagged) {","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"            clientTags.add(tag.toModelType());","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"        final ArrayList\u003cPolicy\u003e personPolicies \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"        for (JsonAdaptedPolicy policy : policies) {","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"            personPolicies.add(policy.toModelType());","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        if (phone \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(phone)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        final Phone modelPhone \u003d new Phone(phone);","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (email \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(email)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        final Email modelEmail \u003d new Email(email);","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        if (address \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(address)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Address modelAddress \u003d new Address(address);","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"anunayajoshi"},"content":"        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(clientTags);","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":124,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"pangrwa"},"content":"        final UniquePolicyList modelPolicies \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":126,"author":{"gitId":"pangrwa"},"content":"        for (Policy policy : personPolicies) {","lastModifiedDate":"2023-03-13"},{"lineNumber":127,"author":{"gitId":"pangrwa"},"content":"            modelPolicies.add(policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":128,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"pangrwa"},"content":"        return new Client(modelName, modelPhone, modelEmail, modelAddress, modelTags, modelPolicies);","lastModifiedDate":"2023-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"pangrwa":24,"anunayajoshi":18,"-":91}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedPolicy.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.CustomDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Frequency;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.PolicyName;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Premium;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"/**","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":" * Jackson-friendly version of {@Link Policy}","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":" */","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"public class JsonAdaptedPolicy {","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Policy\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-14"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private final String policyName;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private final String startDate;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private final String premium;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private final String frequency;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"     * Constructs a {@code JsonAdaptedPolicy} with the given policy details.","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"     * @param policyName The name of the policy.","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"     * @param startDate The starting date of the policy.","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"     * @param premium The value of the policy.","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"     * @param frequency The duration of the policy.","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"    public JsonAdaptedPolicy(@JsonProperty(\"policyName\") String policyName, @JsonProperty(\"startDate\") String startDate,","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                             @JsonProperty(\"premium\") String premium, @JsonProperty(\"frequency\") String frequency) {","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"        this.policyName \u003d policyName;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        this.premium \u003d premium;","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"        this.frequency \u003d frequency;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"     * Coverts a given {@code Policy} into this class for Jackson use.","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"     * @param source The policy that we are interested in.","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    public JsonAdaptedPolicy(Policy source) {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        policyName \u003d source.getPolicyName().toString(); // does this break Law of Demeter?","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        startDate \u003d source.getStartDate().toString();","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"        premium \u003d source.getPremium().toString();","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        frequency \u003d source.getFrequency().toString();","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    /*","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"     need tell yuze to make all the new classes to support constructor","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"     that takes in strings because i need convert from json to there","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"    /* Need to see how this works ... based on tracing tag, this seems to get","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"    * called only when you update it? that is from object-\u003eJson","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"    */","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    /*","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"    @JsonValue","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    public String getPolicy() {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"        String policy \u003d policyName + \", \"","lastModifiedDate":"2023-03-14"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        StringBuilder policy \u003d new StringBuilder(\"[\");","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"        policy.append(policyName);","lastModifiedDate":"2023-03-14"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        policy.append(\", \");","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        policy.append(startDate);","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        policy.append(\", \");","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"        policy.append(premium);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        policy.append(\", \");","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"        policy.append(frequency);","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        /* how to better add tags here ?\"","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"        policy.append(\"]\");","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        return policy.toString();","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"    } */","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"     * Converts this Jackson-friendly adapted policy object into the model\u0027s {@code Policy} object.","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted policy.","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"    public Policy toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"        if (policyName \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"                    PolicyName.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"        if (!PolicyName.isValidName(policyName)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(PolicyName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"        final PolicyName modelPolicyName \u003d new PolicyName(policyName);","lastModifiedDate":"2023-03-14"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"                    CustomDate.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"        if (!CustomDate.isValidDate(startDate)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(CustomDate.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        final CustomDate modelStartDate \u003d new CustomDate(startDate);","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"        if (premium \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"                    Premium.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"        if (!Premium.isValidPremium(premium)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(Premium.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"pangrwa"},"content":"        final Premium modelPremium \u003d new Premium(premium);","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"pangrwa"},"content":"        if (frequency \u003d\u003d null) {","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"pangrwa"},"content":"                    Frequency.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"pangrwa"},"content":"        if (!Frequency.isValidFrequency(frequency)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"pangrwa"},"content":"            throw new IllegalValueException(Frequency.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-13"},{"lineNumber":116,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-06"},{"lineNumber":117,"author":{"gitId":"pangrwa"},"content":"        final Frequency modelFrequency \u003d new Frequency(frequency);","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"pangrwa"},"content":"        return new Policy(modelPolicyName, modelStartDate, modelPremium, modelFrequency);","lastModifiedDate":"2023-03-14"},{"lineNumber":120,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"pangrwa":122}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"    public static final String MESSAGE_DUPLICATE_CLIENT \u003d \"Persons list contains duplicate client(s).\";","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"    private final List\u003cJsonAdaptedClient\u003e clients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"clients\") List\u003cJsonAdaptedClient\u003e clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        this.clients.addAll(clients);","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        clients.addAll(source.getClientList().stream().map(JsonAdaptedClient::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        for (JsonAdaptedClient jsonAdaptedClient : clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"            Client client \u003d jsonAdaptedClient.toModelType();","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"            if (addressBook.hasClient(client)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"            addressBook.addClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"anunayajoshi":11,"-":49}},{"path":"src/main/java/seedu/address/ui/ClientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Comparator;","lastModifiedDate":"2019-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.FlowPane;","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":" * An UI component that displays information of a {@code Client}.","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"public class ClientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    private static final String FXML \u003d \"ClientListCard.fxml\";","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"    public final Client client;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private Label phone;","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private Label address;","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private Label email;","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    private FlowPane tags;","lastModifiedDate":"2016-12-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"     * Creates a {@code ClientCode} with the given {@code Client} and index to display.","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"    public ClientCard(Client client, int displayedIndex) {","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        this.client \u003d client;","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        name.setText(client.getName().fullName);","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        phone.setText(client.getPhone().value);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        address.setText(client.getAddress().value);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        email.setText(client.getEmail().value);","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        client.getTags().stream()","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                .sorted(Comparator.comparing(tag -\u003e tag.tagName))","lastModifiedDate":"2019-01-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));","lastModifiedDate":"2019-01-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        if (!(other instanceof ClientCard)) {","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"        ClientCard card \u003d (ClientCard) other;","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"                \u0026\u0026 client.equals(card.client);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"anunayajoshi":16,"-":61}},{"path":"src/main/java/seedu/address/ui/ClientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":" * Panel containing the list of clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"public class ClientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"    private static final String FXML \u003d \"ClientListPanel.fxml\";","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(ClientListPanel.class);","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"    private ListView\u003cClient\u003e clientListView;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"     * Creates a {@code ClientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public ClientListPanel(ObservableList\u003cClient\u003e clientList) {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"        clientListView.setItems(clientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"        clientListView.setCellFactory(listView -\u003e new ClientListViewCell());","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Client} using a {@code ClientCard}.","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"    class ClientListViewCell extends ListCell\u003cClient\u003e {","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        protected void updateItem(Client client, boolean empty) {","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"            super.updateItem(client, empty);","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"            if (empty || client \u003d\u003d null) {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"                setGraphic(new ClientCard(client, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"anunayajoshi":16,"-":33}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.ui;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2017-06-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.Logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"    private static final String FXML \u003d \"Base.fxml\";","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    private final Stage primaryStage;","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"    private final Logic logic;","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"    private final HelpWindow helpWindow;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"    private ClientListPanel clientListPanel;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"    private Client selectedClient;","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"    private PolicyListPanel policyListPanel;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"    private StackPane clientLabel;","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"    private StackPane clientListPanelPlaceholder;","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"    private StackPane policyListPanelPlaceholder;","lastModifiedDate":"2023-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":105,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":111,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"tituswe"},"content":"        // Populate client list","lastModifiedDate":"2023-03-13"},{"lineNumber":125,"author":{"gitId":"anunayajoshi"},"content":"        clientListPanel \u003d new ClientListPanel(logic.getFilteredClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"tituswe"},"content":"        clientListPanelPlaceholder.getChildren().add(clientListPanel.getRoot());","lastModifiedDate":"2023-03-10"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"tituswe"},"content":"        // Populate client label with first client in client list","lastModifiedDate":"2023-03-13"},{"lineNumber":129,"author":{"gitId":"tituswe"},"content":"        // DEBUG: WILL CAUSE ERROR IF CLIENT LIST IS EMPTY","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":131,"author":{"gitId":"tituswe"},"content":"        // Populate policy list of selected client","lastModifiedDate":"2023-03-13"},{"lineNumber":132,"author":{"gitId":"tituswe"},"content":"        policyListPanel \u003d new PolicyListPanel(logic.getFilteredPolicyList());","lastModifiedDate":"2023-03-13"},{"lineNumber":133,"author":{"gitId":"tituswe"},"content":"        policyListPanelPlaceholder.getChildren().add(policyListPanel.getRoot());","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());","lastModifiedDate":"2019-01-25"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":152,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":157,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":158,"author":{"gitId":"tituswe"},"content":"     * Selects a client based on user input.","lastModifiedDate":"2023-03-10"},{"lineNumber":159,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":160,"author":{"gitId":"tituswe"},"content":"    public void handleSelect(Client targetClient) throws CommandException {","lastModifiedDate":"2023-03-10"},{"lineNumber":161,"author":{"gitId":"tituswe"},"content":"        if (targetClient \u003d\u003d null) {","lastModifiedDate":"2023-03-10"},{"lineNumber":162,"author":{"gitId":"tituswe"},"content":"            throw new CommandException(\"Selection Error: No client selected\");","lastModifiedDate":"2023-03-10"},{"lineNumber":163,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":164,"author":{"gitId":"tituswe"},"content":"        logic.updateSelectedClient(targetClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"tituswe"},"content":"        ClientCard selectedClientCard \u003d new ClientCard(targetClient,","lastModifiedDate":"2023-03-10"},{"lineNumber":166,"author":{"gitId":"tituswe"},"content":"                logic.getFilteredClientList().indexOf(targetClient) + 1);","lastModifiedDate":"2023-03-10"},{"lineNumber":167,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"tituswe"},"content":"        if (clientLabel.getChildren().size() \u003e 0) {","lastModifiedDate":"2023-03-13"},{"lineNumber":169,"author":{"gitId":"tituswe"},"content":"            clientLabel.getChildren().remove(0);","lastModifiedDate":"2023-03-10"},{"lineNumber":170,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":171,"author":{"gitId":"tituswe"},"content":"        clientLabel.getChildren().add(selectedClientCard.getRoot());","lastModifiedDate":"2023-03-10"},{"lineNumber":172,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":173,"author":{"gitId":"tituswe"},"content":"        ObservableList\u003cPolicy\u003e policyList \u003d targetClient.getFilteredPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":174,"author":{"gitId":"tituswe"},"content":"        policyListPanel.updatePolicyList(policyList);","lastModifiedDate":"2023-03-13"},{"lineNumber":175,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":176,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":178,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":182,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":183,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":194,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":195,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":205,"author":{"gitId":"anunayajoshi"},"content":"    public ClientListPanel getClientListPanel() {","lastModifiedDate":"2023-03-06"},{"lineNumber":206,"author":{"gitId":"anunayajoshi"},"content":"        return clientListPanel;","lastModifiedDate":"2023-03-06"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * @see seedu.address.logic.Logic#execute(String)","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":216,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":217,"author":{"gitId":"tituswe"},"content":"            String feedbackToUser \u003d commandResult.getFeedbackToUser();","lastModifiedDate":"2023-03-10"},{"lineNumber":218,"author":{"gitId":"tituswe"},"content":"            Client targetClient \u003d commandResult.getTargetClient();","lastModifiedDate":"2023-03-10"},{"lineNumber":219,"author":{"gitId":"tituswe"},"content":"            logger.info(\"Result: \" + feedbackToUser);","lastModifiedDate":"2023-03-10"},{"lineNumber":220,"author":{"gitId":"tituswe"},"content":"            resultDisplay.setFeedbackToUser(feedbackToUser);","lastModifiedDate":"2023-03-10"},{"lineNumber":221,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":222,"author":{"gitId":"tituswe"},"content":"            if (commandResult.isSelect()) {","lastModifiedDate":"2023-03-10"},{"lineNumber":223,"author":{"gitId":"tituswe"},"content":"                handleSelect(targetClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":224,"author":{"gitId":"tituswe"},"content":"            }","lastModifiedDate":"2023-03-10"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":226,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":227,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":230,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":231,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":232,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":234,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":235,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":236,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":239,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":241,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"tituswe":52,"anunayajoshi":4,"-":185}},{"path":"src/main/java/seedu/address/ui/PolicyCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":" * An UI component that displays information of a {@code Policy}.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"public class PolicyCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"    private static final String FXML \u003d \"PolicyListCard.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX.","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"    public final Policy policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"    @javafx.fxml.FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"    private Label name;","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    private Label id;","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    private Label startdate;","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"    private Label premium;","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"    private Label frequency;","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"     * Creates a {@code PolicyCode} with the given {@code Policy} and index to display.","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"    public PolicyCard(Policy policy, int displayedIndex) {","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"        this.policy \u003d policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"        name.setText(policy.getPolicyName().policyName);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"        startdate.setText(policy.getStartDate().toString());","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"        premium.setText(policy.getPremium().value);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"        frequency.setText(policy.getFrequency().frequency);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"    @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"            return true;","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"tituswe"},"content":"        if (!(other instanceof PolicyCard)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"tituswe"},"content":"            return false;","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"tituswe"},"content":"        // state check","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"tituswe"},"content":"        PolicyCard card \u003d (PolicyCard) other;","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"tituswe"},"content":"        return id.getText().equals(card.id.getText())","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"tituswe"},"content":"                \u0026\u0026 policy.equals(card.policy);","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"tituswe":69}},{"path":"src/main/java/seedu/address/ui/PolicyListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.ui;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":" * Panel containing the list of clients.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"public class PolicyListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"    private static final String FXML \u003d \"PolicyListPanel.fxml\";","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(PolicyListPanel.class);","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"    @FXML","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"    private ListView\u003cPolicy\u003e policyListView;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"     * Creates a {@code PolicyListPanel} with the given {@code ObservableList}","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"    public PolicyListPanel(ObservableList\u003cPolicy\u003e policyList) {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"        super(FXML);","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"        policyListView.setItems(policyList);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"        policyListView.setCellFactory(listView -\u003e new PolicyListViewCell());","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"     * Updates a {@code PolicyListPanel} with the given {@code ObservableList}","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"    public void updatePolicyList(ObservableList\u003cPolicy\u003e policyList) {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"        policyListView.setItems(policyList);","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"        policyListView.setCellFactory(listView -\u003e new PolicyListViewCell());","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Policy} using a {@code PolicyCard}","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"    class PolicyListViewCell extends ListCell\u003cPolicy\u003e {","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"        protected void updateItem(Policy policy, boolean empty) {","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"            super.updateItem(policy, empty);","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"            if (empty || policy \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"                setText(null);","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"            } else {","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"                setGraphic(new PolicyCard(policy, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"            }","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"tituswe":56}},{"path":"src/main/resources/view/Base.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" minHeight\u003d\"600.0\" minWidth\u003d\"450.0\" title\u003d\"Address App\" type\u003d\"Stage\"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"         xmlns\u003d\"http://javafx.com/javafx/19\"\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"    \u003cscene\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"        \u003cScene\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"                \u003cchildren\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"                    \u003cMenuBar fx:id\u003d\"menuBar\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"                        \u003cmenus\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"                            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"                                \u003citems\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"                                    \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"                                \u003c/items\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"                            \u003c/Menu\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"                            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"                                \u003citems\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"                                    \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"                                              text\u003d\"Help\"/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"                                \u003c/items\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"                            \u003c/Menu\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"                        \u003c/menus\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"                    \u003c/MenuBar\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"                    \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"                            \u003cVBox fx:id\u003d\"clientList\" maxWidth\u003d\"440.0\" minWidth\u003d\"440.0\" prefWidth\u003d\"440.0\"\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"                                \u003cchildren\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"                                    \u003cStackPane fx:id\u003d\"clientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"                                \u003c/children\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"                            \u003c/VBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"                            \u003cVBox fx:id\u003d\"policyList\" HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"                                \u003cchildren\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"                                    \u003cStackPane fx:id\u003d\"clientLabel\"/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"                                    \u003cStackPane fx:id\u003d\"policyListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"                                \u003c/children\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"                            \u003c/VBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"                    \u003c/HBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"                    \u003cVBox prefWidth\u003d\"340.0\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"                        \u003cchildren\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\"/\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"160.0\" minHeight\u003d\"160.0\"","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"                                       prefHeight\u003d\"160.0\"/\u003e","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"                            \u003cStackPane fx:id\u003d\"statusbarPlaceholder\"/\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"                        \u003c/children\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"                    \u003c/VBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"                \u003c/children\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"            \u003c/VBox\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        \u003c/Scene\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"    \u003c/scene\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"tituswe"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-03-06"}],"authorContributionMap":{"tituswe":60}},{"path":"src/main/resources/view/ClientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"  \u003cListView fx:id\u003d\"clientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anunayajoshi":1,"-":7}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.stage.Stage?\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e","lastModifiedDate":"2016-08-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"                             \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"                                   \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"                                   \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        \u003cVBox fx:id\u003d\"clientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2017-06-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                                   \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"tituswe":11,"anunayajoshi":1,"-":50}},{"path":"src/main/resources/view/PolicyListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/19\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"        \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"        \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"                    \u003cminWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"                        \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"                    \u003c/minWidth\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"                \u003c/Label\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"                \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"            \u003c/HBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"            \u003cLabel fx:id\u003d\"startdate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startdate\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"            \u003cLabel fx:id\u003d\"premium\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$premium\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"            \u003cLabel fx:id\u003d\"frequency\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$frequency\" /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"      \u003crowConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"         \u003cRowConstraints /\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"      \u003c/rowConstraints\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"    \u003c/GridPane\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"tituswe":38}},{"path":"src/main/resources/view/PolicyListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"\u003cVBox xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/8\"\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"    \u003cListView fx:id\u003d\"policyListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"tituswe":8}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.commons.core.index;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        final Index fifthClientIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(fifthClientIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(fifthClientIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(fifthClientIndex.equals(fifthClientIndex));","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(fifthClientIndex.equals(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(fifthClientIndex.equals(5.0f));","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(fifthClientIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"anunayajoshi":7,"-":53}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.CommandResult;","lastModifiedDate":"2017-01-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2016-09-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-31"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonAddressBookStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.storage.StorageManager;","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);","lastModifiedDate":"2017-06-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2019-04-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d","lastModifiedDate":"2019-04-25"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        // Execute add command","lastModifiedDate":"2018-12-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_AMY;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.addClient(expectedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredClientList().remove(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":96,"author":{"gitId":"tituswe"},"content":"    void getFilteredPolicyList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":97,"author":{"gitId":"tituswe"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e logic.getFilteredPolicyList().remove(0));","lastModifiedDate":"2023-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":100,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"tituswe"},"content":"    void updateSelectedClient_modify_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"tituswe"},"content":"        Client targetClient \u003d new ClientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"tituswe"},"content":"        logic.updateSelectedClient(targetClient);","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"tituswe"},"content":"        assertTrue(true);","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":111,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":112,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                      Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":125,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct.","lastModifiedDate":"2017-06-14"},{"lineNumber":134,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct.","lastModifiedDate":"2017-03-11"},{"lineNumber":143,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                                      String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-05-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":"     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":157,"author":{"gitId":"tituswe"},"content":"     *","lastModifiedDate":"2023-03-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":161,"author":{"gitId":"-"},"content":"                                      String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":168,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {","lastModifiedDate":"2018-12-09"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"tituswe":18,"anunayajoshi":9,"-":152}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-15"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_newClient_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"        Client validClient \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(AddCommand.MESSAGE_SUCCESS, validClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.addClient(validClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(new AddCommand(validClient), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_duplicateClient_throwsCommandException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"        Client clientInList \u003d model.getAddressBook().getClientList().get(0);","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(new AddCommand(clientInList), model, AddCommand.MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"tituswe":2,"anunayajoshi":9,"-":34}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"    public void constructor_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_clientAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        ModelStubAcceptingClientAdded modelStub \u003d new ModelStubAcceptingClientAdded();","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        Client validClient \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        CommandResult commandResult \u003d new AddCommand(validClient).execute(modelStub);","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validClient), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"        assertEquals(Collections.singletonList(validClient), modelStub.clientsAdded);","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_duplicateClient_throwsCommandException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        Client validClient \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"        AddCommand addCommand \u003d new AddCommand(validClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        ModelStub modelStub \u003d new ModelStubWithClient(validClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_CLIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        Client alice \u003d new ClientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        Client bob \u003d new ClientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"tituswe"},"content":"        assertEquals(addAliceCommand, addAliceCommand);","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"tituswe"},"content":"        assertEquals(addAliceCommand, addAliceCommandCopy);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(1, addAliceCommand);","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, addAliceCommand);","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(addAliceCommand, addBobCommand);","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":82,"author":{"gitId":"tituswe"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"tituswe"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":112,"author":{"gitId":"anunayajoshi"},"content":"        public void addClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"tituswe"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-03-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"        public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":132,"author":{"gitId":"anunayajoshi"},"content":"        public void deleteClient(Client target) {","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"        public void setClient(Client target, Client editedClient) {","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"anunayajoshi"},"content":"        public ObservableList\u003cClient\u003e getFilteredClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"tituswe"},"content":"        public ObservableList\u003cPolicy\u003e getFilteredPolicyList() {","lastModifiedDate":"2023-03-13"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2023-03-13"},{"lineNumber":152,"author":{"gitId":"tituswe"},"content":"        public void updateSelectedClient(Client targetClient) {","lastModifiedDate":"2023-03-13"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-13"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"anunayajoshi"},"content":"        public void updateFilteredClientList(Predicate\u003cClient\u003e predicate) {","lastModifiedDate":"2023-03-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":160,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":161,"author":{"gitId":"adam07018"},"content":"        //todo","lastModifiedDate":"2023-03-01"},{"lineNumber":162,"author":{"gitId":"adam07018"},"content":"        @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":163,"author":{"gitId":"adam07018"},"content":"        public void commit() {","lastModifiedDate":"2023-03-01"},{"lineNumber":164,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":165,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":166,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":167,"author":{"gitId":"adam07018"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":168,"author":{"gitId":"adam07018"},"content":"        public boolean canUndo() {","lastModifiedDate":"2023-03-07"},{"lineNumber":169,"author":{"gitId":"adam07018"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":170,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":171,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":172,"author":{"gitId":"adam07018"},"content":"        //todo","lastModifiedDate":"2023-03-01"},{"lineNumber":173,"author":{"gitId":"adam07018"},"content":"        @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":174,"author":{"gitId":"adam07018"},"content":"        public void undo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":175,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":176,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":177,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":178,"author":{"gitId":"adam07018"},"content":"        @Override","lastModifiedDate":"2023-03-07"},{"lineNumber":179,"author":{"gitId":"adam07018"},"content":"        public boolean canRedo() {","lastModifiedDate":"2023-03-07"},{"lineNumber":180,"author":{"gitId":"adam07018"},"content":"            return false;","lastModifiedDate":"2023-03-07"},{"lineNumber":181,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-07"},{"lineNumber":182,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-07"},{"lineNumber":183,"author":{"gitId":"adam07018"},"content":"        //todo","lastModifiedDate":"2023-03-01"},{"lineNumber":184,"author":{"gitId":"adam07018"},"content":"        @Override","lastModifiedDate":"2023-03-01"},{"lineNumber":185,"author":{"gitId":"adam07018"},"content":"        public void redo() {","lastModifiedDate":"2023-03-01"},{"lineNumber":186,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":187,"author":{"gitId":"adam07018"},"content":"        }","lastModifiedDate":"2023-03-01"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":191,"author":{"gitId":"anunayajoshi"},"content":"     * A Model stub that contains a single client.","lastModifiedDate":"2023-03-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":193,"author":{"gitId":"anunayajoshi"},"content":"    private class ModelStubWithClient extends ModelStub {","lastModifiedDate":"2023-03-06"},{"lineNumber":194,"author":{"gitId":"anunayajoshi"},"content":"        private final Client client;","lastModifiedDate":"2023-03-06"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":196,"author":{"gitId":"anunayajoshi"},"content":"        ModelStubWithClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":197,"author":{"gitId":"anunayajoshi"},"content":"            requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":198,"author":{"gitId":"anunayajoshi"},"content":"            this.client \u003d client;","lastModifiedDate":"2023-03-06"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"anunayajoshi"},"content":"        public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":203,"author":{"gitId":"anunayajoshi"},"content":"            requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":204,"author":{"gitId":"anunayajoshi"},"content":"            return this.client.isSameClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":208,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"anunayajoshi"},"content":"     * A Model stub that always accept the client being added.","lastModifiedDate":"2023-03-06"},{"lineNumber":210,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":211,"author":{"gitId":"anunayajoshi"},"content":"    private class ModelStubAcceptingClientAdded extends ModelStub {","lastModifiedDate":"2023-03-06"},{"lineNumber":212,"author":{"gitId":"anunayajoshi"},"content":"        final ArrayList\u003cClient\u003e clientsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-06"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":215,"author":{"gitId":"anunayajoshi"},"content":"        public boolean hasClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":216,"author":{"gitId":"anunayajoshi"},"content":"            requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":217,"author":{"gitId":"anunayajoshi"},"content":"            return clientsAdded.stream().anyMatch(client::isSameClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":218,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":221,"author":{"gitId":"anunayajoshi"},"content":"        public void addClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":222,"author":{"gitId":"anunayajoshi"},"content":"            requireNonNull(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":223,"author":{"gitId":"anunayajoshi"},"content":"            clientsAdded.add(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":227,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":228,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":230,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":232,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"tituswe":14,"anunayajoshi":40,"-":150,"adam07018":28}},{"path":"src/test/java/seedu/address/logic/commands/AddPolicyCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalPolicies.HEALTH;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.PolicyBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"class AddPolicyCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"    private static final Policy POLICY_STUB \u003d new PolicyBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_addPolicyUnfilteredList_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToAddPolicy \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"        AddPolicyCommand addPolicyCommand \u003d new AddPolicyCommand(INDEX_FIRST_CLIENT, POLICY_STUB);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"        clientToAddPolicy.getPolicyList().add(POLICY_STUB);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"        model.setClient(clientToAddPolicy, clientToAddPolicy);","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        UniquePolicyList clientPolicyList \u003d clientToAddPolicy.getPolicyList();","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(clientPolicyList.isEmpty());","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"    public void equals() {","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        final AddPolicyCommand standardCommand \u003d new AddPolicyCommand(INDEX_FIRST_CLIENT, POLICY_STUB);","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        AddPolicyCommand commandWithSameValues \u003d new AddPolicyCommand(INDEX_FIRST_CLIENT, POLICY_STUB);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(standardCommand.equals(new AddPolicyCommand(INDEX_SECOND_CLIENT, POLICY_STUB)));","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        // different policy name -\u003e returns false","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(standardCommand.equals(new AddPolicyCommand(INDEX_FIRST_CLIENT, HEALTH)));","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"anunayajoshi":57}},{"path":"src/test/java/seedu/address/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ClearCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_emptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void execute_nonEmptyAddressBook_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        expectedModel.setAddressBook(new AddressBook());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"anunayajoshi":1,"-":31}},{"path":"src/test/java/seedu/address/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2018-12-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"    private final CommandResult commandResult \u003d new CommandResult(AddCommand.MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"    void getFeedbackToUser() {","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"        assertEquals(commandResult.getFeedbackToUser(), AddCommand.MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"    void getTargetClient() {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"        assertNull(commandResult.getTargetClient());","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"    void isSelect() {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"        assertFalse(commandResult.isSelect());","lastModifiedDate":"2023-03-11"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"    void isShowHelp() {","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"        assertFalse(commandResult.isShowHelp());","lastModifiedDate":"2023-03-11"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"    void isExit() {","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"        assertFalse(commandResult.isExit());","lastModifiedDate":"2023-03-11"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"    void testEquals() {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"        assertEquals(commandResult, new CommandResult(\"feedback\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"        assertEquals(commandResult, new CommandResult(\"feedback\", false, false, false));","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"        assertEquals(commandResult, commandResult);","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, commandResult);","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult, 0.0);","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult, new CommandResult(\"different\"));","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        // different select value -\u003e  returns false","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\", true, false, false));","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\", false, true, false));","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult, new CommandResult(\"feedback\", false, false, true));","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"tituswe"},"content":"    void testHashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"tituswe"},"content":"        // different select value -\u003e returns different hashcode","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, true).hashCode());","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"tituswe":45,"-":42}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_FREQUENCY;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_NAME;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_PREMIUM;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_POLICY_START_DATE;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_NAME_AMY \u003d \"Life Insurance\";","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_NAME_BOB \u003d \"Health Insurance\";","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_DATE_AMY \u003d \"01.01.2020\";","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_DATE_BOB \u003d \"03.03.2023\";","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_PREMIUM_AMY \u003d \"1000\";","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_PREMIUM_BOB \u003d \"2000\";","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_FREQUENCY_AMY \u003d \"monthly\";","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"    public static final String VALID_POLICY_FREQUENCY_BOB \u003d \"quarterly\";","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_NAME_AMY \u003d \" \" + PREFIX_POLICY_NAME + VALID_POLICY_NAME_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_NAME_BOB \u003d \" \" + PREFIX_POLICY_NAME + VALID_POLICY_NAME_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_DATE_AMY \u003d \" \" + PREFIX_POLICY_START_DATE + VALID_POLICY_DATE_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_DATE_BOB \u003d \" \" + PREFIX_POLICY_START_DATE + VALID_POLICY_DATE_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_PREMIUM_AMY \u003d \" \" + PREFIX_POLICY_PREMIUM + VALID_POLICY_PREMIUM_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_PREMIUM_BOB \u003d \" \" + PREFIX_POLICY_PREMIUM + VALID_POLICY_PREMIUM_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_FREQUENCY_AMY \u003d \" \" + PREFIX_POLICY_FREQUENCY + VALID_POLICY_FREQUENCY_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"    public static final String POLICY_FREQUENCY_BOB \u003d \" \" + PREFIX_POLICY_FREQUENCY + VALID_POLICY_FREQUENCY_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"    public static final EditCommand.EditClientDescriptor DESC_AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"    public static final EditCommand.EditClientDescriptor DESC_BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        DESC_AMY \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        DESC_BOB \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":100,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2023-03-10"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2023-03-10"},{"lineNumber":109,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2023-03-10"},{"lineNumber":111,"author":{"gitId":"tituswe"},"content":"                                            Client targetClient, Model expectedModel) {","lastModifiedDate":"2023-03-10"},{"lineNumber":112,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, targetClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":115,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                                            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":130,"author":{"gitId":"anunayajoshi"},"content":"     * - the address book, filtered client list and selected client in {@code actualModel} remain unchanged","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":136,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":142,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":144,"author":{"gitId":"anunayajoshi"},"content":"     * Updates {@code model}\u0027s filtered list to show only the client at the given {@code targetIndex} in the","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":147,"author":{"gitId":"anunayajoshi"},"content":"    public static void showClientAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2023-03-06"},{"lineNumber":148,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":150,"author":{"gitId":"anunayajoshi"},"content":"        Client client \u003d model.getFilteredClientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":151,"author":{"gitId":"anunayajoshi"},"content":"        final String[] splitName \u003d client.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"tituswe"},"content":"        model.updateFilteredClientList(new NameContainsKeywordsPredicate(Collections.singletonList(splitName[0])));","lastModifiedDate":"2023-03-10"},{"lineNumber":153,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(1, model.getFilteredClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tituswe":8,"anunayajoshi":36,"-":113}},{"path":"src/test/java/seedu/address/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-06-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-05"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS;","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, clientToDelete, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_CLIENT_SUCCESS;","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"        showNoClient(expectedModel);","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":64,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, clientToDelete, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-06-05"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"tituswe"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"tituswe"},"content":"        assertEquals(deleteFirstCommand, deleteFirstCommandCopy);","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(1, deleteFirstCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, deleteFirstCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(deleteFirstCommand, deleteSecondCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"anunayajoshi"},"content":"    private void showNoClient(Model model) {","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"anunayajoshi"},"content":"        model.updateFilteredClientList(p -\u003e false);","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(model.getFilteredClientList().isEmpty());","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"tituswe":12,"anunayajoshi":26,"-":72}},{"path":"src/test/java/seedu/address/logic/commands/EditClientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"public class EditClientDescriptorTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptorWithSameValues \u003d new EditCommand.EditClientDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        editedAmy \u003d new EditClientDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"anunayajoshi":9,"-":49}},{"path":"src/test/java/seedu/address/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2017-05-04"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for EditCommand.","lastModifiedDate":"2020-12-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        Client editedClient \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(editedClient).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"        Client originalClient \u003d model.getFilteredClientList().get(0);","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        String policies \u003d originalClient.toString().split(\"Policies:\")[1];","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient) + \"; Policies:\"","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"                + policies;","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(String.format(expectedMessage, editedClient));","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"        editedClient \u003d new ClientBuilder(editedClient).withPolicyList(originalClient.getPolicyList()).build();","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(String.format(expectedMessage, editedClient));","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastClient, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.setClient(lastClient, editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":76,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, new EditClientDescriptor());","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        Client editedClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":84,"author":{"gitId":"tituswe"},"content":"        String expectedMessage \u003d EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS;","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, editedClient);","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":89,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"    */","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"        Client clientInFilteredList \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"anunayajoshi"},"content":"        Client editedClient \u003d new ClientBuilder(clientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_CLIENT_SUCCESS, editedClient);","lastModifiedDate":"2023-03-15"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":103,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"anunayajoshi"},"content":"                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-03-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(String.format(expectedMessage, editedClient));","lastModifiedDate":"2023-03-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());","lastModifiedDate":"2017-05-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":110,"author":{"gitId":"pangrwa"},"content":"        editedClient \u003d new ClientBuilder(editedClient).withPolicyList(clientInFilteredList.getPolicyList()).build();","lastModifiedDate":"2023-03-15"},{"lineNumber":111,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.setClient(model.getFilteredClientList().get(0), editedClient);","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(editCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":117,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_duplicateClientUnfilteredList_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":118,"author":{"gitId":"anunayajoshi"},"content":"        Client firstClient \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":119,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(firstClient).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_CLIENT, descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":122,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_duplicateClientFilteredList_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":129,"author":{"gitId":"anunayajoshi"},"content":"        // edit client in filtered list into a duplicate in address book","lastModifiedDate":"2023-03-06"},{"lineNumber":130,"author":{"gitId":"anunayajoshi"},"content":"        Client clientInList \u003d model.getAddressBook().getClientList().get(INDEX_SECOND_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":131,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_CLIENT,","lastModifiedDate":"2023-03-06"},{"lineNumber":132,"author":{"gitId":"anunayajoshi"},"content":"                new EditClientDescriptorBuilder(clientInList).build());","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_invalidClientIndexUnfilteredList_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":147,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":148,"author":{"gitId":"-"},"content":"     * but smaller than size of address book","lastModifiedDate":"2017-05-18"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":151,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_invalidClientIndexFilteredList_failure() {","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"anunayajoshi"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list","lastModifiedDate":"2017-05-18"},{"lineNumber":155,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"anunayajoshi"},"content":"                new EditClientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":160,"author":{"gitId":"anunayajoshi"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"anunayajoshi"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_CLIENT, DESC_AMY);","lastModifiedDate":"2023-03-06"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor copyDescriptor \u003d new EditClientDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-06"},{"lineNumber":169,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_CLIENT, copyDescriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":170,"author":{"gitId":"tituswe"},"content":"        assertEquals(standardCommand, commandWithSameValues);","lastModifiedDate":"2023-03-10"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":173,"author":{"gitId":"tituswe"},"content":"        assertEquals(standardCommand, standardCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":176,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, standardCommand);","lastModifiedDate":"2023-03-10"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":179,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(standardCommand, new ClearCommand());","lastModifiedDate":"2023-03-10"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":182,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(standardCommand, new EditCommand(INDEX_SECOND_CLIENT, DESC_AMY));","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":185,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(standardCommand, new EditCommand(INDEX_FIRST_CLIENT, DESC_BOB));","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":188,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"tituswe":15,"anunayajoshi":54,"pangrwa":12,"-":107}},{"path":"src/test/java/seedu/address/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"    private final Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, false, true);","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"tituswe":3,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_CLIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.CARL;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.ELLE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.FIONA;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_zeroKeywords_noClientFound() {","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.updateFilteredClientList(predicate);","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"    public void execute_multipleKeywords_multipleClientsFound() {","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_CLIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"        expectedModel.updateFilteredClientList(predicate);","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    private NameContainsKeywordsPredicate preparePredicate(String userInput) {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anunayajoshi":15,"-":68}},{"path":"src/test/java/seedu/address/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2017-06-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"    private final Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, false, true, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"tituswe":3,"-":17}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2017-07-05"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showClientAtIndex;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand.","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2017-07-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        showClientAtIndex(model, INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anunayajoshi":4,"-":35}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"class RedoCommandTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"    private String expectedMessage \u003d RedoCommand.MESSAGE_REDO_SUCCESS;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"adam07018"},"content":"    public void execute_invalidRedo_throwsCommandException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"adam07018"},"content":"        assertTrue(!expectedModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"adam07018"},"content":"        assertTrue(!model.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"adam07018"},"content":"    public void execute_addRedo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"adam07018"},"content":"        Client clientToAdd \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeRedo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.addClient(clientToAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"adam07018"},"content":"        dummyModel.addClient(clientToAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"adam07018"},"content":"        assertTrue(!expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"adam07018"},"content":"        assertTrue(!dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"adam07018"},"content":"        dummyModel.redo();","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterRedo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"adam07018"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(redoCommand, expectedModelBeforeRedo, expectedMessage, expectedModelAfterRedo);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"adam07018"},"content":"    public void execute_deleteRedo_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"adam07018"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeRedo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"adam07018"},"content":"        dummyModel.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":70,"author":{"gitId":"adam07018"},"content":"        assertTrue(!expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"adam07018"},"content":"        assertTrue(!dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"adam07018"},"content":"        dummyModel.redo();","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterRedo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"adam07018"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(redoCommand, expectedModelBeforeRedo, expectedMessage, expectedModelAfterRedo);","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"adam07018"},"content":"    public void execute_editRedo_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"adam07018"},"content":"        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"adam07018"},"content":"        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"adam07018"},"content":"        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"adam07018"},"content":"        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"adam07018"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeRedo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.setClient(lastClient, editedClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"adam07018"},"content":"        dummyModel.setClient(lastClient, editedClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":97,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":99,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"adam07018"},"content":"        assertTrue(!expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":101,"author":{"gitId":"adam07018"},"content":"        assertTrue(!dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":102,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":103,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeRedo.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":104,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":105,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":106,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeRedo.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canRedo());","lastModifiedDate":"2023-03-13"},{"lineNumber":108,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":109,"author":{"gitId":"adam07018"},"content":"        dummyModel.redo();","lastModifiedDate":"2023-03-13"},{"lineNumber":110,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterRedo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":111,"author":{"gitId":"adam07018"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":112,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(redoCommand, expectedModelBeforeRedo, expectedMessage, expectedModelAfterRedo);","lastModifiedDate":"2023-03-13"},{"lineNumber":113,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":114,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":115,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"adam07018":115}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-05"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.Messages;","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"class SelectCommandTest {","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2023-03-05"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"        Client clientToSelect \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"        String expectedMessage \u003d SelectCommand.MESSAGE_SELECT_CLIENT_SUCCESS;","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, clientToSelect, true, false, false);","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-05"},{"lineNumber":33,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":34,"author":{"gitId":"tituswe"},"content":"        assertCommandSuccess(selectCommand, model, expectedCommandResult, expectedModel);","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":36,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":37,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":38,"author":{"gitId":"tituswe"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2023-03-05"},{"lineNumber":39,"author":{"gitId":"tituswe"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredClientList().size() + 1);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"tituswe"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundIndex);","lastModifiedDate":"2023-03-05"},{"lineNumber":41,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":42,"author":{"gitId":"tituswe"},"content":"        assertCommandFailure(selectCommand, model, Messages.MESSAGE_INVALID_CLIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":44,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":45,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":46,"author":{"gitId":"tituswe"},"content":"    public void equals() {","lastModifiedDate":"2023-03-05"},{"lineNumber":47,"author":{"gitId":"tituswe"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"tituswe"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_CLIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":50,"author":{"gitId":"tituswe"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-05"},{"lineNumber":51,"author":{"gitId":"tituswe"},"content":"        assertEquals(selectFirstCommand, selectFirstCommand);","lastModifiedDate":"2023-03-05"},{"lineNumber":52,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":53,"author":{"gitId":"tituswe"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-05"},{"lineNumber":54,"author":{"gitId":"tituswe"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_CLIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"        assertEquals(selectFirstCommand, selectFirstCommandCopy);","lastModifiedDate":"2023-03-05"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-05"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(1, selectFirstCommand);","lastModifiedDate":"2023-03-05"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":60,"author":{"gitId":"tituswe"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-05"},{"lineNumber":61,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, selectFirstCommand);","lastModifiedDate":"2023-03-05"},{"lineNumber":62,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":63,"author":{"gitId":"tituswe"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(selectFirstCommand, selectSecondCommand);","lastModifiedDate":"2023-03-05"},{"lineNumber":65,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":66,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":67,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"tituswe":67}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-03-01"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-01"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.ModelManager;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"class UndoCommandTest {","lastModifiedDate":"2023-03-01"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-01"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"    private String expectedMessage \u003d UndoCommand.MESSAGE_UNDO_SUCCESS;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"adam07018"},"content":"    public void execute_invalidUndo_throwsCommandException() {","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"adam07018"},"content":"        assertTrue(!expectedModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"adam07018"},"content":"        assertTrue(!model.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"adam07018"},"content":"    public void execute_addUndo_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"adam07018"},"content":"        Client clientToAdd \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeUndo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeUndo.addClient(clientToAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"adam07018"},"content":"        dummyModel.addClient(clientToAdd);","lastModifiedDate":"2023-03-13"},{"lineNumber":41,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeUndo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":44,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":45,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterUndo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":47,"author":{"gitId":"adam07018"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":48,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(undoCommand, expectedModelBeforeUndo, expectedMessage, expectedModelAfterUndo);","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"adam07018"},"content":"    public void execute_deleteUndo_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"adam07018"},"content":"        Client clientToDelete \u003d model.getFilteredClientList().get(INDEX_FIRST_CLIENT.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeUndo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":56,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeUndo.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"adam07018"},"content":"        dummyModel.deleteClient(clientToDelete);","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeUndo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":62,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterUndo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"adam07018"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(undoCommand, expectedModelBeforeUndo, expectedMessage, expectedModelAfterUndo);","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":68,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-01"},{"lineNumber":70,"author":{"gitId":"adam07018"},"content":"    public void execute_editUndo_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":71,"author":{"gitId":"adam07018"},"content":"        Index indexLastClient \u003d Index.fromOneBased(model.getFilteredClientList().size());","lastModifiedDate":"2023-03-13"},{"lineNumber":72,"author":{"gitId":"adam07018"},"content":"        Client lastClient \u003d model.getFilteredClientList().get(indexLastClient.getZeroBased());","lastModifiedDate":"2023-03-13"},{"lineNumber":73,"author":{"gitId":"adam07018"},"content":"        ClientBuilder clientInList \u003d new ClientBuilder(lastClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"adam07018"},"content":"        Client editedClient \u003d clientInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"adam07018"},"content":"                .withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":77,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelBeforeUndo \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":78,"author":{"gitId":"adam07018"},"content":"        ModelManager dummyModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"adam07018"},"content":"        expectedModelBeforeUndo.setClient(lastClient, editedClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"adam07018"},"content":"        dummyModel.setClient(lastClient, editedClient);","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"adam07018"},"content":"        assertTrue(expectedModelBeforeUndo.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"adam07018"},"content":"        assertTrue(dummyModel.canUndo());","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"adam07018"},"content":"        dummyModel.undo();","lastModifiedDate":"2023-03-13"},{"lineNumber":86,"author":{"gitId":"adam07018"},"content":"        ModelManager expectedModelAfterUndo \u003d new ModelManager(dummyModel.getAddressBook(), new UserPrefs());","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"adam07018"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"adam07018"},"content":"        assertCommandSuccess(undoCommand, expectedModelBeforeUndo, expectedMessage, expectedModelAfterUndo);","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-01"},{"lineNumber":90,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-03-01"}],"authorContributionMap":{"adam07018":91}},{"path":"src/test/java/seedu/address/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-15"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2017-12-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2017-12-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.AMY;","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        Client expectedClient \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        // multiple phones - last phone accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // multiple emails - last email accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // multiple addresses - last address accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY","lastModifiedDate":"2017-12-23"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // multiple tags - all accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"        Client expectedClientMultipleTags \u003d new ClientBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-07-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedClientMultipleTags));","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"        Client expectedClient \u003d new ClientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,","lastModifiedDate":"2017-12-23"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"                new AddCommand(expectedClient));","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // missing phone prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // missing email prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // missing address prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,","lastModifiedDate":"2017-12-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        // invalid phone","lastModifiedDate":"2017-06-15"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // invalid email","lastModifiedDate":"2017-06-15"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // invalid address","lastModifiedDate":"2017-06-15"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC","lastModifiedDate":"2017-12-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        // invalid tag","lastModifiedDate":"2017-06-15"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2017-06-15"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,","lastModifiedDate":"2017-12-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB","lastModifiedDate":"2017-12-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,","lastModifiedDate":"2017-12-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"anunayajoshi":18,"-":123}},{"path":"src/test/java/seedu/address/logic/parser/AddPolicyCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_DATE_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_FREQUENCY_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_NAME_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_PREMIUM_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalPolicies.AMY_POLICY;","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.AddPolicyCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"class AddPolicyCommandParserTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"    private final AddPolicyCommandParser parser \u003d new AddPolicyCommandParser();","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"    private final String policyStub \u003d POLICY_NAME_AMY + POLICY_DATE_AMY + POLICY_PREMIUM_AMY + POLICY_FREQUENCY_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"    public void parse_indexSpecified_success() {","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"        String userInput \u003d targetIndex.getOneBased() + \" \" + policyStub;","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"        AddPolicyCommand expectedCommand \u003d new AddPolicyCommand(targetIndex, AMY_POLICY);","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"    public void parse_missingCompulsoryField_failure() {","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddPolicyCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-13"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        // no index specified","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        assertParseFailure(parser, AddPolicyCommand.COMMAND_WORD + \" \" + policyStub, expectedMessage);","lastModifiedDate":"2023-03-13"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        // no parameters","lastModifiedDate":"2023-03-13"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        assertParseFailure(parser, AddPolicyCommand.COMMAND_WORD, expectedMessage);","lastModifiedDate":"2023-03-13"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"anunayajoshi":39}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_DATE_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_FREQUENCY_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_NAME_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.logic.commands.CommandTestUtil.POLICY_PREMIUM_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalPolicies.AMY_POLICY;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.AddPolicyCommand;","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientUtil;","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(ClientUtil.getAddCommand(client));","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(new AddCommand(client), command);","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"    public void parseCommand_addPolicy() throws Exception {","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        final String policyStub \u003d POLICY_NAME_AMY + POLICY_DATE_AMY + POLICY_PREMIUM_AMY + POLICY_FREQUENCY_AMY;","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        AddPolicyCommand command \u003d (AddPolicyCommand) parser.parseCommand(","lastModifiedDate":"2023-03-13"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"                AddPolicyCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased() + \" \" + policyStub);","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(new AddPolicyCommand(INDEX_FIRST_CLIENT, AMY_POLICY), command);","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"anunayajoshi"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":66,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_CLIENT), command);","lastModifiedDate":"2023-03-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder(client).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"                + INDEX_FIRST_CLIENT.getOneBased() + \" \" + ClientUtil.getEditClientDescriptorDetails(descriptor));","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_CLIENT, descriptor), command);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":104,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":105,"author":{"gitId":"tituswe"},"content":"    public void parseCommand_select() throws Exception {","lastModifiedDate":"2023-03-05"},{"lineNumber":106,"author":{"gitId":"tituswe"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand(","lastModifiedDate":"2023-03-05"},{"lineNumber":107,"author":{"gitId":"tituswe"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_CLIENT.getOneBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"tituswe"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_CLIENT), command);","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":110,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"tituswe":8,"anunayajoshi":27,"-":86}},{"path":"src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-09"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_CLIENT));","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"anunayajoshi":2,"-":30}},{"path":"src/test/java/seedu/address/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-05-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand.EditClientDescriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-04"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.EditClientDescriptorBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;","lastModifiedDate":"2017-05-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // no index specified","lastModifiedDate":"2017-05-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-07-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // no index and no field specified","lastModifiedDate":"2017-05-04"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2017-06-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // negative index","lastModifiedDate":"2017-05-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // zero index","lastModifiedDate":"2017-06-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        // invalid arguments being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        // invalid prefix being parsed as preamble","lastModifiedDate":"2017-06-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2017-07-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-05-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2018-09-22"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone","lastModifiedDate":"2018-09-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email","lastModifiedDate":"2018-09-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address","lastModifiedDate":"2018-09-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag","lastModifiedDate":"2018-09-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        // invalid phone followed by valid email","lastModifiedDate":"2017-05-04"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone","lastModifiedDate":"2017-05-04"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}","lastModifiedDate":"2017-05-04"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Clients} being edited,","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        // parsing it together with a valid tag results in error","lastModifiedDate":"2017-05-04"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // multiple invalid values, but only the first invalid value is captured","lastModifiedDate":"2017-05-04"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,","lastModifiedDate":"2017-07-06"},{"lineNumber":105,"author":{"gitId":"-"},"content":"                Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_SECOND_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND","lastModifiedDate":"2017-06-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;","lastModifiedDate":"2017-06-06"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":114,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-05-04"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":124,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // name","lastModifiedDate":"2017-05-04"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_THIRD_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // phone","lastModifiedDate":"2017-05-04"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":146,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // email","lastModifiedDate":"2017-05-04"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":152,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        // address","lastModifiedDate":"2017-05-04"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;","lastModifiedDate":"2017-05-25"},{"lineNumber":158,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        // tags","lastModifiedDate":"2017-05-04"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;","lastModifiedDate":"2017-05-25"},{"lineNumber":164,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2017-08-15"},{"lineNumber":171,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY","lastModifiedDate":"2017-05-25"},{"lineNumber":173,"author":{"gitId":"-"},"content":"                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND","lastModifiedDate":"2017-05-25"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;","lastModifiedDate":"2017-05-25"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":176,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":177,"author":{"gitId":"-"},"content":"                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)","lastModifiedDate":"2017-05-04"},{"lineNumber":178,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        // no other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":187,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":189,"author":{"gitId":"anunayajoshi"},"content":"        EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":190,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        // other valid values specified","lastModifiedDate":"2017-05-04"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB","lastModifiedDate":"2017-05-25"},{"lineNumber":195,"author":{"gitId":"-"},"content":"                + PHONE_DESC_BOB;","lastModifiedDate":"2017-05-25"},{"lineNumber":196,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditClientDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":197,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2017-05-04"},{"lineNumber":198,"author":{"gitId":"-"},"content":"        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    public void parse_resetTags_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":204,"author":{"gitId":"anunayajoshi"},"content":"        Index targetIndex \u003d INDEX_THIRD_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;","lastModifiedDate":"2017-05-25"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":207,"author":{"gitId":"anunayajoshi"},"content":"        EditCommand.EditClientDescriptor descriptor \u003d new EditClientDescriptorBuilder().withTags().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2017-05-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":212,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"anunayajoshi":28,"-":184}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-06-27"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // no leading and trailing whitespaces","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // multiple whitespaces between keywords","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2017-07-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"anunayajoshi":1,"-":33}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(INDEX_FIRST_CLIENT, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":189,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"anunayajoshi":7,"-":189}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"tituswe"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-05"},{"lineNumber":2,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-05"},{"lineNumber":4,"author":{"gitId":"tituswe"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-05"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-05"},{"lineNumber":6,"author":{"gitId":"tituswe"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_CLIENT;","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":8,"author":{"gitId":"tituswe"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-05"},{"lineNumber":9,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import seedu.address.logic.commands.SelectCommand;","lastModifiedDate":"2023-03-05"},{"lineNumber":11,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":12,"author":{"gitId":"tituswe"},"content":"/**","lastModifiedDate":"2023-03-05"},{"lineNumber":13,"author":{"gitId":"tituswe"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2023-03-05"},{"lineNumber":14,"author":{"gitId":"tituswe"},"content":" * outside of the SelectCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2023-03-05"},{"lineNumber":15,"author":{"gitId":"tituswe"},"content":" * same path through the SelectCommand, and therefore we test only one of them.","lastModifiedDate":"2023-03-05"},{"lineNumber":16,"author":{"gitId":"tituswe"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2023-03-05"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2023-03-05"},{"lineNumber":18,"author":{"gitId":"tituswe"},"content":" */","lastModifiedDate":"2023-03-05"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"public class SelectCommandParserTest {","lastModifiedDate":"2023-03-05"},{"lineNumber":20,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"    private final SelectCommandParser parser \u003d new SelectCommandParser();","lastModifiedDate":"2023-03-05"},{"lineNumber":22,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":23,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"    void parse_validArgs_returnsSelectCommand() {","lastModifiedDate":"2023-03-05"},{"lineNumber":25,"author":{"gitId":"tituswe"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_CLIENT));","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":27,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-05"},{"lineNumber":28,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-05"},{"lineNumber":29,"author":{"gitId":"tituswe"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2023-03-05"},{"lineNumber":30,"author":{"gitId":"tituswe"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-05"},{"lineNumber":31,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-05"},{"lineNumber":32,"author":{"gitId":"tituswe"},"content":"}","lastModifiedDate":"2023-03-05"}],"authorContributionMap":{"tituswe":32}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(Collections.emptyList(), addressBook.getClientList());","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"    public void resetData_withDuplicateClients_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        // Two clients with the same identity fields","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e newClients \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newClients);","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasClient(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(addressBook.hasClient(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.addClient(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(addressBook.hasClient(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_clientWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.addClient(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(addressBook.hasClient(editedAlice));","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"    public void getClientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getClientList().remove(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"anunayajoshi"},"content":"    void testHashCode() {","lastModifiedDate":"2023-03-10"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"        AddressBook addressBook1 \u003d new AddressBook();","lastModifiedDate":"2023-03-10"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"        addressBook1.addClient(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"        AddressBook addressBook2 \u003d new AddressBook();","lastModifiedDate":"2023-03-10"},{"lineNumber":90,"author":{"gitId":"anunayajoshi"},"content":"        addressBook2.addClient(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(addressBook1.hashCode(), addressBook2.hashCode());","lastModifiedDate":"2023-03-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"     * A stub ReadOnlyAddressBook whose clients list can violate interface constraints.","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"        private final ObservableList\u003cClient\u003e clients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":100,"author":{"gitId":"anunayajoshi"},"content":"        AddressBookStub(Collection\u003cClient\u003e clients) {","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"anunayajoshi"},"content":"            this.clients.setAll(clients);","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"anunayajoshi"},"content":"        public ObservableList\u003cClient\u003e getClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":106,"author":{"gitId":"anunayajoshi"},"content":"            return clients;","lastModifiedDate":"2023-03-06"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"anunayajoshi":38,"-":72}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CLIENTS;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"tituswe"},"content":"import static seedu.address.testutil.TypicalClients.AMY;","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"tituswe"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"tituswe"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"tituswe"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasClient(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_clientNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-06"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(modelManager.hasClient(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"    public void hasClient_clientInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"        modelManager.addClient(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(modelManager.hasClient(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"anunayajoshi"},"content":"    public void getFilteredClientList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredClientList().remove(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"tituswe"},"content":"    public void getFilteredPolicyList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"tituswe"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e modelManager.getFilteredPolicyList().remove(0));","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"tituswe"},"content":"    public void getFilteredPolicyList_returnsEmptyList() {","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"tituswe"},"content":"        modelManager.updateSelectedClient(AMY);","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"tituswe"},"content":"        assertEquals(FXCollections.observableArrayList(), modelManager.getFilteredPolicyList());","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":113,"author":{"gitId":"tituswe"},"content":"    void updateSelectedClient_modify_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-14"},{"lineNumber":114,"author":{"gitId":"tituswe"},"content":"        Client targetClient \u003d new ClientBuilder(AMY).withTags().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":115,"author":{"gitId":"tituswe"},"content":"        modelManager.updateSelectedClient(targetClient);","lastModifiedDate":"2023-03-14"},{"lineNumber":116,"author":{"gitId":"tituswe"},"content":"        assertTrue(true);","lastModifiedDate":"2023-03-14"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":121,"author":{"gitId":"anunayajoshi"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withClient(ALICE).withClient(BENSON).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"tituswe"},"content":"        assertEquals(modelManager, modelManagerCopy);","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"tituswe"},"content":"        assertEquals(modelManager, modelManager);","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(null, modelManager);","lastModifiedDate":"2023-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(5, modelManager);","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(modelManager, new ModelManager(differentAddressBook, userPrefs));","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":144,"author":{"gitId":"anunayajoshi"},"content":"        modelManager.updateFilteredClientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-03-06"},{"lineNumber":145,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(modelManager, new ModelManager(addressBook, userPrefs));","lastModifiedDate":"2023-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":148,"author":{"gitId":"anunayajoshi"},"content":"        modelManager.updateFilteredClientList(PREDICATE_SHOW_ALL_CLIENTS);","lastModifiedDate":"2023-03-06"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":153,"author":{"gitId":"tituswe"},"content":"        assertNotEquals(modelManager, new ModelManager(addressBook, differentUserPrefs));","lastModifiedDate":"2023-03-14"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"tituswe":28,"anunayajoshi":16,"-":111}},{"path":"src/test/java/seedu/address/model/VersionedAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"adam07018"},"content":"package seedu.address.model;","lastModifiedDate":"2023-03-13"},{"lineNumber":2,"author":{"gitId":"adam07018"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"adam07018"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-13"},{"lineNumber":5,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"adam07018"},"content":"class VersionedAddressBookTest {","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"adam07018"},"content":"    private LinkedList\u003cAddressBook\u003e addressBookStateList \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"adam07018"},"content":"    private int currentStatePointer;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"adam07018"},"content":"    public void addCommit() {","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":12,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"adam07018"},"content":"    void undo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"adam07018"},"content":"    void redo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"adam07018"},"content":"    void canUndo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"adam07018"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"adam07018"},"content":"    @Test","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"adam07018"},"content":"    void canRedo() {","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"adam07018"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"adam07018"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"adam07018":29}},{"path":"src/test/java/seedu/address/model/client/AddressTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class AddressTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Address(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidAddress \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidAddress() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null address","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // valid addresses","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"anunayajoshi":1,"-":35}},{"path":"src/test/java/seedu/address/model/client/ClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"tituswe"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-14"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"tituswe"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-14"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"public class ClientTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e client.getTags().remove(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"    public void isSameClient() {","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(ALICE.isSameClient(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(ALICE.isSameClient(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(ALICE.isSameClient(editedAlice));","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(ALICE.isSameClient(editedAlice));","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        Client editedBob \u003d new ClientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(BOB.isSameClient(editedBob));","lastModifiedDate":"2023-03-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        editedBob \u003d new ClientBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(BOB.isSameClient(editedBob));","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":55,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"tituswe"},"content":"    void getFilteredPolicyList() {","lastModifiedDate":"2023-03-14"},{"lineNumber":57,"author":{"gitId":"tituswe"},"content":"        Client client \u003d new ClientBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"tituswe"},"content":"        assertEquals(FXCollections.observableArrayList(), client.getFilteredPolicyList());","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        Client aliceCopy \u003d new ClientBuilder(ALICE).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(aliceCopy));","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(ALICE.equals(ALICE));","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(null));","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(5));","lastModifiedDate":"2018-04-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(BOB));","lastModifiedDate":"2018-04-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        // different phone -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":84,"author":{"gitId":"anunayajoshi"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // different email -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different address -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        // different tags -\u003e returns false","lastModifiedDate":"2018-04-18"},{"lineNumber":96,"author":{"gitId":"anunayajoshi"},"content":"        editedAlice \u003d new ClientBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();","lastModifiedDate":"2023-03-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertFalse(ALICE.equals(editedAlice));","lastModifiedDate":"2018-04-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":99,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tituswe":7,"anunayajoshi":27,"-":66}},{"path":"src/test/java/seedu/address/model/client/EmailTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class EmailTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Email(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidEmail \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidEmail() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null email","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // blank email","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // missing parts","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // invalid parts","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space","lastModifiedDate":"2018-02-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space","lastModifiedDate":"2018-02-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol","lastModifiedDate":"2017-04-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part","lastModifiedDate":"2017-04-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"-peterjack@example.com\")); // local part starts with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack-@example.com\")); // local part ends with a hyphen","lastModifiedDate":"2021-07-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter..jack@example.com\")); // local part has two consecutive periods","lastModifiedDate":"2021-07-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name","lastModifiedDate":"2017-04-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period","lastModifiedDate":"2018-02-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen","lastModifiedDate":"2018-02-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.c\")); // top level domain has less than two chars","lastModifiedDate":"2021-07-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // valid email","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\")); // underscore in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack.1190@example.com\")); // period in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack+1190@example.com\")); // \u0027+\u0027 symbol in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack-1190@example.com\")); // hyphen in local part","lastModifiedDate":"2021-07-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal","lastModifiedDate":"2018-02-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name","lastModifiedDate":"2017-01-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be.d@example1.com\")); // mixture of alphanumeric and special characters","lastModifiedDate":"2021-07-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name","lastModifiedDate":"2018-02-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part","lastModifiedDate":"2017-04-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(Email.isValidEmail(\"e1234567@u.nus.edu\")); // more than one period in domain","lastModifiedDate":"2021-07-20"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"anunayajoshi":1,"-":67}},{"path":"src/test/java/seedu/address/model/client/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        // different client -\u003e returns false","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // Keywords match phone, email and address, but does not match name","lastModifiedDate":"2017-06-12"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(predicate.test(new ClientBuilder().withName(\"Alice\").withPhone(\"12345\")","lastModifiedDate":"2023-03-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"anunayajoshi":10,"-":65}},{"path":"src/test/java/seedu/address/model/client/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"anunayajoshi":1,"-":39}},{"path":"src/test/java/seedu/address/model/client/PhoneTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class PhoneTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Phone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidPhone_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidPhone \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidPhone() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null phone number","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // valid phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers","lastModifiedDate":"2017-05-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"93121534\"));","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"anunayajoshi":1,"-":39}},{"path":"src/test/java/seedu/address/model/client/UniqueClientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.client;","lastModifiedDate":"2023-03-06"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.ALICE;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.BOB;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.exceptions.ClientNotFoundException;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.exceptions.DuplicateClientException;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.testutil.ClientBuilder;","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"public class UniqueClientListTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"    private final UniqueClientList uniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"    public void contains_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.contains(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"    public void contains_clientNotInList_returnsFalse() {","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(uniqueClientList.contains(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"    public void contains_clientInList_returnsTrue() {","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(uniqueClientList.contains(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"    public void contains_clientWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(uniqueClientList.contains(editedAlice));","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"    public void add_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.add(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"    public void add_duplicateClient_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.add(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_nullTargetClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(null, ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_nullEditedClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClient(ALICE, null));","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_targetClientNotInList_throwsClientNotFoundException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.setClient(ALICE, ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_editedClientIsSameClient_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.setClient(ALICE, ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":81,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        expectedUniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_editedClientHasSameIdentity_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":89,"author":{"gitId":"anunayajoshi"},"content":"        Client editedAlice \u003d new ClientBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2023-03-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":91,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.setClient(ALICE, editedAlice);","lastModifiedDate":"2023-03-06"},{"lineNumber":92,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"        expectedUniqueClientList.add(editedAlice);","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":98,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_editedClientHasDifferentIdentity_success() {","lastModifiedDate":"2023-03-06"},{"lineNumber":99,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":100,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.setClient(ALICE, BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":101,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":102,"author":{"gitId":"anunayajoshi"},"content":"        expectedUniqueClientList.add(BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"    public void setClient_editedClientHasNonUniqueIdentity_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":109,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":110,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClient(ALICE, BOB));","lastModifiedDate":"2023-03-06"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"anunayajoshi"},"content":"    public void remove_nullClient_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":115,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.remove(null));","lastModifiedDate":"2023-03-06"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"anunayajoshi"},"content":"    public void remove_clientDoesNotExist_throwsClientNotFoundException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(ClientNotFoundException.class, () -\u003e uniqueClientList.remove(ALICE));","lastModifiedDate":"2023-03-06"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"anunayajoshi"},"content":"    public void remove_existingClient_removesClient() {","lastModifiedDate":"2023-03-06"},{"lineNumber":125,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":126,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.remove(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":128,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients_nullUniqueClientList_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":133,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((UniqueClientList) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":137,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients_uniqueClientList_replacesOwnListWithProvidedUniqueClientList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":138,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":139,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":140,"author":{"gitId":"anunayajoshi"},"content":"        expectedUniqueClientList.add(BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":141,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.setClients(expectedUniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":142,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients_nullList_throwsNullPointerException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":147,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueClientList.setClients((List\u003cClient\u003e) null));","lastModifiedDate":"2023-03-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":151,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2023-03-06"},{"lineNumber":152,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":153,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e clientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":154,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.setClients(clientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":155,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList expectedUniqueClientList \u003d new UniqueClientList();","lastModifiedDate":"2023-03-06"},{"lineNumber":156,"author":{"gitId":"anunayajoshi"},"content":"        expectedUniqueClientList.add(BOB);","lastModifiedDate":"2023-03-06"},{"lineNumber":157,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(expectedUniqueClientList, uniqueClientList);","lastModifiedDate":"2023-03-06"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":161,"author":{"gitId":"anunayajoshi"},"content":"    public void setClients_listWithDuplicateClients_throwsDuplicateClientException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":162,"author":{"gitId":"anunayajoshi"},"content":"        List\u003cClient\u003e listWithDuplicateClients \u003d Arrays.asList(ALICE, ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":163,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DuplicateClientException.class, () -\u003e uniqueClientList.setClients(listWithDuplicateClients));","lastModifiedDate":"2023-03-06"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":169,"author":{"gitId":"anunayajoshi"},"content":"                -\u003e uniqueClientList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-06"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":171,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":172,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"anunayajoshi"},"content":"    void testHashCode() {","lastModifiedDate":"2023-03-09"},{"lineNumber":174,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList list1 \u003d new UniqueClientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":175,"author":{"gitId":"anunayajoshi"},"content":"        list1.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":176,"author":{"gitId":"anunayajoshi"},"content":"        UniqueClientList list2 \u003d new UniqueClientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":177,"author":{"gitId":"anunayajoshi"},"content":"        list2.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(list1.hashCode(), list2.hashCode());","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":180,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":181,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":182,"author":{"gitId":"anunayajoshi"},"content":"    void iterator() {","lastModifiedDate":"2023-03-10"},{"lineNumber":183,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(ALICE);","lastModifiedDate":"2023-03-10"},{"lineNumber":184,"author":{"gitId":"anunayajoshi"},"content":"        uniqueClientList.add(BOB);","lastModifiedDate":"2023-03-10"},{"lineNumber":185,"author":{"gitId":"anunayajoshi"},"content":"        Iterator\u003cClient\u003e iterator \u003d uniqueClientList.iterator();","lastModifiedDate":"2023-03-10"},{"lineNumber":186,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(iterator.hasNext());","lastModifiedDate":"2023-03-10"},{"lineNumber":187,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(ALICE, iterator.next());","lastModifiedDate":"2023-03-10"},{"lineNumber":188,"author":{"gitId":"anunayajoshi"},"content":"        assertTrue(iterator.hasNext());","lastModifiedDate":"2023-03-10"},{"lineNumber":189,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(BOB, iterator.next());","lastModifiedDate":"2023-03-10"},{"lineNumber":190,"author":{"gitId":"anunayajoshi"},"content":"        assertFalse(iterator.hasNext());","lastModifiedDate":"2023-03-10"},{"lineNumber":191,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":192,"author":{"gitId":"tituswe"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":193,"author":{"gitId":"tituswe"},"content":"    @Test","lastModifiedDate":"2023-03-14"},{"lineNumber":194,"author":{"gitId":"tituswe"},"content":"    void size() {","lastModifiedDate":"2023-03-14"},{"lineNumber":195,"author":{"gitId":"tituswe"},"content":"        assertEquals(0, uniqueClientList.size());","lastModifiedDate":"2023-03-14"},{"lineNumber":196,"author":{"gitId":"tituswe"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"tituswe":5,"anunayajoshi":105,"-":87}},{"path":"src/test/java/seedu/address/model/client/policy/CustomDateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"class CustomDateTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(NullPointerException.class, () -\u003e new CustomDate(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"        String invalidDate \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new CustomDate(invalidDate));","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    void isValidDate() {","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"        String date1 \u003d \"01.01.2023\";","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        String date2 \u003d \"01/01/2023\";","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(CustomDate.isValidDate(date1));","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(CustomDate.isValidDate(date2));","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":31}},{"path":"src/test/java/seedu/address/model/client/policy/FrequencyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"class FrequencyTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Frequency(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"        String invalidFrequency \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Frequency(invalidFrequency));","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    void isValidFrequency() {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"        String monthly \u003d \"monthly\";","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"        String quarterly \u003d \"weekly\";","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        String yearly \u003d \"yearly\";","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"        String invalid \u003d \"uregoweijnowig\";","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(Frequency.isValidFrequency(monthly));","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(Frequency.isValidFrequency(quarterly));","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(Frequency.isValidFrequency(yearly));","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(Frequency.isValidFrequency(invalid));","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":34,"pangrwa":1}},{"path":"src/test/java/seedu/address/model/client/policy/PolicyNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"class PolicyNameTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Frequency(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_invalidDate_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"        String invalidPolicyName \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new PolicyName(invalidPolicyName));","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    void isValidName() {","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"        String invalid1 \u003d \"     \";","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"        String invalid2 \u003d \"./.!@##$\";","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        String invaild3 \u003d \"im a beast./1/./.\";","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"        String valid \u003d \"Health\";","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(PolicyName.isValidName(invalid1));","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(PolicyName.isValidName(invalid2));","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(PolicyName.isValidName(invaild3));","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(PolicyName.isValidName(valid));","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":35}},{"path":"src/test/java/seedu/address/model/client/policy/PolicyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"class PolicyTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"    private PolicyName name \u003d new PolicyName(\"Health\");","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"    private CustomDate date \u003d new CustomDate(\"01.02.2023\");","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"    private Premium premium \u003d new Premium(\"200\");","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"    private Frequency frequency \u003d new Frequency(\"weekly\");","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    private Policy policy \u003d new Policy(name, date, premium, frequency);","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    void getPolicyName() {","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"        PolicyName name \u003d policy.getPolicyName();","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"        assertEquals(name.toString(), \"Health\");","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"    void getStartDate() {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"        CustomDate date \u003d policy.getStartDate();","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"        assertNotEquals(date.toString(), \"01/02/2023\");","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"    void getPremium() {","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"        Premium premium \u003d policy.getPremium();","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"        assertEquals(premium.toString(), \"200\");","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"    void getFrequency() {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"        Frequency frequency \u003d policy.getFrequency();","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        assertEquals(frequency.toString(), \"weekly\");","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"    void isSamePolicy() {","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"        PolicyName name1 \u003d new PolicyName(\"Health\");","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"        PolicyName name2 \u003d new PolicyName(\"life\");","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"        CustomDate date1 \u003d new CustomDate(\"01.02.2023\");","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"        Premium premium1 \u003d new Premium(\"200\");","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        Premium premium2 \u003d new Premium(\"150\");","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        Frequency frequency1 \u003d new Frequency(\"weekly\");","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"        Frequency frequency2 \u003d new Frequency(\"yearly\");","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"        Policy policy1 \u003d new Policy(name1, date1, premium1, frequency1);","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"        Policy policy2 \u003d new Policy(name1, date1, premium2, frequency2);","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"        Policy policy3 \u003d new Policy(name1, date1, premium2, frequency2);","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"        Policy policy4 \u003d new Policy(name2, date1, premium1, frequency1);","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(policy.isSamePolicy(policy1));","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(policy1.isSamePolicy(policy4));","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(policy.equals(policy1));","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(policy.equals(policy3));","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(policy2.equals(policy3));","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YZmunchmunch"},"content":"    void isSamePolicyString() {","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"        PolicyName name1 \u003d new PolicyName(\"Health\");","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"YZmunchmunch"},"content":"        CustomDate date1 \u003d new CustomDate(\"01.02.2023\");","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"YZmunchmunch"},"content":"        Premium premium1 \u003d new Premium(\"200\");","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"        Frequency frequency1 \u003d new Frequency(\"weekly\");","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"YZmunchmunch"},"content":"        Policy policy1 \u003d new Policy(name1, date1, premium1, frequency1);","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"YZmunchmunch"},"content":"        assertEquals(policy.toString(), policy1.toString());","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":71,"pangrwa":4}},{"path":"src/test/java/seedu/address/model/client/policy/PremiumTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"class PremiumTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Premium(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"        String invalidPremium \u003d \"\";","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Premium(invalidPremium));","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    void isValidPremium() {","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"        String premium \u003d \"500.2\";","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(Premium.isValidPremium(premium));","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"    void testEquals() {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(true);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":32}},{"path":"src/test/java/seedu/address/model/client/policy/UniquePolicyListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.model.client.policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.List;","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.exceptions.DuplicatePolicyException;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.exceptions.PolicyNotFoundException;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"class UniquePolicyListTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"    private PolicyName name \u003d new PolicyName(\"Health\");","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    private PolicyName name1 \u003d new PolicyName(\"Life\");","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"    private CustomDate date \u003d new CustomDate(\"01.02.2023\");","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"    private Premium premium \u003d new Premium(\"200\");","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private Frequency frequency \u003d new Frequency(\"weekly\");","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"    private Policy policy \u003d new Policy(name, date, premium, frequency);","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    private Policy policy1 \u003d new Policy(name1, date, premium, frequency);","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"    private UniquePolicyList list \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"    void contains() {","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(list.contains(policy));","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"    void add() {","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"        list.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(list.contains(policy));","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"    void addDuplicate() {","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"        list.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(DuplicatePolicyException.class, () -\u003e list.add(policy));","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"    void setPolicy() {","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"        list.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"        list.setPolicy(policy, policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        UniquePolicyList expectedUniquePolicyList \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"        expectedUniquePolicyList.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"        assertEquals(expectedUniquePolicyList, list);","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"    void setPolicyNotFoundException() {","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(PolicyNotFoundException.class, () -\u003e list.setPolicy(policy1, policy1));","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"    void remove() {","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"        list.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"        list.remove(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(list.contains(policy));","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"    void removeNotFound() {","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"YZmunchmunch"},"content":"        assertThrows(PolicyNotFoundException.class, () -\u003e list.remove(policy));","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"YZmunchmunch"},"content":"    void testUnique() {","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"YZmunchmunch"},"content":"        List\u003cPolicy\u003e list1 \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YZmunchmunch"},"content":"        list1.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YZmunchmunch"},"content":"        list1.add(policy1);","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(UniquePolicyList.policiesAreUnique(list1));","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"YZmunchmunch"},"content":"        list1.add(policy);","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(UniquePolicyList.policiesAreUnique(list1));","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"YZmunchmunch"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YZmunchmunch"},"content":"    void equalsTest() {","lastModifiedDate":"2023-03-10"},{"lineNumber":82,"author":{"gitId":"YZmunchmunch"},"content":"        assertTrue(list.equals(list));","lastModifiedDate":"2023-03-10"},{"lineNumber":83,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(list.equals(null));","lastModifiedDate":"2023-03-10"},{"lineNumber":84,"author":{"gitId":"YZmunchmunch"},"content":"        assertFalse(list.equals(4));","lastModifiedDate":"2023-03-10"},{"lineNumber":85,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":86,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":85,"pangrwa":1}},{"path":"src/test/java/seedu/address/model/util/SampleDataUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"anunayajoshi"},"content":"package seedu.address.model.util;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"class SampleDataUtilTest {","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"    void getSampleClients() {","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"        Client[] sampleClients \u003d SampleDataUtil.getSampleClients();","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(6, sampleClients.length);","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"        // check if each sample client has valid fields","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"        for (Client client : sampleClients) {","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"            assertNotNull(client.getName());","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"            assertNotNull(client.getPhone());","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"            assertNotNull(client.getEmail());","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"            assertNotNull(client.getAddress());","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"anunayajoshi"},"content":"            assertFalse(client.getTags().isEmpty());","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"    @Test","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"    void getSampleAddressBook() {","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        ReadOnlyAddressBook sampleAddressBook \u003d SampleDataUtil.getSampleAddressBook();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        ObservableList\u003cClient\u003e sampleClients;","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        sampleClients \u003d FXCollections.observableList(Arrays.asList(SampleDataUtil.getSampleClients()));","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"anunayajoshi"},"content":"        // check if each sample client is present in the sample address book","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"        for (Client sampleClient : sampleClients) {","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"            assertTrue(sampleAddressBook.getClientList().contains(sampleClient));","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"        }","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"anunayajoshi":45}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedClientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.storage.JsonAdaptedClient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import static seedu.address.testutil.TypicalClients.BENSON;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import java.util.stream.StreamSupport;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"public class JsonAdaptedClientTest {","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_POLICY_NAME \u003d \"#HealthInsuance\";","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_DATE \u003d \"10-10-2023\";","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_FREQUENCY \u003d \"Biweekly\";","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_PREMIUM \u003d \"Hello\";","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    //private static final String INVALID_POLICY \u003d //; a policy with invalid frequency","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            .map(JsonAdaptedTag::new)","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    private static final List\u003cJsonAdaptedPolicy\u003e VALID_POLICIES \u003d StreamSupport.stream(","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"            BENSON.getPolicyList().spliterator(), false).map(JsonAdaptedPolicy::new)","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"            .collect(Collectors.toList());","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_validClientDetails_returnsClient() throws IllegalValueException {","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(BENSON);","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(BENSON, client.toModelType());","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedClient(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"                        VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"                VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public void toModelType_invalidPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedClient(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"                        VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":77,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void toModelType_nullPhone_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"                VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"                        VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-02-19"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-02-19"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {","lastModifiedDate":"2023-02-19"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"                VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":108,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"pangrwa"},"content":"                        VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":111,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":116,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS,","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"pangrwa"},"content":"                VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());","lastModifiedDate":"2018-08-13"},{"lineNumber":119,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);","lastModifiedDate":"2018-08-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));","lastModifiedDate":"2018-08-13"},{"lineNumber":126,"author":{"gitId":"anunayajoshi"},"content":"        JsonAdaptedClient client \u003d","lastModifiedDate":"2023-03-06"},{"lineNumber":127,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags, VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, client::toModelType);","lastModifiedDate":"2023-03-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":130,"author":{"gitId":"pangrwa"},"content":"    /*","lastModifiedDate":"2023-03-15"},{"lineNumber":131,"author":{"gitId":"pangrwa"},"content":"    Don\u0027t really need this because invalidPolicies is dependent on InvalidPolicy","lastModifiedDate":"2023-03-15"},{"lineNumber":132,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-09"},{"lineNumber":133,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_invalidPolicies_throwsIllegalValueException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"pangrwa"},"content":"        List\u003cJsonAdaptedPolicy\u003e invalidPolicies \u003d new ArrayList\u003c\u003e(VALID_POLICIES);","lastModifiedDate":"2023-03-09"},{"lineNumber":135,"author":{"gitId":"pangrwa"},"content":"        Policy invalidPolicy \u003d new Policy(new PolicyName(INVALID_POLICY_NAME), new CustomDate(INVALID_DATE),","lastModifiedDate":"2023-03-14"},{"lineNumber":136,"author":{"gitId":"pangrwa"},"content":"                new Premium(INVALID_PREMIUM), new Frequency(INVALID_FREQUENCY));","lastModifiedDate":"2023-03-14"},{"lineNumber":137,"author":{"gitId":"pangrwa"},"content":"        invalidPolicies.add(new JsonAdaptedPolicy(invalidPolicy));","lastModifiedDate":"2023-03-14"},{"lineNumber":138,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedClient client \u003d new JsonAdaptedClient(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS,","lastModifiedDate":"2023-03-14"},{"lineNumber":139,"author":{"gitId":"pangrwa"},"content":"                VALID_TAGS, invalidPolicies);","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, client::toModelType);","lastModifiedDate":"2023-03-14"},{"lineNumber":141,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"pangrwa"},"content":"    */","lastModifiedDate":"2023-03-15"},{"lineNumber":143,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"anunayajoshi":23,"pangrwa":49,"-":72}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedPolicyTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"pangrwa"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-15"},{"lineNumber":2,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":3,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":4,"author":{"gitId":"pangrwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-15"},{"lineNumber":5,"author":{"gitId":"pangrwa"},"content":"import static seedu.address.storage.JsonAdaptedPolicy.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-15"},{"lineNumber":6,"author":{"gitId":"pangrwa"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-15"},{"lineNumber":7,"author":{"gitId":"pangrwa"},"content":"import static seedu.address.testutil.TypicalPolicies.HEALTH;","lastModifiedDate":"2023-03-15"},{"lineNumber":8,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":9,"author":{"gitId":"pangrwa"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-15"},{"lineNumber":10,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-15"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.CustomDate;","lastModifiedDate":"2023-03-15"},{"lineNumber":13,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Frequency;","lastModifiedDate":"2023-03-15"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.PolicyName;","lastModifiedDate":"2023-03-15"},{"lineNumber":15,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Premium;","lastModifiedDate":"2023-03-15"},{"lineNumber":16,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":17,"author":{"gitId":"pangrwa"},"content":"class JsonAdaptedPolicyTest {","lastModifiedDate":"2023-03-15"},{"lineNumber":18,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":19,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_POLICY_NAME \u003d \"#HealthInsuance\";","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_DATE \u003d \"10-10-2023\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_FREQUENCY \u003d \"Biweekly\";","lastModifiedDate":"2023-03-15"},{"lineNumber":22,"author":{"gitId":"pangrwa"},"content":"    private static final String INVALID_PREMIUM \u003d \"Hello\";","lastModifiedDate":"2023-03-15"},{"lineNumber":23,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":24,"author":{"gitId":"pangrwa"},"content":"    private static final String VALID_POLICY_NAME \u003d HEALTH.getPolicyName().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"    private static final String VALID_DATE \u003d HEALTH.getStartDate().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    private static final String VALID_PREMIUM \u003d HEALTH.getPremium().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"    private static final String VALID_FREQUENCY \u003d HEALTH.getFrequency().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_validPolicy_returnsPolicy() throws IllegalValueException {","lastModifiedDate":"2023-03-15"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d new JsonAdaptedPolicy(HEALTH);","lastModifiedDate":"2023-03-15"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"        assertEquals(HEALTH, policy.toModelType());","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_invalidPolicyName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":36,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":37,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(INVALID_POLICY_NAME, VALID_DATE, VALID_PREMIUM,","lastModifiedDate":"2023-03-15"},{"lineNumber":38,"author":{"gitId":"pangrwa"},"content":"                        VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d PolicyName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_nullPolicyName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(null, VALID_DATE, VALID_PREMIUM,","lastModifiedDate":"2023-03-15"},{"lineNumber":47,"author":{"gitId":"pangrwa"},"content":"                        VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":48,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PolicyName.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_invalidDate_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":55,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(VALID_POLICY_NAME, INVALID_DATE, VALID_PREMIUM,","lastModifiedDate":"2023-03-15"},{"lineNumber":56,"author":{"gitId":"pangrwa"},"content":"                        VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d CustomDate.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_nullDate_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":63,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":64,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(VALID_POLICY_NAME, null, VALID_PREMIUM, VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, CustomDate.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_invalidPremium_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":71,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":72,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_DATE, INVALID_PREMIUM, VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d Premium.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_nullPremium_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":79,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":80,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_DATE, null, VALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Premium.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":84,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":85,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":86,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_invalidFrequency_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":87,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":88,"author":{"gitId":"pangrwa"},"content":"                new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_DATE, VALID_PREMIUM, INVALID_FREQUENCY);","lastModifiedDate":"2023-03-15"},{"lineNumber":89,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d Frequency.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":90,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":91,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":92,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":93,"author":{"gitId":"pangrwa"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":94,"author":{"gitId":"pangrwa"},"content":"    public void toModelType_nullFrequency_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":95,"author":{"gitId":"pangrwa"},"content":"        JsonAdaptedPolicy policy \u003d","lastModifiedDate":"2023-03-15"},{"lineNumber":96,"author":{"gitId":"pangrwa"},"content":"               new JsonAdaptedPolicy(VALID_POLICY_NAME, VALID_DATE, VALID_PREMIUM, null);","lastModifiedDate":"2023-03-15"},{"lineNumber":97,"author":{"gitId":"pangrwa"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Frequency.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":98,"author":{"gitId":"pangrwa"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, policy::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":99,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"}","lastModifiedDate":"2023-03-15"}],"authorContributionMap":{"pangrwa":100}},{"path":"src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"//import static seedu.address.testutil.TypicalClients.ALICE;","lastModifiedDate":"2023-03-13"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"//import static seedu.address.testutil.TypicalClients.HOON;","lastModifiedDate":"2023-03-13"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"//import static seedu.address.testutil.TypicalClients.IDA;","lastModifiedDate":"2023-03-13"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"//import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class JsonAddressBookStorageTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void readAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"    public void readAddressBook_invalidClientAddressBook_throwDataConversionException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidClientAddressBook.json\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"    public void readAddressBook_invalidAndValidClientAddressBook_throwDataConversionException() {","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidClientAddressBook.json\"));","lastModifiedDate":"2023-03-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public void readAndSaveAddressBook_allInOrder_success() throws Exception {","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // Save in new file and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2018-08-13"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"        original.addClient(HOON);","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"anunayajoshi"},"content":"        original.removeClient(ALICE);","lastModifiedDate":"2023-03-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original, filePath);","lastModifiedDate":"2018-08-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2018-08-13"},{"lineNumber":82,"author":{"gitId":"anunayajoshi"},"content":"        original.addClient(IDA);","lastModifiedDate":"2023-03-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        jsonAddressBookStorage.saveAddressBook(original); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified","lastModifiedDate":"2018-08-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(readBack));","lastModifiedDate":"2018-08-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":88,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Saves {@code addressBook} at the specified {@code filePath}.","lastModifiedDate":"2018-08-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {","lastModifiedDate":"2018-08-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-08-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            new JsonAddressBookStorage(Paths.get(filePath))","lastModifiedDate":"2018-08-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2018-08-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-08-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2018-08-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void saveAddressBook_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"anunayajoshi":14,"-":96}},{"path":"src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"anunayajoshi"},"content":"//import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.JsonUtil;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"//import seedu.address.testutil.TypicalClients;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonSerializableAddressBookTest {","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"    private static final Path TYPICAL_CLIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalClientsAddressBook.json\");","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"    private static final Path INVALID_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidClientAddressBook.json\");","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"    private static final Path DUPLICATE_CLIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateClientAddressBook.json\");","lastModifiedDate":"2023-03-06"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"    public void toModelType_typicalClientsFile_success() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_CLIENTS_FILE,","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":28,"author":{"gitId":"anunayajoshi"},"content":"        AddressBook typicalClientsAddressBook \u003d TypicalClients.getTypicalAddressBook();","lastModifiedDate":"2023-03-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"        assertEquals(addressBookFromFile, typicalClientsAddressBook);","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"    public void toModelType_invalidClientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_CLIENT_FILE,","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"anunayajoshi"},"content":"    public void toModelType_duplicateClients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-06"},{"lineNumber":42,"author":{"gitId":"anunayajoshi"},"content":"        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_CLIENT_FILE,","lastModifiedDate":"2023-03-06"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                JsonSerializableAddressBook.class).get();","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_CLIENT,","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2019-03-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"anunayajoshi":17,"-":31}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"anunayajoshi"},"content":"//import static seedu.address.testutil.TypicalClients.getTypicalAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"anunayajoshi"},"content":"//import seedu.address.model.AddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"//import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.UserPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void addressBookReadSave() throws Exception {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"         * {@link JsonAddressBookStorage} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class.","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"anunayajoshi"},"content":"    /*","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddressBook original \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        storageManager.saveAddressBook(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(original, new AddressBook(retrieved));","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    */","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void getAddressBookFilePath() {","lastModifiedDate":"2016-10-01"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertNotNull(storageManager.getAddressBookFilePath());","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anunayajoshi":6,"-":63}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"     * Adds a new {@code Client} to the {@code AddressBook} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public AddressBookBuilder withClient(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"        addressBook.addClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anunayajoshi":4,"-":30}},{"path":"src/test/java/seedu/address/testutil/ClientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-12-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-04-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":6,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-14"},{"lineNumber":12,"author":{"gitId":"pangrwa"},"content":"import seedu.address.model.client.policy.UniquePolicyList;","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-04-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.util.SampleDataUtil;","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":" * A utility class to help with building Client objects.","lastModifiedDate":"2023-03-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"public class ClientBuilder {","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"Amy Bee\";","lastModifiedDate":"2020-12-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_PHONE \u003d \"85355255\";","lastModifiedDate":"2017-04-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"amy@gmail.com\";","lastModifiedDate":"2020-12-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";","lastModifiedDate":"2017-04-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    public static final Policy DEFAULT_POLICY \u003d new PolicyBuilder().build();","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private Phone phone;","lastModifiedDate":"2017-12-20"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Email email;","lastModifiedDate":"2017-12-20"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Address address;","lastModifiedDate":"2017-12-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Set\u003cTag\u003e tags;","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"    private UniquePolicyList policyList;","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder() {","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        phone \u003d new Phone(DEFAULT_PHONE);","lastModifiedDate":"2017-12-20"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);","lastModifiedDate":"2017-12-20"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);","lastModifiedDate":"2017-12-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        tags \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"pangrwa"},"content":"        policyList \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Initializes the PersonBuilder with the data of {@code personToCopy}.","lastModifiedDate":"2016-12-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder(Client clientToCopy) {","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"        name \u003d clientToCopy.getName();","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        phone \u003d clientToCopy.getPhone();","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"anunayajoshi"},"content":"        email \u003d clientToCopy.getEmail();","lastModifiedDate":"2023-03-06"},{"lineNumber":55,"author":{"gitId":"anunayajoshi"},"content":"        address \u003d clientToCopy.getAddress();","lastModifiedDate":"2023-03-06"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"        tags \u003d new HashSet\u003c\u003e(clientToCopy.getTags());","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"pangrwa"},"content":"        policyList \u003d clientToCopy.getPolicyList();","lastModifiedDate":"2023-03-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Name} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":63,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder withName(String name) {","lastModifiedDate":"2023-03-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Client} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":71,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder withTags(String ... tags) {","lastModifiedDate":"2023-03-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);","lastModifiedDate":"2017-12-20"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Address} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":79,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder withAddress(String address) {","lastModifiedDate":"2023-03-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        this.address \u003d new Address(address);","lastModifiedDate":"2017-12-20"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":85,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Phone} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":87,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder withPhone(String phone) {","lastModifiedDate":"2023-03-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        this.phone \u003d new Phone(phone);","lastModifiedDate":"2017-12-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":93,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Email} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":95,"author":{"gitId":"anunayajoshi"},"content":"    public ClientBuilder withEmail(String email) {","lastModifiedDate":"2023-03-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        this.email \u003d new Email(email);","lastModifiedDate":"2017-12-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":100,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-03-14"},{"lineNumber":101,"author":{"gitId":"pangrwa"},"content":"     * Sets the {@code UniquePolicyList} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":102,"author":{"gitId":"pangrwa"},"content":"     * @param policies the policies that belong to the client.","lastModifiedDate":"2023-03-14"},{"lineNumber":103,"author":{"gitId":"pangrwa"},"content":"     * @return A ClientBuilder that builds into {@code Client} when called.","lastModifiedDate":"2023-03-14"},{"lineNumber":104,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-14"},{"lineNumber":105,"author":{"gitId":"pangrwa"},"content":"    public ClientBuilder withPolicyList(Policy... policies) {","lastModifiedDate":"2023-03-14"},{"lineNumber":106,"author":{"gitId":"pangrwa"},"content":"        policyList \u003d new UniquePolicyList();","lastModifiedDate":"2023-03-14"},{"lineNumber":107,"author":{"gitId":"pangrwa"},"content":"        for (Policy policy : policies) {","lastModifiedDate":"2023-03-14"},{"lineNumber":108,"author":{"gitId":"pangrwa"},"content":"            policyList.add(policy);","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"pangrwa"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":110,"author":{"gitId":"pangrwa"},"content":"        return this;","lastModifiedDate":"2023-03-14"},{"lineNumber":111,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":112,"author":{"gitId":"pangrwa"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":113,"author":{"gitId":"pangrwa"},"content":"    /**","lastModifiedDate":"2023-03-15"},{"lineNumber":114,"author":{"gitId":"pangrwa"},"content":"     * Sets the {@code UniquePolicyList} of the {@code Client} that we are building.","lastModifiedDate":"2023-03-15"},{"lineNumber":115,"author":{"gitId":"pangrwa"},"content":"     * @param policyList the policies that belong to the client.","lastModifiedDate":"2023-03-15"},{"lineNumber":116,"author":{"gitId":"pangrwa"},"content":"     * @return A ClientBuilder that builds into {@code Client} when called.","lastModifiedDate":"2023-03-15"},{"lineNumber":117,"author":{"gitId":"pangrwa"},"content":"     */","lastModifiedDate":"2023-03-15"},{"lineNumber":118,"author":{"gitId":"pangrwa"},"content":"    public ClientBuilder withPolicyList(UniquePolicyList policyList) {","lastModifiedDate":"2023-03-15"},{"lineNumber":119,"author":{"gitId":"pangrwa"},"content":"        this.policyList \u003d policyList;","lastModifiedDate":"2023-03-15"},{"lineNumber":120,"author":{"gitId":"pangrwa"},"content":"        return this;","lastModifiedDate":"2023-03-15"},{"lineNumber":121,"author":{"gitId":"pangrwa"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":122,"author":{"gitId":"pangrwa"},"content":"    // Don\u0027t need withPolicyList() because by default it should always be empty","lastModifiedDate":"2023-03-14"},{"lineNumber":123,"author":{"gitId":"anunayajoshi"},"content":"    public Client build() {","lastModifiedDate":"2023-03-06"},{"lineNumber":124,"author":{"gitId":"pangrwa"},"content":"        return new Client(name, phone, email, address, tags, policyList);","lastModifiedDate":"2023-03-14"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"anunayajoshi":25,"pangrwa":32,"-":70}},{"path":"src/test/java/seedu/address/testutil/ClientUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-04-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-05-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-05-09"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-06-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-05-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2018-03-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-03-29"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2018-03-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * A utility class for Person.","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"public class ClientUtil {","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"     * Returns an add command string for adding the {@code client}.","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"    public static String getAddCommand(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"anunayajoshi"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getClientDetails(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":29,"author":{"gitId":"anunayajoshi"},"content":"     * Returns the part of command string for the given {@code client}\u0027s details.","lastModifiedDate":"2023-03-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"    public static String getClientDetails(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"        sb.append(PREFIX_NAME + client.getName().fullName + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        sb.append(PREFIX_PHONE + client.getPhone().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        sb.append(PREFIX_EMAIL + client.getEmail().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        sb.append(PREFIX_ADDRESS + client.getAddress().value + \" \");","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        client.getTags().stream().forEach(","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")","lastModifiedDate":"2017-05-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        );","lastModifiedDate":"2017-05-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"     * Returns the part of command string for the given {@code EditClientDescriptor}\u0027s details.","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"    public static String getEditClientDescriptorDetails(EditCommand.EditClientDescriptor descriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (descriptor.getTags().isPresent()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();","lastModifiedDate":"2018-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            if (tags.isEmpty()) {","lastModifiedDate":"2018-03-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                sb.append(PREFIX_TAG);","lastModifiedDate":"2018-03-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2018-03-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-03-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"anunayajoshi":15,"-":47}},{"path":"src/test/java/seedu/address/testutil/EditClientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-05-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-12-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-12-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-12-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":7,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2023-03-06"},{"lineNumber":8,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Address;","lastModifiedDate":"2023-03-06"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Email;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Name;","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Phone;","lastModifiedDate":"2023-03-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-12-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"anunayajoshi"},"content":" * A utility class to help with building EditClientDescriptor objects.","lastModifiedDate":"2023-03-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"public class EditClientDescriptorBuilder {","lastModifiedDate":"2023-03-06"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"    private EditCommand.EditClientDescriptor descriptor;","lastModifiedDate":"2023-03-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder() {","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditCommand.EditClientDescriptor();","lastModifiedDate":"2023-03-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder(EditCommand.EditClientDescriptor descriptor) {","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"anunayajoshi"},"content":"        this.descriptor \u003d new EditCommand.EditClientDescriptor(descriptor);","lastModifiedDate":"2023-03-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"anunayajoshi"},"content":"     * Returns an {@code EditPersonDescriptor} with fields containing {@code client}\u0027s details","lastModifiedDate":"2023-03-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":33,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder(Client client) {","lastModifiedDate":"2023-03-06"},{"lineNumber":34,"author":{"gitId":"anunayajoshi"},"content":"        descriptor \u003d new EditCommand.EditClientDescriptor();","lastModifiedDate":"2023-03-06"},{"lineNumber":35,"author":{"gitId":"anunayajoshi"},"content":"        descriptor.setName(client.getName());","lastModifiedDate":"2023-03-06"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"        descriptor.setPhone(client.getPhone());","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"anunayajoshi"},"content":"        descriptor.setEmail(client.getEmail());","lastModifiedDate":"2023-03-06"},{"lineNumber":38,"author":{"gitId":"anunayajoshi"},"content":"        descriptor.setAddress(client.getAddress());","lastModifiedDate":"2023-03-06"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        descriptor.setTags(client.getTags());","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Name} of the {@code EditClientDescriptor} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":45,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder withName(String name) {","lastModifiedDate":"2023-03-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":51,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Phone} of the {@code EditClientDescriptor} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder withPhone(String phone) {","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        descriptor.setPhone(new Phone(phone));","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":59,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Email} of the {@code EditClientDescriptor} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":61,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder withEmail(String email) {","lastModifiedDate":"2023-03-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        descriptor.setEmail(new Email(email));","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":67,"author":{"gitId":"anunayajoshi"},"content":"     * Sets the {@code Address} of the {@code EditClientDescriptor} that we are building.","lastModifiedDate":"2023-03-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":69,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder withAddress(String address) {","lastModifiedDate":"2023-03-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        descriptor.setAddress(new Address(address));","lastModifiedDate":"2017-12-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"anunayajoshi"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditClientDescriptor}","lastModifiedDate":"2023-03-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"    public EditClientDescriptorBuilder withTags(String... tags) {","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());","lastModifiedDate":"2017-12-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        descriptor.setTags(tagSet);","lastModifiedDate":"2017-12-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":84,"author":{"gitId":"anunayajoshi"},"content":"    public EditCommand.EditClientDescriptor build() {","lastModifiedDate":"2023-03-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"anunayajoshi":32,"-":55}},{"path":"src/test/java/seedu/address/testutil/PolicyBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.CustomDate;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.Frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.PolicyName;","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.Premium;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":" * A utility class to help with building Policy objects.","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"public class PolicyBuilder {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"pangrwa"},"content":"    public static final String DEFAULT_POLICY_NAME \u003d \"Health\";","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"anunayajoshi"},"content":"    public static final String DEFAULT_DATE \u003d \"01.01.2023\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String DEFAULT_PREMIUM \u003d \"80.69\";","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String DEFAULT_FREQUENCY \u003d \"monthly\";","lastModifiedDate":"2023-03-10"},{"lineNumber":18,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":19,"author":{"gitId":"YZmunchmunch"},"content":"    private PolicyName name;","lastModifiedDate":"2023-03-10"},{"lineNumber":20,"author":{"gitId":"YZmunchmunch"},"content":"    private CustomDate date;","lastModifiedDate":"2023-03-10"},{"lineNumber":21,"author":{"gitId":"YZmunchmunch"},"content":"    private Premium premium;","lastModifiedDate":"2023-03-10"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    private Frequency frequency;","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"YZmunchmunch"},"content":"     * Creates a {@code PolicyBuilder} with the default details.","lastModifiedDate":"2023-03-10"},{"lineNumber":26,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder() {","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"pangrwa"},"content":"        name \u003d new PolicyName(DEFAULT_POLICY_NAME);","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"        date \u003d new CustomDate(DEFAULT_DATE);","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"        premium \u003d new Premium(DEFAULT_PREMIUM);","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"        frequency \u003d new Frequency(DEFAULT_FREQUENCY);","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"     * Initializes the PolicyBuilder with the data of {@code policyToCopy}.","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder(Policy policyToCopy) {","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"        name \u003d policyToCopy.getPolicyName();","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"        date \u003d policyToCopy.getStartDate();","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"        premium \u003d policyToCopy.getPremium();","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"        frequency \u003d policyToCopy.getFrequency();","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"     * Sets the {@code Name} of the {@code Policy} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder withPolicyName(String name) {","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"        this.name \u003d new PolicyName(name);","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"        return this;","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":53,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":54,"author":{"gitId":"YZmunchmunch"},"content":"     * Sets the {@code CustomDate} of the {@code Policy} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":55,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":56,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder withStartDate(String date) {","lastModifiedDate":"2023-03-10"},{"lineNumber":57,"author":{"gitId":"YZmunchmunch"},"content":"        this.date \u003d new CustomDate(date);","lastModifiedDate":"2023-03-10"},{"lineNumber":58,"author":{"gitId":"YZmunchmunch"},"content":"        return this;","lastModifiedDate":"2023-03-10"},{"lineNumber":59,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":60,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":61,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":62,"author":{"gitId":"YZmunchmunch"},"content":"     * Sets the {@code Premium} of the {@code Policy} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":63,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":64,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder withPremium(String premium) {","lastModifiedDate":"2023-03-10"},{"lineNumber":65,"author":{"gitId":"YZmunchmunch"},"content":"        this.premium \u003d new Premium(premium);","lastModifiedDate":"2023-03-10"},{"lineNumber":66,"author":{"gitId":"YZmunchmunch"},"content":"        return this;","lastModifiedDate":"2023-03-10"},{"lineNumber":67,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":68,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":69,"author":{"gitId":"YZmunchmunch"},"content":"    /**","lastModifiedDate":"2023-03-10"},{"lineNumber":70,"author":{"gitId":"YZmunchmunch"},"content":"     * Sets the {@code Frequency} of the {@code Policy} that we are building.","lastModifiedDate":"2023-03-10"},{"lineNumber":71,"author":{"gitId":"YZmunchmunch"},"content":"     */","lastModifiedDate":"2023-03-10"},{"lineNumber":72,"author":{"gitId":"YZmunchmunch"},"content":"    public PolicyBuilder withFrequency(String frequency) {","lastModifiedDate":"2023-03-10"},{"lineNumber":73,"author":{"gitId":"YZmunchmunch"},"content":"        this.frequency \u003d new Frequency(frequency);","lastModifiedDate":"2023-03-10"},{"lineNumber":74,"author":{"gitId":"YZmunchmunch"},"content":"        return this;","lastModifiedDate":"2023-03-10"},{"lineNumber":75,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":76,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":77,"author":{"gitId":"YZmunchmunch"},"content":"    public Policy build() {","lastModifiedDate":"2023-03-10"},{"lineNumber":78,"author":{"gitId":"YZmunchmunch"},"content":"        return new Policy(name, date, premium, frequency);","lastModifiedDate":"2023-03-10"},{"lineNumber":79,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":80,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":81,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":78,"pangrwa":2,"anunayajoshi":1}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-07-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-07-30"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"     * Returns the middle index of the client in the {@code model}\u0027s client list.","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"anunayajoshi"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size() / 2);","lastModifiedDate":"2023-03-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"anunayajoshi"},"content":"     * Returns the last index of the client in the {@code model}\u0027s client list.","lastModifiedDate":"2023-03-06"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"        return Index.fromOneBased(model.getFilteredClientList().size());","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"     * Returns the client in the {@code model}\u0027s client list at {@code index}.","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"    public static Client getClient(Model model, Index index) {","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"anunayajoshi"},"content":"        return model.getFilteredClientList().get(index.getZeroBased());","lastModifiedDate":"2023-03-06"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"anunayajoshi":8,"-":47}},{"path":"src/test/java/seedu/address/testutil/TypicalClients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-09-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;","lastModifiedDate":"2017-08-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;","lastModifiedDate":"2017-08-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;","lastModifiedDate":"2017-08-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2017-08-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-08-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-08-07"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-08-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-07"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"import seedu.address.model.client.Client;","lastModifiedDate":"2023-03-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-13"},{"lineNumber":22,"author":{"gitId":"anunayajoshi"},"content":" * A utility class containing a list of {@code Client} objects to be used in tests.","lastModifiedDate":"2023-03-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-13"},{"lineNumber":24,"author":{"gitId":"anunayajoshi"},"content":"public class TypicalClients {","lastModifiedDate":"2023-03-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":26,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client ALICE \u003d new ClientBuilder().withName(\"Alice Pauline\")","lastModifiedDate":"2023-03-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")","lastModifiedDate":"2017-04-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            .withPhone(\"94351253\")","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"pangrwa"},"content":"            .withTags(\"friends\")","lastModifiedDate":"2023-03-14"},{"lineNumber":30,"author":{"gitId":"pangrwa"},"content":"            .withPolicyList(","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"pangrwa"},"content":"                    new PolicyBuilder().withPolicyName(\"Fire Insurance\").withStartDate(\"31.01.2023\")","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"pangrwa"},"content":"                            .withPremium(\"1000\").withFrequency(\"monthly\").build(),","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"pangrwa"},"content":"                    new PolicyBuilder().withPolicyName(\"Water Insurance\").withStartDate(\"11.11.2023\")","lastModifiedDate":"2023-03-14"},{"lineNumber":34,"author":{"gitId":"pangrwa"},"content":"                            .withPremium(\"2000\").withFrequency(\"monthly\").build()","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"pangrwa"},"content":"            ).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":36,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client BENSON \u003d new ClientBuilder().withName(\"Benson Meier\")","lastModifiedDate":"2023-03-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .withAddress(\"311, Clementi Ave 2, #02-25\")","lastModifiedDate":"2017-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")","lastModifiedDate":"2017-04-05"},{"lineNumber":39,"author":{"gitId":"pangrwa"},"content":"            .withTags(\"owesMoney\", \"friends\")","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"pangrwa"},"content":"            .withPolicyList(","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"pangrwa"},"content":"                    new PolicyBuilder().withPolicyName(\"Health Insurance\").withStartDate(\"31.01.2023\")","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"pangrwa"},"content":"                            .withPremium(\"1000\").withFrequency(\"weekly\").build()","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"pangrwa"},"content":"            ).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client CARL \u003d new ClientBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")","lastModifiedDate":"2023-03-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":46,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client DANIEL \u003d new ClientBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")","lastModifiedDate":"2023-03-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();","lastModifiedDate":"2018-03-26"},{"lineNumber":48,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client ELLE \u003d new ClientBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")","lastModifiedDate":"2023-03-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":50,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client FIONA \u003d new ClientBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")","lastModifiedDate":"2023-03-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":52,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client GEORGE \u003d new ClientBuilder().withName(\"George Best\").withPhone(\"9482442\")","lastModifiedDate":"2023-03-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    // Manually added","lastModifiedDate":"2016-09-13"},{"lineNumber":56,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client HOON \u003d new ClientBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")","lastModifiedDate":"2023-03-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client IDA \u003d new ClientBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")","lastModifiedDate":"2023-03-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();","lastModifiedDate":"2017-04-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2017-08-22"},{"lineNumber":62,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client AMY \u003d new ClientBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)","lastModifiedDate":"2023-03-06"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-09-21"},{"lineNumber":64,"author":{"gitId":"anunayajoshi"},"content":"    public static final Client BOB \u003d new ClientBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)","lastModifiedDate":"2023-03-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)","lastModifiedDate":"2017-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            .build();","lastModifiedDate":"2017-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-21"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2017-09-21"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-13"},{"lineNumber":70,"author":{"gitId":"anunayajoshi"},"content":"    private TypicalClients() {} // prevents instantiation","lastModifiedDate":"2023-03-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":73,"author":{"gitId":"anunayajoshi"},"content":"     * Returns an {@code AddressBook} with all the typical clients.","lastModifiedDate":"2023-03-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2017-08-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2017-08-05"},{"lineNumber":77,"author":{"gitId":"anunayajoshi"},"content":"        for (Client client : getTypicalClients()) {","lastModifiedDate":"2023-03-06"},{"lineNumber":78,"author":{"gitId":"anunayajoshi"},"content":"            ab.addClient(client);","lastModifiedDate":"2023-03-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        return ab;","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-04"},{"lineNumber":83,"author":{"gitId":"anunayajoshi"},"content":"    public static List\u003cClient\u003e getTypicalClients() {","lastModifiedDate":"2023-03-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2017-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-08-04"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-13"}],"authorContributionMap":{"anunayajoshi":19,"pangrwa":12,"-":55}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2017-08-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"anunayajoshi"},"content":"    public static final Index INDEX_FIRST_CLIENT \u003d Index.fromOneBased(1);","lastModifiedDate":"2023-03-06"},{"lineNumber":10,"author":{"gitId":"anunayajoshi"},"content":"    public static final Index INDEX_SECOND_CLIENT \u003d Index.fromOneBased(2);","lastModifiedDate":"2023-03-06"},{"lineNumber":11,"author":{"gitId":"anunayajoshi"},"content":"    public static final Index INDEX_THIRD_CLIENT \u003d Index.fromOneBased(3);","lastModifiedDate":"2023-03-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"anunayajoshi":3,"-":9}},{"path":"src/test/java/seedu/address/testutil/TypicalPolicies.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"YZmunchmunch"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-03-10"},{"lineNumber":2,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":3,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-10"},{"lineNumber":4,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-10"},{"lineNumber":5,"author":{"gitId":"YZmunchmunch"},"content":"import java.util.List;","lastModifiedDate":"2023-03-10"},{"lineNumber":6,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":7,"author":{"gitId":"YZmunchmunch"},"content":"import seedu.address.model.client.policy.Policy;","lastModifiedDate":"2023-03-10"},{"lineNumber":8,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":9,"author":{"gitId":"YZmunchmunch"},"content":"/**","lastModifiedDate":"2023-03-10"},{"lineNumber":10,"author":{"gitId":"YZmunchmunch"},"content":" * A utility class containing a typical set of policies for testing purposes.","lastModifiedDate":"2023-03-10"},{"lineNumber":11,"author":{"gitId":"YZmunchmunch"},"content":" */","lastModifiedDate":"2023-03-10"},{"lineNumber":12,"author":{"gitId":"YZmunchmunch"},"content":"public class TypicalPolicies {","lastModifiedDate":"2023-03-10"},{"lineNumber":13,"author":{"gitId":"YZmunchmunch"},"content":"    public static final Policy HEALTH \u003d new PolicyBuilder().withPolicyName(\"Health\")","lastModifiedDate":"2023-03-10"},{"lineNumber":14,"author":{"gitId":"YZmunchmunch"},"content":"            .withStartDate(\"01.02.2023\")","lastModifiedDate":"2023-03-10"},{"lineNumber":15,"author":{"gitId":"YZmunchmunch"},"content":"            .withPremium(\"80.50\")","lastModifiedDate":"2023-03-10"},{"lineNumber":16,"author":{"gitId":"YZmunchmunch"},"content":"            .withFrequency(\"monthly\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":17,"author":{"gitId":"anunayajoshi"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"anunayajoshi"},"content":"    public static final Policy AMY_POLICY \u003d new PolicyBuilder().withPolicyName(\"Life Insurance\")","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"anunayajoshi"},"content":"            .withStartDate(\"01.01.2020\")","lastModifiedDate":"2023-03-13"},{"lineNumber":20,"author":{"gitId":"anunayajoshi"},"content":"            .withPremium(\"1000\")","lastModifiedDate":"2023-03-13"},{"lineNumber":21,"author":{"gitId":"anunayajoshi"},"content":"            .withFrequency(\"monthly\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":22,"author":{"gitId":"YZmunchmunch"},"content":"    public static final Policy LIFE \u003d new PolicyBuilder().withPolicyName(\"Life\")","lastModifiedDate":"2023-03-10"},{"lineNumber":23,"author":{"gitId":"YZmunchmunch"},"content":"            .withStartDate(\"02.03.2023\")","lastModifiedDate":"2023-03-10"},{"lineNumber":24,"author":{"gitId":"YZmunchmunch"},"content":"            .withPremium(\"98.20\")","lastModifiedDate":"2023-03-10"},{"lineNumber":25,"author":{"gitId":"pangrwa"},"content":"            .withFrequency(\"weekly\").build();","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"pangrwa"},"content":"    public static final Policy PERSONAL_INJURY \u003d new PolicyBuilder().withPolicyName(\"Personal Injury\")","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"YZmunchmunch"},"content":"            .withStartDate(\"03.04.2023\")","lastModifiedDate":"2023-03-10"},{"lineNumber":28,"author":{"gitId":"YZmunchmunch"},"content":"            .withPremium(\"350.15\")","lastModifiedDate":"2023-03-10"},{"lineNumber":29,"author":{"gitId":"YZmunchmunch"},"content":"            .withFrequency(\"yearly\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":30,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":31,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":32,"author":{"gitId":"YZmunchmunch"},"content":"    // Manually added","lastModifiedDate":"2023-03-10"},{"lineNumber":33,"author":{"gitId":"YZmunchmunch"},"content":"    public static final Policy TRAVEL \u003d new PolicyBuilder().withPolicyName(\"Travel\")","lastModifiedDate":"2023-03-10"},{"lineNumber":34,"author":{"gitId":"YZmunchmunch"},"content":"            .withStartDate(\"04.05.2023\")","lastModifiedDate":"2023-03-10"},{"lineNumber":35,"author":{"gitId":"YZmunchmunch"},"content":"            .withPremium(\"20.00\")","lastModifiedDate":"2023-03-10"},{"lineNumber":36,"author":{"gitId":"YZmunchmunch"},"content":"            .withFrequency(\"monthly\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":37,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":38,"author":{"gitId":"YZmunchmunch"},"content":"    // Manually added - Person\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-03-10"},{"lineNumber":39,"author":{"gitId":"YZmunchmunch"},"content":"    public static final Policy DEATH \u003d new PolicyBuilder().withPolicyName(\"DEATH\")","lastModifiedDate":"2023-03-10"},{"lineNumber":40,"author":{"gitId":"YZmunchmunch"},"content":"            .withStartDate(\"05.06.2023\")","lastModifiedDate":"2023-03-10"},{"lineNumber":41,"author":{"gitId":"YZmunchmunch"},"content":"            .withPremium(\"700.10\")","lastModifiedDate":"2023-03-10"},{"lineNumber":42,"author":{"gitId":"YZmunchmunch"},"content":"            .withFrequency(\"yearly\").build();","lastModifiedDate":"2023-03-10"},{"lineNumber":43,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":44,"author":{"gitId":"YZmunchmunch"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-03-10"},{"lineNumber":45,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":46,"author":{"gitId":"YZmunchmunch"},"content":"    private TypicalPolicies() {} // prevents instantiation","lastModifiedDate":"2023-03-10"},{"lineNumber":47,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":48,"author":{"gitId":"YZmunchmunch"},"content":"","lastModifiedDate":"2023-03-10"},{"lineNumber":49,"author":{"gitId":"YZmunchmunch"},"content":"    public static List\u003cPolicy\u003e getTypicalPolicies() {","lastModifiedDate":"2023-03-10"},{"lineNumber":50,"author":{"gitId":"pangrwa"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(HEALTH, LIFE, PERSONAL_INJURY));","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"YZmunchmunch"},"content":"    }","lastModifiedDate":"2023-03-10"},{"lineNumber":52,"author":{"gitId":"YZmunchmunch"},"content":"}","lastModifiedDate":"2023-03-10"}],"authorContributionMap":{"YZmunchmunch":44,"anunayajoshi":5,"pangrwa":3}}]
