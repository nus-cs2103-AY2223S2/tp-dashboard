[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"[![CI Status](https://github.com/AY2223S2-CS2103-W16-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2223S2-CS2103-W16-3/tp/actions) [![codecov](https://codecov.io/gh/AY2223S2-CS2103-W16-3/tp/branch/master/graph/badge.svg?token\u003diFjc7JuvIC)](https://codecov.io/gh/AY2223S2-CS2103-W16-3/tp)","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"jerome-neo"},"content":"- This is **a sample project for Software Engineering (SE) students**.\u003cbr\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"jerome-neo"},"content":"  - as a starting point of a course project (as opposed to writing everything from scratch)","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"jerome-neo"},"content":"  - as a case study","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"- The project simulates an ongoing software project for a desktop application (called _AddressBook_) used for managing contact details.","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"  - It is **written in OOP fashion**. It provides a **reasonably well-written** code base **bigger** (around 6 KLoC) than what students usually write in beginner-level SE modules, without being overwhelmingly big.","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"  - It comes with a **reasonable level of user and developer documentation**.","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jerome-neo"},"content":"- It is named `AddressBook Level 3` (`AB3` for short) because it was initially created as a part of a series of `AddressBook` projects (`Level 1`, `Level 2`, `Level 3` ...).","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":"- For the detailed documentation of this project, see the **[Address Book Product Website](https://se-education.org/addressbook-level3)**.","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"jerome-neo"},"content":"- This project is a **part of the se-education.org** initiative. If you would like to contribute code to this project, see [se-education.org](https://se-education.org#https://se-education.org/#contributing) for more info.","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"- This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"venuslimm":4,"jerome-neo":9,"-":4}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"### Ang Jun Kang","lastModifiedDate":"2023-02-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"Irminrics"},"content":"\u003cimg src\u003d\"images/irminrics.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":"[[github](https://github.com/Irminrics)]","lastModifiedDate":"2023-02-22"},{"lineNumber":15,"author":{"gitId":"Irminrics"},"content":"[[portfolio](team/irminrics.md)]","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"- Role: Team Lead","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"- Responsibilites: Pull request approver","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"jerome-neo"},"content":"### Jerome Neo","lastModifiedDate":"2023-02-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"\u003cimg src\u003d\"images/jerome-neo.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"[[github](http://github.com/jerome-neo)]","lastModifiedDate":"2023-02-22"},{"lineNumber":25,"author":{"gitId":"jerome-neo"},"content":"[[portfolio](team/jerome-neo.md)]","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"jerome-neo"},"content":"- Role: Developer","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"- Responsibilities: Documentation, Testing","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"jerome-neo"},"content":"### Lim Jia Yi Venus","lastModifiedDate":"2023-02-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"\u003cimg src\u003d\"images/venuslimm.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"[[github](http://github.com/venuslimm)]","lastModifiedDate":"2023-02-22"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"[[portfolio](team/venuslimm.md)]","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"- Role: Developer","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"- Responsibilities: Documentation Quality, Integration","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"### Lin Weilin","lastModifiedDate":"2023-02-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"\u003cimg src\u003d\"images/weilin1202.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"[[github](http://github.com/weilin1202)]","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"jerome-neo"},"content":"[[portfolio](team/weilin1202.md)]","lastModifiedDate":"2023-02-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"jerome-neo"},"content":"- Role: Developer","lastModifiedDate":"2023-02-23"},{"lineNumber":48,"author":{"gitId":"jerome-neo"},"content":"- Responsibilities: Testing, Code Quality","lastModifiedDate":"2023-02-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"### Song Yi, Ina","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"jerome-neo"},"content":"\u003cimg src\u003d\"images/inas0ng.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"jerome-neo"},"content":"[[github](http://github.com/inas0ng)]","lastModifiedDate":"2023-02-22"},{"lineNumber":55,"author":{"gitId":"jerome-neo"},"content":"[[portfolio](team/inas0ng.md)]","lastModifiedDate":"2023-02-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"jerome-neo"},"content":"- Role: Developer","lastModifiedDate":"2023-02-23"},{"lineNumber":58,"author":{"gitId":"jerome-neo"},"content":"- Responsibilities: Testing, Deliverables and Deadline","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jerome-neo":28,"-":28,"Irminrics":2}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":6,"author":{"gitId":"jerome-neo"},"content":"- Table of Contents","lastModifiedDate":"2023-02-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"  {:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## **Acknowledgements**","lastModifiedDate":"2021-07-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":13,"author":{"gitId":"jerome-neo"},"content":"- {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2023-02-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":15,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"## **Setting up, getting started**","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"## **Design**","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"The **_Architecture Diagram_** given above explains the high-level design of the App.","lastModifiedDate":"2023-02-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"- At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-02-22"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"- At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-02-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"- [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2023-02-22"},{"lineNumber":51,"author":{"gitId":"jerome-neo"},"content":"- [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2023-02-22"},{"lineNumber":52,"author":{"gitId":"jerome-neo"},"content":"- [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2023-02-22"},{"lineNumber":53,"author":{"gitId":"jerome-neo"},"content":"- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2023-02-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"jerome-neo"},"content":"The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2023-02-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"jerome-neo"},"content":"- defines its _API_ in an `interface` with the same name as the Component.","lastModifiedDate":"2023-02-22"},{"lineNumber":64,"author":{"gitId":"jerome-neo"},"content":"- implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.","lastModifiedDate":"2023-02-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"jerome-neo"},"content":"- executes user commands using the `Logic` component.","lastModifiedDate":"2023-02-22"},{"lineNumber":85,"author":{"gitId":"jerome-neo"},"content":"- listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2023-02-22"},{"lineNumber":86,"author":{"gitId":"jerome-neo"},"content":"- keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2023-02-22"},{"lineNumber":87,"author":{"gitId":"jerome-neo"},"content":"- depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2023-02-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a person).","lastModifiedDate":"2021-07-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":116,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":117,"author":{"gitId":"jerome-neo"},"content":"- When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2023-02-22"},{"lineNumber":118,"author":{"gitId":"jerome-neo"},"content":"- All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2023-02-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":121,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"jerome-neo"},"content":"- stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2023-02-22"},{"lineNumber":129,"author":{"gitId":"jerome-neo"},"content":"- stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-02-22"},{"lineNumber":130,"author":{"gitId":"jerome-neo"},"content":"- stores a `UserPref` object that represents the user’s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2023-02-22"},{"lineNumber":131,"author":{"gitId":"jerome-neo"},"content":"- does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2023-02-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique tag, instead of each `Person` needing their own `Tag` objects.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/BetterModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":147,"author":{"gitId":"jerome-neo"},"content":"- can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2023-02-22"},{"lineNumber":148,"author":{"gitId":"jerome-neo"},"content":"- inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-02-22"},{"lineNumber":149,"author":{"gitId":"jerome-neo"},"content":"- depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2023-02-22"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":"This section describes some noteworthy details on how certain features are implemented.","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"jerome-neo"},"content":"- `VersionedAddressBook#commit()` — Saves the current address book state in its history.","lastModifiedDate":"2023-02-22"},{"lineNumber":168,"author":{"gitId":"jerome-neo"},"content":"- `VersionedAddressBook#undo()` — Restores the previous address book state from its history.","lastModifiedDate":"2023-02-22"},{"lineNumber":169,"author":{"gitId":"jerome-neo"},"content":"- `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history.","lastModifiedDate":"2023-02-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"jerome-neo"},"content":"- **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2023-02-22"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-22"},{"lineNumber":232,"author":{"gitId":"jerome-neo"},"content":"  - Pros: Easy to implement.","lastModifiedDate":"2023-02-22"},{"lineNumber":233,"author":{"gitId":"jerome-neo"},"content":"  - Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2023-02-22"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"jerome-neo"},"content":"- **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2023-02-22"},{"lineNumber":236,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"jerome-neo"},"content":"  - Pros: Will use less memory (e.g. for `delete`, just save the person being deleted).","lastModifiedDate":"2023-02-22"},{"lineNumber":238,"author":{"gitId":"jerome-neo"},"content":"  - Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2023-02-22"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":247,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"jerome-neo"},"content":"- [Documentation guide](Documentation.md)","lastModifiedDate":"2023-02-22"},{"lineNumber":251,"author":{"gitId":"jerome-neo"},"content":"- [Testing guide](Testing.md)","lastModifiedDate":"2023-02-22"},{"lineNumber":252,"author":{"gitId":"jerome-neo"},"content":"- [Logging guide](Logging.md)","lastModifiedDate":"2023-02-22"},{"lineNumber":253,"author":{"gitId":"jerome-neo"},"content":"- [Configuration guide](Configuration.md)","lastModifiedDate":"2023-02-22"},{"lineNumber":254,"author":{"gitId":"jerome-neo"},"content":"- [DevOps guide](DevOps.md)","lastModifiedDate":"2023-02-22"},{"lineNumber":255,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":257,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"### Product scope","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"**Target user profile**:","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"Irminrics"},"content":"- has a need to manage a significant number of contacts and events","lastModifiedDate":"2023-02-26"},{"lineNumber":265,"author":{"gitId":"jerome-neo"},"content":"- prefer desktop apps over other types","lastModifiedDate":"2023-02-22"},{"lineNumber":266,"author":{"gitId":"jerome-neo"},"content":"- can type fast","lastModifiedDate":"2023-02-22"},{"lineNumber":267,"author":{"gitId":"jerome-neo"},"content":"- prefers typing to mouse interactions","lastModifiedDate":"2023-02-22"},{"lineNumber":268,"author":{"gitId":"jerome-neo"},"content":"- is reasonably comfortable using CLI apps","lastModifiedDate":"2023-02-22"},{"lineNumber":269,"author":{"gitId":"Irminrics"},"content":"- does not have much storage space for multiple apps to support their work","lastModifiedDate":"2023-02-26"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"Irminrics"},"content":"**Value proposition**: efficient centralised platform for users to manage their event planning work through typing","lastModifiedDate":"2023-02-26"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"| Priority | As a …​                 | I want to …​                                               | So that I can…​                                         |","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"Irminrics"},"content":"|-----|-------------------------|------------------------------------------------------------|---------------------------------------------------------|","lastModifiedDate":"2023-02-26"},{"lineNumber":279,"author":{"gitId":"Irminrics"},"content":"| `* * *` | event planner           | add my own event                                           | refer to instructions when I forget how to use the App  |","lastModifiedDate":"2023-02-26"},{"lineNumber":280,"author":{"gitId":"Irminrics"},"content":"| `* * *` | event planner           | view all my events                                         | track all the upcoming events I have                    |","lastModifiedDate":"2023-02-26"},{"lineNumber":281,"author":{"gitId":"Irminrics"},"content":"| `* * *` | event planner           | delete an existing event                                   | delete event that have ended                            |","lastModifiedDate":"2023-02-26"},{"lineNumber":282,"author":{"gitId":"Irminrics"},"content":"| `* * *` | event planner           | add an existing event to a new contact                     | -                                                       |","lastModifiedDate":"2023-02-26"},{"lineNumber":283,"author":{"gitId":"Irminrics"},"content":"| `* *` | event planner           | search for events via names                                | locate events easily  |","lastModifiedDate":"2023-02-26"},{"lineNumber":284,"author":{"gitId":"Irminrics"},"content":"| `* *` | forgetful event planner | be reminded that I have entered the event of the same name | avoid adding the same event name  |","lastModifiedDate":"2023-02-26"},{"lineNumber":285,"author":{"gitId":"Irminrics"},"content":"| `* *` | new event planner       | sort upcoming events according to dates                                | prioritize events when I am planning  |","lastModifiedDate":"2023-02-26"},{"lineNumber":286,"author":{"gitId":"Irminrics"},"content":"| `* *` | event planner           | list all contacts from a particular event                                | know the people associated to this event  |","lastModifiedDate":"2023-02-26"},{"lineNumber":287,"author":{"gitId":"Irminrics"},"content":"| `* *` | event planner           | add overall-in-charge for every event                          | know who to approach for issues related to the event  |","lastModifiedDate":"2023-02-26"},{"lineNumber":288,"author":{"gitId":"Irminrics"},"content":"| `*` | event planner           | set up a checklist of customer’s requirements                             | account for every need  |","lastModifiedDate":"2023-02-26"},{"lineNumber":289,"author":{"gitId":"Irminrics"},"content":"| `*` | forgetful event planner | set reminders conveniently                                | be on track with things  |","lastModifiedDate":"2023-02-26"},{"lineNumber":290,"author":{"gitId":"Irminrics"},"content":"| `*` | forgetful event planner | receive reminders for upcoming events                                | avoid forgetting about the event  |","lastModifiedDate":"2023-02-26"},{"lineNumber":291,"author":{"gitId":"Irminrics"},"content":"| `*` | event planner           | archive old events                                | view and take reference from old events  |","lastModifiedDate":"2023-02-26"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"(For all use cases below, the **System** is the `AddressBook` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"**Use case: Delete a person**","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":302,"author":{"gitId":"-"},"content":"1.  User requests to list persons","lastModifiedDate":"2020-05-23"},{"lineNumber":303,"author":{"gitId":"-"},"content":"2.  AddressBook shows a list of persons","lastModifiedDate":"2020-05-23"},{"lineNumber":304,"author":{"gitId":"-"},"content":"3.  User requests to delete a specific person in the list","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"4.  AddressBook deletes the person","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"jerome-neo"},"content":"- 2a. The list is empty.","lastModifiedDate":"2023-02-22"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"jerome-neo"},"content":"- 3a. The given index is invalid.","lastModifiedDate":"2023-02-22"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"jerome-neo"},"content":"  - 3a1. AddressBook shows an error message.","lastModifiedDate":"2023-02-22"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"jerome-neo"},"content":"_{More to be added}_","lastModifiedDate":"2023-02-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":326,"author":{"gitId":"-"},"content":"2.  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"jerome-neo"},"content":"4.  Support for a standard Gregorian calendar.","lastModifiedDate":"2023-02-22"},{"lineNumber":329,"author":{"gitId":"Irminrics"},"content":"5.  Should be usable by a novice.","lastModifiedDate":"2023-02-26"},{"lineNumber":330,"author":{"gitId":"Irminrics"},"content":"6.  Should minimally support ASCII characters.","lastModifiedDate":"2023-02-26"},{"lineNumber":331,"author":{"gitId":"Irminrics"},"content":"7.  Must perform without failure in 95 percent of use cases during a month.","lastModifiedDate":"2023-02-26"},{"lineNumber":332,"author":{"gitId":"Irminrics"},"content":"8.  GUI color scheme should have high contrast and font size must not be too small, to aid those with vision impairments.","lastModifiedDate":"2023-02-26"},{"lineNumber":333,"author":{"gitId":"Irminrics"},"content":"9.  Application file size should not exceed (.jar/.zip) 100MB.","lastModifiedDate":"2023-02-26"},{"lineNumber":334,"author":{"gitId":"Irminrics"},"content":"10. Should only allow for 1 instance of the application running each time to ensure that data saved is consistent.","lastModifiedDate":"2023-02-26"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"jerome-neo"},"content":"- **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2023-02-22"},{"lineNumber":339,"author":{"gitId":"Irminrics"},"content":"- **Gregorian Calendar**: Solar calendar with 12 months of 28-31 days each, used in most parts of the world","lastModifiedDate":"2023-02-26"},{"lineNumber":340,"author":{"gitId":"Irminrics"},"content":"- **ASCII Characters**: A 7-bit character set containing 128 characters. It contains the numbers from 0-9, the upper and lower case English letters from A to Z, and some special characters","lastModifiedDate":"2023-02-26"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-22"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":359,"author":{"gitId":"-"},"content":"   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":361,"author":{"gitId":"-"},"content":"1. Saving window preferences","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":363,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":365,"author":{"gitId":"-"},"content":"   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":366,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":368,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":370,"author":{"gitId":"-"},"content":"### Deleting a person","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":372,"author":{"gitId":"-"},"content":"1. Deleting a person while all persons are being shown","lastModifiedDate":"2020-05-23"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list.","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"   1. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"   1. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"-"},"content":"      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2020-05-23"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":383,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":385,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":387,"author":{"gitId":"-"},"content":"### Saving data","lastModifiedDate":"2020-05-23"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":389,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":391,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"1. _{ more test cases …​ }_","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"jerome-neo":62,"-":306,"Irminrics":25}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Irminrics"},"content":"PlanEase is a **desktop app tailored for event planners to organise and manage their contacts**. It is optimised for use via a Command Line Interface (CLI), while still retaining the familiar GUI from the AB3 address book. If you are a fast typist, PlanEase will accelerate your current workflow compared to your traditional address books.","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Download the latest `addressbook.jar` from [here](https://github.com/se-edu/addressbook-level3/releases).","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your AddressBook.","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"1. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar addressbook.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   A GUI similar to the below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-01-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   * `list` : Lists all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   * `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : Adds a contact named `John Doe` to the Address Book.","lastModifiedDate":"2023-01-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * `delete 3` : Deletes the 3rd contact shown in the current list.","lastModifiedDate":"2023-01-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   * `clear` : Deletes all contacts.","lastModifiedDate":"2023-01-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   * `exit` : Exits the app.","lastModifiedDate":"2023-01-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"  e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"* Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"* Items with `…`​ after them can be used multiple times including zero times.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"  e.g. `[t/TAG]…​` can be used as ` ` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"* Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"* If a parameter is expected only once in the command but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"  e.g. if you specify `p/12341234 p/56785678`, only `p/56785678` will be taken.","lastModifiedDate":"2021-02-04"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":62,"author":{"gitId":"-"},"content":"* Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, `exit` and `clear`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2021-02-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"* `DATEIME` must be in this format: `DD-MM-YYYY HH:mm`.","lastModifiedDate":"2023-02-27"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"Shows a message explaning how to access the help page.","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"### Adding a person: `add`","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"Adds a person to the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"A person can have any number of tags (including 0)","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"### Listing all persons : `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"Shows a list of all persons in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"### Editing a person : `edit`","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"Edits an existing person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"* At least one of the optional fields must be provided.","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"* Existing values will be updated to the input values.","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative.","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"* You can remove all the person’s tags by typing `t/` without","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    specifying any tags after it.","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"*  `edit 1 p/91234567 e/johndoe@example.com` Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"*  `edit 2 n/Betsy Crower t/` Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags.","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"### Locating persons by name: `find`","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"Finds persons whose names contain any of the given keywords.","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"* The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"* Only the name is searched.","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"* Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"* Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"* `find John` returns `john` and `John Doe`","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"* `find alex david` returns `Alex Yeoh`, `David Li`\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"  ![result for \u0027find alex david\u0027](images/findAlexDavidResult.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"### Deleting a person : `delete`","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"Deletes the specified person from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"* Deletes the person at the specified `INDEX`.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"* The index refers to the index number shown in the displayed person list.","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"* The index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"* `list` followed by `delete 2` deletes the 2nd person in the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"* `find Betsy` followed by `delete 1` deletes the 1st person in the results of the `find` command.","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"venuslimm"},"content":"### Adding a new event : `addevent`","lastModifiedDate":"2023-02-27"},{"lineNumber":148,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":149,"author":{"gitId":"venuslimm"},"content":"Adds a new event with the given event name, start date time, and end date time.","lastModifiedDate":"2023-02-27"},{"lineNumber":150,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":151,"author":{"gitId":"venuslimm"},"content":"Format: `addevent ev/EVENT from/DATETIME to/DATETIME`","lastModifiedDate":"2023-02-27"},{"lineNumber":152,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":153,"author":{"gitId":"venuslimm"},"content":"* Event name can be a combination of alphanumeric and punctuations with spaces.","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"venuslimm"},"content":"* Event name must begin with alphanumeric.","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"venuslimm"},"content":"* Start date time cannot be after the end date time.","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"venuslimm"},"content":"Examples:","lastModifiedDate":"2023-02-27"},{"lineNumber":158,"author":{"gitId":"venuslimm"},"content":"* `addevent ev/Wedding Dinner from/01-05-2023 17:00 to/01-05-2023 21:00`","lastModifiedDate":"2023-02-27"},{"lineNumber":159,"author":{"gitId":"venuslimm"},"content":"* `addevent ev/Dinner from/01-05-2023 17:30 to/01-05-2023 19:30`","lastModifiedDate":"2023-02-27"},{"lineNumber":160,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":161,"author":{"gitId":"jerome-neo"},"content":"### Listing all events : `listevent`","lastModifiedDate":"2023-02-26"},{"lineNumber":162,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":163,"author":{"gitId":"jerome-neo"},"content":"Prints all the existing events in the address book.","lastModifiedDate":"2023-02-26"},{"lineNumber":164,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":165,"author":{"gitId":"jerome-neo"},"content":"Format: `listevent`","lastModifiedDate":"2023-02-26"},{"lineNumber":166,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":167,"author":{"gitId":"jerome-neo"},"content":"* Does not require any additional user arguments.","lastModifiedDate":"2023-02-26"},{"lineNumber":168,"author":{"gitId":"jerome-neo"},"content":"* Follow strictly to the command `listevent`.","lastModifiedDate":"2023-02-26"},{"lineNumber":169,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":170,"author":{"gitId":"jerome-neo"},"content":"Examples:","lastModifiedDate":"2023-02-26"},{"lineNumber":171,"author":{"gitId":"jerome-neo"},"content":"* `listevent` prints a list of events.","lastModifiedDate":"2023-02-26"},{"lineNumber":172,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":173,"author":{"gitId":"inas0ng"},"content":"### Deleting an event : `delevent`","lastModifiedDate":"2023-02-23"},{"lineNumber":174,"author":{"gitId":"inas0ng"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":175,"author":{"gitId":"inas0ng"},"content":"Deletes the specified event from the event list and deletes all occurences of the event tied to persons in the address book, if any.","lastModifiedDate":"2023-02-23"},{"lineNumber":176,"author":{"gitId":"inas0ng"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":177,"author":{"gitId":"inas0ng"},"content":"Format: `delevent EVENTINDEX`","lastModifiedDate":"2023-02-23"},{"lineNumber":178,"author":{"gitId":"inas0ng"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":179,"author":{"gitId":"inas0ng"},"content":"* Deletes the event at the specified `EVENTINDEX` and all occurences of the event tied to persons in the address book, if any.","lastModifiedDate":"2023-02-23"},{"lineNumber":180,"author":{"gitId":"inas0ng"},"content":"* The event index refers to the index number shown in the displayed event list.","lastModifiedDate":"2023-02-23"},{"lineNumber":181,"author":{"gitId":"inas0ng"},"content":"* The event index **must be a positive integer** 1, 2, 3, …​","lastModifiedDate":"2023-02-23"},{"lineNumber":182,"author":{"gitId":"inas0ng"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":183,"author":{"gitId":"inas0ng"},"content":"Examples:","lastModifiedDate":"2023-02-23"},{"lineNumber":184,"author":{"gitId":"inas0ng"},"content":"* `listevent` followed by `delevent 2` deletes the 2nd event in the event list and all occurences of the 2nd event tied to persons in the address book, if any.","lastModifiedDate":"2023-02-23"},{"lineNumber":185,"author":{"gitId":"inas0ng"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"### Clearing all entries : `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"Clears all entries from the address book.","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"Format: `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":"AddressBook data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2021-02-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":204,"author":{"gitId":"-"},"content":"AddressBook data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update data directly by editing that data file.","lastModifiedDate":"2021-02-04"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":206,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2021-02-04"},{"lineNumber":207,"author":{"gitId":"-"},"content":"If your changes to the data file makes its format invalid, AddressBook will discard all data and start with an empty data file at the next run.","lastModifiedDate":"2021-02-04"},{"lineNumber":208,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-02-04"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"### Archiving data files `[coming in v2.0]`","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"_Details coming soon ..._","lastModifiedDate":"2021-02-04"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"## FAQ","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"**Q**: How do I transfer my data to another Computer?\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":"**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous AddressBook home folder.","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"Action | Format, Examples","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"--------|------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"Irminrics"},"content":"**Add Contact** | `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]… [ev/EVENTINDEX] …​` \u003cbr\u003e e.g., `add n/Alex Yeoh p/89028392 e/alex@email.com a/Blk 142 Apple Street 23 ev/1`","lastModifiedDate":"2023-02-26"},{"lineNumber":228,"author":{"gitId":"Irminrics"},"content":"**Add Event** | `addevent ev/EVENT from/DATETIME to/DATETIME` \u003cbr\u003e e.g., `addevent ev/Wedding Dinner from/01-05-2023 17:00 to/01-05-2023 21:00`","lastModifiedDate":"2023-02-26"},{"lineNumber":229,"author":{"gitId":"-"},"content":"**Clear** | `clear`","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"Irminrics"},"content":"**Delete Contact** | `delete INDEX`\u003cbr\u003e e.g., `delete 3`","lastModifiedDate":"2023-02-26"},{"lineNumber":231,"author":{"gitId":"Irminrics"},"content":"**Delete Event** | `delevent EVENTINDEX` \u003cbr\u003e e.g., `delevent 2`","lastModifiedDate":"2023-02-26"},{"lineNumber":232,"author":{"gitId":"Irminrics"},"content":"**Edit Contact** | `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g.,`edit 2 n/James Lee e/jameslee@example.com`","lastModifiedDate":"2023-02-26"},{"lineNumber":233,"author":{"gitId":"Irminrics"},"content":"**List Contact** | `list`","lastModifiedDate":"2023-02-26"},{"lineNumber":234,"author":{"gitId":"Irminrics"},"content":"**List Event** | `listevent`","lastModifiedDate":"2023-02-26"},{"lineNumber":235,"author":{"gitId":"-"},"content":"**Help** | `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"Irminrics"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":237,"author":{"gitId":"Irminrics"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":238,"author":{"gitId":"Irminrics"},"content":"","lastModifiedDate":"2023-02-26"},{"lineNumber":239,"author":{"gitId":"Irminrics"},"content":"","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"venuslimm":15,"jerome-neo":13,"-":186,"inas0ng":13,"Irminrics":12}},{"path":"docs/team/inas0ng.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jerome-neo"},"content":"layout: page","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"inas0ng"},"content":"title: Song Yi, Ina\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-24"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"inas0ng"},"content":"### Project: PlanEase","lastModifiedDate":"2023-02-24"},{"lineNumber":7,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"inas0ng"},"content":"PlanEase is designed for users who work as event planners.","lastModifiedDate":"2023-02-24"},{"lineNumber":9,"author":{"gitId":"inas0ng"},"content":"It provides a centralised platform for them to manage their work, contacts, and events information, making the process of searching for stakeholders and keeping track of details easier and more efficient.","lastModifiedDate":"2023-02-24"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"inas0ng"},"content":"* **New Feature**: Added the ability to... `to be added soon`.","lastModifiedDate":"2023-02-24"},{"lineNumber":14,"author":{"gitId":"inas0ng"},"content":"  * What it does: allows the user to... `to be added soon`.","lastModifiedDate":"2023-02-24"},{"lineNumber":15,"author":{"gitId":"inas0ng"},"content":"  * Justification: This feature improves the product significantly because a user can... `to be added soon`.","lastModifiedDate":"2023-02-24"},{"lineNumber":16,"author":{"gitId":"inas0ng"},"content":"  * Highlights: This enhancement affects `to be added soon`.","lastModifiedDate":"2023-02-24"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"inas0ng"},"content":"* **New Feature**: Added a... `to be added soon`.","lastModifiedDate":"2023-02-24"},{"lineNumber":20,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"inas0ng"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dinas0ng\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-24"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"jerome-neo"},"content":"* **Project management**:","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"inas0ng"},"content":"  * Managed releases `to be added soon` on GitHub","lastModifiedDate":"2023-02-24"},{"lineNumber":25,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jerome-neo"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"inas0ng"},"content":"  * `to be added soon`","lastModifiedDate":"2023-02-24"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jerome-neo"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"jerome-neo"},"content":"  * User Guide:","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"inas0ng"},"content":"    * Added documentation for the feature `delevent`","lastModifiedDate":"2023-02-24"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"  * Developer Guide:","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"inas0ng"},"content":"    * Added implementation details of... `to be added soon`","lastModifiedDate":"2023-02-24"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"inas0ng"},"content":"* **Review/mentoring contributions**:","lastModifiedDate":"2023-02-24"},{"lineNumber":36,"author":{"gitId":"inas0ng"},"content":"  * `to be added soon`","lastModifiedDate":"2023-02-24"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"inas0ng"},"content":"* **Contributions beyond the project team**:","lastModifiedDate":"2023-02-24"},{"lineNumber":39,"author":{"gitId":"inas0ng"},"content":"  * `to be added soon`","lastModifiedDate":"2023-02-24"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"jerome-neo"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"jerome-neo":23,"inas0ng":18}},{"path":"docs/team/irminrics.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"Irminrics"},"content":"title: Ang Jun Kang\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"Irminrics"},"content":"### Project: PlanEase","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"Irminrics"},"content":"PlanEase is designed for users who work as event planners.","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"Irminrics"},"content":"It provides a centralised platform for them to manage their work, contacts, and events information, making the process of searching for stakeholders and keeping track of details easier and more efficient.","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"Irminrics"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":14,"author":{"gitId":"Irminrics"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"Irminrics"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":16,"author":{"gitId":"Irminrics"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"Irminrics"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"Irminrics"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"Irminrics"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"Irminrics"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":22,"author":{"gitId":"Irminrics"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"Irminrics"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"Irminrics"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dirminrics\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"Irminrics"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"Irminrics"},"content":"* **Contributions to the Developer Guide**","lastModifiedDate":"2023-02-25"},{"lineNumber":31,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"Irminrics"},"content":"* **Contributions to the User Guide**","lastModifiedDate":"2023-02-25"},{"lineNumber":34,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"Irminrics"},"content":"* **Contributions to team-based tasks**","lastModifiedDate":"2023-02-25"},{"lineNumber":37,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"Irminrics"},"content":"* **Review/mentoring contributions**","lastModifiedDate":"2023-02-25"},{"lineNumber":40,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"Irminrics"},"content":"* **Contributions beyond the project team**","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"Irminrics"},"content":"  * to be added soon","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"-":16,"Irminrics":27}},{"path":"docs/team/jerome-neo.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jerome-neo"},"content":"layout: page","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"jerome-neo"},"content":"title: Jerome Neo\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-26"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"jerome-neo"},"content":"### Project: PlanEase","lastModifiedDate":"2023-02-26"},{"lineNumber":7,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"jerome-neo"},"content":"PlanEase is designed for event planners who prefer typing on their keyboards to retrieve information quickly.","lastModifiedDate":"2023-02-26"},{"lineNumber":9,"author":{"gitId":"jerome-neo"},"content":"It provides a centralised platform for them to manage their work, contacts, and event information.","lastModifiedDate":"2023-02-26"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"This application helps to streamline the process of searching for stakeholders\u0027 contact information and keeping track of important events.","lastModifiedDate":"2023-02-26"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":15,"author":{"gitId":"jerome-neo"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":16,"author":{"gitId":"jerome-neo"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":19,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"jerome-neo"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":21,"author":{"gitId":"jerome-neo"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":23,"author":{"gitId":"jerome-neo"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":25,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jerome-neo"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003djerome-neo\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-26"},{"lineNumber":27,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2023-02-26"},{"lineNumber":29,"author":{"gitId":"jerome-neo"},"content":"  * to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":30,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"jerome-neo"},"content":"* **Contributions to the Developer Guide**","lastModifiedDate":"2023-02-26"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"  * to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":33,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"* **Contributions to the User Guide**","lastModifiedDate":"2023-02-26"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"  * to be added soon","lastModifiedDate":"2023-02-26"},{"lineNumber":36,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"* **Contributions to team-based tasks**","lastModifiedDate":"2023-02-26"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"  * [Update team information and images](https://github.com/AY2223S2-CS2103-W16-3/tp/pull/10)","lastModifiedDate":"2023-02-26"},{"lineNumber":39,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"* **Review/mentoring contributions**","lastModifiedDate":"2023-02-26"},{"lineNumber":41,"author":{"gitId":"jerome-neo"},"content":"  * ","lastModifiedDate":"2023-02-26"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"* **Contributions beyond the project team**","lastModifiedDate":"2023-02-26"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"  * to be added soon","lastModifiedDate":"2023-02-26"}],"authorContributionMap":{"jerome-neo":44}},{"path":"docs/team/venuslimm.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":2,"author":{"gitId":"jerome-neo"},"content":"layout: page","lastModifiedDate":"2023-02-23"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"title: Lim Jia Yi Venus\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-23"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"---","lastModifiedDate":"2023-02-23"},{"lineNumber":5,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"### Project: PlanEase","lastModifiedDate":"2023-02-23"},{"lineNumber":7,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"PlanEase is designed for users who work as event planners.","lastModifiedDate":"2023-02-23"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"It provides a centralised platform for them to manage their work, contacts, and events information, making the process of searching for stakeholders and keeping track of details easier and more efficient.","lastModifiedDate":"2023-02-23"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-23"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"* **New Feature**: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"  * What it does: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"  * Justification: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"  * Highlights: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"  * Credits: to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dvenuslimm\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-02-23"},{"lineNumber":26,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"* **Enhancements implemented**:","lastModifiedDate":"2023-02-23"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"  * to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":29,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"* **Contributions to the Developer Guide**","lastModifiedDate":"2023-02-23"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"  * to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"* **Contributions to the User Guide**","lastModifiedDate":"2023-02-23"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"  * to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"* **Contributions to team-based tasks**","lastModifiedDate":"2023-02-23"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"  * to be added soon","lastModifiedDate":"2023-02-23"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"* **Review/mentoring contributions**","lastModifiedDate":"2023-02-23"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"  * [Add about us and edit DG](https://github.com/AY2223S2-CS2103-W16-3/tp/pull/4)","lastModifiedDate":"2023-02-23"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"  * [Update team information and images](https://github.com/AY2223S2-CS2103-W16-3/tp/pull/10)","lastModifiedDate":"2023-02-23"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-02-23"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"* **Contributions beyond the project team**","lastModifiedDate":"2023-02-23"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"  * to be added soon","lastModifiedDate":"2023-02-23"}],"authorContributionMap":{"venuslimm":28,"jerome-neo":16}},{"path":"src/main/java/seedu/address/logic/commands/AddEventCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":" * Adds an event to the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"    public static final String COMMAND_WORD \u003d \"addevent\";","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the address book. \"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_EVENT_NAME + \"NAME \"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_START_DATE_TIME + \"START DATETIME \"","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_END_DATE_TIME + \"END DATETIME \\n\"","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_EVENT_NAME + \"CEO\u0027s 50th Birthday Carnival \"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_START_DATE_TIME + \"17-07-2023 12:00 \"","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"            + PREFIX_END_DATE_TIME + \"23-07-2023 22:00 \";","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New event added: %1$s\";","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"    private final Event toAdd;","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"     * Creates an AddECommand to add the specified {@code Event}","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"    public AddEventCommand(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"        toAdd \u003d event;","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"        model.addEvent(toAdd);","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"                || (other instanceof AddEventCommand // instanceof handles nulls","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 toAdd.equals(((AddEventCommand) other).toAdd));","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":55}},{"path":"src/main/java/seedu/address/logic/parser/AddEventCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":" * Parser for AddEventCommand. Parses the command based on the prefixes and values specified by user.","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"     * Parses the given {@code String} of arguments in the context of the AddEventCommand","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"     * and returns an AddEventCommand object for execution.","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"    public AddEventCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        ArgumentMultimap argMultimap \u003d","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"                ArgumentTokenizer.tokenize(args, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME);","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_EVENT_NAME, PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME)","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        EventName eventName \u003d ParserUtil.parseEventName(argMultimap.getValue(PREFIX_EVENT_NAME).get());","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"        DateTime startDatetime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE_TIME).get());","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        DateTime endDatetime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE_TIME).get());","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"        if (!DateTime.isValidDateRange(startDatetime.toString(), endDatetime.toString())) {","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"jerome-neo"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"        Event event \u003d new Event(eventName, startDatetime, endDatetime);","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"        return new AddEventCommand(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values in the given","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":50,"jerome-neo":3}},{"path":"src/main/java/seedu/address/logic/parser/AddressBookParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2016-09-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.Command;","lastModifiedDate":"2017-01-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-01-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class AddressBookParser {","lastModifiedDate":"2017-07-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":72,"author":{"gitId":"venuslimm"},"content":"        case AddEventCommand.COMMAND_WORD:","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"venuslimm"},"content":"            return new AddEventCommandParser().parse(arguments);","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"venuslimm":4,"-":76}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands","lastModifiedDate":"2017-02-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");","lastModifiedDate":"2017-06-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");","lastModifiedDate":"2017-02-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"    /* Prefix definitions for events */","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    public static final Prefix PREFIX_EVENT_NAME \u003d new Prefix(\"ev/\");","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"    public static final Prefix PREFIX_START_DATE_TIME \u003d new Prefix(\"from/\");","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"    public static final Prefix PREFIX_END_DATE_TIME \u003d new Prefix(\"to/\");","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"venuslimm":4,"-":15}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-02-11"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-02-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2017-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.commons.util.StringUtil;","lastModifiedDate":"2017-02-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-02-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-02-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-02-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-02-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes.","lastModifiedDate":"2017-07-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be","lastModifiedDate":"2017-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer).","lastModifiedDate":"2018-07-10"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Parses a {@code String phone} into a {@code Phone}.","lastModifiedDate":"2017-05-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code phone} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public static Phone parsePhone(String phone) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(phone);","lastModifiedDate":"2017-05-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        String trimmedPhone \u003d phone.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!Phone.isValidPhone(trimmedPhone)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new Phone(trimmedPhone);","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     * Parses a {@code String address} into an {@code Address}.","lastModifiedDate":"2017-05-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code address} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static Address parseAddress(String address) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        requireNonNull(address);","lastModifiedDate":"2017-05-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        String trimmedAddress \u003d address.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"            throw new ParseException(Address.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return new Address(trimmedAddress);","lastModifiedDate":"2017-05-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Parses a {@code String email} into an {@code Email}.","lastModifiedDate":"2017-05-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code email} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public static Email parseEmail(String email) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        requireNonNull(email);","lastModifiedDate":"2017-05-30"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        String trimmedEmail \u003d email.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            throw new ParseException(Email.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        return new Email(trimmedEmail);","lastModifiedDate":"2017-05-30"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}.","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-30"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code tag} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    public static Tag parseTag(String tag) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        requireNonNull(tag);","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String trimmedTag \u003d tag.trim();","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        return new Tag(trimmedTag);","lastModifiedDate":"2017-05-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}.","lastModifiedDate":"2017-03-07"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        requireNonNull(tags);","lastModifiedDate":"2017-05-15"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();","lastModifiedDate":"2017-02-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        for (String tagName : tags) {","lastModifiedDate":"2017-02-11"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            tagSet.add(parseTag(tagName));","lastModifiedDate":"2017-05-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return tagSet;","lastModifiedDate":"2017-03-07"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":126,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":127,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":128,"author":{"gitId":"venuslimm"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2023-02-28"},{"lineNumber":129,"author":{"gitId":"venuslimm"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"venuslimm"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":131,"author":{"gitId":"venuslimm"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2023-02-28"},{"lineNumber":132,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":133,"author":{"gitId":"venuslimm"},"content":"    public static EventName parseEventName(String name) throws ParseException {","lastModifiedDate":"2023-02-28"},{"lineNumber":134,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-02-28"},{"lineNumber":135,"author":{"gitId":"venuslimm"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2023-02-28"},{"lineNumber":136,"author":{"gitId":"venuslimm"},"content":"        if (!EventName.isValidName(trimmedName)) {","lastModifiedDate":"2023-02-28"},{"lineNumber":137,"author":{"gitId":"venuslimm"},"content":"            throw new ParseException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-02-28"},{"lineNumber":138,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"venuslimm"},"content":"        return new EventName(trimmedName);","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":143,"author":{"gitId":"venuslimm"},"content":"     * Parses a {@code String dateTime} into a {@code DateTime}.","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"venuslimm"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-02-28"},{"lineNumber":145,"author":{"gitId":"venuslimm"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":146,"author":{"gitId":"venuslimm"},"content":"     * @throws ParseException if the given {@code dateTime} is invalid.","lastModifiedDate":"2023-02-28"},{"lineNumber":147,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":148,"author":{"gitId":"venuslimm"},"content":"    public static DateTime parseDateTime(String dateTime) throws ParseException {","lastModifiedDate":"2023-02-28"},{"lineNumber":149,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":150,"author":{"gitId":"venuslimm"},"content":"        String trimmedDateTime \u003d dateTime.trim();","lastModifiedDate":"2023-02-28"},{"lineNumber":151,"author":{"gitId":"venuslimm"},"content":"        if (!DateTime.isValidDateTime(trimmedDateTime)) {","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"venuslimm"},"content":"            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-02-28"},{"lineNumber":153,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":154,"author":{"gitId":"venuslimm"},"content":"        return new DateTime(trimmedDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":155,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"venuslimm":32,"-":124}},{"path":"src/main/java/seedu/address/model/AddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.UniqueEventList;","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.model.person.UniquePersonList;","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Wraps all data at the address-book level","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Duplicates are not allowed (by .isSamePerson comparison)","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddressBook implements ReadOnlyAddressBook {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final UniquePersonList persons;","lastModifiedDate":"2016-08-26"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"    private final UniqueEventList events;","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication","lastModifiedDate":"2019-05-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2016-10-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *   among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        persons \u003d new UniquePersonList();","lastModifiedDate":"2016-08-26"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        events \u003d new UniqueEventList();","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public AddressBook() {}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Creates an AddressBook using the Persons in the {@code toBeCopied}","lastModifiedDate":"2018-03-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public AddressBook(ReadOnlyAddressBook toBeCopied) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Replaces the contents of the person list with {@code persons}.","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * {@code persons} must not contain duplicate persons.","lastModifiedDate":"2018-08-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public void setPersons(List\u003cPerson\u003e persons) {","lastModifiedDate":"2018-08-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this.persons.setPersons(persons);","lastModifiedDate":"2016-10-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code AddressBook} with {@code newData}.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyAddressBook newData) {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        setPersons(newData.getPersonList());","lastModifiedDate":"2018-03-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    //// person-level operations","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return persons.contains(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Adds a person to the address book.","lastModifiedDate":"2016-09-21"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * The person must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void addPerson(Person p) {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        persons.add(p);","lastModifiedDate":"2018-03-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} in the list with {@code editedPerson}.","lastModifiedDate":"2018-01-10"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(editedPerson);","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        persons.setPerson(target, editedPerson);","lastModifiedDate":"2018-03-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Removes {@code key} from this {@code AddressBook}.","lastModifiedDate":"2017-08-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * {@code key} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void removePerson(Person key) {","lastModifiedDate":"2018-08-07"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        persons.remove(key);","lastModifiedDate":"2018-02-28"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList().size() + \" persons\";","lastModifiedDate":"2018-04-05"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // TODO: refine later","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return persons.asUnmodifiableObservableList();","lastModifiedDate":"2018-04-05"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":113,"author":{"gitId":"jerome-neo"},"content":"    @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":114,"author":{"gitId":"jerome-neo"},"content":"    public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-03-04"},{"lineNumber":115,"author":{"gitId":"jerome-neo"},"content":"        return events.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-04"},{"lineNumber":116,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":117,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":121,"author":{"gitId":"-"},"content":"                || (other instanceof AddressBook // instanceof handles nulls","lastModifiedDate":"2016-09-21"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                \u0026\u0026 persons.equals(((AddressBook) other).persons));","lastModifiedDate":"2018-08-14"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        return persons.hashCode();","lastModifiedDate":"2018-03-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":129,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":130,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":131,"author":{"gitId":"venuslimm"},"content":"     * Returns true if an event with the same date time information as {@code event} exists in the address book.","lastModifiedDate":"2023-03-02"},{"lineNumber":132,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":133,"author":{"gitId":"venuslimm"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-02"},{"lineNumber":134,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-03-02"},{"lineNumber":135,"author":{"gitId":"venuslimm"},"content":"        return events.contains(event);","lastModifiedDate":"2023-03-02"},{"lineNumber":136,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":137,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":138,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":139,"author":{"gitId":"venuslimm"},"content":"     * Adds an event to the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":140,"author":{"gitId":"venuslimm"},"content":"     * The event must not already exist in the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":141,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":142,"author":{"gitId":"venuslimm"},"content":"    public void addEvent(Event e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":143,"author":{"gitId":"venuslimm"},"content":"        events.add(e);","lastModifiedDate":"2023-02-28"},{"lineNumber":144,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":145,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"venuslimm":20,"jerome-neo":5,"-":120}},{"path":"src/main/java/seedu/address/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    Path getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 address book file path.","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    void setAddressBookFilePath(Path addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Replaces address book data with the data in {@code addressBook}.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    void setAddressBook(ReadOnlyAddressBook addressBook);","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /** Returns the AddressBook */","lastModifiedDate":"2016-09-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    ReadOnlyAddressBook getAddressBook();","lastModifiedDate":"2016-09-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Returns true if a person with the same identity as {@code person} exists in the address book.","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    boolean hasPerson(Person person);","lastModifiedDate":"2018-08-06"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Deletes the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * The person must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    void deletePerson(Person target);","lastModifiedDate":"2018-08-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * Adds the given person.","lastModifiedDate":"2018-08-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code person} must not already exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    void addPerson(Person person);","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Replaces the given person {@code target} with {@code editedPerson}.","lastModifiedDate":"2017-06-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * {@code target} must exist in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book.","lastModifiedDate":"2018-08-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    void setPerson(Person target, Person editedPerson);","lastModifiedDate":"2018-08-17"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /** Returns an unmodifiable view of the filtered person list */","lastModifiedDate":"2017-09-01"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getFilteredPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * Updates the filter of the filtered person list to filter by the given {@code predicate}.","lastModifiedDate":"2017-08-05"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);","lastModifiedDate":"2018-01-10"},{"lineNumber":88,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":89,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"venuslimm"},"content":"     * Returns true if an event with the same date time information as {@code event} exists in the address book.","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"venuslimm"},"content":"    boolean hasEvent(Event event);","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":95,"author":{"gitId":"venuslimm"},"content":"     * Adds the given event.","lastModifiedDate":"2023-02-28"},{"lineNumber":96,"author":{"gitId":"venuslimm"},"content":"     * {@code event} must not already exist in the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":97,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"venuslimm"},"content":"    void addEvent(Event event);","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"venuslimm":12,"-":87}},{"path":"src/main/java/seedu/address/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2017-05-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.LogsCenter;","lastModifiedDate":"2016-09-23"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Represents the in-memory model of the address book data.","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private final FilteredList\u003cPerson\u003e filteredPersons;","lastModifiedDate":"2018-01-10"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes a ModelManager with the given addressBook and userPrefs.","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.addressBook \u003d new AddressBook(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());","lastModifiedDate":"2019-01-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        this(new AddressBook(), new UserPrefs());","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return userPrefs.getAddressBookFilePath();","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void setAddressBook(ReadOnlyAddressBook addressBook) {","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        this.addressBook.resetData(addressBook);","lastModifiedDate":"2019-01-25"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2016-09-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        requireNonNull(person);","lastModifiedDate":"2018-08-06"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        return addressBook.hasPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public void deletePerson(Person target) {","lastModifiedDate":"2018-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        addressBook.removePerson(target);","lastModifiedDate":"2019-01-25"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void addPerson(Person person) {","lastModifiedDate":"2018-08-15"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        requireAllNonNull(target, editedPerson);","lastModifiedDate":"2017-06-07"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        addressBook.setPerson(target, editedPerson);","lastModifiedDate":"2019-01-25"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2016-10-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"     * {@code versionedAddressBook}","lastModifiedDate":"2018-06-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":122,"author":{"gitId":"-"},"content":"    public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        return filteredPersons;","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        filteredPersons.setPredicate(predicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        return addressBook.equals(other.addressBook)","lastModifiedDate":"2019-01-25"},{"lineNumber":147,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"                \u0026\u0026 filteredPersons.equals(other.filteredPersons);","lastModifiedDate":"2019-01-25"},{"lineNumber":149,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"venuslimm"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Events Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-03-02"},{"lineNumber":153,"author":{"gitId":"venuslimm"},"content":"    public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-02"},{"lineNumber":154,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(event);","lastModifiedDate":"2023-03-02"},{"lineNumber":155,"author":{"gitId":"venuslimm"},"content":"        return addressBook.hasEvent(event);","lastModifiedDate":"2023-03-02"},{"lineNumber":156,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":158,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"venuslimm"},"content":"    public void addEvent(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":160,"author":{"gitId":"venuslimm"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":161,"author":{"gitId":"venuslimm"},"content":"        // To update filtered event list here","lastModifiedDate":"2023-02-28"},{"lineNumber":162,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":163,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"venuslimm":13,"-":150}},{"path":"src/main/java/seedu/address/model/ReadOnlyAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of an address book","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyAddressBook {","lastModifiedDate":"2019-01-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * Returns an unmodifiable view of the persons list.","lastModifiedDate":"2016-12-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * This list will not contain any duplicate persons.","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    ObservableList\u003cPerson\u003e getPersonList();","lastModifiedDate":"2018-01-10"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"    ObservableList\u003cEvent\u003e getEventList();","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"jerome-neo":2,"-":16}},{"path":"src/main/java/seedu/address/model/event/DateTime.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":" * Represents an Event\u0027s start or end date time in the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"public class DateTime {","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"            \"Date times should follow this format: DD-MM-YYYY HH:mm and only values within valid range are allowed.\";","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    public final String dateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"     * Constructs a {@code DateTime}.","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"     * @param dateTime A valid phone number.","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"    public DateTime(String dateTime) {","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(dateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"        checkArgument(isValidDateTime(dateTime), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"     * Returns true if a given string is a valid date time.","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    public static boolean isValidDateTime(String test) {","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        try {","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"            LocalDateTime validDateTime \u003d LocalDateTime.parse(test, formatter);","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"            return true;","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"            return false;","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"     * Returns true if a valid startDate is earlier than or equal to a valid endDate.","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"jerome-neo"},"content":"    public static boolean isValidDateRange(String startDate, String endDate) {","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"jerome-neo"},"content":"        if (!isValidDateTime(startDate) || !isValidDateTime(endDate)) {","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"jerome-neo"},"content":"            return false;","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"jerome-neo"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDate, formatter);","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"jerome-neo"},"content":"        LocalDateTime endDateTime \u003d LocalDateTime.parse(endDate, formatter);","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"jerome-neo"},"content":"        return startDateTime.equals(endDateTime) || startDateTime.isBefore(endDateTime);","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"    public String toString() {","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"        return dateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"                || (other instanceof DateTime // instanceof handles nulls","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 dateTime.equals(((DateTime) other).dateTime)); // state check","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"venuslimm"},"content":"    public int hashCode() {","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"venuslimm"},"content":"        return dateTime.hashCode();","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":58,"jerome-neo":13}},{"path":"src/main/java/seedu/address/model/event/Event.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import java.util.Objects;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":" * Represents an Event in the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":" * Guarantees: details are present and not null, field values are validated, immutable.","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"public class Event {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"    private final EventName name;","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"    private final DateTime startDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"    private final DateTime endDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"     * Every field must be present and not null.","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    public Event(EventName name, DateTime startDateTime, DateTime endDateTime) {","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"        requireAllNonNull(name, startDateTime, endDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"    public EventName getName() {","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        return name;","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"    public DateTime getStartDateTime() {","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        return startDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"    public DateTime getEndDateTime() {","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        return endDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"     * Returns true if both events have the same name.","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"     * This defines a weaker notion of equality between two events.","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    public boolean isSameEvent(Event otherEvent) {","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"        if (otherEvent \u003d\u003d this) {","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"            return true;","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"        return otherEvent !\u003d null","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 otherEvent.getName().equals(getName());","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"     * Returns true if both events have the same name and start and end date times.","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"     * This defines a stronger notion of equality between two events.","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"            return true;","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"        if (!(other instanceof Event)) {","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"            return false;","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"        Event otherEvent \u003d (Event) other;","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"        return otherEvent.getName().equals(getName())","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 otherEvent.getStartDateTime().equals(getStartDateTime())","lastModifiedDate":"2023-02-28"},{"lineNumber":68,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 otherEvent.getEndDateTime().equals(getEndDateTime());","lastModifiedDate":"2023-02-28"},{"lineNumber":69,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":70,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":71,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":72,"author":{"gitId":"venuslimm"},"content":"    public int hashCode() {","lastModifiedDate":"2023-02-28"},{"lineNumber":73,"author":{"gitId":"venuslimm"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2023-02-28"},{"lineNumber":74,"author":{"gitId":"venuslimm"},"content":"        return Objects.hash(name, startDateTime, endDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":75,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":76,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":77,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":78,"author":{"gitId":"venuslimm"},"content":"    public String toString() {","lastModifiedDate":"2023-02-28"},{"lineNumber":79,"author":{"gitId":"venuslimm"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2023-02-28"},{"lineNumber":80,"author":{"gitId":"venuslimm"},"content":"        builder.append(getName())","lastModifiedDate":"2023-02-28"},{"lineNumber":81,"author":{"gitId":"venuslimm"},"content":"                .append(\"; Start Date Time: \")","lastModifiedDate":"2023-02-28"},{"lineNumber":82,"author":{"gitId":"venuslimm"},"content":"                .append(getStartDateTime())","lastModifiedDate":"2023-02-28"},{"lineNumber":83,"author":{"gitId":"venuslimm"},"content":"                .append(\"; End Date Time: \")","lastModifiedDate":"2023-02-28"},{"lineNumber":84,"author":{"gitId":"venuslimm"},"content":"                .append(getEndDateTime());","lastModifiedDate":"2023-02-28"},{"lineNumber":85,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":86,"author":{"gitId":"venuslimm"},"content":"        return builder.toString();","lastModifiedDate":"2023-02-28"},{"lineNumber":87,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":88,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":88}},{"path":"src/main/java/seedu/address/model/event/EventName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":" * Represents an Event\u0027s name in the address book.","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"public class EventName {","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"            \"Event names should only contain alphanumeric and punctuations. \"","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"            + \"It should not be blank and contain punctuations only. \"","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"            + \"It should only begin with alphanumeric characters. \";","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    /*","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"     * The first character of the event name must not be a whitespace or any other non-alphanumeric characters","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\p{Punct} ]*\";","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"    public final String name;","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"     *","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"     * @param name A valid name.","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"    public EventName(String name) {","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"    public String toString() {","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"        return name;","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"                || (other instanceof EventName // instanceof handles nulls","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 name.equals(((EventName) other).name)); // state check","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"    public int hashCode() {","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"        return name.hashCode();","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":59}},{"path":"src/main/java/seedu/address/model/event/UniqueEventList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":" * A list of events that enforces uniqueness between its elements and does not allow nulls.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":" * An event is considered unique by comparing using {@code Event#isSameEvent(Event)}. As such, adding and updating of","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":" * events uses Event#isSameEvent(Event) for equality so as to ensure that the event being added or updated is","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":" * unique in terms of identity in the UniqueEventList. However, the removal of an event uses Event#equals(Object) so","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":" * as to ensure that the event with exactly the same fields will be removed.","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":" *","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":" *","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":" * @see Event#isSameEvent(Event)","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"public class UniqueEventList implements Iterable\u003cEvent\u003e {","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"    private final ObservableList\u003cEvent\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"    private final ObservableList\u003cEvent\u003e internalUnmodifiableList \u003d","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"            FXCollections.unmodifiableObservableList(internalList);","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"     * Returns true if the list contains an equivalent event as the given argument.","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    public boolean contains(Event toCheck) {","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        return internalList.stream().anyMatch(toCheck::isSameEvent);","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"     * Adds an event to the list.","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"     * The event must not already exist in the list.","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"    public void add(Event toAdd) {","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"        // To check if there is duplicate event here","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"    public ObservableList\u003cEvent\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"    public Iterator\u003cEvent\u003e iterator() {","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"                || (other instanceof UniqueEventList // instanceof handles nulls","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"                \u0026\u0026 internalList.equals(((UniqueEventList) other).internalList));","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"    @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"    public int hashCode() {","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-02-28"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":67}},{"path":"src/main/java/seedu/address/storage/JsonAdaptedEvent.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"jerome-neo"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"jerome-neo"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"/**","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"jerome-neo"},"content":" * Jackson-friendly version of {@link Event}.","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":" */","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"jerome-neo"},"content":"class JsonAdaptedEvent {","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"    private final String eventName;","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"    private final String startDateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"jerome-neo"},"content":"    private final String endDateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"jerome-neo"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"     * Constructs a {@code JsonAdaptedEvent} with the given {@code eventName}, {@code startDateTime}","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"jerome-neo"},"content":"     * and {@code endDateTime}.","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"jerome-neo"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"jerome-neo"},"content":"    public JsonAdaptedEvent(@JsonProperty(\"eventName\") String eventName,","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"jerome-neo"},"content":"                            @JsonProperty(\"startDateTime\") String startDateTime,","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"                            @JsonProperty(\"endDateTime\") String endDateTime) {","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"jerome-neo"},"content":"        this.eventName \u003d eventName;","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"jerome-neo"},"content":"        this.startDateTime \u003d startDateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"jerome-neo"},"content":"        this.endDateTime \u003d endDateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"     * Converts a given {@code Event} into this class for Jackson use.","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"jerome-neo"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"    public JsonAdaptedEvent(Event source) {","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"jerome-neo"},"content":"        eventName \u003d source.getName().toString();","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"        startDateTime \u003d source.getStartDateTime().toString();","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"jerome-neo"},"content":"        endDateTime \u003d source.getEndDateTime().toString();","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"jerome-neo"},"content":"    /**","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"jerome-neo"},"content":"     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object.","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"jerome-neo"},"content":"     *","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"jerome-neo"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted event.","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"jerome-neo"},"content":"     */","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"    public Event toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"jerome-neo"},"content":"        if (!EventName.isValidName(eventName)) {","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"jerome-neo"},"content":"            throw new IllegalValueException(EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"jerome-neo"},"content":"        if (!DateTime.isValidDateTime(startDateTime) || !DateTime.isValidDateTime(endDateTime)) {","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"jerome-neo"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"jerome-neo"},"content":"        if (!DateTime.isValidDateRange(startDateTime, endDateTime)) {","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"jerome-neo"},"content":"            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"jerome-neo"},"content":"        EventName nameOfEvent \u003d new EventName(eventName);","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"jerome-neo"},"content":"        DateTime dateOfStart \u003d new DateTime(startDateTime);","lastModifiedDate":"2023-03-04"},{"lineNumber":62,"author":{"gitId":"jerome-neo"},"content":"        DateTime dateOfEnd \u003d new DateTime(endDateTime);","lastModifiedDate":"2023-03-04"},{"lineNumber":63,"author":{"gitId":"jerome-neo"},"content":"        return new Event(nameOfEvent, dateOfStart, dateOfEnd);","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"jerome-neo"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"jerome-neo":66}},{"path":"src/main/java/seedu/address/storage/JsonSerializableAddressBook.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.storage;","lastModifiedDate":"2018-08-13"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2018-08-13"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * An Immutable AddressBook that is serializable to JSON format.","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"class JsonSerializableAddressBook {","lastModifiedDate":"2018-12-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"    public static final String MESSAGE_DUPLICATE_EVENT \u003d \"Events list contains duplicate event(s).\";","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2018-08-13"},{"lineNumber":27,"author":{"gitId":"jerome-neo"},"content":"    private final List\u003cJsonAdaptedEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code JsonSerializableAddressBook} with the given persons.","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"jerome-neo"},"content":"    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"                                       @JsonProperty(\"events\") List\u003cJsonAdaptedEvent\u003e events) {","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this.persons.addAll(persons);","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"jerome-neo"},"content":"        this.events.addAll(events);","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}.","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"jerome-neo"},"content":"        events.addAll(source.getEventList().stream().map(JsonAdaptedEvent::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     * Converts this address book into the model\u0027s {@code AddressBook} object.","lastModifiedDate":"2018-08-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public AddressBook toModelType() throws IllegalValueException {","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            Person person \u003d jsonAdaptedPerson.toModelType();","lastModifiedDate":"2018-08-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            if (addressBook.hasPerson(person)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":59,"author":{"gitId":"-"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            addressBook.addPerson(person);","lastModifiedDate":"2018-08-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"jerome-neo"},"content":"        for (JsonAdaptedEvent jsonAdaptedEvent : events) {","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"jerome-neo"},"content":"            Event event \u003d jsonAdaptedEvent.toModelType();","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"jerome-neo"},"content":"            if (addressBook.hasEvent(event)) {","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"jerome-neo"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_EVENT);","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"jerome-neo"},"content":"            }","lastModifiedDate":"2023-03-04"},{"lineNumber":68,"author":{"gitId":"jerome-neo"},"content":"            addressBook.addEvent(event);","lastModifiedDate":"2023-03-04"},{"lineNumber":69,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"jerome-neo":14,"-":59}},{"path":"src/test/java/seedu/address/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-05-12"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-05-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-05-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2017-05-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-05-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-05-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        Person validPerson \u003d new PersonBuilder().build();","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        AddCommand addCommand \u003d new AddCommand(validPerson);","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2019-05-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // different person -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2018-11-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-06"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2018-08-17"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":142,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2018-01-10"},{"lineNumber":149,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":151,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":152,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-02"},{"lineNumber":153,"author":{"gitId":"venuslimm"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-02"},{"lineNumber":154,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-02"},{"lineNumber":155,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-02"},{"lineNumber":156,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":157,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-02-28"},{"lineNumber":158,"author":{"gitId":"venuslimm"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":159,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-02-28"},{"lineNumber":160,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     * A Model stub that contains a single person.","lastModifiedDate":"2018-08-07"},{"lineNumber":165,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        private final Person person;","lastModifiedDate":"2018-08-07"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        ModelStubWithPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":171,"author":{"gitId":"-"},"content":"            this.person \u003d person;","lastModifiedDate":"2018-08-07"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return this.person.isSamePerson(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":182,"author":{"gitId":"-"},"content":"     * A Model stub that always accept the person being added.","lastModifiedDate":"2017-05-12"},{"lineNumber":183,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":185,"author":{"gitId":"-"},"content":"        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2017-05-12"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":187,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":188,"author":{"gitId":"-"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2018-08-07"},{"lineNumber":189,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-08-07"},{"lineNumber":190,"author":{"gitId":"-"},"content":"            return personsAdded.stream().anyMatch(person::isSamePerson);","lastModifiedDate":"2018-08-07"},{"lineNumber":191,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2018-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            requireNonNull(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":196,"author":{"gitId":"-"},"content":"            personsAdded.add(person);","lastModifiedDate":"2018-01-10"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2017-05-04"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return new AddressBook();","lastModifiedDate":"2017-05-04"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"venuslimm":11,"-":193}},{"path":"src/test/java/seedu/address/logic/commands/AddEventCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.ReadOnlyAddressBook;","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"public class AddEventCommandTest {","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    public void constructor_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null));","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"    public void execute_eventAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        AddEventCommandTest.ModelStubAcceptingEventAdded modelStub \u003d new AddEventCommandTest","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"                .ModelStubAcceptingEventAdded();","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        Event validEvent \u003d new EventBuilder().build();","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"        CommandResult commandResult \u003d new AddEventCommand(validEvent).execute(modelStub);","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"        assertEquals(String.format(AddEventCommand.MESSAGE_SUCCESS, validEvent), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"        assertEquals(Arrays.asList(validEvent), modelStub.eventsAdded);","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"    public void equals() {","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"        Event carnival \u003d new EventBuilder().withName(\"Carnival\").build();","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"        Event sportsDay \u003d new EventBuilder().withName(\"20th Sports Day @ Sports Hub\").build();","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"        AddEventCommand addCarnivalCommand \u003d new AddEventCommand(carnival);","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"        AddEventCommand addSportsDayCommand \u003d new AddEventCommand(sportsDay);","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"        assertTrue(addCarnivalCommand.equals(addCarnivalCommand));","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"        AddEventCommand addCarnivalCommandCopy \u003d new AddEventCommand(carnival);","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"        assertTrue(addCarnivalCommand.equals(addCarnivalCommandCopy));","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"        assertFalse(addCarnivalCommand.equals(22));","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"        assertFalse(addCarnivalCommand.equals(null));","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"        assertFalse(addCarnivalCommand.equals(addSportsDayCommand));","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"venuslimm"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"venuslimm"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"venuslimm"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"venuslimm"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"venuslimm"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"venuslimm"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":94,"author":{"gitId":"venuslimm"},"content":"        public Path getAddressBookFilePath() {","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":96,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":98,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":99,"author":{"gitId":"venuslimm"},"content":"        public void setAddressBookFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-03-03"},{"lineNumber":100,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":101,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":102,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":103,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":104,"author":{"gitId":"venuslimm"},"content":"        public void addPerson(Person person) {","lastModifiedDate":"2023-03-03"},{"lineNumber":105,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":106,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":107,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":108,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":109,"author":{"gitId":"venuslimm"},"content":"        public void setAddressBook(ReadOnlyAddressBook newData) {","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":111,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":112,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":113,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":114,"author":{"gitId":"venuslimm"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-03"},{"lineNumber":115,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":116,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":117,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":118,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":119,"author":{"gitId":"venuslimm"},"content":"        public boolean hasPerson(Person person) {","lastModifiedDate":"2023-03-03"},{"lineNumber":120,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":121,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":122,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":123,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":124,"author":{"gitId":"venuslimm"},"content":"        public void deletePerson(Person target) {","lastModifiedDate":"2023-03-03"},{"lineNumber":125,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":126,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":127,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":128,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":129,"author":{"gitId":"venuslimm"},"content":"        public void setPerson(Person target, Person editedPerson) {","lastModifiedDate":"2023-03-03"},{"lineNumber":130,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":131,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":132,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":133,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":134,"author":{"gitId":"venuslimm"},"content":"        public ObservableList\u003cPerson\u003e getFilteredPersonList() {","lastModifiedDate":"2023-03-03"},{"lineNumber":135,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":136,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":137,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":138,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":139,"author":{"gitId":"venuslimm"},"content":"        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {","lastModifiedDate":"2023-03-03"},{"lineNumber":140,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":141,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":142,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":143,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":144,"author":{"gitId":"venuslimm"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":145,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":146,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":147,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":148,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":149,"author":{"gitId":"venuslimm"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":150,"author":{"gitId":"venuslimm"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-03"},{"lineNumber":151,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":152,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":153,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":154,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":155,"author":{"gitId":"venuslimm"},"content":"     * A Model stub that contains a single event.","lastModifiedDate":"2023-03-03"},{"lineNumber":156,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":157,"author":{"gitId":"venuslimm"},"content":"    private class ModelStubWithEvent extends ModelStub {","lastModifiedDate":"2023-03-03"},{"lineNumber":158,"author":{"gitId":"venuslimm"},"content":"        private final Event event;","lastModifiedDate":"2023-03-03"},{"lineNumber":159,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":160,"author":{"gitId":"venuslimm"},"content":"        ModelStubWithEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":161,"author":{"gitId":"venuslimm"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":162,"author":{"gitId":"venuslimm"},"content":"            this.event \u003d event;","lastModifiedDate":"2023-03-03"},{"lineNumber":163,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":164,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":165,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":166,"author":{"gitId":"venuslimm"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":167,"author":{"gitId":"venuslimm"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":168,"author":{"gitId":"venuslimm"},"content":"            return this.event.isSameEvent(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":169,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":170,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":171,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":172,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-03-03"},{"lineNumber":173,"author":{"gitId":"venuslimm"},"content":"     * A Model stub that always accept the event being added.","lastModifiedDate":"2023-03-03"},{"lineNumber":174,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-03-03"},{"lineNumber":175,"author":{"gitId":"venuslimm"},"content":"    private class ModelStubAcceptingEventAdded extends ModelStub {","lastModifiedDate":"2023-03-03"},{"lineNumber":176,"author":{"gitId":"venuslimm"},"content":"        final ArrayList\u003cEvent\u003e eventsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-03"},{"lineNumber":177,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":178,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":179,"author":{"gitId":"venuslimm"},"content":"        public boolean hasEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":180,"author":{"gitId":"venuslimm"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":181,"author":{"gitId":"venuslimm"},"content":"            return eventsAdded.stream().anyMatch(event::isSameEvent);","lastModifiedDate":"2023-03-03"},{"lineNumber":182,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":183,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":184,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":185,"author":{"gitId":"venuslimm"},"content":"        public void addEvent(Event event) {","lastModifiedDate":"2023-03-03"},{"lineNumber":186,"author":{"gitId":"venuslimm"},"content":"            requireNonNull(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":187,"author":{"gitId":"venuslimm"},"content":"            eventsAdded.add(event);","lastModifiedDate":"2023-03-03"},{"lineNumber":188,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":189,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":190,"author":{"gitId":"venuslimm"},"content":"        @Override","lastModifiedDate":"2023-03-03"},{"lineNumber":191,"author":{"gitId":"venuslimm"},"content":"        public ReadOnlyAddressBook getAddressBook() {","lastModifiedDate":"2023-03-03"},{"lineNumber":192,"author":{"gitId":"venuslimm"},"content":"            return new AddressBook();","lastModifiedDate":"2023-03-03"},{"lineNumber":193,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-03-03"},{"lineNumber":194,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":195,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":195}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.commands;","lastModifiedDate":"2017-06-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;","lastModifiedDate":"2017-07-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;","lastModifiedDate":"2017-07-05"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2017-07-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;","lastModifiedDate":"2017-07-05"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;","lastModifiedDate":"2017-07-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.index.Index;","lastModifiedDate":"2018-01-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.Model;","lastModifiedDate":"2017-06-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-07-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-07-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_AMY \u003d \"11111111\";","lastModifiedDate":"2017-07-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String VALID_PHONE_BOB \u003d \"22222222\";","lastModifiedDate":"2017-07-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";","lastModifiedDate":"2017-07-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";","lastModifiedDate":"2017-07-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_HUSBAND \u003d \"husband\";","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static final String VALID_TAG_FRIEND \u003d \"friend\";","lastModifiedDate":"2017-07-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_EVENT_NAME_CARNIVAL \u003d \"Carnival\";","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_EVENT_NAME_SPORTS_DAY \u003d \"20th Sports Day @ Sports Hub\";","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_START_DATE_TIME_CARNIVAL \u003d \"02-02-2024 09:00\";","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_START_DATE_TIME_SPORTS_DAY \u003d \"02-03-2024 08:30\";","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_END_DATE_TIME_CARNIVAL \u003d \"10-02-2024 22:00\";","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"    public static final String VALID_END_DATE_TIME_SPORTS_DAY \u003d \"02-03-2024 18:30\";","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"    public static final String EVENT_NAME_DESC_CARNIVAL \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"    public static final String EVENT_NAME_DESC_SPORTS_DAY \u003d \" \" + PREFIX_EVENT_NAME + VALID_EVENT_NAME_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"    public static final String START_DATE_TIME_DESC_CARNIVAL \u003d \" \" + PREFIX_START_DATE_TIME","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"            + VALID_START_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"    public static final String START_DATE_TIME_DESC_SPORTS_DAY \u003d \" \" + PREFIX_START_DATE_TIME","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"            + VALID_START_DATE_TIME_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"    public static final String END_DATE_TIME_DESC_CARNIVAL \u003d \" \" + PREFIX_END_DATE_TIME + VALID_END_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"venuslimm"},"content":"    public static final String END_DATE_TIME_DESC_SPORTS_DAY \u003d \" \" + PREFIX_END_DATE_TIME","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"venuslimm"},"content":"            + VALID_END_DATE_TIME_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones","lastModifiedDate":"2017-07-05"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol","lastModifiedDate":"2017-07-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses","lastModifiedDate":"2017-07-05"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags","lastModifiedDate":"2017-07-05"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":77,"author":{"gitId":"venuslimm"},"content":"    // Event names not allowed to start with punctuations","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"venuslimm"},"content":"    public static final String INVALID_EVENT_NAME_DESC \u003d \" \" + PREFIX_EVENT_NAME + \"\u002720TH\u0027 Company anniversary\";","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"venuslimm"},"content":"    // Invalid date time format","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"venuslimm"},"content":"    public static final String INVALID_START_DATE_TIME_DESC \u003d \" \" + PREFIX_START_DATE_TIME + \"02-02-202 12:00\";","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"venuslimm"},"content":"    // Value used is out of range","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"venuslimm"},"content":"    public static final String INVALID_END_DATE_TIME_DESC \u003d \" \" + PREFIX_END_DATE_TIME + \"40-40-2024 12:99\";","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public static final EditCommand.EditPersonDescriptor DESC_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":92,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)","lastModifiedDate":"2017-07-05"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)","lastModifiedDate":"2017-07-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();","lastModifiedDate":"2017-07-05"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e","lastModifiedDate":"2018-12-09"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2019-01-25"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged","lastModifiedDate":"2019-01-25"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());","lastModifiedDate":"2018-01-10"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddressBook, actualModel.getAddressBook());","lastModifiedDate":"2017-06-05"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());","lastModifiedDate":"2017-06-05"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the","lastModifiedDate":"2018-01-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"     * {@code model}\u0027s address book.","lastModifiedDate":"2018-01-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());","lastModifiedDate":"2018-01-31"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());","lastModifiedDate":"2018-01-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-20"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2017-07-20"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        assertEquals(1, model.getFilteredPersonList().size());","lastModifiedDate":"2018-02-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":155,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"venuslimm":27,"-":128}},{"path":"src/test/java/seedu/address/logic/parser/AddEventCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_TIME_DESC_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.END_DATE_TIME_DESC_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.EVENT_NAME_DESC_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_TIME_DESC;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_EVENT_NAME_DESC;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_TIME_DESC;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_TIME_DESC_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.START_DATE_TIME_DESC_SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"public class AddEventCommandParserTest {","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"    private final AddEventCommandParser parser \u003d new AddEventCommandParser();","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        Event expectedEvent \u003d new EventBuilder(CARNIVAL).withName(VALID_EVENT_NAME_CARNIVAL)","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"                .withStartDateTime(VALID_START_DATE_TIME_CARNIVAL)","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"                .withEndDateTime(VALID_END_DATE_TIME_CARNIVAL).build();","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"        // whitespace only preamble","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + EVENT_NAME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"                + START_DATE_TIME_DESC_CARNIVAL + END_DATE_TIME_DESC_CARNIVAL, new AddEventCommand(expectedEvent));","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"        // multiple event names - last event name accepted","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_SPORTS_DAY + EVENT_NAME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"                + START_DATE_TIME_DESC_CARNIVAL + END_DATE_TIME_DESC_CARNIVAL, new AddEventCommand(expectedEvent));","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"        // multiple start date times - last start date time accepted","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_CARNIVAL + START_DATE_TIME_DESC_SPORTS_DAY","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"                + START_DATE_TIME_DESC_CARNIVAL + END_DATE_TIME_DESC_CARNIVAL, new AddEventCommand(expectedEvent));","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"        // multiple end date times - last end date time accepted","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"        assertParseSuccess(parser, EVENT_NAME_DESC_CARNIVAL + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"                + END_DATE_TIME_DESC_SPORTS_DAY + END_DATE_TIME_DESC_CARNIVAL, new AddEventCommand(expectedEvent));","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"        // missing event name prefix","lastModifiedDate":"2023-03-03"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, VALID_EVENT_NAME_CARNIVAL + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"                        + END_DATE_TIME_DESC_CARNIVAL,","lastModifiedDate":"2023-03-03"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"                expectedMessage);","lastModifiedDate":"2023-03-03"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"        // missing start date time prefix","lastModifiedDate":"2023-03-03"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_CARNIVAL + VALID_START_DATE_TIME_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":66,"author":{"gitId":"venuslimm"},"content":"                        + END_DATE_TIME_DESC_CARNIVAL,","lastModifiedDate":"2023-03-03"},{"lineNumber":67,"author":{"gitId":"venuslimm"},"content":"                expectedMessage);","lastModifiedDate":"2023-03-03"},{"lineNumber":68,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":69,"author":{"gitId":"venuslimm"},"content":"        // missing end date time prefix","lastModifiedDate":"2023-03-03"},{"lineNumber":70,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_CARNIVAL + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":71,"author":{"gitId":"venuslimm"},"content":"                        + VALID_END_DATE_TIME_CARNIVAL,","lastModifiedDate":"2023-03-03"},{"lineNumber":72,"author":{"gitId":"venuslimm"},"content":"                expectedMessage);","lastModifiedDate":"2023-03-03"},{"lineNumber":73,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":74,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":75,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":76,"author":{"gitId":"venuslimm"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-03"},{"lineNumber":77,"author":{"gitId":"venuslimm"},"content":"        // invalid event name","lastModifiedDate":"2023-03-03"},{"lineNumber":78,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":79,"author":{"gitId":"venuslimm"},"content":"                + END_DATE_TIME_DESC_CARNIVAL, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-03"},{"lineNumber":80,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":81,"author":{"gitId":"venuslimm"},"content":"        // invalid start date time","lastModifiedDate":"2023-03-03"},{"lineNumber":82,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_CARNIVAL + INVALID_START_DATE_TIME_DESC","lastModifiedDate":"2023-03-03"},{"lineNumber":83,"author":{"gitId":"venuslimm"},"content":"                + END_DATE_TIME_DESC_CARNIVAL, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-03"},{"lineNumber":84,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":85,"author":{"gitId":"venuslimm"},"content":"        // invalid end date time","lastModifiedDate":"2023-03-03"},{"lineNumber":86,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, EVENT_NAME_DESC_CARNIVAL + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"venuslimm"},"content":"                + INVALID_END_DATE_TIME_DESC, DateTime.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-03"},{"lineNumber":88,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":89,"author":{"gitId":"venuslimm"},"content":"        // two invalid values, only first invalid value reported","lastModifiedDate":"2023-03-03"},{"lineNumber":90,"author":{"gitId":"venuslimm"},"content":"        assertParseFailure(parser, INVALID_EVENT_NAME_DESC + START_DATE_TIME_DESC_CARNIVAL","lastModifiedDate":"2023-03-03"},{"lineNumber":91,"author":{"gitId":"venuslimm"},"content":"                + INVALID_END_DATE_TIME_DESC, EventName.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-03"},{"lineNumber":92,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":93,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"venuslimm":93}},{"path":"src/test/java/seedu/address/logic/parser/AddressBookParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.AddCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ClearCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.DeleteCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;","lastModifiedDate":"2017-06-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ExitCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.FindCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.HelpCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.logic.commands.ListCommand;","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2017-06-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"import seedu.address.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventUtil;","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonUtil;","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"public class AddressBookParserTest {","lastModifiedDate":"2017-07-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private final AddressBookParser parser \u003d new AddressBookParser();","lastModifiedDate":"2017-07-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(new AddCommand(person), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        Person person \u003d new PersonBuilder().build();","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2018-03-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void parseCommand_find() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2017-06-12"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2017-06-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":96,"author":{"gitId":"venuslimm"},"content":"    public void parseCommand_addEvent() throws Exception {","lastModifiedDate":"2023-02-28"},{"lineNumber":97,"author":{"gitId":"venuslimm"},"content":"        Event event \u003d new EventBuilder().build();","lastModifiedDate":"2023-02-28"},{"lineNumber":98,"author":{"gitId":"venuslimm"},"content":"        AddEventCommand command \u003d (AddEventCommand) parser.parseCommand(EventUtil.getAddEventCommand(event));","lastModifiedDate":"2023-02-28"},{"lineNumber":99,"author":{"gitId":"venuslimm"},"content":"        assertEquals(new AddEventCommand(event), command);","lastModifiedDate":"2023-02-28"},{"lineNumber":100,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":101,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"venuslimm":11,"-":101}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.logic.parser;","lastModifiedDate":"2017-05-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2017-06-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-14"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-05-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.HashSet;","lastModifiedDate":"2017-05-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.Set;","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;","lastModifiedDate":"2018-07-10"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Address;","lastModifiedDate":"2017-05-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Email;","lastModifiedDate":"2017-05-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Name;","lastModifiedDate":"2017-05-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Phone;","lastModifiedDate":"2017-05-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.tag.Tag;","lastModifiedDate":"2017-05-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private static final String INVALID_PHONE \u003d \"+651234\";","lastModifiedDate":"2017-05-22"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";","lastModifiedDate":"2017-05-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private static final String INVALID_TAG \u003d \"#friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static final String VALID_PHONE \u003d \"123456\";","lastModifiedDate":"2017-05-22"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";","lastModifiedDate":"2017-05-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";","lastModifiedDate":"2017-05-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_1 \u003d \"friend\";","lastModifiedDate":"2017-05-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";","lastModifiedDate":"2017-05-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"    private static final String INVALID_EVENT_NAME \u003d \"!Company\u0027s 20th Anniversary\";","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"    private static final String INVALID_DATE_TIME_FORMAT \u003d \"02-02-202 12:70\";","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    private static final String VALID_EVENT_NAME \u003d \"Company\u0027s 20th Anniversary\";","lastModifiedDate":"2023-03-02"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"    private static final String VALID_DATE_TIME_FORMAT \u003d \"02-02-2025 00:00\";","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void parsePhone_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public void parsePhone_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));","lastModifiedDate":"2017-05-30"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        Phone expectedPhone \u003d new Phone(VALID_PHONE);","lastModifiedDate":"2017-05-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void parseAddress_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));","lastModifiedDate":"2019-03-14"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-22"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));","lastModifiedDate":"2017-05-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);","lastModifiedDate":"2017-05-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    public void parseEmail_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));","lastModifiedDate":"2019-03-14"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-22"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));","lastModifiedDate":"2017-05-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);","lastModifiedDate":"2017-05-30"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":158,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":159,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    public void parseTag_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    public void parseTag_invalidValue_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));","lastModifiedDate":"2019-03-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));","lastModifiedDate":"2017-05-30"},{"lineNumber":173,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":175,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {","lastModifiedDate":"2017-05-30"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;","lastModifiedDate":"2017-05-30"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);","lastModifiedDate":"2017-05-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));","lastModifiedDate":"2017-05-30"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    public void parseTags_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));","lastModifiedDate":"2019-03-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":193,"author":{"gitId":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":194,"author":{"gitId":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());","lastModifiedDate":"2017-05-22"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {","lastModifiedDate":"2017-05-22"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));","lastModifiedDate":"2017-05-22"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));","lastModifiedDate":"2017-05-22"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);","lastModifiedDate":"2017-05-22"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":204,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":205,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":206,"author":{"gitId":"venuslimm"},"content":"    public void parseEventName_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":207,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEventName((String) null));","lastModifiedDate":"2023-03-02"},{"lineNumber":208,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":209,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":210,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":211,"author":{"gitId":"venuslimm"},"content":"    public void parseEventName_invalidValue_throwsParseException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":212,"author":{"gitId":"venuslimm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEventName(INVALID_EVENT_NAME));","lastModifiedDate":"2023-03-02"},{"lineNumber":213,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":214,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":215,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":216,"author":{"gitId":"venuslimm"},"content":"    public void parseEventName_validValueWithoutWhitespace_returnsEventName() throws Exception {","lastModifiedDate":"2023-03-02"},{"lineNumber":217,"author":{"gitId":"venuslimm"},"content":"        EventName expectedEventName \u003d new EventName(VALID_EVENT_NAME);","lastModifiedDate":"2023-03-02"},{"lineNumber":218,"author":{"gitId":"venuslimm"},"content":"        assertEquals(expectedEventName, ParserUtil.parseEventName(VALID_EVENT_NAME));","lastModifiedDate":"2023-03-02"},{"lineNumber":219,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":220,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":221,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":222,"author":{"gitId":"venuslimm"},"content":"    public void parseEventName_validValueWithWhitespace_returnsTrimmedEventName() throws Exception {","lastModifiedDate":"2023-03-02"},{"lineNumber":223,"author":{"gitId":"venuslimm"},"content":"        String eventNameWithWhitespace \u003d WHITESPACE + VALID_EVENT_NAME + WHITESPACE;","lastModifiedDate":"2023-03-02"},{"lineNumber":224,"author":{"gitId":"venuslimm"},"content":"        EventName expectedEventName \u003d new EventName(VALID_EVENT_NAME);","lastModifiedDate":"2023-03-02"},{"lineNumber":225,"author":{"gitId":"venuslimm"},"content":"        assertEquals(expectedEventName, ParserUtil.parseEventName(eventNameWithWhitespace));","lastModifiedDate":"2023-03-02"},{"lineNumber":226,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":227,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":228,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":229,"author":{"gitId":"venuslimm"},"content":"    public void parseDateTime_null_throwsNullPointerException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":230,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDateTime((String) null));","lastModifiedDate":"2023-03-02"},{"lineNumber":231,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":232,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":233,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":234,"author":{"gitId":"venuslimm"},"content":"    public void parseDateTime_invalidFormat_throwsParseException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":235,"author":{"gitId":"venuslimm"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDateTime(INVALID_DATE_TIME_FORMAT));","lastModifiedDate":"2023-03-02"},{"lineNumber":236,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":237,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":238,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":239,"author":{"gitId":"venuslimm"},"content":"    public void parseDateTime_validValueWithoutWhitespace_returnsDateTime() throws Exception {","lastModifiedDate":"2023-03-02"},{"lineNumber":240,"author":{"gitId":"venuslimm"},"content":"        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME_FORMAT);","lastModifiedDate":"2023-03-02"},{"lineNumber":241,"author":{"gitId":"venuslimm"},"content":"        assertEquals(expectedDateTime, ParserUtil.parseDateTime(VALID_DATE_TIME_FORMAT));","lastModifiedDate":"2023-03-02"},{"lineNumber":242,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":243,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":244,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":245,"author":{"gitId":"venuslimm"},"content":"    public void parseDateTime_validDateTimeWithWhitespace_returnsTrimmedDateTime() throws Exception {","lastModifiedDate":"2023-03-02"},{"lineNumber":246,"author":{"gitId":"venuslimm"},"content":"        String dateTimeWithWhitespace \u003d WHITESPACE + VALID_DATE_TIME_FORMAT + WHITESPACE;","lastModifiedDate":"2023-03-02"},{"lineNumber":247,"author":{"gitId":"venuslimm"},"content":"        DateTime expectedDateTime \u003d new DateTime(VALID_DATE_TIME_FORMAT);","lastModifiedDate":"2023-03-02"},{"lineNumber":248,"author":{"gitId":"venuslimm"},"content":"        assertEquals(expectedDateTime, ParserUtil.parseDateTime(dateTimeWithWhitespace));","lastModifiedDate":"2023-03-02"},{"lineNumber":249,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":250,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"venuslimm":54,"-":196}},{"path":"src/test/java/seedu/address/model/AddressBookTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2016-12-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;","lastModifiedDate":"2018-04-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;","lastModifiedDate":"2018-04-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"import seedu.address.model.person.exceptions.DuplicatePersonException;","lastModifiedDate":"2018-08-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"import seedu.address.testutil.PersonBuilder;","lastModifiedDate":"2018-04-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class AddressBookTest {","lastModifiedDate":"2016-12-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final AddressBook addressBook \u003d new AddressBook();","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(Collections.emptyList(), addressBook.getPersonList());","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void resetData_withValidReadOnlyAddressBook_replacesData() {","lastModifiedDate":"2016-12-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        AddressBook newData \u003d getTypicalAddressBook();","lastModifiedDate":"2017-07-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        addressBook.resetData(newData);","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(newData, addressBook);","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        // Two persons with the same identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);","lastModifiedDate":"2018-04-19"},{"lineNumber":54,"author":{"gitId":"jerome-neo"},"content":"        List\u003cEvent\u003e newEvent \u003d Arrays.asList(CARNIVAL);","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"jerome-neo"},"content":"        AddressBookStub newData \u003d new AddressBookStub(newPersons, newEvent);","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));","lastModifiedDate":"2019-03-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertFalse(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        addressBook.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(addressBook.hasPerson(editedAlice));","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":89,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":90,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":91,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e addressBook.hasEvent(null));","lastModifiedDate":"2023-03-02"},{"lineNumber":92,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":93,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":94,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":95,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_eventNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-02"},{"lineNumber":96,"author":{"gitId":"venuslimm"},"content":"        assertFalse(addressBook.hasEvent(CARNIVAL));","lastModifiedDate":"2023-03-02"},{"lineNumber":97,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":98,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_eventInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-02"},{"lineNumber":101,"author":{"gitId":"venuslimm"},"content":"        addressBook.addEvent(CARNIVAL);","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"venuslimm"},"content":"        assertTrue(addressBook.hasEvent(CARNIVAL));","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints.","lastModifiedDate":"2018-03-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    private static class AddressBookStub implements ReadOnlyAddressBook {","lastModifiedDate":"2016-12-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();","lastModifiedDate":"2018-01-10"},{"lineNumber":110,"author":{"gitId":"jerome-neo"},"content":"        private final ObservableList\u003cEvent\u003e events \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-04"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":112,"author":{"gitId":"jerome-neo"},"content":"        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cEvent\u003e events) {","lastModifiedDate":"2023-03-04"},{"lineNumber":113,"author":{"gitId":"-"},"content":"            this.persons.setAll(persons);","lastModifiedDate":"2016-12-24"},{"lineNumber":114,"author":{"gitId":"jerome-neo"},"content":"            this.events.setAll(events);","lastModifiedDate":"2023-03-04"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        public ObservableList\u003cPerson\u003e getPersonList() {","lastModifiedDate":"2018-01-10"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            return persons;","lastModifiedDate":"2016-12-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":122,"author":{"gitId":"jerome-neo"},"content":"        @Override","lastModifiedDate":"2023-03-04"},{"lineNumber":123,"author":{"gitId":"jerome-neo"},"content":"        public ObservableList\u003cEvent\u003e getEventList() {","lastModifiedDate":"2023-03-04"},{"lineNumber":124,"author":{"gitId":"jerome-neo"},"content":"            return events;","lastModifiedDate":"2023-03-04"},{"lineNumber":125,"author":{"gitId":"jerome-neo"},"content":"        }","lastModifiedDate":"2023-03-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"venuslimm":17,"jerome-neo":10,"-":100}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.model;","lastModifiedDate":"2017-05-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2019-03-23"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.WEDDING_DINNER;","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.ALICE;","lastModifiedDate":"2017-07-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import static seedu.address.testutil.TypicalPersons.BENSON;","lastModifiedDate":"2017-07-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import seedu.address.commons.core.GuiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import seedu.address.model.person.NameContainsKeywordsPredicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import seedu.address.testutil.AddressBookBuilder;","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));","lastModifiedDate":"2018-12-06"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path path \u003d Paths.get(\"address/book/file/path\");","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        modelManager.setAddressBookFilePath(path);","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertEquals(path, modelManager.getAddressBookFilePath());","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void hasPerson_personNotInAddressBook_returnsFalse() {","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void hasPerson_personInAddressBook_returnsTrue() {","lastModifiedDate":"2018-08-07"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        modelManager.addPerson(ALICE);","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.hasPerson(ALICE));","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":98,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":99,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-03-02"},{"lineNumber":100,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasEvent(null));","lastModifiedDate":"2023-03-02"},{"lineNumber":101,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":102,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":103,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":104,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_eventNotInAddressBook_returnsFalse() {","lastModifiedDate":"2023-03-02"},{"lineNumber":105,"author":{"gitId":"venuslimm"},"content":"        assertFalse(modelManager.hasEvent(WEDDING_DINNER));","lastModifiedDate":"2023-03-02"},{"lineNumber":106,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":107,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":108,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-02"},{"lineNumber":109,"author":{"gitId":"venuslimm"},"content":"    public void hasEvent_eventInAddressBook_returnsTrue() {","lastModifiedDate":"2023-03-02"},{"lineNumber":110,"author":{"gitId":"venuslimm"},"content":"        modelManager.addEvent(WEDDING_DINNER);","lastModifiedDate":"2023-03-02"},{"lineNumber":111,"author":{"gitId":"venuslimm"},"content":"        assertTrue(modelManager.hasEvent(WEDDING_DINNER));","lastModifiedDate":"2023-03-02"},{"lineNumber":112,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-02"},{"lineNumber":113,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":116,"author":{"gitId":"venuslimm"},"content":"        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON)","lastModifiedDate":"2023-03-02"},{"lineNumber":117,"author":{"gitId":"venuslimm"},"content":"                .withEvent(WEDDING_DINNER).withEvent(CARNIVAL).build();","lastModifiedDate":"2023-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        AddressBook differentAddressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        modelManager \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);","lastModifiedDate":"2017-05-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // different addressBook -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2017-07-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2017-06-12"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));","lastModifiedDate":"2017-05-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2017-08-05"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2018-08-09"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));","lastModifiedDate":"2018-11-27"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":151,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"venuslimm":20,"-":131}},{"path":"src/test/java/seedu/address/model/event/DateTimeTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"public class DateTimeTest {","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new DateTime(null));","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    public void constructor_invalidDateTime_throwsIllegalArgumentException() {","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"        String invalidDateTime \u003d \"\";","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new DateTime(invalidDateTime));","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"    public void isValidDateTime() {","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"        // null date time","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e DateTime.isValidDateTime(null));","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        // invalid date time","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\"\")); // empty string","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\" \")); // spaces only","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\"2020-02-02 22:20\")); // wrong sequence","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\"02-21-2020 22:20\")); // wrong sequence","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\"02-02-2020 59:20\")); // wrong sequence","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"        assertFalse(DateTime.isValidDateTime(\"02-50-2020 59:70\")); // values out of range","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        // valid date time","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        assertTrue(DateTime.isValidDateTime(\"03-02-2020 20:40\"));","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"jerome-neo"},"content":"    public void isValidDateRange() {","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"        // invalid date time range","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(DateTime.isValidDateRange(\"\", \"\")); // empty string","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(DateTime.isValidDateRange(\" \", \" \")); // spaces only","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(DateTime.isValidDateRange(\"02-02-2023 22:20\", \"01-02-2023 22:20\")); // one-day difference","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(DateTime.isValidDateRange(\"02-02-2023 22:20\", \"02-02-2023 22:19\")); // one-minute difference","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"jerome-neo"},"content":"        // valid date time range","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"jerome-neo"},"content":"        assertTrue(DateTime.isValidDateRange(\"02-02-2023 22:20\", \"02-02-2023 22:20\")); // accept same date","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"jerome-neo"},"content":"        assertTrue(DateTime.isValidDateRange(\"01-02-2023 22:20\", \"02-02-2023 22:20\")); // one-day difference","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"jerome-neo"},"content":"        assertTrue(DateTime.isValidDateRange(\"02-02-2023 22:19\", \"02-02-2023 22:20\")); // one-minute difference","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":37,"jerome-neo":14}},{"path":"src/test/java/seedu/address/model/event/EventNameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"public class EventNameTest {","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e new EventName(null));","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new EventName(invalidName));","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"    public void isValidName() {","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"        // null name","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e EventName.isValidName(null));","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        // invalid name","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        assertFalse(EventName.isValidName(\"\")); // empty string","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"        assertFalse(EventName.isValidName(\" \")); // spaces only","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"        assertFalse(EventName.isValidName(\"!!\")); // only non-alphanumeric characters","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        assertFalse(EventName.isValidName(\"!EFG Concert!\")); // starts with non-alphanumeric character","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(EventName.isValidName(\"小明\u0027s Birthday\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"        assertFalse(EventName.isValidName(\"Graduation Ceremony for シャオ・ミン\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        // valid name","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"sports day\")); // alphabets only","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"54\")); // numbers only","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"20-24th carnival\")); // alphanumeric characters","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"Wedding Dinner\")); // with capital letters","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"Company XYZ 20th Anniversary Dinner\")); // long names","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"        assertTrue(EventName.isValidName(\"22nd Marathon @ Marina\")); // contains punctuations and alphanumeric","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":40,"jerome-neo":2}},{"path":"src/test/java/seedu/address/model/event/EventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.SPORTS_DAY;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"public class EventTest {","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"    public void equals() {","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"        Event carnivalCopy \u003d new EventBuilder(CARNIVAL).build();","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"        assertTrue(CARNIVAL.equals(carnivalCopy));","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"        assertTrue(CARNIVAL.equals(CARNIVAL));","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"        // null -\u003e returns false","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"        assertFalse(CARNIVAL.equals(null));","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        assertFalse(CARNIVAL.equals(511));","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"        // different event -\u003e returns false","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        assertFalse(CARNIVAL.equals(SPORTS_DAY));","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"venuslimm":32}},{"path":"src/test/java/seedu/address/model/event/UniqueEventListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.model.event;","lastModifiedDate":"2023-03-03"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-03"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-03-03"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_EVENT_NAME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_TIME_CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-03"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-03"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-03"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"import seedu.address.testutil.EventBuilder;","lastModifiedDate":"2023-03-03"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"public class UniqueEventListTest {","lastModifiedDate":"2023-03-03"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"    private final UniqueEventList uniqueEventList \u003d new UniqueEventList();","lastModifiedDate":"2023-03-03"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"    public void contains_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-03-03"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.contains(null));","lastModifiedDate":"2023-03-03"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"    public void contains_eventNotInList_returnsFalse() {","lastModifiedDate":"2023-03-03"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        assertFalse(uniqueEventList.contains(CARNIVAL));","lastModifiedDate":"2023-03-03"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"    public void contains_eventInList_returnsTrue() {","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"        uniqueEventList.add(CARNIVAL);","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"        assertTrue(uniqueEventList.contains(CARNIVAL));","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"    public void contains_eventWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2023-03-03"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        uniqueEventList.add(CARNIVAL);","lastModifiedDate":"2023-03-03"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"        Event editedCarnival \u003d new EventBuilder(CARNIVAL).withName(VALID_EVENT_NAME_CARNIVAL)","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"                .withStartDateTime(VALID_START_DATE_TIME_CARNIVAL)","lastModifiedDate":"2023-03-03"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"                .withEndDateTime(VALID_END_DATE_TIME_CARNIVAL)","lastModifiedDate":"2023-03-03"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"                .build();","lastModifiedDate":"2023-03-03"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"        assertTrue(uniqueEventList.contains(editedCarnival));","lastModifiedDate":"2023-03-03"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"    public void add_nullEvent_throwsNullPointerException() {","lastModifiedDate":"2023-03-03"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniqueEventList.add(null));","lastModifiedDate":"2023-03-03"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"    @Test","lastModifiedDate":"2023-03-03"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"            -\u003e uniqueEventList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-03"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-03-03"}],"authorContributionMap":{"venuslimm":55}},{"path":"src/test/java/seedu/address/storage/JsonAdaptedEventTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"jerome-neo"},"content":"package seedu.address.storage;","lastModifiedDate":"2023-03-04"},{"lineNumber":2,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":3,"author":{"gitId":"jerome-neo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-04"},{"lineNumber":4,"author":{"gitId":"jerome-neo"},"content":"import static seedu.address.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-04"},{"lineNumber":5,"author":{"gitId":"jerome-neo"},"content":"import static seedu.address.testutil.TypicalEvents.BIRTHDAY_PARTY;","lastModifiedDate":"2023-03-04"},{"lineNumber":6,"author":{"gitId":"jerome-neo"},"content":"import static seedu.address.testutil.TypicalEvents.CARNIVAL;","lastModifiedDate":"2023-03-04"},{"lineNumber":7,"author":{"gitId":"jerome-neo"},"content":"import static seedu.address.testutil.TypicalEvents.SPORTS_DAY;","lastModifiedDate":"2023-03-04"},{"lineNumber":8,"author":{"gitId":"jerome-neo"},"content":"import static seedu.address.testutil.TypicalEvents.WEDDING_DINNER;","lastModifiedDate":"2023-03-04"},{"lineNumber":9,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":10,"author":{"gitId":"jerome-neo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-04"},{"lineNumber":11,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":12,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-04"},{"lineNumber":13,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-03-04"},{"lineNumber":14,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-03-04"},{"lineNumber":15,"author":{"gitId":"jerome-neo"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-03-04"},{"lineNumber":16,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":17,"author":{"gitId":"jerome-neo"},"content":"public class JsonAdaptedEventTest {","lastModifiedDate":"2023-03-04"},{"lineNumber":18,"author":{"gitId":"jerome-neo"},"content":"    private static final Event INVALID_EVENT_DATETIME \u003d new Event(","lastModifiedDate":"2023-03-04"},{"lineNumber":19,"author":{"gitId":"jerome-neo"},"content":"            new EventName(\"Dinner\"), new DateTime(\"02-02-2023 17:00\"), new DateTime(\"01-02-2023 17:00\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":20,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":21,"author":{"gitId":"jerome-neo"},"content":"    private static final Event VALID_EVENT_WITH_SAME_DATETIME \u003d new Event(","lastModifiedDate":"2023-03-04"},{"lineNumber":22,"author":{"gitId":"jerome-neo"},"content":"            new EventName(\"Same date range\"), new DateTime(\"02-02-2023 17:00\"), new DateTime(\"02-02-2023 17:00\"));","lastModifiedDate":"2023-03-04"},{"lineNumber":23,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":24,"author":{"gitId":"jerome-neo"},"content":"    private static final String INVALID_EVENT_NAME \u003d \"小明 21\u0027st Birthday\";","lastModifiedDate":"2023-03-04"},{"lineNumber":25,"author":{"gitId":"jerome-neo"},"content":"    private static final String VALID_EVENT_NAME \u003d \"Xiao Ming 21\u0027st Birthday\";","lastModifiedDate":"2023-03-04"},{"lineNumber":26,"author":{"gitId":"jerome-neo"},"content":"    private static final String INVALID_START_DATETIME \u003d \"50-02-2023 17:00\";","lastModifiedDate":"2023-03-04"},{"lineNumber":27,"author":{"gitId":"jerome-neo"},"content":"    private static final String INVALID_END_DATETIME \u003d \"90-13-1023 17:00\";","lastModifiedDate":"2023-03-04"},{"lineNumber":28,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":29,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":30,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_validEventObject_returnsEvent() throws Exception {","lastModifiedDate":"2023-03-04"},{"lineNumber":31,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event1 \u003d new JsonAdaptedEvent(WEDDING_DINNER);","lastModifiedDate":"2023-03-04"},{"lineNumber":32,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(WEDDING_DINNER, event1.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":33,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event2 \u003d new JsonAdaptedEvent(CARNIVAL);","lastModifiedDate":"2023-03-04"},{"lineNumber":34,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(CARNIVAL, event2.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":35,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event3 \u003d new JsonAdaptedEvent(SPORTS_DAY);","lastModifiedDate":"2023-03-04"},{"lineNumber":36,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(SPORTS_DAY, event3.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":37,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event4 \u003d new JsonAdaptedEvent(BIRTHDAY_PARTY);","lastModifiedDate":"2023-03-04"},{"lineNumber":38,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(BIRTHDAY_PARTY, event4.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":39,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":40,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":41,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":42,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_validEventDetails_returnsEvent() throws Exception {","lastModifiedDate":"2023-03-04"},{"lineNumber":43,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event1 \u003d new JsonAdaptedEvent(WEDDING_DINNER.getName().toString(),","lastModifiedDate":"2023-03-04"},{"lineNumber":44,"author":{"gitId":"jerome-neo"},"content":"                WEDDING_DINNER.getStartDateTime().toString(), WEDDING_DINNER.getEndDateTime().toString());","lastModifiedDate":"2023-03-04"},{"lineNumber":45,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(WEDDING_DINNER, event1.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":46,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event2 \u003d new JsonAdaptedEvent(CARNIVAL.getName().toString(),","lastModifiedDate":"2023-03-04"},{"lineNumber":47,"author":{"gitId":"jerome-neo"},"content":"                CARNIVAL.getStartDateTime().toString(), CARNIVAL.getEndDateTime().toString());","lastModifiedDate":"2023-03-04"},{"lineNumber":48,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(CARNIVAL, event2.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":49,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event3 \u003d new JsonAdaptedEvent(SPORTS_DAY.getName().toString(),","lastModifiedDate":"2023-03-04"},{"lineNumber":50,"author":{"gitId":"jerome-neo"},"content":"                SPORTS_DAY.getStartDateTime().toString(), SPORTS_DAY.getEndDateTime().toString());","lastModifiedDate":"2023-03-04"},{"lineNumber":51,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(SPORTS_DAY, event3.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":52,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event4 \u003d new JsonAdaptedEvent(BIRTHDAY_PARTY.getName().toString(),","lastModifiedDate":"2023-03-04"},{"lineNumber":53,"author":{"gitId":"jerome-neo"},"content":"                BIRTHDAY_PARTY.getStartDateTime().toString(), BIRTHDAY_PARTY.getEndDateTime().toString());","lastModifiedDate":"2023-03-04"},{"lineNumber":54,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(BIRTHDAY_PARTY, event4.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":55,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":56,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":57,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":58,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_validEventWithIdenticalDates_returnsEvent() throws Exception {","lastModifiedDate":"2023-03-04"},{"lineNumber":59,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENT_WITH_SAME_DATETIME);","lastModifiedDate":"2023-03-04"},{"lineNumber":60,"author":{"gitId":"jerome-neo"},"content":"        assertEquals(VALID_EVENT_WITH_SAME_DATETIME, event.toModelType());","lastModifiedDate":"2023-03-04"},{"lineNumber":61,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":62,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":63,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":64,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_invalidEventDateRange_throwsIllegalValueException() {","lastModifiedDate":"2023-03-04"},{"lineNumber":65,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(INVALID_EVENT_DATETIME);","lastModifiedDate":"2023-03-04"},{"lineNumber":66,"author":{"gitId":"jerome-neo"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-04"},{"lineNumber":67,"author":{"gitId":"jerome-neo"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-03-04"},{"lineNumber":68,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":69,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":70,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":71,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_invalidEventName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-04"},{"lineNumber":72,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(INVALID_EVENT_NAME,","lastModifiedDate":"2023-03-04"},{"lineNumber":73,"author":{"gitId":"jerome-neo"},"content":"                WEDDING_DINNER.getStartDateTime().toString(), WEDDING_DINNER.getEndDateTime().toString());","lastModifiedDate":"2023-03-04"},{"lineNumber":74,"author":{"gitId":"jerome-neo"},"content":"        String expectedMessage \u003d EventName.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-04"},{"lineNumber":75,"author":{"gitId":"jerome-neo"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-03-04"},{"lineNumber":76,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":77,"author":{"gitId":"jerome-neo"},"content":"","lastModifiedDate":"2023-03-04"},{"lineNumber":78,"author":{"gitId":"jerome-neo"},"content":"    @Test","lastModifiedDate":"2023-03-04"},{"lineNumber":79,"author":{"gitId":"jerome-neo"},"content":"    public void toModelType_invalidDateFormat_throwsIllegalValueException() {","lastModifiedDate":"2023-03-04"},{"lineNumber":80,"author":{"gitId":"jerome-neo"},"content":"        JsonAdaptedEvent event \u003d new JsonAdaptedEvent(VALID_EVENT_NAME,","lastModifiedDate":"2023-03-04"},{"lineNumber":81,"author":{"gitId":"jerome-neo"},"content":"                INVALID_START_DATETIME, INVALID_END_DATETIME);","lastModifiedDate":"2023-03-04"},{"lineNumber":82,"author":{"gitId":"jerome-neo"},"content":"        String expectedMessage \u003d DateTime.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-04"},{"lineNumber":83,"author":{"gitId":"jerome-neo"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, event::toModelType);","lastModifiedDate":"2023-03-04"},{"lineNumber":84,"author":{"gitId":"jerome-neo"},"content":"    }","lastModifiedDate":"2023-03-04"},{"lineNumber":85,"author":{"gitId":"jerome-neo"},"content":"}","lastModifiedDate":"2023-03-04"}],"authorContributionMap":{"jerome-neo":85}},{"path":"src/test/java/seedu/address/testutil/AddressBookBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package seedu.address.testutil;","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import seedu.address.model.person.Person;","lastModifiedDate":"2018-01-10"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2018-03-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AddressBookBuilder {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private AddressBook addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public AddressBookBuilder() {","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        addressBook \u003d new AddressBook();","lastModifiedDate":"2017-05-31"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public AddressBookBuilder(AddressBook addressBook) {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.addressBook \u003d addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Adds a new {@code Person} to the {@code AddressBook} that we are building.","lastModifiedDate":"2017-07-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public AddressBookBuilder withPerson(Person person) {","lastModifiedDate":"2018-01-10"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        addressBook.addPerson(person);","lastModifiedDate":"2016-09-01"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"     * Adds a new {@code Event} to the {@code AddressBook} that we are building.","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"    public AddressBookBuilder withEvent(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"        addressBook.addEvent(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        return this;","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public AddressBook build() {","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return addressBook;","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"venuslimm":9,"-":34}},{"path":"src/test/java/seedu/address/testutil/EventBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.DateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.EventName;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":" * A utility class to help with building Event objects.","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"public class EventBuilder {","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":"    public static final String DEFAULT_NAME \u003d \"Sports Week\";","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"    public static final String DEFAULT_START_DATE_TIME \u003d \"11-09-2023 09:00\";","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"    public static final String DEFAULT_END_DATE_TIME \u003d \"15-09-2023 19:00\";","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"    private EventName name;","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"    private DateTime startDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"    private DateTime endDateTime;","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"     * Creates a {@code EventBuilder} with the default details.","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"    public EventBuilder() {","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"        name \u003d new EventName(DEFAULT_NAME);","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"        startDateTime \u003d new DateTime(DEFAULT_START_DATE_TIME);","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        endDateTime \u003d new DateTime(DEFAULT_END_DATE_TIME);","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"     * Initializes the EventBuilder with the data of {@code eventToCopy}.","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    public EventBuilder(Event eventToCopy) {","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"        name \u003d eventToCopy.getName();","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        startDateTime \u003d eventToCopy.getStartDateTime();","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"        endDateTime \u003d eventToCopy.getEndDateTime();","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"     * Sets the {@code Name} of the {@code Event} that we are building.","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"    public EventBuilder withName(String name) {","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"        this.name \u003d new EventName(name);","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"        return this;","lastModifiedDate":"2023-02-28"},{"lineNumber":44,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":45,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":46,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":47,"author":{"gitId":"venuslimm"},"content":"     * Sets the {@code startDateTime} of the {@code Event} that we are building.","lastModifiedDate":"2023-02-28"},{"lineNumber":48,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":49,"author":{"gitId":"venuslimm"},"content":"    public EventBuilder withStartDateTime(String startDateTime) {","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"venuslimm"},"content":"        this.startDateTime \u003d new DateTime(startDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":51,"author":{"gitId":"venuslimm"},"content":"        return this;","lastModifiedDate":"2023-02-28"},{"lineNumber":52,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":53,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":54,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":55,"author":{"gitId":"venuslimm"},"content":"     * Sets the {@code endDateTime} of the {@code Event} that we are building.","lastModifiedDate":"2023-02-28"},{"lineNumber":56,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":57,"author":{"gitId":"venuslimm"},"content":"    public EventBuilder withEndDateTime(String endDateTime) {","lastModifiedDate":"2023-02-28"},{"lineNumber":58,"author":{"gitId":"venuslimm"},"content":"        this.endDateTime \u003d new DateTime(endDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":59,"author":{"gitId":"venuslimm"},"content":"        return this;","lastModifiedDate":"2023-02-28"},{"lineNumber":60,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":61,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":62,"author":{"gitId":"venuslimm"},"content":"    public Event build() {","lastModifiedDate":"2023-02-28"},{"lineNumber":63,"author":{"gitId":"venuslimm"},"content":"        return new Event(name, startDateTime, endDateTime);","lastModifiedDate":"2023-02-28"},{"lineNumber":64,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":65,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":65}},{"path":"src/test/java/seedu/address/testutil/EventUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EVENT_NAME;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import seedu.address.logic.commands.AddEventCommand;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":" * A utility class for Event.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"public class EventUtil {","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"     * Returns an add event command string for adding the {@code event}.","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"    public static String getAddEventCommand(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"        return AddEventCommand.COMMAND_WORD + \" \" + getEventDetails(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"     * Returns the part of command string for the given {@code event}\u0027s details.","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"    public static String getEventDetails(Event event) {","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"        sb.append(PREFIX_EVENT_NAME + event.getName().name + \" \");","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"        sb.append(PREFIX_START_DATE_TIME + event.getStartDateTime().dateTime + \" \");","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"        sb.append(PREFIX_END_DATE_TIME + event.getEndDateTime().dateTime + \" \");","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"        return sb.toString();","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":32}},{"path":"src/test/java/seedu/address/testutil/TypicalEvents.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"venuslimm"},"content":"package seedu.address.testutil;","lastModifiedDate":"2023-02-28"},{"lineNumber":2,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":3,"author":{"gitId":"venuslimm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-02-28"},{"lineNumber":4,"author":{"gitId":"venuslimm"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-02-28"},{"lineNumber":5,"author":{"gitId":"venuslimm"},"content":"import java.util.List;","lastModifiedDate":"2023-02-28"},{"lineNumber":6,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":7,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.AddressBook;","lastModifiedDate":"2023-02-28"},{"lineNumber":8,"author":{"gitId":"venuslimm"},"content":"import seedu.address.model.event.Event;","lastModifiedDate":"2023-02-28"},{"lineNumber":9,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":10,"author":{"gitId":"venuslimm"},"content":"/**","lastModifiedDate":"2023-02-28"},{"lineNumber":11,"author":{"gitId":"venuslimm"},"content":" * A utility class containing a list of {@code Event} objects to be used in tests.","lastModifiedDate":"2023-02-28"},{"lineNumber":12,"author":{"gitId":"venuslimm"},"content":" */","lastModifiedDate":"2023-02-28"},{"lineNumber":13,"author":{"gitId":"venuslimm"},"content":"public class TypicalEvents {","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"venuslimm"},"content":"    public static final Event WEDDING_DINNER \u003d new EventBuilder().withName(\"Wedding Dinner\")","lastModifiedDate":"2023-02-28"},{"lineNumber":15,"author":{"gitId":"venuslimm"},"content":"            .withStartDateTime(\"01-01-2024 19:00\")","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"venuslimm"},"content":"            .withEndDateTime(\"01-01-2024 22:00\").build();","lastModifiedDate":"2023-02-28"},{"lineNumber":17,"author":{"gitId":"venuslimm"},"content":"    public static final Event CARNIVAL \u003d new EventBuilder().withName(\"Carnival\")","lastModifiedDate":"2023-02-28"},{"lineNumber":18,"author":{"gitId":"venuslimm"},"content":"            .withStartDateTime(\"17-07-2023 12:00\")","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"venuslimm"},"content":"            .withEndDateTime(\"21-07-2023 22:00\").build();","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"venuslimm"},"content":"    public static final Event SPORTS_DAY \u003d new EventBuilder().withName(\"Company ABC Sports Day\")","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"venuslimm"},"content":"            .withStartDateTime(\"03-03-2024 09:00\")","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"venuslimm"},"content":"            .withEndDateTime(\"03-03-2024 18:00\").build();","lastModifiedDate":"2023-02-28"},{"lineNumber":23,"author":{"gitId":"venuslimm"},"content":"    public static final Event BIRTHDAY_PARTY \u003d new EventBuilder().withName(\"CEO\u0027s 50th birthday party\")","lastModifiedDate":"2023-02-28"},{"lineNumber":24,"author":{"gitId":"venuslimm"},"content":"            .withStartDateTime(\"03-08-2023 15:00\")","lastModifiedDate":"2023-02-28"},{"lineNumber":25,"author":{"gitId":"venuslimm"},"content":"            .withEndDateTime(\"03-08-2023 21:00\").build();","lastModifiedDate":"2023-02-28"},{"lineNumber":26,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":27,"author":{"gitId":"venuslimm"},"content":"    private TypicalEvents() {} // prevents instantiation","lastModifiedDate":"2023-02-28"},{"lineNumber":28,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":29,"author":{"gitId":"venuslimm"},"content":"    /**","lastModifiedDate":"2023-02-28"},{"lineNumber":30,"author":{"gitId":"venuslimm"},"content":"     * Returns an {@code AddressBook} with all the typical events.","lastModifiedDate":"2023-02-28"},{"lineNumber":31,"author":{"gitId":"venuslimm"},"content":"     */","lastModifiedDate":"2023-02-28"},{"lineNumber":32,"author":{"gitId":"venuslimm"},"content":"    public static AddressBook getTypicalAddressBook() {","lastModifiedDate":"2023-02-28"},{"lineNumber":33,"author":{"gitId":"venuslimm"},"content":"        AddressBook ab \u003d new AddressBook();","lastModifiedDate":"2023-02-28"},{"lineNumber":34,"author":{"gitId":"venuslimm"},"content":"        for (Event event : getTypicalEvents()) {","lastModifiedDate":"2023-02-28"},{"lineNumber":35,"author":{"gitId":"venuslimm"},"content":"            ab.addEvent(event);","lastModifiedDate":"2023-02-28"},{"lineNumber":36,"author":{"gitId":"venuslimm"},"content":"        }","lastModifiedDate":"2023-02-28"},{"lineNumber":37,"author":{"gitId":"venuslimm"},"content":"        return ab;","lastModifiedDate":"2023-02-28"},{"lineNumber":38,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":39,"author":{"gitId":"venuslimm"},"content":"","lastModifiedDate":"2023-02-28"},{"lineNumber":40,"author":{"gitId":"venuslimm"},"content":"    public static List\u003cEvent\u003e getTypicalEvents() {","lastModifiedDate":"2023-02-28"},{"lineNumber":41,"author":{"gitId":"venuslimm"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(WEDDING_DINNER, CARNIVAL, SPORTS_DAY, BIRTHDAY_PARTY));","lastModifiedDate":"2023-02-28"},{"lineNumber":42,"author":{"gitId":"venuslimm"},"content":"    }","lastModifiedDate":"2023-02-28"},{"lineNumber":43,"author":{"gitId":"venuslimm"},"content":"}","lastModifiedDate":"2023-02-28"}],"authorContributionMap":{"venuslimm":43}}]
