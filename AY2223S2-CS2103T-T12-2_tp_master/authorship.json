[{"path":"README.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"KSunil2001"},"content":"[![CI Status](https://github.com/AY2223S2-CS2103T-T12-2/tp/actions/workflows/gradle.yml/badge.svg)](https://github.com/AY2223S2-CS2103T-T12-2/tp/actions)","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"![Ui](docs/images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"KSunil2001"},"content":"* This is **a hospital patient management system**.\u003cbr\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"  Example usages:","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"KSunil2001"},"content":"  * Inpro of patients","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"KSunil2001"},"content":"  * Access medical records of patients","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"KSunil2001"},"content":"* The patient management system (called `MedInfo`) can be used for managing patient records.","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"KSunil2001"},"content":"  * It is to digitise hospital patient management data through a CLI app with a GUI to display patient information, medical records or necessary financial records.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"KSunil2001"},"content":"  * It is to computerise the Front Office Management of Hospital to develop software which is user friendly, simple, fast, and costâ€“effective.","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"KSunil2001"},"content":"  * The main function of the system is to register and store patient details and doctor details, retrieve these details as and when required, and also to manipulate these details meaningfully.","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":"* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org).","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"-":4,"KSunil2001":9}},{"path":"build.gradle","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2016-08-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2017-12-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2022-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2016-12-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027jacoco\u0027","lastModifiedDate":"2020-08-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"mainClassName \u003d \u0027seedu.medinfo.Main\u0027","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11","lastModifiedDate":"2019-02-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2018-04-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"checkstyle {","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2022-04-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2018-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2018-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    finalizedBy jacocoTestReport","lastModifiedDate":"2020-08-07"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-08-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-08-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"task coverage(type: JacocoReport) {","lastModifiedDate":"2020-08-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)","lastModifiedDate":"2020-08-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    classDirectories.from files(sourceSets.main.output)","lastModifiedDate":"2020-08-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    executionData.from files(jacocoTestReport.executionData)","lastModifiedDate":"2020-08-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    afterEvaluate {","lastModifiedDate":"2020-08-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        classDirectories.from files(classDirectories.files.collect {","lastModifiedDate":"2020-08-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])","lastModifiedDate":"2020-08-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        })","lastModifiedDate":"2020-08-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    reports {","lastModifiedDate":"2020-08-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        html.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        xml.required \u003d true","lastModifiedDate":"2022-06-17"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-08-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027","lastModifiedDate":"2019-02-10"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    String javaFxVersion \u003d \u002711\u0027","lastModifiedDate":"2019-02-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2019-02-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027","lastModifiedDate":"2018-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion","lastModifiedDate":"2018-03-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2016-08-29"},{"lineNumber":70,"author":{"gitId":"jeraldkiew"},"content":"    archiveFileName \u003d \u0027medinfo.jar\u0027","lastModifiedDate":"2023-03-26"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"run {","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"yitong241":4,"jeraldkiew":1,"-":72}},{"path":"docs/AboutUs.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2023-03-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: About Us","lastModifiedDate":"2023-03-31"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg).","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"You can reach us at the email `seer[at]comp.nus.edu.sg`","lastModifiedDate":"2020-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Project team","lastModifiedDate":"2020-06-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"### Navaneeth Ramapurath","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"\u003cimg src\u003d\"images/nramapurath.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"[[github](https://github.com/nramapurath)]","lastModifiedDate":"2023-02-28"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"[[portfolio](team/nramapurath.md)]","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"- Role: Team Lead","lastModifiedDate":"2023-02-28"},{"lineNumber":19,"author":{"gitId":"nramapurath"},"content":"- Code Focus Area: Logic, model","lastModifiedDate":"2023-02-28"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"- Primary Role: Scheduling and tracking","lastModifiedDate":"2023-02-28"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"- Secondary Role: Testing","lastModifiedDate":"2023-02-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"### Jerald Kiew","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"\u003cimg src\u003d\"images/jeraldkiew.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"[[github](http://github.com/jeraldkiew)]","lastModifiedDate":"2023-02-25"},{"lineNumber":28,"author":{"gitId":"KSunil2001"},"content":"[[portfolio](team/jeraldkiew.md)]","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"- Role: Developer","lastModifiedDate":"2023-03-03"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"- Code Focus Area: Model","lastModifiedDate":"2023-03-03"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"- Primary Role: Documentation","lastModifiedDate":"2023-03-03"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"- Secondary Role: Code Quality","lastModifiedDate":"2023-03-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"### K Sunil Avinash","lastModifiedDate":"2023-02-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"\u003cimg src\u003d\"images/ksunil2001.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"[[github](http://github.com/ksunil2001)]","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"[[portfolio](team/ksunil2001.md)]","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"- Role: Developer","lastModifiedDate":"2023-02-25"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"- Code Focus Area: Storage","lastModifiedDate":"2023-03-02"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"- Primary Role: Code Quality","lastModifiedDate":"2023-03-02"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"- Secondary Role: Documentation","lastModifiedDate":"2023-03-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"### Nicholas Arlin Halim","lastModifiedDate":"2023-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"\u003cimg src\u003d\"images/daytona65.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"[[github](http://github.com/daytona65)]","lastModifiedDate":"2023-03-03"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"[[portfolio](team/daytona65.md)]","lastModifiedDate":"2023-03-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"- Role: Developer","lastModifiedDate":"2023-03-03"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"- Code Focus Area: UI","lastModifiedDate":"2023-03-03"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"- Primary Role: Code Integration","lastModifiedDate":"2023-03-03"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"- Secondary Role: Testing","lastModifiedDate":"2023-03-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"### Sun Yitong","lastModifiedDate":"2023-02-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"\u003cimg src\u003d\"images/yitong241.png\" width\u003d\"200px\"\u003e","lastModifiedDate":"2023-02-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"[[github](http://github.com/yitong241)]","lastModifiedDate":"2023-02-25"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"[[portfolio](team/yitong241.md)]","lastModifiedDate":"2023-02-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"jeraldkiew"},"content":"- Role: Developer","lastModifiedDate":"2023-02-25"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"- Code Focus Area: Logic","lastModifiedDate":"2023-02-25"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"- Primary Role: Deliverables and deadlines","lastModifiedDate":"2023-02-25"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"- Secondary Role: Scheduling and tracking","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"nramapurath":8,"yitong241":4,"daytona65":15,"jeraldkiew":5,"-":29,"KSunil2001":8}},{"path":"docs/DeveloperGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Developer Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"**MedInfo** is a desktop application that empowers clinics and hopitals  to manage their patients.","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"This Developer Guide provides an in-depth documentation on how **MedInfo** is designed and implemented.","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"It covers the architecture of **MedInfo** and provides detailed descriptions regarding the implementation design.","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"You can use this guide to maintain, upgrade, and evolve **MedInfo**.","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"## Table of contents","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"* [Acknowledgements](#acknowledgements)","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"* [Getting Started](#setting-up-getting-started)","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"* [Design](#design)","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    * [Architecture](#architecture)","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    * [UI](#ui-component)","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    * [Logic](#logic-component)","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    * [Model](#model-component)","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"    * [Storage](#storage-component)","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    * [Common Classes](#common-classes)","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"* [Implementation](#implementation)","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    * [Add Patients Feature](#adding-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    * [Add Wards Feature](#adding-a-ward)","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    * [Edit Patients Feature](#editing-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    * [Delete Patients Feature](#deleting-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    * [Find Patients Feature](#finding-patients)","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    * [List Patients Feature](#list-all-patients)","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    * [[Proposed] Undo Redo Feature](#proposed-undoredo-feature)","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"    * [[Proposed] Data Archiving](#proposed-data-archiving)","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"* [Appendix: Requirements](#appendix-requirements)","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    * [Target User Profile](#target-user-profile)","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"    * [Value Proposition](#value-proposition)","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"    * [User Stories](#user-stories)","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"    * [Use Cases](#use-cases)","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        * [Use case: **add a patient**](#use-case-uc01---add-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        * [Use case: **delete a patient**](#use-case-uc02---delete-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        * [Use case: **edit a patient**](#use-case-uc03---edit-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        * [Use case: **find a patient**](#use-case-uc04---find-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        * [Use case: **clear all patients**](#use-case-uc05---clear-all-patients)","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        * [Use case: **add a ward**](#use-case-uc06---add-a-new-ward)","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        * [Use case: **delete a ward**](#use-case-uc07---delete-a-ward)","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        * [Use case: **sort patients**](#use-case-uc08---sort-patients)","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    * [Non-Functional Requirement](#non-functional-requirements)","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"    * [Glossary](#glossary)","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"* [Appendix: Instructions for Manual Testing ](#appendix-instructions-for-manual-testing)","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"  * [**Launch and shutdown**](#launch-and-shutdown)","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"  * [**Delete a patient**](#delete-a-patient)","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"  * [**Save data**](#save-data)","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"## Acknowledgements","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":58,"author":{"gitId":"jeraldkiew"},"content":"- {list here sources of all reused/adapted ideas, code, documentation, and third-party libraries -- include links to the original source as well}","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-30"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"## Setting up, getting started","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Refer to the guide [_Setting up and getting started_](SettingUp.md).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"## Design","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"### Architecture","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"280\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"jeraldkiew"},"content":"The **_Architecture Diagram_** given above explains the high-level design of the App.","lastModifiedDate":"2023-03-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"Given below is a quick overview of main components and how they interact with each other.","lastModifiedDate":"2021-07-31"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":84,"author":{"gitId":"-"},"content":"**Main components of the architecture**","lastModifiedDate":"2021-07-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"jeraldkiew"},"content":"- At app launch: Initializes the components in the correct sequence, and connects them up with each other.","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"jeraldkiew"},"content":"- At shut down: Shuts down the components and invokes cleanup methods where necessary.","lastModifiedDate":"2023-03-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"The rest of the App consists of four components.","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"jeraldkiew"},"content":"- [**`UI`**](#ui-component): The UI of the App.","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"jeraldkiew"},"content":"- [**`Logic`**](#logic-component): The command executor.","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"jeraldkiew"},"content":"- [**`Model`**](#model-component): Holds the data of the App in memory.","lastModifiedDate":"2023-03-24"},{"lineNumber":98,"author":{"gitId":"jeraldkiew"},"content":"- [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk.","lastModifiedDate":"2023-03-24"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"**How the architecture components interact with each other**","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"jeraldkiew"},"content":"The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`.","lastModifiedDate":"2023-03-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"Each of the four main components (also shown in the diagram above),","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":108,"author":{"gitId":"jeraldkiew"},"content":"- defines its _API_ in an `interface` with the same name as the Component.","lastModifiedDate":"2023-03-24"},{"lineNumber":109,"author":{"gitId":"nramapurath"},"content":"- implements its functionality using a concrete `{Component Name}Manager` class (which follows the corresponding API `interface` mentioned in the previous point.)","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"For example, the `Logic` component defines its API in the `Logic.java` interface and implements its functionality using the `LogicManager.java` class which follows the `Logic` interface. Other components interact with a given component through its interface rather than the concrete class (reason: to prevent outside component\u0027s being coupled to the implementation of a component), as illustrated in the (partial) class diagram below.","lastModifiedDate":"2021-07-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"The sections below give more details of each component.","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"### UI component","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"The **API** of this component is specified in [`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"![Structure of the UI Component](images/UiClassDiagram.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class which captures the commonalities between classes that represent parts of the visible GUI.","lastModifiedDate":"2021-07-31"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"The `UI` component uses the JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)","lastModifiedDate":"2021-07-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"The `UI` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"jeraldkiew"},"content":"- executes user commands using the `Logic` component.","lastModifiedDate":"2023-03-24"},{"lineNumber":130,"author":{"gitId":"jeraldkiew"},"content":"- listens for changes to `Model` data so that the UI can be updated with the modified data.","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"jeraldkiew"},"content":"- keeps a reference to the `Logic` component, because the `UI` relies on the `Logic` to execute commands.","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"jeraldkiew"},"content":"- depends on some classes in the `Model` component, as it displays `Person` object residing in the `Model`.","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"### Logic component","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"**API** : [`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)","lastModifiedDate":"2021-07-31"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"Here\u0027s a (partial) class diagram of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"How the `Logic` component works:","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. When `Logic` is called upon to execute a command, it uses the `AddressBookParser` class to parse the user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"1. This results in a `Command` object (more precisely, an object of one of its subclasses e.g., `AddCommand`) which is executed by the `LogicManager`.","lastModifiedDate":"2021-07-31"},{"lineNumber":146,"author":{"gitId":"nramapurath"},"content":"1. The command can communicate with the `Model` when it is executed (e.g. to add a patient).","lastModifiedDate":"2023-03-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"1. The result of the command execution is encapsulated as a `CommandResult` object which is returned back from `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":149,"author":{"gitId":"-"},"content":"The Sequence Diagram below illustrates the interactions within the `Logic` component for the `execute(\"delete 1\")` API call.","lastModifiedDate":"2021-07-31"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Here are the other classes in `Logic` (omitted from the class diagram above) that are used for parsing a user command:","lastModifiedDate":"2021-07-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":158,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"How the parsing works:","lastModifiedDate":"2021-07-31"},{"lineNumber":161,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"jeraldkiew"},"content":"- When called upon to parse a user command, the `AddressBookParser` class creates an `XYZCommandParser` (`XYZ` is a placeholder for the specific command name e.g., `AddCommandParser`) which uses the other classes shown above to parse the user command and create a `XYZCommand` object (e.g., `AddCommand`) which the `AddressBookParser` returns back as a `Command` object.","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"jeraldkiew"},"content":"- All `XYZCommandParser` classes (e.g., `AddCommandParser`, `DeleteCommandParser`, ...) inherit from the `Parser` interface so that they can be treated similarly where possible e.g, during testing.","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"### Model component","lastModifiedDate":"2021-07-31"},{"lineNumber":166,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"-"},"content":"**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"The `Model` component,","lastModifiedDate":"2021-07-31"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"jeraldkiew"},"content":"- stores the address book data i.e., all `Person` objects (which are contained in a `UniquePersonList` object).","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"jeraldkiew"},"content":"- stores the currently \u0027selected\u0027 `Person` objects (e.g., results of a search query) as a separate _filtered_ list which is exposed to outsiders as an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change.","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"jeraldkiew"},"content":"- stores a `UserPref` object that represents the userâ€™s preferences. This is exposed to the outside as a `ReadOnlyUserPref` objects.","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"jeraldkiew"},"content":"- does not depend on any of the other three components (as the `Model` represents data entities of the domain, they should make sense on their own without depending on other components)","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"### Storage component","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":185,"author":{"gitId":"-"},"content":"The `Storage` component,","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"jeraldkiew"},"content":"- can save both address book data and user preference data in json format, and read them back into corresponding objects.","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"jeraldkiew"},"content":"- inherits from both `AddressBookStorage` and `UserPrefStorage`, which means it can be treated as either one (if only the functionality of only one is needed).","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"jeraldkiew"},"content":"- depends on some classes in the `Model` component (because the `Storage` component\u0027s job is to save/retrieve objects that belong to the `Model`)","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"### Common classes","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Classes used by multiple components are in the `seedu.addressbook.commons` package.","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"## **Implementation**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"nramapurath"},"content":"This section describes some noteworthy details on how certain features are implemented in MedInfo.","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"nramapurath"},"content":"### Adding a patient","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can add a patient using the `add` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":204,"author":{"gitId":"nramapurath"},"content":"- The `add` command takes in 2 compulsory fields (name and NRIC) and 1 optional field (status)","lastModifiedDate":"2023-03-27"},{"lineNumber":205,"author":{"gitId":"nramapurath"},"content":"- It is supported by the `AddCommandParser` that extracts the relevant fields from the entered command.","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters an `add` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"nramapurath"},"content":"![AddActivityDiagram](images/AddActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":210,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":211,"author":{"gitId":"nramapurath"},"content":"Details:","lastModifiedDate":"2023-03-27"},{"lineNumber":212,"author":{"gitId":"nramapurath"},"content":"- The user enters an `add` command with the name and NRIC specified.","lastModifiedDate":"2023-03-27"},{"lineNumber":213,"author":{"gitId":"nramapurath"},"content":"- If the user entered a `Status` (prefixed by `s/`), the patient created will have that status.","lastModifiedDate":"2023-03-27"},{"lineNumber":214,"author":{"gitId":"nramapurath"},"content":"- The created patient is added to the model.","lastModifiedDate":"2023-03-27"},{"lineNumber":215,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":216,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":217,"author":{"gitId":"nramapurath"},"content":"### Adding a ward","lastModifiedDate":"2023-03-27"},{"lineNumber":218,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can add a patient using the `addward` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":219,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":220,"author":{"gitId":"nramapurath"},"content":"- The `add` command takes in 1 compulsory field (ward name) and 1 optional field (capacity)","lastModifiedDate":"2023-03-27"},{"lineNumber":221,"author":{"gitId":"nramapurath"},"content":"- It is supported by the `AddWardCommandParser` that extracts the relevant fields from the entered command.","lastModifiedDate":"2023-03-27"},{"lineNumber":222,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":223,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters an `addward` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":224,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":225,"author":{"gitId":"nramapurath"},"content":"![AddWardActivityDiagram](images/AddWardActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":226,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":227,"author":{"gitId":"nramapurath"},"content":"Details:","lastModifiedDate":"2023-03-27"},{"lineNumber":228,"author":{"gitId":"nramapurath"},"content":"- The user enters an `addward` command with the ward name specified.","lastModifiedDate":"2023-03-27"},{"lineNumber":229,"author":{"gitId":"nramapurath"},"content":"- If the user entered a `Capacity` (prefixed by `c/`), the ward created will have that capacity.","lastModifiedDate":"2023-03-27"},{"lineNumber":230,"author":{"gitId":"nramapurath"},"content":"- The created ward is added to the model.","lastModifiedDate":"2023-03-27"},{"lineNumber":231,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":232,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":233,"author":{"gitId":"nramapurath"},"content":"### Editing a patient","lastModifiedDate":"2023-03-27"},{"lineNumber":234,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can edit a patient using the `edit` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":235,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":236,"author":{"gitId":"nramapurath"},"content":"- The `edit` command takes in 1 compulsory argument (index) and up to 3 optional fields (status, ward and discharge date).","lastModifiedDate":"2023-03-27"},{"lineNumber":237,"author":{"gitId":"nramapurath"},"content":"- It is supported by the `EditCommandParser` that extracts the relevant fields from the entered command.","lastModifiedDate":"2023-03-27"},{"lineNumber":238,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":239,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters an `edit` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":240,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":241,"author":{"gitId":"nramapurath"},"content":"![EditActivityDiagram](images/EditActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":242,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":243,"author":{"gitId":"nramapurath"},"content":"Details:","lastModifiedDate":"2023-03-27"},{"lineNumber":244,"author":{"gitId":"nramapurath"},"content":"- The index is based on the last displayed list of patients. This design choice was made as:","lastModifiedDate":"2023-03-27"},{"lineNumber":245,"author":{"gitId":"nramapurath"},"content":"  - A user would most likely perform a `find` or `list` operation to confirm the patient to edit.","lastModifiedDate":"2023-03-27"},{"lineNumber":246,"author":{"gitId":"nramapurath"},"content":"  - Finding patient by NRIC would be too cumbersome for the user.","lastModifiedDate":"2023-03-27"},{"lineNumber":247,"author":{"gitId":"nramapurath"},"content":"- Name and NRIC are not editable as these are identifying fields of a patient.","lastModifiedDate":"2023-03-27"},{"lineNumber":248,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":249,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":250,"author":{"gitId":"nramapurath"},"content":"### Deleting a patient","lastModifiedDate":"2023-03-27"},{"lineNumber":251,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can edit a patient using the `delete` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":252,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":253,"author":{"gitId":"nramapurath"},"content":"- The `delete` command takes in 1 compulsory argument (index).","lastModifiedDate":"2023-03-27"},{"lineNumber":254,"author":{"gitId":"nramapurath"},"content":"- It is supported by the `DeleteCommandParser` that extracts the index from the entered command.","lastModifiedDate":"2023-03-27"},{"lineNumber":255,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":256,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters a `delete` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":257,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":258,"author":{"gitId":"nramapurath"},"content":"![DeleteActivityDiagram](images/DeleteActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":259,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":260,"author":{"gitId":"nramapurath"},"content":"Details:","lastModifiedDate":"2023-03-27"},{"lineNumber":261,"author":{"gitId":"nramapurath"},"content":"- When a user executes this command, they are greeted with an alert window to confirm deletion.","lastModifiedDate":"2023-03-27"},{"lineNumber":262,"author":{"gitId":"nramapurath"},"content":"  - Clicking \u0027OK\u0027 at this point will let MedInfo proceed with the deletion.","lastModifiedDate":"2023-03-27"},{"lineNumber":263,"author":{"gitId":"nramapurath"},"content":"  - Clicking \u0027Cancel\u0027 or closing the window will abort the deletion and trigger a `list` operation.","lastModifiedDate":"2023-03-27"},{"lineNumber":264,"author":{"gitId":"nramapurath"},"content":"- Aborting a deletion leads to a `list` operation so that the user can view all patients.","lastModifiedDate":"2023-03-27"},{"lineNumber":265,"author":{"gitId":"nramapurath"},"content":"- The index is based on the last displayed list of patients. This design choice was made as:","lastModifiedDate":"2023-03-27"},{"lineNumber":266,"author":{"gitId":"nramapurath"},"content":"    - A user would most likely perform a `find` or `list` operation to confirm the patient to delete.","lastModifiedDate":"2023-03-27"},{"lineNumber":267,"author":{"gitId":"nramapurath"},"content":"    - Finding patient by NRIC would be too cumbersome for the user.","lastModifiedDate":"2023-03-27"},{"lineNumber":268,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":269,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":270,"author":{"gitId":"nramapurath"},"content":"### Finding patients","lastModifiedDate":"2023-03-27"},{"lineNumber":271,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can find patients matching certain conditions using the `find` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":272,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":273,"author":{"gitId":"nramapurath"},"content":"- The `find` command takes in 1 compulsory field (one of either name, NRIC or status).","lastModifiedDate":"2023-03-27"},{"lineNumber":274,"author":{"gitId":"nramapurath"},"content":"- It is supported by the `FindCommandParser` which extracts one of the possible fields:","lastModifiedDate":"2023-03-27"},{"lineNumber":275,"author":{"gitId":"nramapurath"},"content":"  - Name entered in the command (prefixed by `name/`)","lastModifiedDate":"2023-03-27"},{"lineNumber":276,"author":{"gitId":"nramapurath"},"content":"  - NRIC entered in the command (prefixed by `nric/`)","lastModifiedDate":"2023-03-27"},{"lineNumber":277,"author":{"gitId":"nramapurath"},"content":"  - Status entered in the command (prefixed by `s/`)","lastModifiedDate":"2023-03-27"},{"lineNumber":278,"author":{"gitId":"nramapurath"},"content":"- If the user enters multiple fields, MedInfo highlights the error to the user.","lastModifiedDate":"2023-03-27"},{"lineNumber":279,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":280,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters a `find` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":281,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":282,"author":{"gitId":"nramapurath"},"content":"![FindActivityDiagram](images/FindActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":283,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":284,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":285,"author":{"gitId":"nramapurath"},"content":"### List all patients","lastModifiedDate":"2023-03-27"},{"lineNumber":286,"author":{"gitId":"nramapurath"},"content":"In MedInfo, a user can list all patients using the `list` command.","lastModifiedDate":"2023-03-27"},{"lineNumber":287,"author":{"gitId":"nramapurath"},"content":"#### Implementation","lastModifiedDate":"2023-03-27"},{"lineNumber":288,"author":{"gitId":"nramapurath"},"content":"- The `list` command does not take in any arguments.","lastModifiedDate":"2023-03-27"},{"lineNumber":289,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":290,"author":{"gitId":"nramapurath"},"content":"The following activity diagram summarizes what happens when a user enters a `find` command:","lastModifiedDate":"2023-03-27"},{"lineNumber":291,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":292,"author":{"gitId":"nramapurath"},"content":"![ListActivityDiagram](images/ListActivityDiagram.png)","lastModifiedDate":"2023-03-27"},{"lineNumber":293,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Undo/redo feature","lastModifiedDate":"2020-06-07"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"#### Proposed Implementation","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"jeraldkiew"},"content":"- `VersionedAddressBook#commit()`â€‰â€”â€‰Saves the current address book state in its history.","lastModifiedDate":"2023-03-24"},{"lineNumber":302,"author":{"gitId":"jeraldkiew"},"content":"- `VersionedAddressBook#undo()`â€‰â€”â€‰Restores the previous address book state from its history.","lastModifiedDate":"2023-03-24"},{"lineNumber":303,"author":{"gitId":"jeraldkiew"},"content":"- `VersionedAddressBook#redo()`â€‰â€”â€‰Restores a previously undone address book state from its history.","lastModifiedDate":"2023-03-24"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":305,"author":{"gitId":"-"},"content":"These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively.","lastModifiedDate":"2020-05-23"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Given below is an example usage scenario and how the undo/redo mechanism behaves at each step.","lastModifiedDate":"2020-05-23"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state.","lastModifiedDate":"2020-05-23"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":311,"author":{"gitId":"-"},"content":"![UndoRedoState0](images/UndoRedoState0.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":313,"author":{"gitId":"nramapurath"},"content":"Step 2. The user executes `delete 5` command to delete the 5th patient in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state.","lastModifiedDate":"2023-03-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"-"},"content":"![UndoRedoState1](images/UndoRedoState1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":316,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":317,"author":{"gitId":"nramapurath"},"content":"Step 3. The user executes `add n/David â€¦â€‹` to add a new patient. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`.","lastModifiedDate":"2023-03-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"![UndoRedoState2](images/UndoRedoState2.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`.","lastModifiedDate":"2020-05-23"},{"lineNumber":322,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":323,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":324,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":325,"author":{"gitId":"nramapurath"},"content":"Step 4. The user now decides that adding the patient was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state.","lastModifiedDate":"2023-03-08"},{"lineNumber":326,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":327,"author":{"gitId":"-"},"content":"![UndoRedoState3](images/UndoRedoState3.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":328,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":329,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather","lastModifiedDate":"2020-05-23"},{"lineNumber":330,"author":{"gitId":"-"},"content":"than attempting to perform the undo.","lastModifiedDate":"2020-05-23"},{"lineNumber":331,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":332,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":333,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":334,"author":{"gitId":"-"},"content":"The following sequence diagram shows how the undo operation works:","lastModifiedDate":"2020-05-23"},{"lineNumber":335,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":336,"author":{"gitId":"-"},"content":"![UndoSequenceDiagram](images/UndoSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":337,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":338,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram.","lastModifiedDate":"2020-05-23"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":340,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":342,"author":{"gitId":"-"},"content":"The `redo` command does the oppositeâ€‰â€”â€‰it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state.","lastModifiedDate":"2020-05-23"},{"lineNumber":343,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":344,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo.","lastModifiedDate":"2020-05-23"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":346,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":347,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":348,"author":{"gitId":"-"},"content":"Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged.","lastModifiedDate":"2020-05-23"},{"lineNumber":349,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":350,"author":{"gitId":"-"},"content":"![UndoRedoState4](images/UndoRedoState4.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":351,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":352,"author":{"gitId":"-"},"content":"Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David â€¦â€‹` command. This is the behavior that most modern desktop applications follow.","lastModifiedDate":"2020-05-23"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":354,"author":{"gitId":"-"},"content":"![UndoRedoState5](images/UndoRedoState5.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":355,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":356,"author":{"gitId":"-"},"content":"The following activity diagram summarizes what happens when a user executes a new command:","lastModifiedDate":"2020-05-23"},{"lineNumber":357,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":358,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"images/CommitActivityDiagram.png\" width\u003d\"250\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":359,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":360,"author":{"gitId":"-"},"content":"#### Design considerations:","lastModifiedDate":"2021-07-31"},{"lineNumber":361,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":362,"author":{"gitId":"-"},"content":"**Aspect: How undo \u0026 redo executes:**","lastModifiedDate":"2021-07-31"},{"lineNumber":363,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":364,"author":{"gitId":"jeraldkiew"},"content":"- **Alternative 1 (current choice):** Saves the entire address book.","lastModifiedDate":"2023-03-24"},{"lineNumber":365,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":366,"author":{"gitId":"jeraldkiew"},"content":"  - Pros: Easy to implement.","lastModifiedDate":"2023-03-24"},{"lineNumber":367,"author":{"gitId":"jeraldkiew"},"content":"  - Cons: May have performance issues in terms of memory usage.","lastModifiedDate":"2023-03-24"},{"lineNumber":368,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":369,"author":{"gitId":"jeraldkiew"},"content":"- **Alternative 2:** Individual command knows how to undo/redo by","lastModifiedDate":"2023-03-24"},{"lineNumber":370,"author":{"gitId":"-"},"content":"  itself.","lastModifiedDate":"2020-05-23"},{"lineNumber":371,"author":{"gitId":"jeraldkiew"},"content":"  - Pros: Will use less memory (e.g. for `delete`, just save the patient being deleted).","lastModifiedDate":"2023-03-24"},{"lineNumber":372,"author":{"gitId":"jeraldkiew"},"content":"  - Cons: We must ensure that the implementation of each individual command are correct.","lastModifiedDate":"2023-03-24"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":374,"author":{"gitId":"-"},"content":"_{more aspects and alternatives to be added}_","lastModifiedDate":"2020-05-23"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":376,"author":{"gitId":"-"},"content":"### \\[Proposed\\] Data archiving","lastModifiedDate":"2020-05-23"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":378,"author":{"gitId":"-"},"content":"_{Explain here how the data archiving feature will be implemented}_","lastModifiedDate":"2020-05-23"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":380,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":382,"author":{"gitId":"-"},"content":"## **Documentation, logging, testing, configuration, dev-ops**","lastModifiedDate":"2020-06-07"},{"lineNumber":383,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":384,"author":{"gitId":"jeraldkiew"},"content":"- [Documentation guide](Documentation.md)","lastModifiedDate":"2023-03-24"},{"lineNumber":385,"author":{"gitId":"jeraldkiew"},"content":"- [Testing guide](Testing.md)","lastModifiedDate":"2023-03-24"},{"lineNumber":386,"author":{"gitId":"jeraldkiew"},"content":"- [Logging guide](Logging.md)","lastModifiedDate":"2023-03-24"},{"lineNumber":387,"author":{"gitId":"jeraldkiew"},"content":"- [Configuration guide](Configuration.md)","lastModifiedDate":"2023-03-24"},{"lineNumber":388,"author":{"gitId":"jeraldkiew"},"content":"- [DevOps guide](DevOps.md)","lastModifiedDate":"2023-03-24"},{"lineNumber":389,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":390,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":391,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":392,"author":{"gitId":"-"},"content":"## **Appendix: Requirements**","lastModifiedDate":"2020-05-23"},{"lineNumber":393,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":394,"author":{"gitId":"yitong241"},"content":"### Target user profile","lastModifiedDate":"2023-03-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":396,"author":{"gitId":"jeraldkiew"},"content":"- has a need to manage a significant number of patients coming into an A\u0026E in a private hospital","lastModifiedDate":"2023-03-24"},{"lineNumber":397,"author":{"gitId":"jeraldkiew"},"content":"- can type fast","lastModifiedDate":"2023-03-24"},{"lineNumber":398,"author":{"gitId":"jeraldkiew"},"content":"- prefers typing to execute commands and allocating patients by their status to their respective wards","lastModifiedDate":"2023-03-24"},{"lineNumber":399,"author":{"gitId":"jeraldkiew"},"content":"- is reasonably comfortable using CLI apps","lastModifiedDate":"2023-03-24"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":401,"author":{"gitId":"yitong241"},"content":"### Value proposition","lastModifiedDate":"2023-03-29"},{"lineNumber":402,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":403,"author":{"gitId":"jeraldkiew"},"content":"- solve the problem of slow and multiple step process of allocating patients to their respective wards in an A\u0026E","lastModifiedDate":"2023-03-24"},{"lineNumber":404,"author":{"gitId":"jeraldkiew"},"content":"- provide faster access to a particular patientâ€™s details for hospital admin staff","lastModifiedDate":"2023-03-24"},{"lineNumber":405,"author":{"gitId":"jeraldkiew"},"content":"- provide a more efficient process of managing patients by their status to cater to patients who are in urgent need of care, which in turn provides a better quality of service","lastModifiedDate":"2023-03-24"},{"lineNumber":406,"author":{"gitId":"jeraldkiew"},"content":"- provide a simple system to keep track and update a patient\u0027s discharge date","lastModifiedDate":"2023-03-24"},{"lineNumber":407,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":408,"author":{"gitId":"-"},"content":"### User stories","lastModifiedDate":"2020-06-07"},{"lineNumber":409,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":410,"author":{"gitId":"-"},"content":"Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`","lastModifiedDate":"2020-05-23"},{"lineNumber":411,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":412,"author":{"gitId":"-"},"content":"| Priority | As a â€¦â€‹      | I want to â€¦â€‹                                       | So that I canâ€¦â€‹                                                                             |","lastModifiedDate":"2020-05-23"},{"lineNumber":413,"author":{"gitId":"nramapurath"},"content":"|----------|--------------|----------------------------------------------------|---------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-27"},{"lineNumber":414,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | add a patient                                      | record more information later                                                               |","lastModifiedDate":"2023-03-24"},{"lineNumber":415,"author":{"gitId":"jeraldkiew"},"content":"| `* * *`  | staff member | add a ward                                         | assign patients to the ward later                                                           |","lastModifiedDate":"2023-03-24"},{"lineNumber":416,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | add personal particulars to a patient              | record their name and NRIC                                                                  |","lastModifiedDate":"2023-03-24"},{"lineNumber":417,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | add current status of patient                      | keep track of patient status                                                                |","lastModifiedDate":"2023-03-24"},{"lineNumber":418,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | add current ward of patient                        | keep track of patient location                                                              |","lastModifiedDate":"2023-03-24"},{"lineNumber":419,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | add a discharge date to hospitalised patients      | keep track of discharge dates                                                               |","lastModifiedDate":"2023-03-03"},{"lineNumber":420,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | view the list of commands                          | use the system proficiently                                                                 |","lastModifiedDate":"2023-03-03"},{"lineNumber":421,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | search for patients by personal particulars        | do a basic search to find a certain patient                                                 |","lastModifiedDate":"2023-03-03"},{"lineNumber":422,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | search for patients by discharge date              | plan for future patient discharges                                                          |","lastModifiedDate":"2023-03-03"},{"lineNumber":423,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | update personal particulars of a patient           | keep the personal particulars of a patient up to date                                       |","lastModifiedDate":"2023-03-03"},{"lineNumber":424,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | update patient ward                                | move patients to different wards                                                            |","lastModifiedDate":"2023-03-24"},{"lineNumber":425,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | update the status of a patient                     | keep the status of a patient up to date                                                     |","lastModifiedDate":"2023-03-24"},{"lineNumber":426,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | update the discharge date of hospitalised patients | change the discharge date of a hospitalised patient due to unexpected medical complications |","lastModifiedDate":"2023-03-03"},{"lineNumber":427,"author":{"gitId":"nramapurath"},"content":"| `* * *`  | staff member | remove a patient                                   | put the patient on hold or remove duplicate entries                                         |","lastModifiedDate":"2023-03-24"},{"lineNumber":428,"author":{"gitId":"KSunil2001"},"content":"| `* * *`  | staff member | remove the discharge date of a patient             | put the patient\u0027s discharge date on hold while awaiting further assessment                  |","lastModifiedDate":"2023-03-03"},{"lineNumber":429,"author":{"gitId":"KSunil2001"},"content":"| `* *`    | staff member | view the list of patients sorted by discharge date | plan for future patient discharges                                                          |","lastModifiedDate":"2023-03-03"},{"lineNumber":430,"author":{"gitId":"KSunil2001"},"content":"| `* *`    | staff member | see patients with approaching discharge dates      | be aware of approaching discharge patients                                                  |","lastModifiedDate":"2023-03-03"},{"lineNumber":431,"author":{"gitId":"nramapurath"},"content":"| `* *`    | staff member | view patients by ward                              | find patients in a ward and check the occupancy within certain wards                        |","lastModifiedDate":"2023-03-24"},{"lineNumber":432,"author":{"gitId":"nramapurath"},"content":"| `* *`    | staff member | view patients by status                            | address higher priority patients more quickly                                               |","lastModifiedDate":"2023-03-24"},{"lineNumber":433,"author":{"gitId":"nramapurath"},"content":"| `* *`    | staff member | view list of wards                                 | see current wards in system at a glance                                                     |","lastModifiedDate":"2023-03-24"},{"lineNumber":434,"author":{"gitId":"daytona65"},"content":"| `* *`    | staff member | view list of patients                              | see current patients in system at a glance                                                  |","lastModifiedDate":"2023-03-24"},{"lineNumber":435,"author":{"gitId":"jeraldkiew"},"content":"| `* *`    | staff member | update the name of a ward                          | keep the name of a ward up to date                                                          |","lastModifiedDate":"2023-03-24"},{"lineNumber":436,"author":{"gitId":"jeraldkiew"},"content":"| `* *`    | staff member | update the capacity of a ward                      | keep the maximum number of patients in a ward up to date                                    |","lastModifiedDate":"2023-03-24"},{"lineNumber":437,"author":{"gitId":"nramapurath"},"content":"| `* *`    | staff member | view the current total occupancy                   | see the total number of patients currently admitted                                         |","lastModifiedDate":"2023-03-24"},{"lineNumber":438,"author":{"gitId":"jeraldkiew"},"content":"| `* *`    | staff member | view the total capacity of a ward                  | see the maximum number of patients I can admit to this ward                                 |","lastModifiedDate":"2023-03-24"},{"lineNumber":439,"author":{"gitId":"jeraldkiew"},"content":"| `* *`    | staff member | view the current occupancy of a ward               | see the number of patients currently admitted to a ward, and to know if a ward is full      |","lastModifiedDate":"2023-03-24"},{"lineNumber":440,"author":{"gitId":"jeraldkiew"},"content":"| `* *`    | staff member | confirm a deletion of a patient                    | avoid accidentally deleting a patient, which cannot be undone                               |","lastModifiedDate":"2023-03-24"},{"lineNumber":441,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":442,"author":{"gitId":"jeraldkiew"},"content":"_{More to be added}_","lastModifiedDate":"2023-03-24"},{"lineNumber":443,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":444,"author":{"gitId":"-"},"content":"### Use cases","lastModifiedDate":"2020-06-07"},{"lineNumber":445,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":446,"author":{"gitId":"KSunil2001"},"content":"(For all use cases below, the **System** is the `MedInfo` and the **Actor** is the `user`, unless specified otherwise)","lastModifiedDate":"2023-03-03"},{"lineNumber":447,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":448,"author":{"gitId":"yitong241"},"content":"#### Use case: UC01 - Add a patient","lastModifiedDate":"2023-03-29"},{"lineNumber":449,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":450,"author":{"gitId":"yitong241"},"content":"**MSS**","lastModifiedDate":"2023-03-23"},{"lineNumber":451,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":452,"author":{"gitId":"daytona65"},"content":"1. User requests to add a new patient to MedInfo.","lastModifiedDate":"2023-03-24"},{"lineNumber":453,"author":{"gitId":"yitong241"},"content":"2. The user enters patient details.","lastModifiedDate":"2023-03-23"},{"lineNumber":454,"author":{"gitId":"yitong241"},"content":"   1. The following are required information:","lastModifiedDate":"2023-03-23"},{"lineNumber":455,"author":{"gitId":"daytona65"},"content":"      - Name","lastModifiedDate":"2023-03-24"},{"lineNumber":456,"author":{"gitId":"daytona65"},"content":"      - NRIC","lastModifiedDate":"2023-03-24"},{"lineNumber":457,"author":{"gitId":"yitong241"},"content":"   2. The following are non-required information:","lastModifiedDate":"2023-03-23"},{"lineNumber":458,"author":{"gitId":"daytona65"},"content":"      - Status","lastModifiedDate":"2023-03-24"},{"lineNumber":459,"author":{"gitId":"daytona65"},"content":"      - Ward","lastModifiedDate":"2023-03-24"},{"lineNumber":460,"author":{"gitId":"yitong241"},"content":"3. The system adds the user into the MedInfo system.","lastModifiedDate":"2023-03-23"},{"lineNumber":461,"author":{"gitId":"daytona65"},"content":"4. The system shows the new created user in the patient list.","lastModifiedDate":"2023-03-24"},{"lineNumber":462,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":463,"author":{"gitId":"yitong241"},"content":"   Use case ends.","lastModifiedDate":"2023-03-23"},{"lineNumber":464,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":465,"author":{"gitId":"yitong241"},"content":"**Extensions**","lastModifiedDate":"2023-03-23"},{"lineNumber":466,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":467,"author":{"gitId":"jeraldkiew"},"content":"- 2a. If any of the required fields are not completed.","lastModifiedDate":"2023-03-27"},{"lineNumber":468,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":469,"author":{"gitId":"jeraldkiew"},"content":"  - 2a1. the user is informed of this and show the correct format for the command","lastModifiedDate":"2023-03-27"},{"lineNumber":470,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":471,"author":{"gitId":"yitong241"},"content":"Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":472,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":473,"author":{"gitId":"jeraldkiew"},"content":"- 2b. If the entered NRIC is already present in another record in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":474,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":475,"author":{"gitId":"jeraldkiew"},"content":"  - 2b1. the user is informed that the NRIC is already present in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":476,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":477,"author":{"gitId":"yitong241"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":478,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":479,"author":{"gitId":"jeraldkiew"},"content":"- 2c. If the input field is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":480,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":481,"author":{"gitId":"jeraldkiew"},"content":"  - 2c1. the user is informed of this, and correct format for the command is displayed.","lastModifiedDate":"2023-03-27"},{"lineNumber":482,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-23"},{"lineNumber":483,"author":{"gitId":"yitong241"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":484,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":485,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":486,"author":{"gitId":"jeraldkiew"},"content":"- 2d. If the entered ward is not present in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":487,"author":{"gitId":"daytona65"},"content":"    ","lastModifiedDate":"2023-03-24"},{"lineNumber":488,"author":{"gitId":"jeraldkiew"},"content":"  - 2d1. the user is informed that the ward does not exist in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":489,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-23"},{"lineNumber":490,"author":{"gitId":"yitong241"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":491,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":492,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":493,"author":{"gitId":"yitong241"},"content":"#### Use case: UC02 - Delete a patient","lastModifiedDate":"2023-03-29"},{"lineNumber":494,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":495,"author":{"gitId":"-"},"content":"**MSS**","lastModifiedDate":"2020-05-23"},{"lineNumber":496,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":497,"author":{"gitId":"yitong241"},"content":"1.  User requests to list filtered patients","lastModifiedDate":"2023-03-27"},{"lineNumber":498,"author":{"gitId":"yitong241"},"content":"2.  MedInfo shows a list of filtered patients","lastModifiedDate":"2023-03-27"},{"lineNumber":499,"author":{"gitId":"yitong241"},"content":"3.  User requests to delete a specific patient in the list by index number","lastModifiedDate":"2023-03-27"},{"lineNumber":500,"author":{"gitId":"yitong241"},"content":"4.  MedInfo shows confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":501,"author":{"gitId":"yitong241"},"content":"5.  MedInfo deletes the patient","lastModifiedDate":"2023-03-27"},{"lineNumber":502,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":503,"author":{"gitId":"-"},"content":"    Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":504,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":505,"author":{"gitId":"-"},"content":"**Extensions**","lastModifiedDate":"2020-05-23"},{"lineNumber":506,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":507,"author":{"gitId":"jeraldkiew"},"content":"- 2a. The list is empty.","lastModifiedDate":"2023-03-24"},{"lineNumber":508,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":509,"author":{"gitId":"-"},"content":"  Use case ends.","lastModifiedDate":"2020-05-23"},{"lineNumber":510,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":511,"author":{"gitId":"yitong241"},"content":"- 3a. The requested patient\u0027s index number is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":512,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":513,"author":{"gitId":"jeraldkiew"},"content":"    - 3a1. MedInfo shows an error message.","lastModifiedDate":"2023-03-24"},{"lineNumber":514,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":515,"author":{"gitId":"-"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2020-05-23"},{"lineNumber":516,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":517,"author":{"gitId":"yitong241"},"content":"- 4a. The user cancels the deletion in the confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":518,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":519,"author":{"gitId":"yitong241"},"content":"    - 4a1. MedInfo shows the patient list","lastModifiedDate":"2023-03-27"},{"lineNumber":520,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":521,"author":{"gitId":"yitong241"},"content":"  - 4b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":522,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":523,"author":{"gitId":"daytona65"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2023-03-24"},{"lineNumber":524,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":525,"author":{"gitId":"yitong241"},"content":"#### Use case: UC03 - Edit a patient","lastModifiedDate":"2023-03-29"},{"lineNumber":526,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":527,"author":{"gitId":"daytona65"},"content":"**MSS**","lastModifiedDate":"2023-03-24"},{"lineNumber":528,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":529,"author":{"gitId":"yitong241"},"content":"1.  User requests to list filtered patients","lastModifiedDate":"2023-03-27"},{"lineNumber":530,"author":{"gitId":"yitong241"},"content":"2.  MedInfo shows a list of filtered patients","lastModifiedDate":"2023-03-27"},{"lineNumber":531,"author":{"gitId":"yitong241"},"content":"3.  User requests to edit a specific patient in the list by index number ","lastModifiedDate":"2023-03-27"},{"lineNumber":532,"author":{"gitId":"daytona65"},"content":"    1. The following can be edited:","lastModifiedDate":"2023-03-24"},{"lineNumber":533,"author":{"gitId":"daytona65"},"content":"       - Status","lastModifiedDate":"2023-03-24"},{"lineNumber":534,"author":{"gitId":"daytona65"},"content":"       - Ward","lastModifiedDate":"2023-03-24"},{"lineNumber":535,"author":{"gitId":"yitong241"},"content":"       - Discharge Date","lastModifiedDate":"2023-03-27"},{"lineNumber":536,"author":{"gitId":"daytona65"},"content":"    2. The following cannot be edited:","lastModifiedDate":"2023-03-24"},{"lineNumber":537,"author":{"gitId":"daytona65"},"content":"       - Name","lastModifiedDate":"2023-03-24"},{"lineNumber":538,"author":{"gitId":"daytona65"},"content":"       - NRIC","lastModifiedDate":"2023-03-24"},{"lineNumber":539,"author":{"gitId":"daytona65"},"content":"4.  MedInfo edits the patient","lastModifiedDate":"2023-03-24"},{"lineNumber":540,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":541,"author":{"gitId":"daytona65"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":542,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":543,"author":{"gitId":"daytona65"},"content":"**Extensions**","lastModifiedDate":"2023-03-24"},{"lineNumber":544,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":545,"author":{"gitId":"daytona65"},"content":"- 2a. The list is empty.","lastModifiedDate":"2023-03-24"},{"lineNumber":546,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":547,"author":{"gitId":"daytona65"},"content":"  Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":548,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":549,"author":{"gitId":"yitong241"},"content":"- 3a. The requested patient\u0027s index number is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":550,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":551,"author":{"gitId":"daytona65"},"content":"  - 3a1. MedInfo shows an error message.","lastModifiedDate":"2023-03-24"},{"lineNumber":552,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":553,"author":{"gitId":"daytona65"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2023-03-24"},{"lineNumber":554,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":555,"author":{"gitId":"yitong241"},"content":"- 3b. The prefixes entered are invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":556,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":557,"author":{"gitId":"yitong241"},"content":"    - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":558,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":559,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":560,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":561,"author":{"gitId":"yitong241"},"content":"- 3b. The Status entered is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":562,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":563,"author":{"gitId":"yitong241"},"content":"    - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":564,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":565,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":566,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":567,"author":{"gitId":"yitong241"},"content":"- 3b. The Ward entered is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":568,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":569,"author":{"gitId":"yitong241"},"content":"    - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":570,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":571,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":572,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-27"},{"lineNumber":573,"author":{"gitId":"yitong241"},"content":"- 3b. The Discharge Date entered is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":574,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":575,"author":{"gitId":"daytona65"},"content":"    - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-24"},{"lineNumber":576,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":577,"author":{"gitId":"daytona65"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-24"},{"lineNumber":578,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":579,"author":{"gitId":"yitong241"},"content":"- 3d. User tries to edit a non-editable field (Name/NRIC).","lastModifiedDate":"2023-03-27"},{"lineNumber":580,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":581,"author":{"gitId":"yitong241"},"content":"  - 3d1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":582,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":583,"author":{"gitId":"daytona65"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2023-03-24"},{"lineNumber":584,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":585,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":586,"author":{"gitId":"yitong241"},"content":"#### Use case: UC04 - Find a patient","lastModifiedDate":"2023-03-29"},{"lineNumber":587,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":588,"author":{"gitId":"KSunil2001"},"content":"**MSS**","lastModifiedDate":"2023-03-24"},{"lineNumber":589,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":590,"author":{"gitId":"yitong241"},"content":"1.  User requests to find specific patients by either NRIC or Name or Status or Ward","lastModifiedDate":"2023-03-27"},{"lineNumber":591,"author":{"gitId":"KSunil2001"},"content":"2.  MedInfo shows a list of patients","lastModifiedDate":"2023-03-24"},{"lineNumber":592,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":593,"author":{"gitId":"KSunil2001"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":594,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":595,"author":{"gitId":"KSunil2001"},"content":"**Extensions**","lastModifiedDate":"2023-03-24"},{"lineNumber":596,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":597,"author":{"gitId":"KSunil2001"},"content":"- 1a. The requested patient\u0027s NRIC does not exist in the system.","lastModifiedDate":"2023-03-24"},{"lineNumber":598,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":599,"author":{"gitId":"KSunil2001"},"content":"  - 1a1. MedInfo does not list any patients.","lastModifiedDate":"2023-03-24"},{"lineNumber":600,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":601,"author":{"gitId":"KSunil2001"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":602,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":603,"author":{"gitId":"KSunil2001"},"content":"- 1b. The requested patient\u0027s Name does not exist in the system.","lastModifiedDate":"2023-03-24"},{"lineNumber":604,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":605,"author":{"gitId":"KSunil2001"},"content":"  - 1b1. MedInfo does not list any patients.","lastModifiedDate":"2023-03-24"},{"lineNumber":606,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":607,"author":{"gitId":"KSunil2001"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":608,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":609,"author":{"gitId":"KSunil2001"},"content":"- 1c. The requested patient\u0027s Status does not exist in the system.","lastModifiedDate":"2023-03-24"},{"lineNumber":610,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":611,"author":{"gitId":"KSunil2001"},"content":"  - 1c1. MedInfo does not list any patients.","lastModifiedDate":"2023-03-24"},{"lineNumber":612,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":613,"author":{"gitId":"KSunil2001"},"content":"    Use case ends.","lastModifiedDate":"2023-03-24"},{"lineNumber":614,"author":{"gitId":"KSunil2001"},"content":"  ","lastModifiedDate":"2023-03-24"},{"lineNumber":615,"author":{"gitId":"yitong241"},"content":"- 1d. The requested patient\u0027s Ward does not exist in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":616,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":617,"author":{"gitId":"yitong241"},"content":"- 1d1. MedInfo does not list any patients.","lastModifiedDate":"2023-03-27"},{"lineNumber":618,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":619,"author":{"gitId":"yitong241"},"content":"  Use case ends.","lastModifiedDate":"2023-03-27"},{"lineNumber":620,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":621,"author":{"gitId":"yitong241"},"content":"#### Use case: UC05 - Clear all patients","lastModifiedDate":"2023-03-29"},{"lineNumber":622,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":623,"author":{"gitId":"yitong241"},"content":"**MSS**","lastModifiedDate":"2023-03-27"},{"lineNumber":624,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":625,"author":{"gitId":"yitong241"},"content":"1. User requests to clear all the patient records in the system","lastModifiedDate":"2023-03-27"},{"lineNumber":626,"author":{"gitId":"yitong241"},"content":"2. MedInfo shows confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":627,"author":{"gitId":"yitong241"},"content":"3. MedInfo deletes all patients in the system","lastModifiedDate":"2023-03-27"},{"lineNumber":628,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":629,"author":{"gitId":"yitong241"},"content":"    Use case ends.","lastModifiedDate":"2023-03-27"},{"lineNumber":630,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":631,"author":{"gitId":"yitong241"},"content":"- 3a. The user cancels the deletion in the confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":632,"author":{"gitId":"yitong241"},"content":"    - 3a1. MedInfo shows the patient list","lastModifiedDate":"2023-03-27"},{"lineNumber":633,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":634,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":635,"author":{"gitId":"yitong241"},"content":"#### Use case: UC06 - Add a new ward","lastModifiedDate":"2023-03-29"},{"lineNumber":636,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":637,"author":{"gitId":"yitong241"},"content":"**MSS**","lastModifiedDate":"2023-03-27"},{"lineNumber":638,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":639,"author":{"gitId":"yitong241"},"content":"1. User requests to add a new ward to MedInfo.","lastModifiedDate":"2023-03-27"},{"lineNumber":640,"author":{"gitId":"yitong241"},"content":"2. The user enters ward details.","lastModifiedDate":"2023-03-27"},{"lineNumber":641,"author":{"gitId":"yitong241"},"content":"    1. The following are required information:","lastModifiedDate":"2023-03-27"},{"lineNumber":642,"author":{"gitId":"yitong241"},"content":"        - Name","lastModifiedDate":"2023-03-27"},{"lineNumber":643,"author":{"gitId":"yitong241"},"content":"    2. The following are non-required information:","lastModifiedDate":"2023-03-27"},{"lineNumber":644,"author":{"gitId":"yitong241"},"content":"        - Capacity","lastModifiedDate":"2023-03-27"},{"lineNumber":645,"author":{"gitId":"yitong241"},"content":"3. The system adds the ward into the MedInfo system.","lastModifiedDate":"2023-03-27"},{"lineNumber":646,"author":{"gitId":"yitong241"},"content":"4. The system shows the new created ward in the ward list.","lastModifiedDate":"2023-03-27"},{"lineNumber":647,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":648,"author":{"gitId":"yitong241"},"content":"   Use case ends.","lastModifiedDate":"2023-03-27"},{"lineNumber":649,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":650,"author":{"gitId":"yitong241"},"content":"**Extensions**","lastModifiedDate":"2023-03-27"},{"lineNumber":651,"author":{"gitId":"yitong241"},"content":"* 2a. If any of the required fields are not completed.","lastModifiedDate":"2023-03-27"},{"lineNumber":652,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":653,"author":{"gitId":"yitong241"},"content":"    * 2a1. the user is informed of this and show the correct format for the command","lastModifiedDate":"2023-03-27"},{"lineNumber":654,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":655,"author":{"gitId":"yitong241"},"content":"Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":656,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":657,"author":{"gitId":"yitong241"},"content":"* 2b. If the entered Name is already present in another record in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":658,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":659,"author":{"gitId":"yitong241"},"content":"    * 2b1. the user is informed that the Name is already present in the system.","lastModifiedDate":"2023-03-27"},{"lineNumber":660,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":661,"author":{"gitId":"yitong241"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":662,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":663,"author":{"gitId":"yitong241"},"content":"* 2c. If the input field is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":664,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":665,"author":{"gitId":"yitong241"},"content":"    * 2c1. the user is informed of this, and correct format for the command is displayed.","lastModifiedDate":"2023-03-27"},{"lineNumber":666,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":667,"author":{"gitId":"yitong241"},"content":"  Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":668,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":669,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":670,"author":{"gitId":"yitong241"},"content":"#### Use case: UC07 - Delete a ward","lastModifiedDate":"2023-03-29"},{"lineNumber":671,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":672,"author":{"gitId":"yitong241"},"content":"**MSS**","lastModifiedDate":"2023-03-27"},{"lineNumber":673,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":674,"author":{"gitId":"yitong241"},"content":"1.  User requests to list wards","lastModifiedDate":"2023-03-27"},{"lineNumber":675,"author":{"gitId":"yitong241"},"content":"2.  MedInfo shows a list of wards","lastModifiedDate":"2023-03-27"},{"lineNumber":676,"author":{"gitId":"yitong241"},"content":"3.  User requests to delete a specific ward in the list by index number","lastModifiedDate":"2023-03-27"},{"lineNumber":677,"author":{"gitId":"yitong241"},"content":"4.  MedInfo shows confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":678,"author":{"gitId":"yitong241"},"content":"5.  MedInfo deletes the patient","lastModifiedDate":"2023-03-27"},{"lineNumber":679,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":680,"author":{"gitId":"yitong241"},"content":"    Use case ends.","lastModifiedDate":"2023-03-27"},{"lineNumber":681,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":682,"author":{"gitId":"yitong241"},"content":"**Extensions**","lastModifiedDate":"2023-03-27"},{"lineNumber":683,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":684,"author":{"gitId":"yitong241"},"content":"- 2a. The ward list is empty.","lastModifiedDate":"2023-03-27"},{"lineNumber":685,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":686,"author":{"gitId":"yitong241"},"content":"  Use case ends.","lastModifiedDate":"2023-03-27"},{"lineNumber":687,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":688,"author":{"gitId":"yitong241"},"content":"- 3a. The requested ward\u0027s index number is invalid.","lastModifiedDate":"2023-03-27"},{"lineNumber":689,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":690,"author":{"gitId":"yitong241"},"content":"    - 3a1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":691,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":692,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":693,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":694,"author":{"gitId":"yitong241"},"content":"- 3b. The requested ward has patients inside","lastModifiedDate":"2023-03-27"},{"lineNumber":695,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":696,"author":{"gitId":"yitong241"},"content":"   - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-27"},{"lineNumber":697,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":698,"author":{"gitId":"yitong241"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2023-03-27"},{"lineNumber":699,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":700,"author":{"gitId":"yitong241"},"content":"- 4a. The user cancels the deletion in the confirmation window","lastModifiedDate":"2023-03-27"},{"lineNumber":701,"author":{"gitId":"yitong241"},"content":"    - 4a1. MedInfo shows the patient list","lastModifiedDate":"2023-03-27"},{"lineNumber":702,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":703,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2","lastModifiedDate":"2023-03-27"},{"lineNumber":704,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":705,"author":{"gitId":"yitong241"},"content":"#### Use case: UC08 - Sort Patients","lastModifiedDate":"2023-03-29"},{"lineNumber":706,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":707,"author":{"gitId":"yitong241"},"content":"**MSS**","lastModifiedDate":"2023-03-29"},{"lineNumber":708,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":709,"author":{"gitId":"yitong241"},"content":"1. User requests to list patients","lastModifiedDate":"2023-03-29"},{"lineNumber":710,"author":{"gitId":"yitong241"},"content":"2. MedInfo shows a list of patients","lastModifiedDate":"2023-03-29"},{"lineNumber":711,"author":{"gitId":"yitong241"},"content":"3. User requests to sort all the patients by a specific order","lastModifiedDate":"2023-03-29"},{"lineNumber":712,"author":{"gitId":"yitong241"},"content":"4. MedInfo sorts all the patients","lastModifiedDate":"2023-03-29"},{"lineNumber":713,"author":{"gitId":"yitong241"},"content":"5. MedInfo displays the sorted list","lastModifiedDate":"2023-03-29"},{"lineNumber":714,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":715,"author":{"gitId":"yitong241"},"content":"    Use case ends","lastModifiedDate":"2023-03-29"},{"lineNumber":716,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":717,"author":{"gitId":"yitong241"},"content":"**Extensions**","lastModifiedDate":"2023-03-29"},{"lineNumber":718,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":719,"author":{"gitId":"yitong241"},"content":"- 2. The patient list is empty","lastModifiedDate":"2023-03-29"},{"lineNumber":720,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":721,"author":{"gitId":"yitong241"},"content":"    Use case ends.","lastModifiedDate":"2023-03-29"},{"lineNumber":722,"author":{"gitId":"yitong241"},"content":"- 3a. The requested sorting order is invalid","lastModifiedDate":"2023-03-29"},{"lineNumber":723,"author":{"gitId":"yitong241"},"content":"  - 3a1. MedInfo shows an error message.","lastModifiedDate":"2023-03-29"},{"lineNumber":724,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-29"},{"lineNumber":725,"author":{"gitId":"yitong241"},"content":"    Use case resumes at step 2.","lastModifiedDate":"2023-03-29"},{"lineNumber":726,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":727,"author":{"gitId":"yitong241"},"content":"- 3b. The requested sorting field is invalid","lastModifiedDate":"2023-03-29"},{"lineNumber":728,"author":{"gitId":"yitong241"},"content":"    - 3b1. MedInfo shows an error message.","lastModifiedDate":"2023-03-29"},{"lineNumber":729,"author":{"gitId":"yitong241"},"content":"  ","lastModifiedDate":"2023-03-29"},{"lineNumber":730,"author":{"gitId":"yitong241"},"content":"      Use case resumes at step 2.","lastModifiedDate":"2023-03-29"},{"lineNumber":731,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":732,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":733,"author":{"gitId":"jeraldkiew"},"content":"_{More to be added}_","lastModifiedDate":"2023-03-24"},{"lineNumber":734,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":735,"author":{"gitId":"-"},"content":"### Non-Functional Requirements","lastModifiedDate":"2020-05-23"},{"lineNumber":736,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":737,"author":{"gitId":"-"},"content":"1.  Should work on any _mainstream OS_ as long as it has Java `11` or above installed.","lastModifiedDate":"2020-05-23"},{"lineNumber":738,"author":{"gitId":"KSunil2001"},"content":"2.  Should be able to hold up to 1000 patients without a noticeable sluggishness in performance for typical usage.","lastModifiedDate":"2023-03-03"},{"lineNumber":739,"author":{"gitId":"-"},"content":"3.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse.","lastModifiedDate":"2020-05-23"},{"lineNumber":740,"author":{"gitId":"KSunil2001"},"content":"4.  Should mask the NRIC of patients when listing (e.g. XXXXX264G).","lastModifiedDate":"2023-03-03"},{"lineNumber":741,"author":{"gitId":"KSunil2001"},"content":"5.  The product is not required to validate the medical records.","lastModifiedDate":"2023-03-03"},{"lineNumber":742,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":743,"author":{"gitId":"jeraldkiew"},"content":"_{More to be added}_","lastModifiedDate":"2023-03-24"},{"lineNumber":744,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":745,"author":{"gitId":"-"},"content":"### Glossary","lastModifiedDate":"2020-05-23"},{"lineNumber":746,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":747,"author":{"gitId":"jeraldkiew"},"content":"- **Mainstream OS**: Windows, Linux, Unix, OS-X","lastModifiedDate":"2023-03-24"},{"lineNumber":748,"author":{"gitId":"yitong241"},"content":"- **CLI**:  Command Line Interface","lastModifiedDate":"2023-03-29"},{"lineNumber":749,"author":{"gitId":"yitong241"},"content":"- **Use case**: It describes an interaction between the user and the system for a specific functionality of the system.","lastModifiedDate":"2023-03-29"},{"lineNumber":750,"author":{"gitId":"jeraldkiew"},"content":"- **Priority Level**: Level of seriousness of a patient\u0027s health condition (e.g. `Stable`, `Mild`, `Severe`)","lastModifiedDate":"2023-03-24"},{"lineNumber":751,"author":{"gitId":"jeraldkiew"},"content":"- **Medical Record**: Blood type, allergies, medical cases and history of medical conditions","lastModifiedDate":"2023-03-24"},{"lineNumber":752,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":753,"author":{"gitId":"jeraldkiew"},"content":"_{More to be added}_","lastModifiedDate":"2023-03-24"},{"lineNumber":754,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":755,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-24"},{"lineNumber":756,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":757,"author":{"gitId":"-"},"content":"## **Appendix: Instructions for manual testing**","lastModifiedDate":"2020-05-23"},{"lineNumber":758,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":759,"author":{"gitId":"-"},"content":"Given below are instructions to test the app manually.","lastModifiedDate":"2020-05-23"},{"lineNumber":760,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":761,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;","lastModifiedDate":"2020-05-23"},{"lineNumber":762,"author":{"gitId":"-"},"content":"testers are expected to do more *exploratory* testing.","lastModifiedDate":"2020-05-23"},{"lineNumber":763,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":764,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":765,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":766,"author":{"gitId":"-"},"content":"### Launch and shutdown","lastModifiedDate":"2020-05-23"},{"lineNumber":767,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":768,"author":{"gitId":"-"},"content":"1. Initial launch","lastModifiedDate":"2020-05-23"},{"lineNumber":769,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":770,"author":{"gitId":"-"},"content":"   1. Download the jar file and copy into an empty folder","lastModifiedDate":"2020-05-23"},{"lineNumber":771,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":772,"author":{"gitId":"yitong241"},"content":"   2. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum.","lastModifiedDate":"2023-03-29"},{"lineNumber":773,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":774,"author":{"gitId":"yitong241"},"content":"2. Saving window preferences","lastModifiedDate":"2023-03-29"},{"lineNumber":775,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":776,"author":{"gitId":"-"},"content":"   1. Resize the window to an optimum size. Move the window to a different location. Close the window.","lastModifiedDate":"2020-05-23"},{"lineNumber":777,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":778,"author":{"gitId":"yitong241"},"content":"   2. Re-launch the app by double-clicking the jar file.\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":779,"author":{"gitId":"-"},"content":"      Expected: The most recent window size and location is retained.","lastModifiedDate":"2020-05-23"},{"lineNumber":780,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":781,"author":{"gitId":"yitong241"},"content":"3. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2023-03-29"},{"lineNumber":782,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":783,"author":{"gitId":"yitong241"},"content":"### Delete a patient","lastModifiedDate":"2023-03-29"},{"lineNumber":784,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":785,"author":{"gitId":"nramapurath"},"content":"1. Deleting a patient while all patients are being shown","lastModifiedDate":"2023-03-08"},{"lineNumber":786,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":787,"author":{"gitId":"nramapurath"},"content":"   1. Prerequisites: List all patients using the `list` command. Multiple patients in the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":788,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":789,"author":{"gitId":"yitong241"},"content":"   2. Test case: `delete 1`\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":790,"author":{"gitId":"-"},"content":"      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated.","lastModifiedDate":"2020-05-23"},{"lineNumber":791,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":792,"author":{"gitId":"yitong241"},"content":"   3. Test case: `delete 0`\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":793,"author":{"gitId":"nramapurath"},"content":"      Expected: No patient is deleted. Error details shown in the status message. Status bar remains the same.","lastModifiedDate":"2023-03-08"},{"lineNumber":794,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":795,"author":{"gitId":"yitong241"},"content":"   4. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e","lastModifiedDate":"2023-03-29"},{"lineNumber":796,"author":{"gitId":"-"},"content":"      Expected: Similar to previous.","lastModifiedDate":"2020-05-23"},{"lineNumber":797,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":798,"author":{"gitId":"yitong241"},"content":"2. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2023-03-29"},{"lineNumber":799,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":800,"author":{"gitId":"yitong241"},"content":"### Save data","lastModifiedDate":"2023-03-29"},{"lineNumber":801,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":802,"author":{"gitId":"-"},"content":"1. Dealing with missing/corrupted data files","lastModifiedDate":"2020-05-23"},{"lineNumber":803,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":804,"author":{"gitId":"-"},"content":"   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_","lastModifiedDate":"2020-05-23"},{"lineNumber":805,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":806,"author":{"gitId":"yitong241"},"content":"2. _{ more test cases â€¦â€‹ }_","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"nramapurath":115,"yitong241":248,"daytona65":47,"jeraldkiew":84,"-":272,"KSunil2001":40}},{"path":"docs/SettingUp.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Setting up and getting started","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Setting up the project in your computer","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2020-06-07"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps.","lastModifiedDate":"2020-06-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"First, **fork** this repo, and **clone** the fork into your computer.","lastModifiedDate":"2020-06-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"If you plan to use Intellij IDEA (highly recommended):","lastModifiedDate":"2020-06-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e","lastModifiedDate":"2020-06-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project.","lastModifiedDate":"2020-06-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"1. **Verify the setup**:","lastModifiedDate":"2020-06-07"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"   1. Run the `seedu.medinfo.Main` and try a few commands.","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   1. [Run the tests](Testing.md) to ensure they all pass.","lastModifiedDate":"2020-06-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-06-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"## Before writing code","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. **Configure the coding style**","lastModifiedDate":"2020-06-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/intellijCodeStyle.html) to set up IDEA\u0027s coding style to match ours.","lastModifiedDate":"2020-09-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code.","lastModifiedDate":"2020-06-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"1. **Set up CI**","lastModifiedDate":"2020-06-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. **Learn the design**","lastModifiedDate":"2020-06-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [AddressBookâ€™s architecture](DeveloperGuide.md#architecture).","lastModifiedDate":"2020-06-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"1. **Do the tutorials**","lastModifiedDate":"2020-06-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"   These tutorials will help you get acquainted with the codebase.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   * [Tracing code](tutorials/TracingCode.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"   * [Adding a new command](tutorials/AddRemark.md)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   * [Removing fields](tutorials/RemovingFields.md)","lastModifiedDate":"2021-08-01"}],"authorContributionMap":{"yitong241":1,"-":54}},{"path":"docs/Testing.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: Testing guide","lastModifiedDate":"2020-06-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Running tests","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"There are two ways to run tests.","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* **Method 1: Using IntelliJ JUnit test runner**","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  * To run a subset of tests, you can right-click on a test package,","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    test class, or a test and choose `Run \u0027ABC\u0027`","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"* **Method 2: Using Gradle**","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle.","lastModifiedDate":"2020-06-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"--------------------------------------------------------------------------------------------------------------------","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"## Types of tests","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"This project has three types of tests:","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"   e.g. `seedu.medinfo.commons.StringUtilTest`","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"   e.g. `seedu.medinfo.storage.StorageManagerTest`","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"   e.g. `seedu.medinfo.logic.LogicManagerTest`","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":3,"-":33}},{"path":"docs/UserGuide.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: User Guide","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"## Introduction","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"MedInfo is a desktop application for **private hospital administrative staff**. It helps manage your patients,","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"their status, discharge and ward, and your wards.","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"This is a User Guide for MedInfo that will guide you through installing the app to getting familiarised","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"with its features and using it. If this is your first time using this Guide, you may refer to this segment","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"on [how to use our User Guide](#how-to-use-the-user-guide)","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"## Table of Contents","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"---","lastModifiedDate":"2023-03-31"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"## About MedInfo","lastModifiedDate":"2023-03-31"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"MedInfo is a very simple and intuitive application that will help you manage your patients\u0027 **status, ward,","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"discharge date** and your wards\u0027 **occupancies**. \u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"With the time-critical nature of a private hospital\u0027s services, patient and ward management are","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"of utmost priority, where the smallest delays or lapses in updating information can affect","lastModifiedDate":"2023-03-31"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"how your hospital attends to your patients. **MedInfo** has simplified, focused patient and ward management down to a","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"tee, allowing you to in-process, update, and move patients around while looking at the overall stats of the hospital.\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"## Quick start","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"1. Download the latest `medinfo.jar` from [here](https://github.com/AY2223S2-CS2103T-T12-2/tp/releases/tag/v1.3-trial).","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"1. Copy the file to the folder you want to use as the _home folder_ for your MedInfo.","lastModifiedDate":"2023-03-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"1. Run the application by","lastModifiedDate":"2023-03-31"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"   2. Double-clicking the jar file or ","lastModifiedDate":"2023-03-31"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"   2. Opening a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar medinfo.jar` command to run the application.\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"1. A GUI similar to the one below should appear in a few seconds. Note how the app contains some sample data.\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"      ![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Type the command in the command box and press Enter to execute it. e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"   Some example commands you can try:","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"   - `list` : Lists all patients.","lastModifiedDate":"2023-03-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"   - `add nric/S1234567A name/John Doe` : Adds a patient named `John Doe` to MedInfo.","lastModifiedDate":"2023-03-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"jeraldkiew"},"content":"   - `delete 1` : Deletes the first patient on the currently displayed list","lastModifiedDate":"2023-03-26"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"jeraldkiew"},"content":"   - `exit` : Exits the app.","lastModifiedDate":"2023-02-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"1. Refer to the [Features](#features) below for details of each command.","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"## User Interface Overview","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"![UiOverview](images/UiOverview.png)","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"## How to use the User Guide","lastModifiedDate":"2023-03-31"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"This Guide contains detailed explanations on the **commmands** available and what they do.","lastModifiedDate":"2023-03-31"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"The [**Table of Contents**](#table-of-contents) at the top provide a quick way to navigate to any section you want,","lastModifiedDate":"2023-03-31"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"and a [Back to Table of Contents](#table-of-contents) tag is provided at the footer of each section to take you back","lastModifiedDate":"2023-03-31"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"to the Table of Contents. To further augment your navigation, press \u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eF\u003c/kbd\u003e to search for a keyword directly.","lastModifiedDate":"2023-03-31"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"Our commands follow a certain format for ease of use. Below are some notes on how you should interpret each command","lastModifiedDate":"2023-03-31"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"format.","lastModifiedDate":"2023-03-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"**:information_source: Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"jeraldkiew"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":81,"author":{"gitId":"jeraldkiew"},"content":"  e.g. in `add nric/NRIC name/NAME`, `NRIC` and `NAME` are parameters which can be used as `add nric/S1234567A name/John Doe`.","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"- Items in square brackets are optional.\u003cbr\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"  e.g `name/NAME [s/STATUS]` can be used as `name/John Doe s/GREEN` or as `name/John Doe`.","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"[//]: # \u0027Might be used in future features\u0027","lastModifiedDate":"2023-03-03"},{"lineNumber":87,"author":{"gitId":"nramapurath"},"content":"[//]: # \u0027- Items with `â€¦` after them can be used multiple times including zero times.\u003cbr\u003e\u0027","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"nramapurath"},"content":"[//]: # \u0027  e.g. `[t/TAG]â€¦` can be used as `` (i.e. 0 times), `t/friend`, `t/friend t/family` etc.\u0027","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"jeraldkiew"},"content":"- Parameters can be in any order.\u003cbr\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":91,"author":{"gitId":"jeraldkiew"},"content":"  e.g. if the command specifies `name/NAME s/STATUS`, `s/STATUS name/NAME` is also acceptable.","lastModifiedDate":"2023-03-26"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"nramapurath"},"content":"- If a parameter is expected only once in the command, but you specified it multiple times, only the last occurrence of the parameter will be taken.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"jeraldkiew"},"content":"  e.g. if you specify `nric/S1234567X nric/S1234567A`, only `nric/S1234567A` will be taken.","lastModifiedDate":"2023-03-03"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":96,"author":{"gitId":"jeraldkiew"},"content":"- Extraneous parameters for commands that do not take in parameters (such as `help`, `list`, and `exit`) will be ignored.\u003cbr\u003e","lastModifiedDate":"2023-03-03"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  e.g. if the command specifies `help 123`, it will be interpreted as `help`.","lastModifiedDate":"2021-02-03"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-03"},{"lineNumber":99,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"## Features","lastModifiedDate":"2023-03-31"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"These are all the commands available in MedInfo. It is mainly classified into **Patient** and ","lastModifiedDate":"2023-03-31"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"**Ward** commands.","lastModifiedDate":"2023-03-31"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"### Viewing help : `help`","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"jeraldkiew"},"content":"Shows a message explaining how to access the help page.","lastModifiedDate":"2023-03-03"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"jeraldkiew"},"content":"\u003c!-- INSERT SCREENSHOT PREVIEW HERE --\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"![help message](images/helpMessage.png)","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"Format: `help`","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"### Adding a patient to the system: `add`","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"jeraldkiew"},"content":"Adds the patient (NRIC, name and status).","lastModifiedDate":"2023-03-26"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"nramapurath"},"content":"Format: `add nric/NRIC name/NAME [s/STATUS]`","lastModifiedDate":"2023-03-30"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"\u003c!-- EXAMPLE OF TIP --\u003e","lastModifiedDate":"2023-02-27"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tips:** \u003cbr/\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":124,"author":{"gitId":"daytona65"},"content":"- The default condition is set to `GRAY`. \u003cbr/\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"- The default ward is set to `Waiting Room`. \u003cbr/\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":126,"author":{"gitId":"daytona65"},"content":"- No discharge date is added by default.","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"jeraldkiew"},"content":"- `add nric/S1234567A name/John Doe s/RED`","lastModifiedDate":"2023-03-26"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"### Listing all patients in the system: `list`","lastModifiedDate":"2023-03-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"jeraldkiew"},"content":"Shows a list of all patients with their details in the system.","lastModifiedDate":"2023-02-27"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"Format: `list`","lastModifiedDate":"2023-02-27"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":145,"author":{"gitId":"daytona65"},"content":"### Editing a patientâ€™s details in the system: `edit`","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"KSunil2001"},"content":"Edit an existing patientâ€™s status or ward or discharge date-time.","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"nramapurath"},"content":"Format: `edit INDEX [s/STATUS] [w/WARD] [d/DISCHARGE]`","lastModifiedDate":"2023-03-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"KSunil2001"},"content":"- Edits the patient\u0027s details at the specified index as of the currently displayed list.","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"KSunil2001"},"content":"- The status of a patient is either `GRAY` or `GREEN` or `YELLOW` or `RED`.","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"KSunil2001"},"content":"- The ward allocated to a patient is represented as an alphanumeric string. E.g `A01`.","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"KSunil2001"},"content":"- The discharge date-time is of the `dd/MM/yyyy HHmm` format. E.g `12/03/2023 1200` is interpreted as 12th March 2023 1200hrs.","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"KSunil2001"},"content":"- `edit 1 s/GREEN` Edits the status of the first currently displayed patient to be `GREEN`.","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"KSunil2001"},"content":"- `edit 5 w/A01` Edits the ward of the fifth currently displayed patient to be `A01`.","lastModifiedDate":"2023-03-29"},{"lineNumber":160,"author":{"gitId":"KSunil2001"},"content":"- `edit 4 d/27/07/2023 1600` Edits the discharge date-time of the fourth currently displayed patient to be `27/07/2023 1600` which is read as 27th July 2023 1600hrs.","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":"### Sorting all patients in the system: `sort`","lastModifiedDate":"2023-03-30"},{"lineNumber":166,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"yitong241"},"content":"Sorts all the patients with the specified field and order in the system.","lastModifiedDate":"2023-03-29"},{"lineNumber":168,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"yitong241"},"content":"Format: `sort FIELD/ORDER`","lastModifiedDate":"2023-03-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"yitong241"},"content":"- `sort s/asc`","lastModifiedDate":"2023-03-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"### Finding patients by name in the system: `find`","lastModifiedDate":"2023-03-30"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"jeraldkiew"},"content":"Shows a list of all patients with their details that match input name or NRIC.","lastModifiedDate":"2023-02-27"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"jeraldkiew"},"content":"Format: `find name/NAME`, `find nric/NRIC`, `find s/STATUS`","lastModifiedDate":"2023-03-26"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"jeraldkiew"},"content":"- The search is case-insensitive. e.g `hans` will match `Hans`","lastModifiedDate":"2023-02-27"},{"lineNumber":185,"author":{"gitId":"jeraldkiew"},"content":"- The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`","lastModifiedDate":"2023-02-27"},{"lineNumber":186,"author":{"gitId":"jeraldkiew"},"content":"- Either only the name or only the NRIC is searched.","lastModifiedDate":"2023-02-27"},{"lineNumber":187,"author":{"gitId":"jeraldkiew"},"content":"- Only full words will be matched e.g. `Han` will not match `Hans`","lastModifiedDate":"2023-02-27"},{"lineNumber":188,"author":{"gitId":"jeraldkiew"},"content":"- Persons matching at least one keyword will be returned (i.e. `OR` search).","lastModifiedDate":"2023-02-27"},{"lineNumber":189,"author":{"gitId":"-"},"content":"  e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-02-27"},{"lineNumber":193,"author":{"gitId":"nramapurath"},"content":"- `find name/John` returns `john` and `John Smith`","lastModifiedDate":"2023-03-30"},{"lineNumber":194,"author":{"gitId":"nramapurath"},"content":"- `find name/john carlos` returns `John Smith`, `Carlos Lopez`\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":195,"author":{"gitId":"nramapurath"},"content":"  ![result for \u0027find alex david\u0027](images/findJohnCarlosResult.png)","lastModifiedDate":"2023-03-30"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":198,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":200,"author":{"gitId":"daytona65"},"content":"### Deleting a patient from the system: `delete`","lastModifiedDate":"2023-03-30"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"jeraldkiew"},"content":"Deletes a patient by index.","lastModifiedDate":"2023-03-30"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"Format: `delete INDEX`","lastModifiedDate":"2023-03-26"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"jeraldkiew"},"content":"- Deletes the patient at the specified index as of the currently displayed list.","lastModifiedDate":"2023-03-26"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"Examples:","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"jeraldkiew"},"content":"`delete 1`","lastModifiedDate":"2023-03-26"},{"lineNumber":211,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":213,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":214,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"### Adding a ward to the system: `addward`","lastModifiedDate":"2023-03-30"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":217,"author":{"gitId":"KSunil2001"},"content":"Adds the ward (name and capacity).","lastModifiedDate":"2023-03-29"},{"lineNumber":218,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":219,"author":{"gitId":"nramapurath"},"content":"Format: `addward w/WARD [c/CAPACITY]`","lastModifiedDate":"2023-03-31"},{"lineNumber":220,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":221,"author":{"gitId":"KSunil2001"},"content":"- The ward name is represented as an alphanumeric string. E.g `A01`.","lastModifiedDate":"2023-03-29"},{"lineNumber":222,"author":{"gitId":"KSunil2001"},"content":"- The capacity is a positive integer. E.g `50`.","lastModifiedDate":"2023-03-29"},{"lineNumber":223,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":224,"author":{"gitId":"jeraldkiew"},"content":"\u003c!-- EXAMPLE OF TIP --\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":225,"author":{"gitId":"jeraldkiew"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**","lastModifiedDate":"2023-03-26"},{"lineNumber":226,"author":{"gitId":"jeraldkiew"},"content":"The default capacity is set to 10.","lastModifiedDate":"2023-03-26"},{"lineNumber":227,"author":{"gitId":"jeraldkiew"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-26"},{"lineNumber":228,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":229,"author":{"gitId":"jeraldkiew"},"content":"Examples:","lastModifiedDate":"2023-03-26"},{"lineNumber":230,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":231,"author":{"gitId":"nramapurath"},"content":"- `addward w/A01 c/25` Adds the ward with name `A01` and capacity `25` to the system.","lastModifiedDate":"2023-03-31"},{"lineNumber":232,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-26"},{"lineNumber":233,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":234,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":235,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":236,"author":{"gitId":"daytona65"},"content":"### Editing a ward\u0027s details in the system: `editward`","lastModifiedDate":"2023-03-30"},{"lineNumber":237,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":238,"author":{"gitId":"jeraldkiew"},"content":"Edit an existing ward\u0027s name or capacity.","lastModifiedDate":"2023-03-30"},{"lineNumber":239,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":240,"author":{"gitId":"nramapurath"},"content":"Format: `editward INDEX [w/WARD] [c/CAPACITY]`","lastModifiedDate":"2023-03-30"},{"lineNumber":241,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":242,"author":{"gitId":"jeraldkiew"},"content":"- Edits the ward\u0027s details at the specified index as of the currently displayed list.","lastModifiedDate":"2023-03-30"},{"lineNumber":243,"author":{"gitId":"jeraldkiew"},"content":"- The given capacity has to be an integer.","lastModifiedDate":"2023-03-30"},{"lineNumber":244,"author":{"gitId":"jeraldkiew"},"content":"- The given capacity has to be greater or equal to the ward\u0027s current occupancy","lastModifiedDate":"2023-03-30"},{"lineNumber":245,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":246,"author":{"gitId":"jeraldkiew"},"content":"Examples:","lastModifiedDate":"2023-03-30"},{"lineNumber":247,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":248,"author":{"gitId":"jeraldkiew"},"content":"- `editward 1 w/A02` Edits the name of the first currently displayed ward to be `A02`.","lastModifiedDate":"2023-03-30"},{"lineNumber":249,"author":{"gitId":"jeraldkiew"},"content":"- `editward 5 c/35` Edits the capacity of the fifth currently displayed ward to be `35`.","lastModifiedDate":"2023-03-30"},{"lineNumber":250,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":251,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":252,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":253,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":254,"author":{"gitId":"daytona65"},"content":"### Deleting a ward from the system: `deleteward`","lastModifiedDate":"2023-03-30"},{"lineNumber":255,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":256,"author":{"gitId":"jeraldkiew"},"content":"Deletes a ward by index.","lastModifiedDate":"2023-03-30"},{"lineNumber":257,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":258,"author":{"gitId":"jeraldkiew"},"content":"Format: `deleteward INDEX`","lastModifiedDate":"2023-03-30"},{"lineNumber":259,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":260,"author":{"gitId":"jeraldkiew"},"content":"- Deletes the ward at the specified index as of the currently displayed list.","lastModifiedDate":"2023-03-30"},{"lineNumber":261,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":262,"author":{"gitId":"jeraldkiew"},"content":"Examples:","lastModifiedDate":"2023-03-30"},{"lineNumber":263,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":264,"author":{"gitId":"jeraldkiew"},"content":"`deleteward 1`","lastModifiedDate":"2023-03-30"},{"lineNumber":265,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":266,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":267,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":269,"author":{"gitId":"-"},"content":"### Exiting the program : `exit`","lastModifiedDate":"2023-03-30"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Exits the program.","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"Format: `exit`","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":276,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":277,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":278,"author":{"gitId":"-"},"content":"### Saving the data","lastModifiedDate":"2023-03-30"},{"lineNumber":279,"author":{"gitId":"jeraldkiew"},"content":"MedInfo data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually.","lastModifiedDate":"2023-02-27"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":284,"author":{"gitId":"-"},"content":"### Editing the data file","lastModifiedDate":"2023-03-30"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":286,"author":{"gitId":"nramapurath"},"content":"MedInfo data are saved as a JSON file `[JAR file location]/data/addressbook.json`. Advanced users are welcome to update the data directly by editing that data file.","lastModifiedDate":"2023-03-30"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-02-04"},{"lineNumber":288,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**","lastModifiedDate":"2023-03-30"},{"lineNumber":289,"author":{"gitId":"jeraldkiew"},"content":"If your changes to the data file make its format invalid, MedInfo will not be able to run.","lastModifiedDate":"2023-03-30"},{"lineNumber":290,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":293,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":294,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"daytona65"},"content":"## FAQ :raising_hand:","lastModifiedDate":"2023-03-30"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"jeraldkiew"},"content":"**Q**: I keep forgetting the commands, is there a quick way to get help?\u003cbr\u003e","lastModifiedDate":"2023-03-03"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":300,"author":{"gitId":"nramapurath"},"content":"**A**: Yes! Entering the `help` command will show a message explaining how to access the help page.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":301,"author":{"gitId":"nramapurath"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":302,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-03"},{"lineNumber":303,"author":{"gitId":"nramapurath"},"content":"**Q**: Why can\u0027t I remove the waiting room?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":305,"author":{"gitId":"nramapurath"},"content":"**A**: As every hospital would have some pre-screening room for patients to wait in, and to make it easier ","lastModifiedDate":"2023-03-30"},{"lineNumber":306,"author":{"gitId":"nramapurath"},"content":"to start entering patients into the system, the waiting room is made un-deletable.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":307,"author":{"gitId":"nramapurath"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":309,"author":{"gitId":"nramapurath"},"content":"**Q**: How do I transfer my data to another device/computer?\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":310,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":311,"author":{"gitId":"nramapurath"},"content":"**A**: Install the app in the other device/ computer and overwrite the empty data file it creates with ","lastModifiedDate":"2023-03-30"},{"lineNumber":312,"author":{"gitId":"nramapurath"},"content":"the file that contains the data of your previous MedInfo home folder.\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":313,"author":{"gitId":"nramapurath"},"content":"\u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":315,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"},{"lineNumber":316,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":317,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-02-27"},{"lineNumber":318,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":319,"author":{"gitId":"-"},"content":"## Command summary","lastModifiedDate":"2023-03-30"},{"lineNumber":320,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":321,"author":{"gitId":"jeraldkiew"},"content":"| Action          | Format, Examples                                                                           |","lastModifiedDate":"2023-02-27"},{"lineNumber":322,"author":{"gitId":"nramapurath"},"content":"|-----------------|--------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-03-31"},{"lineNumber":323,"author":{"gitId":"daytona65"},"content":"| **Add**         | `add nric/NRIC name/NAME [s/STATUS]` \u003cbr\u003e e.g., `add nric/S1234567A name/John Doe s/GREEN` |","lastModifiedDate":"2023-03-30"},{"lineNumber":324,"author":{"gitId":"jeraldkiew"},"content":"| **Delete**      | `delete INDEX`\u003cbr\u003e e.g., `delete 1`                                                        |","lastModifiedDate":"2023-03-26"},{"lineNumber":325,"author":{"gitId":"nramapurath"},"content":"| **Edit**        | `edit INDEX [s/STATUS] [w/WARD] [d/DISCHARGE]`\u003cbr\u003e e.g.,`edit 1 s/GREEN`                   |","lastModifiedDate":"2023-03-30"},{"lineNumber":326,"author":{"gitId":"jeraldkiew"},"content":"| **Find**        | `find name/NAME` or `find nric/NRIC` or `find s/STATUS`\u003cbr\u003e e.g., `find name/John`         |","lastModifiedDate":"2023-03-26"},{"lineNumber":327,"author":{"gitId":"nramapurath"},"content":"| **Add Ward**    | `addward w/WARD [c/CAPACITY]` \u003cbr\u003e e.g., `addward w/S1234567A c/25`                        |","lastModifiedDate":"2023-03-31"},{"lineNumber":328,"author":{"gitId":"nramapurath"},"content":"| **Edit Ward**   | `editward INDEX [w/WARD] [c/CAPACITY]` \u003cbr\u003e e.g., `editward 1 w/A02 c/35`                  |","lastModifiedDate":"2023-03-31"},{"lineNumber":329,"author":{"gitId":"nramapurath"},"content":"| **Delete Ward** | `deleteward INDEX` \u003cbr\u003e e.g., `deleteward 1`                                               |","lastModifiedDate":"2023-03-30"},{"lineNumber":330,"author":{"gitId":"jeraldkiew"},"content":"| **List**        | `list`                                                                                     |","lastModifiedDate":"2023-02-27"},{"lineNumber":331,"author":{"gitId":"jeraldkiew"},"content":"| **Help**        | `help`                                                                                     |","lastModifiedDate":"2023-02-27"},{"lineNumber":332,"author":{"gitId":"yitong241"},"content":"| **Sort**        | `sort FIELD/ORDER` \u003cbr\u003e e.g., `sort name/asc`                                              |","lastModifiedDate":"2023-03-29"},{"lineNumber":333,"author":{"gitId":"yitong241"},"content":"| **Delete Ward** | `deleteward INDEX` \u003cbr\u003e e.g., `deleteward 1`                                               |","lastModifiedDate":"2023-03-29"},{"lineNumber":334,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":335,"author":{"gitId":"daytona65"},"content":"[Back to Table of Contents](#table-of-contents)","lastModifiedDate":"2023-03-31"}],"authorContributionMap":{"nramapurath":28,"yitong241":7,"daytona65":89,"jeraldkiew":77,"-":121,"KSunil2001":13}},{"path":"docs/_sass/minima/_base.scss","fileType":"other","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"html {","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"  font-size: $base-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Reset some basic elements","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"body, h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"p, blockquote, pre, hr,","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"dl, dd, ol, ul, figure {","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  margin: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  padding: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * Basic styling","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"body {","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  font: $base-font-weight #{$base-font-size}/#{$base-line-height} $base-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"  background-color: $background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"  -webkit-text-size-adjust: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"  -webkit-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     -moz-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"       -o-font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"          font-feature-settings: \"kern\" 1;","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"  font-kerning: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  display: flex;","lastModifiedDate":"2020-05-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"  min-height: 100vh;","lastModifiedDate":"2020-05-23"},{"lineNumber":33,"author":{"gitId":"-"},"content":"  flex-direction: column;","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"  overflow-wrap: break-word;","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":" * Set `margin-bottom` to maintain vertical rhythm","lastModifiedDate":"2020-05-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6,","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"p, blockquote, pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"ul, ol, dl, figure,","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"%vertical-rhythm {","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"hr {","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"  margin-top: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":" * `main` element","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"main {","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"  display: block; /* Default value of `display` of `main` element is \u0027inline\u0027 in IE 11. */","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":" * Images","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"img {","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"  max-width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"  vertical-align: middle;","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":" * Figures","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"figure \u003e img {","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"  display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"figcaption {","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"  font-size: $small-font-size;","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":" * Lists","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"ul, ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"  margin-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"li {","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"  \u003e ul,","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"  \u003e ol {","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"-"},"content":" * Headings","lastModifiedDate":"2020-05-23"},{"lineNumber":104,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"h1, h2, h3, h4, h5, h6 {","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"  font-weight: $base-font-weight;","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":" * Links","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"a {","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"  color: $link-base-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"  text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"  \u0026:visited {","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    color: $link-visited-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"  \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"    color: $text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"  .social-media-list \u0026:hover {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    text-decoration: none;","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    .username {","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"      text-decoration: underline;","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":" * Blockquotes","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"blockquote {","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"  color: $brand-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":142,"author":{"gitId":"-"},"content":"  border-left: 4px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":143,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"  @include relative-font-size(1.125);","lastModifiedDate":"2020-05-23"},{"lineNumber":145,"author":{"gitId":"-"},"content":"  font-style: italic;","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"  \u003e :last-child {","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    margin-bottom: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"  i, em {","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    font-style: normal;","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * Code formatting","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"pre,","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"  font-family: $code-font-family;","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"  font-size: 0.9375em;","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"  border: 1px solid $brand-color-light;","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"  background-color: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":170,"author":{"gitId":"-"},"content":"code {","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"  padding: 1px 5px;","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":174,"author":{"gitId":"-"},"content":"pre {","lastModifiedDate":"2020-05-23"},{"lineNumber":175,"author":{"gitId":"-"},"content":"  padding: 8px 12px;","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"  overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":178,"author":{"gitId":"-"},"content":"  \u003e code {","lastModifiedDate":"2020-05-23"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    border: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    padding-right: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    padding-left: 0;","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":183,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":".highlight {","lastModifiedDate":"2020-05-23"},{"lineNumber":186,"author":{"gitId":"-"},"content":"  border-radius: 3px;","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"  background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":188,"author":{"gitId":"-"},"content":"  @extend %vertical-rhythm;","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"  .highlighter-rouge \u0026 {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"    background: $code-background-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":195,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":198,"author":{"gitId":"-"},"content":" * Wrapper","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":200,"author":{"gitId":"-"},"content":".wrapper {","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"  max-width: calc(#{$content-width} - (#{$spacing-unit}));","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"  margin-right: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"  margin-left: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":204,"author":{"gitId":"-"},"content":"  padding-right: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":205,"author":{"gitId":"-"},"content":"  padding-left: $spacing-unit / 2;","lastModifiedDate":"2020-05-23"},{"lineNumber":206,"author":{"gitId":"-"},"content":"  @extend %clearfix;","lastModifiedDate":"2020-05-23"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":208,"author":{"gitId":"-"},"content":"  @media screen and (min-width: $on-large) {","lastModifiedDate":"2020-05-23"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    max-width: calc(#{$content-width} - (#{$spacing-unit} * 2));","lastModifiedDate":"2020-05-23"},{"lineNumber":210,"author":{"gitId":"-"},"content":"    padding-right: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    padding-left: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":212,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":213,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":217,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":" * Clearfix","lastModifiedDate":"2020-05-23"},{"lineNumber":219,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":220,"author":{"gitId":"-"},"content":"%clearfix:after {","lastModifiedDate":"2020-05-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"  content: \"\";","lastModifiedDate":"2020-05-23"},{"lineNumber":222,"author":{"gitId":"-"},"content":"  display: table;","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"  clear: both;","lastModifiedDate":"2020-05-23"},{"lineNumber":224,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":" * Icons","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":".orange {","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  color: #f66a0a;","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":".grey {","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"  color: #828282;","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":" * Tables","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"table {","lastModifiedDate":"2020-05-23"},{"lineNumber":244,"author":{"gitId":"-"},"content":"  margin-bottom: $spacing-unit;","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"  width: 100%;","lastModifiedDate":"2020-05-23"},{"lineNumber":246,"author":{"gitId":"-"},"content":"  text-align: $table-text-align;","lastModifiedDate":"2020-05-23"},{"lineNumber":247,"author":{"gitId":"-"},"content":"  color: $table-text-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":248,"author":{"gitId":"-"},"content":"  border-collapse: collapse;","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"  border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":250,"author":{"gitId":"-"},"content":"  tr {","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    \u0026:nth-child(even) {","lastModifiedDate":"2020-05-23"},{"lineNumber":252,"author":{"gitId":"-"},"content":"      background-color: $table-zebra-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":254,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"  th, td {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    padding: ($spacing-unit / 3) ($spacing-unit / 2);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"  th {","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    background-color: $table-header-bg-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    border: 1px solid $table-header-border;","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":262,"author":{"gitId":"-"},"content":"  td {","lastModifiedDate":"2020-05-23"},{"lineNumber":263,"author":{"gitId":"-"},"content":"    border: 1px solid $table-border-color;","lastModifiedDate":"2020-05-23"},{"lineNumber":264,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"  @include media-query($on-laptop) {","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2020-05-23"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    overflow-x: auto;","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -webkit-overflow-scrolling: touch;","lastModifiedDate":"2020-05-23"},{"lineNumber":270,"author":{"gitId":"-"},"content":"            -ms-overflow-style: -ms-autohiding-scrollbar;","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"daytona65"},"content":"    content: attr(href);","lastModifiedDate":"2023-03-31"},{"lineNumber":272,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-11"},{"lineNumber":275,"author":{"gitId":"-"},"content":"@media print {","lastModifiedDate":"2021-01-12"},{"lineNumber":276,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-11"},{"lineNumber":277,"author":{"gitId":"-"},"content":"  * Prevents page break from cutting through content when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":278,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-11"},{"lineNumber":279,"author":{"gitId":"-"},"content":"  body {","lastModifiedDate":"2021-01-11"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    display: block;","lastModifiedDate":"2021-01-11"},{"lineNumber":281,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":282,"author":{"gitId":"-"},"content":"  /**","lastModifiedDate":"2021-01-12"},{"lineNumber":283,"author":{"gitId":"-"},"content":"  * Replaces the top navigation menu with the project name when printing","lastModifiedDate":"2021-01-12"},{"lineNumber":284,"author":{"gitId":"-"},"content":"  */","lastModifiedDate":"2021-01-12"},{"lineNumber":285,"author":{"gitId":"-"},"content":"  .site-header .wrapper {","lastModifiedDate":"2021-01-12"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    display: none;","lastModifiedDate":"2021-01-12"},{"lineNumber":287,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":288,"author":{"gitId":"-"},"content":"  .site-header {","lastModifiedDate":"2021-01-12"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    text-align: center;","lastModifiedDate":"2021-01-12"},{"lineNumber":290,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-12"},{"lineNumber":291,"author":{"gitId":"-"},"content":"  .site-header:before {","lastModifiedDate":"2021-01-12"},{"lineNumber":292,"author":{"gitId":"daytona65"},"content":"    content: \"MedInfo\";","lastModifiedDate":"2023-03-31"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    font-size: 32px;","lastModifiedDate":"2021-01-12"},{"lineNumber":294,"author":{"gitId":"-"},"content":"  }","lastModifiedDate":"2021-01-11"},{"lineNumber":295,"author":{"gitId":"daytona65"},"content":"  a::after {","lastModifiedDate":"2023-04-01"},{"lineNumber":296,"author":{"gitId":"daytona65"},"content":"      content: \" (link)\";","lastModifiedDate":"2023-04-01"},{"lineNumber":297,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":298,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-01-12"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-01-12"}],"authorContributionMap":{"daytona65":5,"-":294}},{"path":"docs/diagrams/AddActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes add command;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"if () then ([Status present])","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"    :Create patient with Status;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"else ([else])","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"    :Create guest with Status GRAY;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"endif","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":":Add patient to model;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":18}},{"path":"docs/diagrams/AddWardActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes addward command;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"if () then ([Capacity present])","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"    :Create ward with capacity;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"else ([else])","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"    :Create ward with default capacity;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"endif","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":":Add ward to model;","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":18}},{"path":"docs/diagrams/ArchitectureSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Actor User as user USER_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":UI\" as ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":Logic\" as logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \":Model\" as model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Participant \":Storage\" as storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"user -[USER_COLOR]\u003e ui : \"delete 1\"","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"activate ui UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"activate logic LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"logic -[LOGIC_COLOR]\u003e model : deletePatient(p)","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"model -[MODEL_COLOR]-\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"deactivate model","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(medInfo)","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"storage -[STORAGE_COLOR]\u003e storage : Save to file","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"activate storage STORAGE_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e storage","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"storage --[STORAGE_COLOR]\u003e logic","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"deactivate storage","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"logic --[LOGIC_COLOR]\u003e ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"deactivate logic","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ui--[UI_COLOR]\u003e user","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate ui","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"yitong241":1,"jeraldkiew":1,"-":36}},{"path":"docs/diagrams/DeleteActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes delete command;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"if () then ([User confirms deletion])","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"    :Find patient to delete;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"    :Delete patient from the model;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"else ([else])","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"    :List all patients;","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"endif","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":18}},{"path":"docs/diagrams/DeleteSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"box Logic LOGIC_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"participant \":LogicManager\" as LogicManager LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"participant \":CommandResult\" as CommandResult LOGIC_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"box Model MODEL_COLOR_T1","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"participant \":Model\" as Model MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"end box","lastModifiedDate":"2019-07-03"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":16,"author":{"gitId":"-"},"content":"[-\u003e LogicManager : execute(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"activate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"LogicManager -\u003e AddressBookParser : parseCommand(\"delete 1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"activate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"create DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"AddressBookParser -\u003e DeleteCommandParser : parse(\"1\")","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"activate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"create DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"DeleteCommandParser -\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":36,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e DeleteCommandParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"-"},"content":"DeleteCommandParser --\u003e AddressBookParser : d","lastModifiedDate":"2019-07-03"},{"lineNumber":40,"author":{"gitId":"-"},"content":"deactivate DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u0027Hidden arrow to position the destroy marker below the end of the activation bar.","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"-"},"content":"DeleteCommandParser -[hidden]-\u003e AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":43,"author":{"gitId":"-"},"content":"destroy DeleteCommandParser","lastModifiedDate":"2019-07-03"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"AddressBookParser --\u003e LogicManager : d","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"deactivate AddressBookParser","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"LogicManager -\u003e DeleteCommand : execute()","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"activate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"DeleteCommand -\u003e Model : deletePatient(1)","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"activate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"-"},"content":"Model --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"deactivate Model","lastModifiedDate":"2019-07-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"create CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"DeleteCommand -\u003e CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"-"},"content":"activate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":61,"author":{"gitId":"-"},"content":"CommandResult --\u003e DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"deactivate CommandResult","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":64,"author":{"gitId":"-"},"content":"DeleteCommand --\u003e LogicManager : result","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"deactivate DeleteCommand","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":67,"author":{"gitId":"-"},"content":"[\u003c--LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"deactivate LogicManager","lastModifiedDate":"2019-07-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"jeraldkiew":1,"-":68}},{"path":"docs/diagrams/EditActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes edit command;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":":Find patient to edit;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":":Create new patient using fields entered;","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":":Set new patient to the model;","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":15}},{"path":"docs/diagrams/FindActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes find command with a search field;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":":Find patient(s) whose corresponding field matches;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":":Update model to display the patient(s);","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":14}},{"path":"docs/diagrams/ListActivityDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"@startuml","lastModifiedDate":"2023-03-27"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"skinparam activity {","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"    ArrowColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"    BackgroundColor #FEFECE","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"    BorderColor #A80036","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"    BorderThickness 1.5","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"start","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":":User executes list command;","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":":Update model to display all patients;","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"stop","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"@enduml","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"nramapurath":13}},{"path":"docs/diagrams/ModelClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor MODEL_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Package Model \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyAddressBook\" as ReadOnlyAddressBook","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nReadOnlyUserPrefs\" as ReadOnlyUserPrefs","lastModifiedDate":"2022-01-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nModel\" as Model","lastModifiedDate":"2022-01-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class AddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class ModelManager","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class UserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":"Class UniquePatientList","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"Class Patient","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"Class UniqueWardList","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"Class Ward","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"Class WardName","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"Class Nric","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"Class Name","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"Class Status","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"Class Discharge","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"AddressBook .up.|\u003e ReadOnlyAddressBook","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"ModelManager .up.|\u003e Model","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"Model .right.\u003e ReadOnlyUserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":34,"author":{"gitId":"-"},"content":"Model .left.\u003e ReadOnlyAddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"ModelManager -left-\u003e \"1\" AddressBook","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"ModelManager -right-\u003e \"1\" UserPrefs","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"UserPrefs .up.|\u003e ReadOnlyUserPrefs","lastModifiedDate":"2019-07-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"AddressBook *--\u003e \"1\" UniquePatientList","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"AddressBook *--\u003e \"1\" UniqueWardList","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"UniquePatientList --\u003e \"~* all\" Patient","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"UniqueWardList --\u003e \"~* all\" Ward","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"Patient *--\u003e Name","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"Patient *--\u003e Nric","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"Patient *--\u003e Status","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"Patient *--\u003e WardName","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"Patient *--\u003e Discharge","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"Ward *--\u003e Capacity","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"Ward *--\u003e WardName","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"Ward *--\u003e \"1\" UniquePatientList","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"jeraldkiew"},"content":"ModelManager --\u003e\"~* filtered\" Patient","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"jeraldkiew":23,"-":31}},{"path":"docs/diagrams/UiClassDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-07-03"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include style.puml","lastModifiedDate":"2019-07-03"},{"lineNumber":3,"author":{"gitId":"-"},"content":"skinparam arrowThickness 1.1","lastModifiedDate":"2019-07-03"},{"lineNumber":4,"author":{"gitId":"-"},"content":"skinparam arrowColor UI_COLOR_T4","lastModifiedDate":"2019-07-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"skinparam classBackgroundColor UI_COLOR","lastModifiedDate":"2019-07-03"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":7,"author":{"gitId":"-"},"content":"package UI \u003c\u003cRectangle\u003e\u003e{","lastModifiedDate":"2019-07-03"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Class \"\u003c\u003cinterface\u003e\u003e\\nUi\" as Ui","lastModifiedDate":"2022-01-03"},{"lineNumber":9,"author":{"gitId":"-"},"content":"Class \"{abstract}\\nUiPart\" as UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"Class UiManager","lastModifiedDate":"2019-07-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Class MainWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Class HelpWindow","lastModifiedDate":"2019-07-03"},{"lineNumber":13,"author":{"gitId":"-"},"content":"Class ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":"Class PatientListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":"Class PatientCard","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"Class WardListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"Class WardCard","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Class StatusBarFooter","lastModifiedDate":"2019-07-03"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Class CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":22,"author":{"gitId":"-"},"content":"package Model \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Class HiddenModel #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":24,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":26,"author":{"gitId":"-"},"content":"package Logic \u003c\u003cRectangle\u003e\u003e {","lastModifiedDate":"2019-07-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Class HiddenLogic #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-03"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":30,"author":{"gitId":"-"},"content":"Class HiddenOutside #FFFFFF","lastModifiedDate":"2019-07-03"},{"lineNumber":31,"author":{"gitId":"-"},"content":"HiddenOutside ..\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":33,"author":{"gitId":"-"},"content":"UiManager .left.|\u003e Ui","lastModifiedDate":"2019-07-03"},{"lineNumber":34,"author":{"gitId":"-"},"content":"UiManager -down-\u003e \"1\" MainWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":35,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e  \"1\" CommandBox","lastModifiedDate":"2021-07-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" ResultDisplay","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"MainWindow *-down-\u003e \"1\" PatientListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"MainWindow *-down-\u003e \"1\" WardListPanel","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"MainWindow *-down-\u003e \"1\" StatusBarFooter","lastModifiedDate":"2021-07-31"},{"lineNumber":40,"author":{"gitId":"-"},"content":"MainWindow --\u003e \"0..1\" HelpWindow","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"PatientListPanel -down-\u003e \"*\" PatientCard","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"WardListPanel -down-\u003e \"*\" WardCard","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":45,"author":{"gitId":"-"},"content":"MainWindow -left-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"ResultDisplay --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":48,"author":{"gitId":"-"},"content":"CommandBox --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"PatientListPanel --|\u003e UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"PatientCard --|\u003e UiPart","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"StatusBarFooter --|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":52,"author":{"gitId":"-"},"content":"HelpWindow --|\u003e UiPart","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"PatientCard ..\u003e Model","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"jeraldkiew"},"content":"WardCard ..\u003e Model","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"UiManager -right-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":57,"author":{"gitId":"-"},"content":"MainWindow -left-\u003e Logic","lastModifiedDate":"2019-07-03"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":59,"author":{"gitId":"jeraldkiew"},"content":"PatientListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"WardListPanel -[hidden]left- HelpWindow","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"HelpWindow -[hidden]left- CommandBox","lastModifiedDate":"2019-07-03"},{"lineNumber":62,"author":{"gitId":"-"},"content":"CommandBox -[hidden]left- ResultDisplay","lastModifiedDate":"2019-07-03"},{"lineNumber":63,"author":{"gitId":"-"},"content":"ResultDisplay -[hidden]left- StatusBarFooter","lastModifiedDate":"2019-07-30"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-03"},{"lineNumber":65,"author":{"gitId":"-"},"content":"MainWindow -[hidden]-|\u003e UiPart","lastModifiedDate":"2019-07-03"},{"lineNumber":66,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-07-03"}],"authorContributionMap":{"jeraldkiew":14,"-":52}},{"path":"docs/diagrams/tracing/LogicSequenceDiagram.puml","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@startuml","lastModifiedDate":"2019-06-17"},{"lineNumber":2,"author":{"gitId":"-"},"content":"!include ../style.puml","lastModifiedDate":"2019-06-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Participant \":LogicManager\" as logic LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":5,"author":{"gitId":"-"},"content":"Participant \":AddressBookParser\" as abp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Participant \":EditCommandParser\" as ecp LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Participant \"command:EditCommand\" as ec LOGIC_COLOR","lastModifiedDate":"2019-06-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"[-\u003e logic : execute","lastModifiedDate":"2019-06-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"activate logic","lastModifiedDate":"2019-06-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"logic -\u003e abp ++: parseCommand(commandText)","lastModifiedDate":"2019-06-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"create ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"abp -\u003e ecp","lastModifiedDate":"2019-06-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"abp -\u003e ecp ++: parse(arguments)","lastModifiedDate":"2019-06-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"create ec","lastModifiedDate":"2019-06-17"},{"lineNumber":16,"author":{"gitId":"KSunil2001"},"content":"ecp -\u003e ec ++: index, editPatientDescriptor","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"ec --\u003e ecp --","lastModifiedDate":"2019-06-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"ecp --\u003e abp --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"abp --\u003e logic --: command","lastModifiedDate":"2019-06-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-06-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@enduml","lastModifiedDate":"2019-06-17"}],"authorContributionMap":{"-":20,"KSunil2001":1}},{"path":"docs/index.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"title: MedInfo","lastModifiedDate":"2023-03-17"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"[![CI Status](https://github.com/se-edu/addressbook-level3/workflows/Java%20CI/badge.svg)](https://github.com/se-edu/addressbook-level3/actions)","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"[![codecov](https://codecov.io/gh/se-edu/addressbook-level3/branch/master/graph/badge.svg)](https://codecov.io/gh/se-edu/addressbook-level3)","lastModifiedDate":"2020-08-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"![Ui](images/Ui.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"**MedInfo is a desktop application for managing patients and wards.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface).","lastModifiedDate":"2023-03-31"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"* If you are interested in using MedInfo, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start).","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"* If you are interested about developing MedInfo, the [**Developer Guide**](DeveloperGuide.html) is a good place to start.","lastModifiedDate":"2023-03-31"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"* Find out more about the team behind MedInfo [**here**](AboutUs.html).","lastModifiedDate":"2023-03-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"**Acknowledgements**","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"daytona65":5,"-":15}},{"path":"docs/team/daytona65.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"daytona65"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"title: Nicholas Halim\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"* [**Code contributed**](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003ddaytona65\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dtrue\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026since\u003d2023-02-17\u0026tabOpen\u003dfalse\u0026zFR\u003dfalse)","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"* **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    * Managed the review and merging of my  team\u0027s PRs","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"    * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"    * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"* **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"    * User Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"        * Added documentation for the features `delete` and `find` [\\#72]()","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"        * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    * Developer Guide:","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"        * Added implementation details of the `delete` feature.","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"* **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"    * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"    * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())","lastModifiedDate":"2023-03-02"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"* **Tools**:","lastModifiedDate":"2023-03-02"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    * Integrated a third party library (Natty) to the project ([\\#42]())","lastModifiedDate":"2023-03-02"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"    * Integrated a new Github plugin (CircleCI) to the team repo","lastModifiedDate":"2023-03-02"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"* _{you can add/remove categories in the list above}_","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"daytona65":41}},{"path":"docs/team/jeraldkiew.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"title: Jerald Kiew\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"jeraldkiew"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"jeraldkiew"},"content":"### Project: MedInfo","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"jeraldkiew"},"content":"MedInfo aims to solve the problem of slow, multiple step process of documenting patient medical records during in-processing and provide faster access to a particular patientâ€™s medical records for hospital admin staff.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"jeraldkiew"},"content":"- **New Feature**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003djeraldkiew\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"- **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"jeraldkiew"},"content":"- **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"- **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"- **Tools**:","lastModifiedDate":"2023-03-02"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"jeraldkiew":35}},{"path":"docs/team/ksunil2001.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"KSunil2001"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"KSunil2001"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"KSunil2001"},"content":"title: K Sunil Avinash\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"KSunil2001"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"KSunil2001"},"content":"### Project: MedInfo","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"KSunil2001"},"content":"MedInfo aims to solve the problem of slow, multiple step process of documenting patient medical records during in-processing and provide faster access to a particular patientâ€™s medical records for hospital admin staff.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"KSunil2001"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"KSunil2001"},"content":"- **New Feature**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"KSunil2001"},"content":"- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dksunil2001\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"KSunil2001"},"content":"- **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":"- **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"- **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"KSunil2001"},"content":"- **Tools**:","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"KSunil2001"},"content":"    - to be added soon","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"KSunil2001":30}},{"path":"docs/team/nramapurath.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"nramapurath"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"layout: page","lastModifiedDate":"2023-03-02"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"title: Navaneeth Ramapurath\u0027s Project Portfolio Page","lastModifiedDate":"2023-03-02"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":"---","lastModifiedDate":"2023-03-02"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"### Project: MedInfo","lastModifiedDate":"2023-03-02"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"MedInfo aims to solve the problem of slow, multiple step process of documenting patient medical records during in-processing and provide faster access to a particular patientâ€™s medical records for hospital admin staff.","lastModifiedDate":"2023-03-02"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-03-02"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"- **New Feature**","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"- **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dnramapurath\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"- **Project management**:","lastModifiedDate":"2023-03-02"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"- **Enhancements to existing features**:","lastModifiedDate":"2023-03-02"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"   - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":23,"author":{"gitId":"nramapurath"},"content":"- **Documentation**:","lastModifiedDate":"2023-03-02"},{"lineNumber":24,"author":{"gitId":"nramapurath"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":26,"author":{"gitId":"nramapurath"},"content":"- **Community**:","lastModifiedDate":"2023-03-02"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-02"},{"lineNumber":29,"author":{"gitId":"nramapurath"},"content":"- **Tools**:","lastModifiedDate":"2023-03-02"},{"lineNumber":30,"author":{"gitId":"nramapurath"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"}],"authorContributionMap":{"nramapurath":30}},{"path":"docs/team/yitong241.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"layout: page","lastModifiedDate":"2023-02-25"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"title: Sun Yitong\u0027s Project Portfolio Page","lastModifiedDate":"2023-02-25"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"---","lastModifiedDate":"2023-02-25"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"### Project: AddressBook Level 3","lastModifiedDate":"2023-02-25"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC.","lastModifiedDate":"2023-02-25"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"Given below are my contributions to the project.","lastModifiedDate":"2023-02-25"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"* **New Feature**:","lastModifiedDate":"2023-03-02"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2223s2.github.io/tp-dashboard/?search\u003dyitong241\u0026breakdown\u003dtrue)","lastModifiedDate":"2023-03-02"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"* **Project management**:","lastModifiedDate":"2023-02-25"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"* **Enhancements to existing features**:","lastModifiedDate":"2023-02-25"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"* **Documentation**:","lastModifiedDate":"2023-02-25"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"* **Community**:","lastModifiedDate":"2023-02-25"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"* **Tools**:","lastModifiedDate":"2023-02-25"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"  - to be added soon","lastModifiedDate":"2023-03-02"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-02-25"}],"authorContributionMap":{"yitong241":31}},{"path":"docs/tutorials/AddRemark.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Adding a command\"","lastModifiedDate":"2020-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"Let\u0027s walk you through the implementation of a new commandâ€‰â€”â€‰`remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required. The command should have the following format:","lastModifiedDate":"2020-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"`remark INDEX r/REMARK` (e.g., `remark 2 r/Likes baseball`)","lastModifiedDate":"2020-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"Weâ€™ll assume that you have already set up the development environment as outlined in the Developerâ€™s Guide.","lastModifiedDate":"2020-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Create a new `remark` command","lastModifiedDate":"2020-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Looking in the `logic.command` package, you will notice that each existing command have their own class. All the commands inherit from the abstract class `Command` which means that they must override `execute()`. Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`.","lastModifiedDate":"2020-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Letâ€™s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory.","lastModifiedDate":"2020-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"For now, letâ€™s keep `RemarkCommand` as simple as possible and print some output. We accomplish that by returning a `CommandResult` with an accompanying message.","lastModifiedDate":"2020-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":31,"author":{"gitId":"nramapurath"},"content":" * Changes the remark of an existing patient in the address book.","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"remark\";","lastModifiedDate":"2020-07-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2020-07-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return new CommandResult(\"Hello from remark\");","lastModifiedDate":"2020-07-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"### Hook `RemarkCommand` into the application","lastModifiedDate":"2020-07-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword. Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`.","lastModifiedDate":"2020-07-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"You can refer to the changes in this [diff](https://github.com/se-edu/addressbook-level3/commit/35eb7286f18a029d39cb7a29df8f172a001e4fd8#diff-399c284cb892c20b7c04a69116fcff6ccc0666c5230a1db8e4a9145def8fa4ee).","lastModifiedDate":"2022-01-02"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"### Run the application","lastModifiedDate":"2020-07-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"Run `Main#main` and try out your new `RemarkCommand`. If everything went well, you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"![Output displayed](../images/add-remark/RemarkHello.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"## Change `RemarkCommand` to throw an exception","lastModifiedDate":"2020-07-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do. Letâ€™s change the command to throw a `CommandException` to accurately reflect that our command is still a work in progress.","lastModifiedDate":"2020-12-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"![The relationship between RemarkCommand and Command](../images/add-remark/CommandInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"Following the convention in other commands, we add relevant messages as constants and use them.","lastModifiedDate":"2020-07-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2021-08-01"},{"lineNumber":68,"author":{"gitId":"nramapurath"},"content":"            + \": Edits the remark of the patient identified \"","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"nramapurath"},"content":"            + \"by the index number used in the last patient listing. \"","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            + \"Existing remark will be overwritten by the input.\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2020-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            + \"r/ [REMARK]\\n\"","lastModifiedDate":"2020-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2020-07-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            + \"r/ Likes to swim.\";","lastModifiedDate":"2020-07-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d","lastModifiedDate":"2021-08-01"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            \"Remark command not implemented yet\";","lastModifiedDate":"2021-08-01"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);","lastModifiedDate":"2020-07-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"## Enhancing `RemarkCommand`","lastModifiedDate":"2020-07-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` to parse input from the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":89,"author":{"gitId":"-"},"content":"### Make the command accept parameters","lastModifiedDate":"2020-07-29"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":91,"author":{"gitId":"-"},"content":"We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`. While we are at it, letâ€™s change the error message to echo the values. While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended.","lastModifiedDate":"2020-07-29"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":93,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":95,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"public class RemarkCommand extends Command {","lastModifiedDate":"2020-07-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private final String remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":104,"author":{"gitId":"nramapurath"},"content":"     * @param index of the patient in the filtered patient list to edit the remark","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nramapurath"},"content":"     * @param remark of the patient to be updated to","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    public RemarkCommand(Index index, String remark) {","lastModifiedDate":"2020-07-29"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        requireAllNonNull(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2020-07-29"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        this.remark \u003d remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        throw new CommandException(","lastModifiedDate":"2021-08-01"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));","lastModifiedDate":"2021-08-01"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2020-07-29"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2020-07-29"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2020-07-29"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2020-07-29"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2020-07-29"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        if (!(other instanceof RemarkCommand)) {","lastModifiedDate":"2020-07-29"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2020-07-29"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2020-07-29"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        RemarkCommand e \u003d (RemarkCommand) other;","lastModifiedDate":"2020-07-29"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2020-07-29"},{"lineNumber":134,"author":{"gitId":"-"},"content":"                \u0026\u0026 remark.equals(e.remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":136,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":137,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":139,"author":{"gitId":"-"},"content":"Your code should look something like [this](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-a8e35af8f9c251525063fae36c9852922a7e7195763018eacec60f3a4d87c594) after you are done.","lastModifiedDate":"2022-01-02"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":141,"author":{"gitId":"-"},"content":"### Parse user input","lastModifiedDate":"2020-07-29"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":143,"author":{"gitId":"-"},"content":"Now letâ€™s move on to writing a parser that will extract the index and remark from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":145,"author":{"gitId":"yitong241"},"content":"Create a `RemarkCommandParser` class in the `seedu.medinfo.logic.parser` package. The class must extend the `Parser` interface.","lastModifiedDate":"2023-03-30"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":147,"author":{"gitId":"-"},"content":"![The relationship between Parser and RemarkCommandParser](../images/add-remark/ParserInterface.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":149,"author":{"gitId":"-"},"content":"Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input. Letâ€™s take a look at the JavaDoc provided for the function to understand what it does.","lastModifiedDate":"2020-07-29"},{"lineNumber":150,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":151,"author":{"gitId":"-"},"content":"**`ArgumentTokenizer.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":153,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":154,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":155,"author":{"gitId":"-"},"content":" * Tokenizes an arguments string and returns an {@code ArgumentMultimap}","lastModifiedDate":"2020-07-29"},{"lineNumber":156,"author":{"gitId":"-"},"content":" * object that maps prefixes to their respective argument values. Only the","lastModifiedDate":"2020-07-29"},{"lineNumber":157,"author":{"gitId":"-"},"content":" * given prefixes will be recognized in the arguments string.","lastModifiedDate":"2020-07-29"},{"lineNumber":158,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2020-07-29"},{"lineNumber":159,"author":{"gitId":"-"},"content":" * @param argsString Arguments string of the form:","lastModifiedDate":"2020-07-29"},{"lineNumber":160,"author":{"gitId":"-"},"content":" * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2020-07-29"},{"lineNumber":161,"author":{"gitId":"-"},"content":" * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2020-07-29"},{"lineNumber":162,"author":{"gitId":"-"},"content":" * @return           ArgumentMultimap object that maps prefixes to their","lastModifiedDate":"2020-07-29"},{"lineNumber":163,"author":{"gitId":"-"},"content":" * arguments","lastModifiedDate":"2020-07-29"},{"lineNumber":164,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":165,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":167,"author":{"gitId":"-"},"content":"We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`. Now letâ€™s find out what we need to do in order to obtain the Index and String that we need. Letâ€™s look through `ArgumentMultimap` :","lastModifiedDate":"2020-07-29"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":169,"author":{"gitId":"-"},"content":"**`ArgumentMultimap.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":171,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2020-07-29"},{"lineNumber":173,"author":{"gitId":"-"},"content":" * Returns the last value of {@code prefix}.","lastModifiedDate":"2020-07-29"},{"lineNumber":174,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2020-07-29"},{"lineNumber":175,"author":{"gitId":"-"},"content":"public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2020-07-29"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2020-07-29"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    return values.isEmpty() ? Optional.empty() :","lastModifiedDate":"2020-07-29"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2020-07-29"},{"lineNumber":179,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":180,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":182,"author":{"gitId":"-"},"content":"This appears to be what we need to get a String of the remark. But what about the Index? Let\u0027s take a quick peek at existing `Command` that uses an index to see how it is done.","lastModifiedDate":"2020-07-29"},{"lineNumber":183,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":184,"author":{"gitId":"-"},"content":"**`DeleteCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":186,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":187,"author":{"gitId":"-"},"content":"Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":188,"author":{"gitId":"-"},"content":"return new DeleteCommand(index);","lastModifiedDate":"2020-07-29"},{"lineNumber":189,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":191,"author":{"gitId":"-"},"content":"There appears to be another utility class that obtains an `Index` from the input provided by the user.","lastModifiedDate":"2020-07-29"},{"lineNumber":192,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":193,"author":{"gitId":"-"},"content":"Now that we have the know-how to extract the data that we need from the userâ€™s input, we can parse the user command and create a new instance of `RemarkCommand`, as given below.","lastModifiedDate":"2020-07-29"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":195,"author":{"gitId":"-"},"content":"**`RemarkCommandParser.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":197,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":198,"author":{"gitId":"-"},"content":"public RemarkCommand parse(String args) throws ParseException {","lastModifiedDate":"2020-07-29"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    requireNonNull(args);","lastModifiedDate":"2020-07-29"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,","lastModifiedDate":"2020-07-29"},{"lineNumber":201,"author":{"gitId":"-"},"content":"        PREFIX_REMARK);","lastModifiedDate":"2020-07-29"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    Index index;","lastModifiedDate":"2020-07-29"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    try {","lastModifiedDate":"2020-07-29"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2020-07-29"},{"lineNumber":206,"author":{"gitId":"-"},"content":"    } catch (IllegalValueException ive) {","lastModifiedDate":"2020-07-29"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2020-07-29"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            RemarkCommand.MESSAGE_USAGE), ive);","lastModifiedDate":"2020-07-29"},{"lineNumber":209,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":211,"author":{"gitId":"-"},"content":"    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");","lastModifiedDate":"2020-07-29"},{"lineNumber":212,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":213,"author":{"gitId":"-"},"content":"    return new RemarkCommand(index, remark);","lastModifiedDate":"2020-07-29"},{"lineNumber":214,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":215,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":216,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":217,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":218,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":219,"author":{"gitId":"-"},"content":":information_source: Donâ€™t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!","lastModifiedDate":"2020-07-29"},{"lineNumber":220,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":221,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":223,"author":{"gitId":"-"},"content":"If you are stuck, check out the sample","lastModifiedDate":"2020-07-29"},{"lineNumber":224,"author":{"gitId":"-"},"content":"[here](https://github.com/se-edu/addressbook-level3/commit/dc6d5139d08f6403da0ec624ea32bd79a2ae0cbf#diff-8bf239e8e9529369b577701303ddd96af93178b4ed6735f91c2d8488b20c6b4a).","lastModifiedDate":"2022-01-02"},{"lineNumber":225,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":226,"author":{"gitId":"-"},"content":"## Add `Remark` to the model","lastModifiedDate":"2020-07-29"},{"lineNumber":227,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":228,"author":{"gitId":"nramapurath"},"content":"Now that we have all the information that we need, letâ€™s lay the groundwork for propagating the remarks added into the in-memory storage of patient data. We achieve that by working with the `Person` model. Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the patientâ€™s name). That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":230,"author":{"gitId":"-"},"content":"### Add a new `Remark` class","lastModifiedDate":"2020-07-29"},{"lineNumber":231,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":232,"author":{"gitId":"yitong241"},"content":"Create a new `Remark` in `seedu.medinfo.model.patient`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code.","lastModifiedDate":"2023-03-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":234,"author":{"gitId":"-"},"content":"A copy-paste and search-replace later, you should have something like [this](https://github.com/se-edu/addressbook-level3/commit/4516e099699baa9e2d51801bd26f016d812dedcc#diff-41bb13c581e280c686198251ad6cc337cd5e27032772f06ed9bf7f1440995ece). Note how `Remark` has no constrains and thus does not require input","lastModifiedDate":"2022-01-02"},{"lineNumber":235,"author":{"gitId":"-"},"content":"validation.","lastModifiedDate":"2020-07-29"},{"lineNumber":236,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":237,"author":{"gitId":"-"},"content":"### Make use of `Remark`","lastModifiedDate":"2020-07-29"},{"lineNumber":238,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":239,"author":{"gitId":"-"},"content":"Letâ€™s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`. These should be relatively simple changes.","lastModifiedDate":"2020-07-29"},{"lineNumber":240,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":241,"author":{"gitId":"-"},"content":"## Add a placeholder element for remark to the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":242,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":243,"author":{"gitId":"nramapurath"},"content":"Without getting too deep into `fxml`, letâ€™s go on a 5 minute adventure to get some placeholder text to show up for each patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":245,"author":{"gitId":"yitong241"},"content":"Simply add the following to [`seedu.medinfo.ui.PatientCard`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-639834f1e05afe2276a86372adf0fe5f69314642c2d93cfa543d614ce5a76688).","lastModifiedDate":"2023-03-30"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":247,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":249,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":250,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-07-29"},{"lineNumber":251,"author":{"gitId":"-"},"content":"private Label remark;","lastModifiedDate":"2020-07-29"},{"lineNumber":252,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":253,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":255,"author":{"gitId":"-"},"content":"`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML. It might sound like Greek to you right now, donâ€™t worryâ€‰â€”â€‰we will get back to it later.","lastModifiedDate":"2020-07-29"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Then insert the following into [`main/resources/view/PersonListCard.fxml`](https://github.com/se-edu/addressbook-level3/commit/850b78879582f38accb05dd20c245963c65ea599#diff-d44c4f51c24f6253c277a2bb9bc440b8064d9c15ad7cb7ceda280bca032efce9).","lastModifiedDate":"2022-01-02"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":259,"author":{"gitId":"-"},"content":"**`PersonListCard.fxml`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":261,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-07-29"},{"lineNumber":262,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":263,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":265,"author":{"gitId":"-"},"content":"Thatâ€™s it! Fire up the application again and you should see something like this:","lastModifiedDate":"2020-07-29"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":267,"author":{"gitId":"-"},"content":"![$remark shows up in each entry](../images/add-remark/$Remark.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":269,"author":{"gitId":"-"},"content":"## Modify `Person` to support a `Remark` field","lastModifiedDate":"2020-07-29"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":271,"author":{"gitId":"-"},"content":"Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!","lastModifiedDate":"2020-07-29"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":273,"author":{"gitId":"-"},"content":"### Modify `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":274,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":275,"author":{"gitId":"-"},"content":"We change the constructor of `Person` to take a `Remark`. We will also need to define new fields and accessors accordingly to store our new addition.","lastModifiedDate":"2020-07-29"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":277,"author":{"gitId":"-"},"content":"### Update other usages of `Person`","lastModifiedDate":"2020-07-29"},{"lineNumber":278,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":279,"author":{"gitId":"-"},"content":"Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":280,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":281,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":282,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":283,"author":{"gitId":"-"},"content":":bulb: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands.","lastModifiedDate":"2020-07-29"},{"lineNumber":284,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":285,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":286,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":287,"author":{"gitId":"-"},"content":"Refer to [this commit](https://github.com/se-edu/addressbook-level3/commit/ce998c37e65b92d35c91d28c7822cd139c2c0a5c) and check that you have got everything in order!","lastModifiedDate":"2020-07-29"},{"lineNumber":288,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":289,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":290,"author":{"gitId":"-"},"content":"## Updating Storage","lastModifiedDate":"2020-07-29"},{"lineNumber":291,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":292,"author":{"gitId":"-"},"content":"AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external libraryâ€‰â€”â€‰Jackson. Letâ€™s update `JsonAdaptedPerson` to work with our new `Person`!","lastModifiedDate":"2020-07-29"},{"lineNumber":293,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":294,"author":{"gitId":"-"},"content":"While the changes to code may be minimal, the test data will have to be updated as well.","lastModifiedDate":"2020-07-29"},{"lineNumber":295,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":296,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":298,"author":{"gitId":"-"},"content":":exclamation: You must delete AddressBookâ€™s storage file located at `/data/addressbook.json` before running it! Not doing so will cause AddressBook to default to an empty address book!","lastModifiedDate":"2020-07-29"},{"lineNumber":299,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":300,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-07-29"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":302,"author":{"gitId":"-"},"content":"Check out [this commit](https://github.com/se-edu/addressbook-level3/commit/556cbd0e03ff224d7a68afba171ad2eb0ce56bbf)","lastModifiedDate":"2020-07-29"},{"lineNumber":303,"author":{"gitId":"-"},"content":"to see what the changes entail.","lastModifiedDate":"2020-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":305,"author":{"gitId":"-"},"content":"## Finalizing the UI","lastModifiedDate":"2020-07-29"},{"lineNumber":306,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":307,"author":{"gitId":"-"},"content":"Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI.","lastModifiedDate":"2020-07-29"},{"lineNumber":308,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":309,"author":{"gitId":"-"},"content":"Just add [this one line of code!](https://github.com/se-edu/addressbook-level3/commit/5b98fee11b6b3f5749b6b943c4f3bd3aa049b692)","lastModifiedDate":"2020-07-29"},{"lineNumber":310,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":311,"author":{"gitId":"-"},"content":"**`PersonCard.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":313,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":314,"author":{"gitId":"nramapurath"},"content":"public PersonCard(Person patient, int displayedIndex) {","lastModifiedDate":"2023-03-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"    //...","lastModifiedDate":"2020-07-29"},{"lineNumber":316,"author":{"gitId":"nramapurath"},"content":"    remark.setText(patient.getRemark().value);","lastModifiedDate":"2023-03-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-07-29"},{"lineNumber":318,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":320,"author":{"gitId":"-"},"content":"![The remark label is bound properly!](../images/add-remark/RemarkBound.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":321,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":322,"author":{"gitId":"-"},"content":"## Putting everything together","lastModifiedDate":"2020-07-29"},{"lineNumber":323,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":324,"author":{"gitId":"-"},"content":"After the previous step, we notice a peculiar regressionâ€‰â€”â€‰we went from displaying something to nothing at all. However, this is expected behavior as we are yet to update the `RemarkCommand` to make use of the code we\u0027ve been adding in the last few steps.","lastModifiedDate":"2020-07-29"},{"lineNumber":325,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":326,"author":{"gitId":"-"},"content":"### Update `RemarkCommand` and `RemarkCommandParser`","lastModifiedDate":"2020-07-29"},{"lineNumber":327,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":328,"author":{"gitId":"-"},"content":"In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`. Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and","lastModifiedDate":"2020-07-29"},{"lineNumber":329,"author":{"gitId":"-"},"content":"save it with `Model#setPerson()`.","lastModifiedDate":"2020-07-29"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"**`RemarkCommand.java`:**","lastModifiedDate":"2020-07-29"},{"lineNumber":332,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":333,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-07-29"},{"lineNumber":334,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":335,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";","lastModifiedDate":"2020-07-29"},{"lineNumber":337,"author":{"gitId":"-"},"content":"//...","lastModifiedDate":"2020-07-29"},{"lineNumber":338,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2020-07-29"},{"lineNumber":339,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-07-29"},{"lineNumber":340,"author":{"gitId":"-"},"content":"        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();","lastModifiedDate":"2020-07-29"},{"lineNumber":341,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":342,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2020-07-29"},{"lineNumber":343,"author":{"gitId":"-"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);","lastModifiedDate":"2020-07-29"},{"lineNumber":344,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-07-29"},{"lineNumber":345,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":346,"author":{"gitId":"nramapurath"},"content":"        Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-08"},{"lineNumber":347,"author":{"gitId":"nramapurath"},"content":"        Person editedPatient \u003d new Person(","lastModifiedDate":"2023-03-08"},{"lineNumber":348,"author":{"gitId":"nramapurath"},"content":"                patientToEdit.getName(), patientToEdit.getPhone(), patientToEdit.getEmail(),","lastModifiedDate":"2023-03-08"},{"lineNumber":349,"author":{"gitId":"nramapurath"},"content":"                patientToEdit.getAddress(), remark, patientToEdit.getTags());","lastModifiedDate":"2023-03-08"},{"lineNumber":350,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":351,"author":{"gitId":"nramapurath"},"content":"        model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":352,"author":{"gitId":"-"},"content":"        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-07-29"},{"lineNumber":353,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":354,"author":{"gitId":"nramapurath"},"content":"        return new CommandResult(generateSuccessMessage(editedPatient));","lastModifiedDate":"2023-03-08"},{"lineNumber":355,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":356,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":357,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-07-29"},{"lineNumber":358,"author":{"gitId":"-"},"content":"     * Generates a command execution success message based on whether","lastModifiedDate":"2021-08-01"},{"lineNumber":359,"author":{"gitId":"-"},"content":"     * the remark is added to or removed from","lastModifiedDate":"2021-08-01"},{"lineNumber":360,"author":{"gitId":"nramapurath"},"content":"     * {@code patientToEdit}.","lastModifiedDate":"2023-03-08"},{"lineNumber":361,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-07-29"},{"lineNumber":362,"author":{"gitId":"nramapurath"},"content":"    private String generateSuccessMessage(Person patientToEdit) {","lastModifiedDate":"2023-03-08"},{"lineNumber":363,"author":{"gitId":"-"},"content":"        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;","lastModifiedDate":"2020-07-29"},{"lineNumber":364,"author":{"gitId":"nramapurath"},"content":"        return String.format(message, patientToEdit);","lastModifiedDate":"2023-03-08"},{"lineNumber":365,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-07-29"},{"lineNumber":366,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-07-29"},{"lineNumber":367,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":368,"author":{"gitId":"-"},"content":"![Congratulations!](../images/add-remark/RemarkComplete.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":369,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":370,"author":{"gitId":"-"},"content":"## Writing tests","lastModifiedDate":"2020-07-29"},{"lineNumber":371,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":372,"author":{"gitId":"-"},"content":"Tests are crucial to ensuring that bugs donâ€™t slip into the codebase unnoticed. This is especially true for large code bases where a change might lead to unintended behavior.","lastModifiedDate":"2020-07-29"},{"lineNumber":373,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":374,"author":{"gitId":"-"},"content":"Letâ€™s verify the correctness of our code by writing some tests!","lastModifiedDate":"2020-07-29"},{"lineNumber":375,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":376,"author":{"gitId":"-"},"content":"Of course you can simply add the test cases manually, like you\u0027ve been doing all along this tutorial. The result would be like the test cases in [here](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01). Alternatively, you can get the help of IntelliJ to generate the skeletons of the test cases, as explained in the next section.","lastModifiedDate":"2022-01-02"},{"lineNumber":377,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":378,"author":{"gitId":"-"},"content":"### Automatically generating tests","lastModifiedDate":"2020-07-29"},{"lineNumber":379,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":380,"author":{"gitId":"-"},"content":"The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected.","lastModifiedDate":"2020-07-29"},{"lineNumber":381,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":382,"author":{"gitId":"-"},"content":"The convention for test names is `methodName_testScenario_expectedResult`. An example would be","lastModifiedDate":"2020-07-29"},{"lineNumber":383,"author":{"gitId":"-"},"content":"`execute_filteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":384,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":385,"author":{"gitId":"-"},"content":"Letâ€™s create a test for `RemarkCommand#execute()` to test that adding a remark works. On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \\\u003e `Test` or use the appropriate keyboard shortcut.","lastModifiedDate":"2020-07-29"},{"lineNumber":386,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":387,"author":{"gitId":"-"},"content":"![Using the context menu to jump to tests](../images/add-remark/ContextMenu.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":388,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":389,"author":{"gitId":"-"},"content":"Then, create a test for the `execute` method.","lastModifiedDate":"2020-07-29"},{"lineNumber":390,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":391,"author":{"gitId":"-"},"content":"![Creating a test for `execute`.](../images/add-remark/CreateTest.png)","lastModifiedDate":"2020-07-29"},{"lineNumber":392,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":393,"author":{"gitId":"-"},"content":"Following convention, letâ€™s change the name of the generated method to `execute_addRemarkUnfilteredList_success`.","lastModifiedDate":"2020-07-29"},{"lineNumber":394,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":395,"author":{"gitId":"-"},"content":"Letâ€™s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message. In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`.","lastModifiedDate":"2020-07-29"},{"lineNumber":396,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":397,"author":{"gitId":"-"},"content":"You should end up with a test that looks something like [this](https://github.com/se-edu/addressbook-level3/commit/fac8f3fd855d55831ca0cc73313b5943d49d4d6e#diff-ff58f7c10338b34f76645df49b71ecb2bafaf7611b20e7ff59ebc98475538a01R36-R49).","lastModifiedDate":"2022-01-02"},{"lineNumber":398,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":399,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-07-29"},{"lineNumber":400,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-07-29"},{"lineNumber":401,"author":{"gitId":"-"},"content":"This concludes the tutorial for adding a new `Command` to AddressBook.","lastModifiedDate":"2020-07-29"}],"authorContributionMap":{"nramapurath":18,"yitong241":6,"-":377}},{"path":"docs/tutorials/RemovingFields.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Removing Fields\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Antoine de Saint-Exupery","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When working on an existing code base, you will most likely find that some features that are no longer necessary.","lastModifiedDate":"2021-08-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"This tutorial aims to give you some practice on such a code \u0027removal\u0027 activity by removing the `address` field from `Person` class.","lastModifiedDate":"2021-08-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-success\"\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-08-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"**If you have done the [Add `remark` command tutorial](AddRemark.html)  already**, you should know where the code had to be updated to add the field `remark`. From that experience, you can deduce where the code needs to be changed to _remove_ that field too. The removing of the `address` field can be done similarly.","lastModifiedDate":"2021-08-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cbr\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"However, if you have no such prior knowledge, removing a field can take a quite a bit of detective work. This tutorial takes you through that process. **At least have a read even if you don\u0027t actually do the steps yourself.**","lastModifiedDate":"2021-08-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-08-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"## Safely deleting `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"IntelliJ IDEA provides a refactoring tool that can identify *most* parts of a removal easily. Letâ€™s try to use it as much as we can.","lastModifiedDate":"2021-08-01"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"### Assisted refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"The `address` field in `Person` is actually an instance of the `seedu.medinfo.model.patient.Address` class. Since removing the `Address` class will break the application, we start by identifying `Address`\u0027s usages. This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis. Right-click the `Address` class and select `Refactor` \\\u003e `Safe Delete` through the menu.","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"* :bulb: To make things simpler, you can unselect the options `Search in comments and strings` and `Search for text occurrences`","lastModifiedDate":"2021-08-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"![Usages detected](../images/remove/UnsafeDelete.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`. These conflicts describe locations in which the `Address` class is used.","lastModifiedDate":"2020-05-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"![List of conflicts](../images/remove/SafeDeleteConflicts.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"Remove usages of `Address` by performing `Safe Delete`s on each entry i.e., double-click on the entry (which takes you to the code in concern, right-click on that entity, and choose `Refactor` -\u003e `Safe delete` as before). You will need to exercise discretion when removing usages of `Address`. Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well. Other usages like in `EditPersonDescriptor` may require more careful inspection.","lastModifiedDate":"2021-08-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"Letâ€™s try removing references to `Address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"1. Safe delete the field `address` in `EditPersonDescriptor`.","lastModifiedDate":"2020-05-23"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":46,"author":{"gitId":"-"},"content":"1. Select `Yes` when prompted to remove getters and setters.","lastModifiedDate":"2020-05-23"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":48,"author":{"gitId":"-"},"content":"1. Select `View Usages` again.\u003cbr\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":49,"author":{"gitId":"-"},"content":"   ![UnsafeDeleteOnField](../images/remove/UnsafeDeleteOnField.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":51,"author":{"gitId":"-"},"content":"1. Remove the usages of `address` and select `Do refactor` when you are done.","lastModifiedDate":"2020-05-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":53,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"   :bulb: **Tip:** Removing usages may result in errors. Exercise discretion and fix them. For example, removing the `address` field from the `Person` class will require you to modify its constructor.","lastModifiedDate":"2020-05-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":58,"author":{"gitId":"-"},"content":"1. Repeat the steps for the remaining usages of `Address`","lastModifiedDate":"2020-05-23"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"After you are done, verify that the application still works by compiling and running it again.","lastModifiedDate":"2020-05-23"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":62,"author":{"gitId":"-"},"content":"### Manual refactoring","lastModifiedDate":"2020-05-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":64,"author":{"gitId":"-"},"content":"Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify. You can find them by searching for instances of the word `address` in your code (`Edit` \\\u003e `Find` \\\u003e `Find in path`).","lastModifiedDate":"2020-05-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"Places of interest to look out for would be resources used by the application. `main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data. For example, there is a `$address` in each `PersonCard` that has not been removed nor identified.","lastModifiedDate":"2020-05-23"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":68,"author":{"gitId":"-"},"content":"![$address](../images/remove/$address.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":70,"author":{"gitId":"-"},"content":"A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring.","lastModifiedDate":"2020-05-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"**`PersonCard.java`**","lastModifiedDate":"2020-05-23"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":74,"author":{"gitId":"-"},"content":"``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":75,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":76,"author":{"gitId":"-"},"content":"@FXML","lastModifiedDate":"2020-05-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"private Label address;","lastModifiedDate":"2020-05-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"**`PersonCard.fxml`**","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"``` xml","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"After removing the `Label`, we can proceed to formally test our code. If everything went well, you should have most of your tests pass. Fix any remaining errors until the tests all pass.","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"## Tidying up","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"At this point, your application is working as intended and all your tests are passing. Whatâ€™s left to do is to clean up references to `Address` in test data and documentation.","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"In `src/test/data/`, data meant for testing purposes are stored. While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate.","lastModifiedDate":"2020-05-23"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"**`invalidPersonAddressBook.json`:**","lastModifiedDate":"2020-05-23"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"```json","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"{","lastModifiedDate":"2020-05-23"},{"lineNumber":103,"author":{"gitId":"nramapurath"},"content":"  \"patients\": [ {","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\",","lastModifiedDate":"2020-05-23"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    \"phone\": \"9482424\",","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    \"email\": \"hans@example.com\",","lastModifiedDate":"2020-05-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    \"address\": \"4th street\"","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"  } ]","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-23"},{"lineNumber":110,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"You can go through each individual `json` file and manually remove the `address` field.","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"nramapurath":1,"yitong241":1,"-":110}},{"path":"docs/tutorials/TracingCode.md","fileType":"docs","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"layout: page","lastModifiedDate":"2020-05-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"title: \"Tutorial: Tracing code\"","lastModifiedDate":"2020-05-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"---","lastModifiedDate":"2020-05-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003e Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as part of the effort to write new code. â€¦â€‹\\[Therefore,\\] making it easy to read makes it easier to write.","lastModifiedDate":"2020-05-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003e â€”  Robert C. Martin Clean Code: A Handbook of Agile Software Craftsmanship","lastModifiedDate":"2020-05-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution path through the code base. One easy way to trace an execution path is to use a debugger to step through the code. In this tutorial, you will be using the IntelliJ IDEAâ€™s debugger to trace the execution path of a specific user command.","lastModifiedDate":"2020-05-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"* Table of Contents","lastModifiedDate":"2020-05-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"{:toc}","lastModifiedDate":"2020-05-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Before we start","lastModifiedDate":"2020-05-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the architecture diagram (reproduced below), tells us that the App consists of several components.","lastModifiedDate":"2020-05-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"![ArchitectureDiagram](../images/ArchitectureDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App.","lastModifiedDate":"2020-05-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Note how the diagram shows only the execution flows _between_ the main components. That is, it does not show details of the execution path *inside* each component. By hiding those details, the diagram aims to inform the reader about the overall execution path of a command without overwhelming the reader with too much details. In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of how the code works.","lastModifiedDate":"2021-07-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":27,"author":{"gitId":"-"},"content":"Before we proceed, ensure that you have done the following:","lastModifiedDate":"2020-05-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"1. Read the [*Architecture* section of the DG](../DeveloperGuide.md#architecture)","lastModifiedDate":"2020-05-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"1. Set up the project in Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"1. Learn basic debugging features of Intellij IDEA","lastModifiedDate":"2020-05-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"   * If you are using a different IDE, we\u0027ll leave it to you to figure out the equivalent feature to use in your IDE.","lastModifiedDate":"2021-07-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"   * If you are not using an IDE, we\u0027ll let you figure out how to achieve the same using your coding toolchain.","lastModifiedDate":"2021-07-31"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Setting a breakpoint","lastModifiedDate":"2020-05-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":36,"author":{"gitId":"-"},"content":"As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution. For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement of the `main` method.","lastModifiedDate":"2021-07-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"In our case, we would want to begin the tracing at the very point where the App start processing user input (i.e., somewhere in the UI component), and then trace through how the execution proceeds through the UI component. However, the execution path through a GUI is often somewhat obscure due to various *event-driven mechanisms* used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the `UI` transfers control to the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":40,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ArchitectureSequenceDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"According to the sequence diagram you saw earlier (and repeated above for reference), the `UI` component yields control to the `Logic` component through a method named `execute`. Searching through the code base for an `execute()` method that belongs to the `Logic` component yields a promising candidate in `seedu.medinfo.logic.Logic`.","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":44,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/tracing/searchResultsForExecuteMethod.png\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Search Everywhere**\u0027 feature](https://www.jetbrains.com/help/idea/searching-everywhere.html) can be used here. In particular, the \u0027**Find Symbol**\u0027 (\u0027Symbol\u0027 here refers to methods, variables, classes etc.) variant of that feature is quite useful here as we are looking for a _method_ named `execute`, not simply the text `execute`.","lastModifiedDate":"2021-07-31"},{"lineNumber":49,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"A quick look at the `seedu.medinfo.logic.Logic` (an extract given below) confirms that this indeed might be what weâ€™re looking for.","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"```java","lastModifiedDate":"2021-07-31"},{"lineNumber":54,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2021-07-31"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2021-07-31"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2021-07-31"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2021-07-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2021-07-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2021-07-31"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2021-07-31"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2021-07-31"},{"lineNumber":63,"author":{"gitId":"-"},"content":"...","lastModifiedDate":"2021-07-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2021-07-31"},{"lineNumber":65,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-31"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":67,"author":{"gitId":"-"},"content":"But apparently, this is an interface, not a concrete implementation.","lastModifiedDate":"2021-07-31"},{"lineNumber":68,"author":{"gitId":"-"},"content":"That should be fine because the [Architecture section of the Developer Guide](../DeveloperGuide.html#architecture) tells us that components interact through interfaces. Here\u0027s the relevant diagram:","lastModifiedDate":"2021-07-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":70,"author":{"gitId":"-"},"content":"\u003cimg src\u003d\"../images/ComponentManagers.png\" width\u003d\"300\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Next, let\u0027s find out which statement(s) in the `UI` code is calling this method, thus transferring control from the `UI` to the `Logic`.","lastModifiedDate":"2021-07-31"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":74,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":76,"author":{"gitId":"-"},"content":":bulb: **Intellij Tip:** The [\u0027**Find Usages**\u0027 feature](https://www.jetbrains.com/help/idea/find-highlight-usages.html#find-usages) can find from which parts of the code a class/method/variable is being used.","lastModifiedDate":"2021-07-31"},{"lineNumber":77,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"![`Find Usages` tool window. `Edit` \\\u003e `Find` \\\u003e `Find Usages`.](../images/tracing/FindUsages.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"Bingo\\! `MainWindow#executeCommand()` seems to be exactly what weâ€™re looking for\\!","lastModifiedDate":"2020-05-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"Now letâ€™s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left gutter to set a breakpoint, as shown below.","lastModifiedDate":"2020-05-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":" ![LeftGutter](../images/tracing/LeftGutter.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":86,"author":{"gitId":"-"},"content":"## Tracing the execution path","lastModifiedDate":"2020-05-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]â€¦â€‹` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`.","lastModifiedDate":"2020-05-23"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":90,"author":{"gitId":"-"},"content":"\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":92,"author":{"gitId":"-"},"content":":bulb: **Tip:** Over the course of the debugging session, you will encounter every major component in the application. Try to keep track of what happens inside the component and where the execution transfers to another component.","lastModifiedDate":"2021-07-31"},{"lineNumber":93,"author":{"gitId":"-"},"content":"\u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":95,"author":{"gitId":"-"},"content":"1. To start the debugging session, simply `Run` \\\u003e `Debug Main`","lastModifiedDate":"2020-05-23"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":97,"author":{"gitId":"-"},"content":"1. When the GUI appears, enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`.","lastModifiedDate":"2021-07-31"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"1. The Debugger tool window should show up and show something like this:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":100,"author":{"gitId":"-"},"content":"   ![DebuggerStep1](../images/tracing/DebuggerStep1.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":102,"author":{"gitId":"-"},"content":"1. Use the _Show execution point_ feature to jump to the line of code that we stopped at:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":103,"author":{"gitId":"-"},"content":"   ![ShowExecutionPoint](../images/tracing/ShowExecutionPoint.png)\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":104,"author":{"gitId":"-"},"content":"   `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at (i.e., the place where we put the breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":106,"author":{"gitId":"-"},"content":"1. We are interested in the `logic.execute(commandText)` portion of that line so letâ€™s _Step in_ into that method call:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    ![StepInto](../images/tracing/StepInto.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"1. We end up in `LogicManager#execute()` (not `Logic#execute` -- but this is expected because we know the `execute()` method in the `Logic` interface is actually implemented by the `LogicManager` class). Letâ€™s take a look at the body of the method. Given below is the same code, with additional explanatory comments.","lastModifiedDate":"2021-07-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":111,"author":{"gitId":"-"},"content":"   **LogicManager\\#execute().**","lastModifiedDate":"2020-05-23"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":113,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":114,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":115,"author":{"gitId":"-"},"content":"   public CommandResult execute(String commandText)","lastModifiedDate":"2020-05-23"},{"lineNumber":116,"author":{"gitId":"-"},"content":"           throws CommandException, ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        //Logging, safe to ignore","lastModifiedDate":"2020-05-23"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2020-05-23"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Parse user input from String to a Command","lastModifiedDate":"2020-05-23"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        Command command \u003d addressBookParser.parseCommand(commandText);","lastModifiedDate":"2020-05-23"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        //Executes the Command and stores the result","lastModifiedDate":"2020-05-23"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2020-05-23"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2020-05-23"},{"lineNumber":128,"author":{"gitId":"-"},"content":"            //We can deduce that the previous line of code modifies model in some way","lastModifiedDate":"2020-05-23"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            // since it\u0027s being stored here.","lastModifiedDate":"2020-05-23"},{"lineNumber":130,"author":{"gitId":"-"},"content":"            storage.saveAddressBook(model.getAddressBook());","lastModifiedDate":"2020-05-23"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2020-05-23"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2020-05-23"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-05-23"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2020-05-23"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":137,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":139,"author":{"gitId":"-"},"content":"1. `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Letâ€™s take a closer look at each one.","lastModifiedDate":"2020-05-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"1. _Step over_ the logging code since it is of no interest to us now.","lastModifiedDate":"2021-07-31"},{"lineNumber":142,"author":{"gitId":"-"},"content":"   ![StepOver](../images/tracing/StepOver.png)","lastModifiedDate":"2021-07-31"},{"lineNumber":143,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":144,"author":{"gitId":"-"},"content":"1. _Step into_ the line where user input in parsed from a String to a Command, which should bring you to the `AddressBookParser#parseCommand()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":145,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":146,"author":{"gitId":"-"},"content":"   public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2020-05-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":148,"author":{"gitId":"-"},"content":"       final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2020-05-23"},{"lineNumber":149,"author":{"gitId":"-"},"content":"       final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2020-05-23"},{"lineNumber":150,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":151,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":153,"author":{"gitId":"-"},"content":"1. _Step over_ the statements in that method until you reach the `switch` statement. The \u0027Variables\u0027 window now shows the value of both `commandWord` and `arguments`:\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    ![Variables](../images/tracing/Variables.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":156,"author":{"gitId":"-"},"content":"1. We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way.","lastModifiedDate":"2020-05-23"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":158,"author":{"gitId":"-"},"content":"1. Stepping through the `switch` block, we end up at a call to `EditCommandParser().parse()` as expected (because the command we typed is an edit command).","lastModifiedDate":"2021-07-31"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":160,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    case EditCommand.COMMAND_WORD:","lastModifiedDate":"2020-05-23"},{"lineNumber":163,"author":{"gitId":"-"},"content":"        return new EditCommandParser().parse(arguments);","lastModifiedDate":"2020-05-23"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    ...","lastModifiedDate":"2020-05-23"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":167,"author":{"gitId":"-"},"content":"1. Letâ€™s see what `EditCommandParser#parse()` does by stepping into it. You might have to click the \u0027step into\u0027 button multiple times here because there are two method calls in that statement: `EditCommandParser()` and `parse()`.","lastModifiedDate":"2021-07-31"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":169,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** Sometimes, you might end up stepping into functions that are not of interest. Simply use the `step out` button to get out of them!","lastModifiedDate":"2021-07-31"},{"lineNumber":170,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2020-05-23"},{"lineNumber":171,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":172,"author":{"gitId":"-"},"content":"1. Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to obtain the arguments and index required.","lastModifiedDate":"2021-07-31"},{"lineNumber":173,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":174,"author":{"gitId":"-"},"content":"1. The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit` command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of `editPersonDesciptor` through the \u0027Variables\u0027 window.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":175,"author":{"gitId":"-"},"content":"   ![EditCommand](../images/tracing/EditCommand.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":177,"author":{"gitId":"-"},"content":"1. As you just traced through some code involved in parsing a command, you can take a look at this class diagram to see where the various parsing-related classes you encountered fit into the design of the `Logic` component.","lastModifiedDate":"2021-07-31"},{"lineNumber":178,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/ParserClasses.png\" width\u003d\"600\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":180,"author":{"gitId":"-"},"content":"1. Letâ€™s continue stepping through until we return to `LogicManager#execute()`.","lastModifiedDate":"2020-05-23"},{"lineNumber":181,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    The sequence diagram below shows the details of the execution path through the Logic component. Does the execution path you traced in the code so far match the diagram?\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":183,"author":{"gitId":"-"},"content":"    ![Tracing an `edit` command through the Logic component](../images/tracing/LogicSequenceDiagram.png)","lastModifiedDate":"2020-05-23"},{"lineNumber":184,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":185,"author":{"gitId":"-"},"content":"1. Now, step over until you read the statement that calls the `execute()` method of the `EditCommand` object received, and step into that `execute()` method (partial code given below):","lastModifiedDate":"2021-07-31"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":187,"author":{"gitId":"-"},"content":"   **`EditCommand#execute()`:**","lastModifiedDate":"2021-07-31"},{"lineNumber":188,"author":{"gitId":"-"},"content":"   ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":189,"author":{"gitId":"-"},"content":"   @Override","lastModifiedDate":"2020-05-23"},{"lineNumber":190,"author":{"gitId":"-"},"content":"   public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2020-05-23"},{"lineNumber":191,"author":{"gitId":"-"},"content":"       ...","lastModifiedDate":"2020-05-23"},{"lineNumber":192,"author":{"gitId":"nramapurath"},"content":"       Person patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"KSunil2001"},"content":"       Person editedPatient \u003d createEditedPerson(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":194,"author":{"gitId":"nramapurath"},"content":"       if (!patientToEdit.isSamePerson(editedPatient) \u0026\u0026 model.hasPerson(editedPatient)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":"           throw new CommandException(MESSAGE_DUPLICATE_PERSON);","lastModifiedDate":"2020-05-23"},{"lineNumber":196,"author":{"gitId":"-"},"content":"       }","lastModifiedDate":"2020-05-23"},{"lineNumber":197,"author":{"gitId":"nramapurath"},"content":"       model.setPerson(patientToEdit, editedPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"       model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);","lastModifiedDate":"2020-05-23"},{"lineNumber":199,"author":{"gitId":"nramapurath"},"content":"       return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPatient));","lastModifiedDate":"2023-03-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"   }","lastModifiedDate":"2020-05-23"},{"lineNumber":201,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-23"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":203,"author":{"gitId":"-"},"content":"1. As suspected, `command#execute()` does indeed make changes to the `model` object. Specifically,","lastModifiedDate":"2021-07-31"},{"lineNumber":204,"author":{"gitId":"nramapurath"},"content":"   * it uses the `setPerson()` method (defined in the interface `Model` and implemented in `ModelManager` as per the usual pattern) to update the patient data.","lastModifiedDate":"2023-03-08"},{"lineNumber":205,"author":{"gitId":"nramapurath"},"content":"   * it uses the `updateFilteredPersonList` method to ask the `Model` to populate the \u0027filtered list\u0027 with _all_ patients.\u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":206,"author":{"gitId":"nramapurath"},"content":"     FYI, The \u0027filtered list\u0027 is the list of patients resulting from the most recent operation that will be shown to the user immediately after. For the `edit` command, we populate it with all the patients so that the user can see the edited patient along with all other patients. If this was a `find` command, we would be setting that list to contain the search results instead.\u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":207,"author":{"gitId":"nramapurath"},"content":"     To provide some context, given below is the class diagram of the `Model` component. See if you can figure out where the \u0027filtered list\u0027 of patients is being tracked.","lastModifiedDate":"2023-03-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"     \u003cimg src\u003d\"../images/ModelClassDiagram.png\" width\u003d\"450\" /\u003e\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Model` component section of the DG](../DeveloperGuide.html#model-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":211,"author":{"gitId":"-"},"content":"1. As you step through the rest of the statements in the `EditCommand#execute()` method, you\u0027ll see that it creates a `CommandResult` object (containing information about the result of the execution) and returns it.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":212,"author":{"gitId":"-"},"content":"   Advancing the debugger by one more step should take you back to the middle of the `LogicManager#execute()` method.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":213,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":214,"author":{"gitId":"-"},"content":"1. Given that you have already seen quite a few classes in the `Logic` component in action, see if you can identify in this partial class diagram some of the classes you\u0027ve encountered so far, and see how they fit into the class structure of the `Logic` component:","lastModifiedDate":"2021-07-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"    \u003cimg src\u003d\"../images/LogicClassDiagram.png\" width\u003d\"550\"/\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Logic` component section of the DG](../DeveloperGuide.html#logic-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":217,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":218,"author":{"gitId":"-"},"content":"1. Similar to before, you can step over/into statements in the `LogicManager#execute()` method to examine how the control is transferred to the `Storage` component and what happens inside that component.","lastModifiedDate":"2021-07-31"},{"lineNumber":219,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":220,"author":{"gitId":"-"},"content":"   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Intellij Tip:** When trying to step into a statement such as `storage.saveAddressBook(model.getAddressBook())` which contains multiple method calls, Intellij will let you choose (by clicking) which one you want to step into.","lastModifiedDate":"2021-07-31"},{"lineNumber":221,"author":{"gitId":"-"},"content":"   \u003c/div\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":223,"author":{"gitId":"-"},"content":"1.  As you step through the code inside the `Storage` component, you will eventually arrive at the `JsonAddressBook#saveAddressBook()` method which calls the `JsonSerializableAddressBook` constructor, to create an object that can be _serialized_ (i.e., stored in storage medium) in JSON format. That constructor is given below (with added line breaks for easier readability):","lastModifiedDate":"2021-07-31"},{"lineNumber":224,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":225,"author":{"gitId":"-"},"content":"    **`JsonSerializableAddressBook` constructor:**","lastModifiedDate":"2021-07-31"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":227,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-23"},{"lineNumber":228,"author":{"gitId":"-"},"content":"     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use.","lastModifiedDate":"2020-05-23"},{"lineNumber":229,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2020-05-23"},{"lineNumber":230,"author":{"gitId":"-"},"content":"     * @param source future changes to this will not affect the created","lastModifiedDate":"2020-05-23"},{"lineNumber":231,"author":{"gitId":"-"},"content":"     * {@code JsonSerializableAddressBook}.","lastModifiedDate":"2020-05-23"},{"lineNumber":232,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-23"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {","lastModifiedDate":"2020-05-23"},{"lineNumber":234,"author":{"gitId":"nramapurath"},"content":"        patients.addAll(","lastModifiedDate":"2023-03-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"            source.getPersonList()","lastModifiedDate":"2020-05-23"},{"lineNumber":236,"author":{"gitId":"-"},"content":"                  .stream()","lastModifiedDate":"2020-05-23"},{"lineNumber":237,"author":{"gitId":"-"},"content":"                  .map(JsonAdaptedPerson::new)","lastModifiedDate":"2020-05-23"},{"lineNumber":238,"author":{"gitId":"-"},"content":"                  .collect(Collectors.toList()));","lastModifiedDate":"2020-05-23"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":242,"author":{"gitId":"-"},"content":"1. It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the `JsonSerializableAddressBook`.","lastModifiedDate":"2020-05-23"},{"lineNumber":243,"author":{"gitId":"-"},"content":"   This is because regular Java objects need to go through an _adaptation_ for them to be suitable to be saved in JSON format.","lastModifiedDate":"2021-07-31"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":245,"author":{"gitId":"-"},"content":"1. While you are stepping through the classes in the `Storage` component, here is the component\u0027s class diagram to help you understand how those classes fit into the structure of the component.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":246,"author":{"gitId":"-"},"content":"   \u003cimg src\u003d\"../images/StorageClassDiagram.png\" width\u003d\"550\" /\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":247,"author":{"gitId":"-"},"content":"   * :bulb: This may be a good time to read through the [`Storage` component section of the DG](../DeveloperGuide.html#storage-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":248,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":249,"author":{"gitId":"-"},"content":"1. We can continue to step through until you reach the end of the `LogicManager#execute()` method and return to the `MainWindow#executeCommand()` method (the place where we put the original breakpoint).","lastModifiedDate":"2021-07-31"},{"lineNumber":250,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":251,"author":{"gitId":"-"},"content":"1. Stepping into `resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());`, we end up in:","lastModifiedDate":"2021-07-31"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":253,"author":{"gitId":"-"},"content":"    **`ResultDisplay#setFeedbackToUser()`**","lastModifiedDate":"2021-07-31"},{"lineNumber":254,"author":{"gitId":"-"},"content":"    ``` java","lastModifiedDate":"2020-05-23"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2020-05-23"},{"lineNumber":256,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":257,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2020-05-23"},{"lineNumber":258,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-23"},{"lineNumber":259,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2020-05-23"},{"lineNumber":260,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":261,"author":{"gitId":"-"},"content":"1. Finally, you can step through until you reach the end of`MainWindow#executeCommand()`.\u003cbr\u003e","lastModifiedDate":"2021-07-31"},{"lineNumber":262,"author":{"gitId":"-"},"content":"   :bulb: This may be a good time to read through the [`UI` component section of the DG](../DeveloperGuide.html#ui-component)","lastModifiedDate":"2021-07-31"},{"lineNumber":263,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-31"},{"lineNumber":264,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":265,"author":{"gitId":"-"},"content":"## Conclusion","lastModifiedDate":"2020-05-23"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":267,"author":{"gitId":"-"},"content":"In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From this tutorial, you learned more about how the various components work together to produce a response to a user command.","lastModifiedDate":"2021-07-31"},{"lineNumber":268,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":269,"author":{"gitId":"-"},"content":"Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can do further tracing for the given commands to find exactly what happens.","lastModifiedDate":"2021-07-31"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":271,"author":{"gitId":"-"},"content":"1.  In this tutorial, we traced the \"happy path\" (i.e., no errors). What","lastModifiedDate":"2020-05-23"},{"lineNumber":272,"author":{"gitId":"-"},"content":"    do you think will happen if we traced the following commands","lastModifiedDate":"2020-05-23"},{"lineNumber":273,"author":{"gitId":"-"},"content":"    instead? What exceptions do you think will be thrown (if any), where","lastModifiedDate":"2020-05-23"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    will the exceptions be thrown and where will they be handled?","lastModifiedDate":"2020-05-23"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    1.  `redit 1 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":277,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    2.  `edit 0 n/Alice Yu`","lastModifiedDate":"2020-05-23"},{"lineNumber":279,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    3.  `edit 1 n/Alex Yeoh`","lastModifiedDate":"2020-05-23"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    4.  `edit 1`","lastModifiedDate":"2020-05-23"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":284,"author":{"gitId":"-"},"content":"    5.  `edit 1 n/ã‚¢ãƒªã‚¹ ãƒ¦ãƒ¼`","lastModifiedDate":"2020-05-23"},{"lineNumber":285,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":286,"author":{"gitId":"-"},"content":"    6.  `edit 1 t/one t/two t/three t/one`","lastModifiedDate":"2020-05-23"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":288,"author":{"gitId":"-"},"content":"2.  What components will you have to modify to perform the following","lastModifiedDate":"2020-05-23"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    enhancements to the application?","lastModifiedDate":"2020-05-23"},{"lineNumber":290,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":291,"author":{"gitId":"-"},"content":"    1.  Make command words case-insensitive","lastModifiedDate":"2020-05-23"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":293,"author":{"gitId":"-"},"content":"    2.  Allow `delete` to remove more than one index at a time","lastModifiedDate":"2020-05-23"},{"lineNumber":294,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    3.  Save the address book in the CSV format instead","lastModifiedDate":"2020-05-23"},{"lineNumber":296,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":297,"author":{"gitId":"-"},"content":"    4.  Add a new command","lastModifiedDate":"2020-05-23"},{"lineNumber":298,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    5.  Add a new field to `Person`","lastModifiedDate":"2020-05-23"},{"lineNumber":300,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-23"},{"lineNumber":301,"author":{"gitId":"-"},"content":"    6.  Add a new entity to the address book","lastModifiedDate":"2020-05-23"}],"authorContributionMap":{"nramapurath":9,"yitong241":2,"-":289,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/AppParameters.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.FileUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Represents the parsed command-line parameters given to the application.","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class AppParameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private Path configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path getConfigPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        return configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void setConfigPath(Path configPath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.configPath \u003d configPath;","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Parses the application command-line parameters.","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static AppParameters parse(Application.Parameters parameters) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String configPathParameter \u003d namedParameters.get(\"config\");","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            configPathParameter \u003d null;","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return appParameters;","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (!(other instanceof AppParameters)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        AppParameters otherAppParameters \u003d (AppParameters) other;","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return configPath.hashCode();","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"yitong241":3,"-":61}},{"path":"src/main/java/seedu/medinfo/Main.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2019-02-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-02-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2019-02-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * The main entry point to the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * This is a workaround for the following error when MainApp is made the","lastModifiedDate":"2019-02-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * entry point of the application:","lastModifiedDate":"2019-02-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" *     Error: JavaFX runtime components are missing, and are required to run this application","lastModifiedDate":"2019-02-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * The reason is that MainApp extends Application. In that case, the","lastModifiedDate":"2019-02-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * LauncherHelper will check for the javafx.graphics module to be present","lastModifiedDate":"2019-02-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t","lastModifiedDate":"2019-02-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * find the javafx.graphics module, and so the launch is aborted.","lastModifiedDate":"2019-02-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2019-02-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * By having a separate main class (Main) that doesn\u0027t extend Application","lastModifiedDate":"2019-02-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":" * to be the entry point of the application, we avoid this issue.","lastModifiedDate":"2019-02-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2019-02-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Main {","lastModifiedDate":"2019-02-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-02-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2019-02-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-02-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-02-08"}],"authorContributionMap":{"yitong241":1,"-":24}},{"path":"src/main/java/seedu/medinfo/MainApp.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2016-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Config;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Version;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.ConfigUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.Logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.LogicManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.util.SampleDataUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.*;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.JsonMedInfoStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.ui.Ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.ui.UiManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" * Runs the application.","lastModifiedDate":"2019-02-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"public class MainApp extends Application {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"nramapurath"},"content":"    public static final Version VERSION \u003d new Version(1, 3, 0, true);","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);","lastModifiedDate":"2017-04-01"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    protected Ui ui;","lastModifiedDate":"2016-09-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    protected Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected Storage storage;","lastModifiedDate":"2016-09-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    protected Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    protected Config config;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void init() throws Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing MedInfo ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        super.init();","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        AppParameters appParameters \u003d AppParameters.parse(getParameters());","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        config \u003d initConfig(appParameters.getConfigPath());","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        MedInfoStorage medInfoStorage \u003d new JsonMedInfoStorage(userPrefs.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"        storage \u003d new StorageManager(medInfoStorage, userPrefsStorage);","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        initLogging(config);","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        ui \u003d new UiManager(logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s medinfo book and {@code userPrefs}. \u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"     * The data from the sample medinfo book will be used instead if {@code storage}\u0027s medinfo book is not found,","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"     * or an empty medinfo book will be used instead if errors occur when reading {@code storage}\u0027s medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"        Optional\u003cReadOnlyMedInfo\u003e addressBookOptional;","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"        ReadOnlyMedInfo initialData;","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"            addressBookOptional \u003d storage.readMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"            if (!addressBookOptional.isPresent()) {","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"                logger.info(\"Data file not found. Will be starting with a sample MedInfo\");","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleMedInfo);","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty MedInfo\");","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"            initialData \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-01"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty MedInfo\");","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"            initialData \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        return new ModelManager(initialData, userPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    private void initLogging(Config config) {","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        LogsCenter.init(config);","lastModifiedDate":"2016-09-23"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * if {@code configFilePath} is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    protected Config initConfig(Path configFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        Config initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        Path configFilePathUsed;","lastModifiedDate":"2018-04-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (configFilePath !\u003d null) {","lastModifiedDate":"2016-09-24"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            configFilePathUsed \u003d configFilePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                    + \"Using default config properties\");","lastModifiedDate":"2017-05-22"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            initializedConfig \u003d new Config();","lastModifiedDate":"2016-09-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);","lastModifiedDate":"2016-09-24"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":126,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        return initializedConfig;","lastModifiedDate":"2016-09-24"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when","lastModifiedDate":"2017-08-16"},{"lineNumber":134,"author":{"gitId":"-"},"content":"     * reading from the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {","lastModifiedDate":"2017-02-25"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d storage.getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        UserPrefs initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();","lastModifiedDate":"2016-09-25"},{"lineNumber":143,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());","lastModifiedDate":"2016-09-24"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        } catch (DataConversionException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":145,"author":{"gitId":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \"","lastModifiedDate":"2017-05-22"},{"lineNumber":146,"author":{"gitId":"-"},"content":"                    + \"Using default user prefs\");","lastModifiedDate":"2017-05-22"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":149,"author":{"gitId":"yitong241"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty MedInfo\");","lastModifiedDate":"2023-03-30"},{"lineNumber":150,"author":{"gitId":"-"},"content":"            initializedPrefs \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":151,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":152,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields","lastModifiedDate":"2016-09-24"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);","lastModifiedDate":"2016-09-25"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        return initializedPrefs;","lastModifiedDate":"2016-09-24"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-08-08"},{"lineNumber":165,"author":{"gitId":"yitong241"},"content":"        logger.info(\"Starting MedInfo \" + MainApp.VERSION);","lastModifiedDate":"2023-03-30"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        ui.start(primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    public void stop() {","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");","lastModifiedDate":"2016-09-29"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-24"},{"lineNumber":173,"author":{"gitId":"-"},"content":"            storage.saveUserPrefs(model.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-24"},{"lineNumber":175,"author":{"gitId":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-24"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":178,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nramapurath":1,"yitong241":37,"-":140}},{"path":"src/main/java/seedu/medinfo/commons/core/Config.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Config values used by the app","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Config {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    // Config values customizable through config file","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private Level logLevel \u003d Level.INFO;","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public Level getLogLevel() {","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        return logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setLogLevel(Level logLevel) {","lastModifiedDate":"2016-09-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.logLevel \u003d logLevel;","lastModifiedDate":"2016-09-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void setUserPrefsFilePath(Path userPrefsFilePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config o \u003d (Config) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return Objects.equals(logLevel, o.logLevel)","lastModifiedDate":"2018-12-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);","lastModifiedDate":"2017-02-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return Objects.hash(logLevel, userPrefsFilePath);","lastModifiedDate":"2018-12-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        sb.append(\"Current log level : \" + logLevel);","lastModifiedDate":"2018-12-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);","lastModifiedDate":"2016-09-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":62}},{"path":"src/main/java/seedu/medinfo/commons/core/GuiSettings.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.awt.Point;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.io.Serializable;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * A Serializable class that contains the GUI settings.","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Guarantees: immutable.","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class GuiSettings implements Serializable {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_HEIGHT \u003d 600;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final double DEFAULT_WIDTH \u003d 740;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private final double windowWidth;","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final double windowHeight;","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final Point windowCoordinates;","lastModifiedDate":"2018-11-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the default height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public GuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        windowWidth \u003d DEFAULT_WIDTH;","lastModifiedDate":"2018-08-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        windowHeight \u003d DEFAULT_HEIGHT;","lastModifiedDate":"2018-08-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d null; // null represent no coordinates","lastModifiedDate":"2018-08-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code GuiSettings} with the specified height, width and position.","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        this.windowWidth \u003d windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this.windowHeight \u003d windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        windowCoordinates \u003d new Point(xPosition, yPosition);","lastModifiedDate":"2018-08-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public double getWindowWidth() {","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return windowWidth;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public double getWindowHeight() {","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return windowHeight;","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Point getWindowCoordinates() {","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        if (!(other instanceof GuiSettings)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        GuiSettings o \u003d (GuiSettings) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return windowWidth \u003d\u003d o.windowWidth","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(windowWidth, windowHeight, windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        sb.append(\"Width : \" + windowWidth + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        sb.append(\"Height : \" + windowHeight + \"\\n\");","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        sb.append(\"Position : \" + windowCoordinates);","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":78}},{"path":"src/main/java/seedu/medinfo/commons/core/LogsCenter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.logging.ConsoleHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.FileHandler;","lastModifiedDate":"2017-01-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.SimpleFormatter;","lastModifiedDate":"2017-01-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Configures and manages loggers and handlers, including their logging level","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,","lastModifiedDate":"2016-09-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log","lastModifiedDate":"2016-09-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class LogsCenter {","lastModifiedDate":"2016-09-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String LOG_FILE \u003d \"addressbook.log\";","lastModifiedDate":"2016-09-28"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static FileHandler fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private static ConsoleHandler consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)","lastModifiedDate":"2016-09-29"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e","lastModifiedDate":"2016-09-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name","lastModifiedDate":"2016-10-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * is requested again from the LogsCenter.","lastModifiedDate":"2016-10-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public static void init(Config config) {","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();","lastModifiedDate":"2016-09-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Creates a logger with the given name.","lastModifiedDate":"2017-03-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public static Logger getLogger(String name) {","lastModifiedDate":"2016-09-28"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logger.setUseParentHandlers(false);","lastModifiedDate":"2016-09-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        removeHandlers(logger);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        addConsoleHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        addFileHandler(logger);","lastModifiedDate":"2016-09-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return Logger.getLogger(name);","lastModifiedDate":"2016-09-28"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Creates a Logger for the given class name.","lastModifiedDate":"2017-01-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {","lastModifiedDate":"2017-01-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (clazz \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return Logger.getLogger(\"\");","lastModifiedDate":"2017-04-05"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return getLogger(clazz.getSimpleName());","lastModifiedDate":"2017-01-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Creates the {@code consoleHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private static void addConsoleHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (consoleHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            consoleHandler \u003d createConsoleHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-04-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        logger.addHandler(consoleHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Remove all the handlers from {@code logger}.","lastModifiedDate":"2017-08-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    private static void removeHandlers(Logger logger) {","lastModifiedDate":"2016-09-28"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        Arrays.stream(logger.getHandlers())","lastModifiedDate":"2018-01-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                .forEach(logger::removeHandler);","lastModifiedDate":"2018-01-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Creates {@code fileHandler} if it is null.","lastModifiedDate":"2017-08-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    private static void addFileHandler(Logger logger) {","lastModifiedDate":"2016-09-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            if (fileHandler \u003d\u003d null) {","lastModifiedDate":"2017-04-05"},{"lineNumber":88,"author":{"gitId":"-"},"content":"                fileHandler \u003d createFileHandler();","lastModifiedDate":"2017-04-05"},{"lineNumber":89,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-04-05"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            logger.addHandler(fileHandler);","lastModifiedDate":"2016-09-09"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");","lastModifiedDate":"2016-09-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Creates a {@code FileHandler} for the log file.","lastModifiedDate":"2017-08-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * @throws IOException if there are problems opening the file.","lastModifiedDate":"2017-08-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {","lastModifiedDate":"2016-09-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);","lastModifiedDate":"2016-09-28"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());","lastModifiedDate":"2016-09-09"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        fileHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        return fileHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {","lastModifiedDate":"2016-09-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();","lastModifiedDate":"2016-09-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);","lastModifiedDate":"2016-09-09"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return consoleHandler;","lastModifiedDate":"2016-09-09"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":111}},{"path":"src/main/java/seedu/medinfo/commons/core/Messages.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Container for user visible messages.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Messages {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"KSunil2001"},"content":"    public static final String MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX \u003d \"The patient index provided is invalid\";","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_INVALID_WARD_DISPLAYED_INDEX \u003d \"The ward index provided is invalid\";","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_DELETE_WAITING_ROOM \u003d \"The Waiting Room cannot be deleted\";","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"    public static final String MESSAGE_ABORT_DELETE \u003d \"Deletion cancelled\";","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_DELETE_WARD_WITH_PATIENTS \u003d","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"            \"The ward cannot be deleted as there are patients inside\";","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW \u003d \"All %1$d patients listed!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_PATIENTS_LISTED_OVERVIEW \u003d \"%1$d out of %2$d patients listed!\";","lastModifiedDate":"2023-03-26"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":1,"yitong241":7,"jeraldkiew":2,"-":10,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/commons/core/Version.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonValue;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Represents a version with major, minor and patch number","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Version implements Comparable\u003cVersion\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final int major;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final int minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private final int patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final boolean isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Constructs a {@code Version} with the given version details.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Version(int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.major \u003d major;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.minor \u003d minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        this.patch \u003d patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.isEarlyAccess \u003d isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public int getMajor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        return major;","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public int getMinor() {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return minor;","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public int getPatch() {","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        return patch;","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean isEarlyAccess() {","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return isEarlyAccess;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Parses a version number string in the format V1.2.3.","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * @param versionString version number string","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @return a Version object","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static Version fromString(String versionString) throws IllegalArgumentException {","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        if (!versionMatcher.find()) {","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return new Version(Integer.parseInt(versionMatcher.group(1)),","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(2)),","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                Integer.parseInt(versionMatcher.group(3)),","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                versionMatcher.group(4) \u003d\u003d null ? false : true);","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @JsonValue","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public int compareTo(Version other) {","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        if (major !\u003d other.major) {","lastModifiedDate":"2018-08-14"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            return major - other.major;","lastModifiedDate":"2018-08-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        if (minor !\u003d other.minor) {","lastModifiedDate":"2018-08-14"},{"lineNumber":81,"author":{"gitId":"-"},"content":"            return minor - other.minor;","lastModifiedDate":"2018-08-14"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        if (patch !\u003d other.patch) {","lastModifiedDate":"2018-08-14"},{"lineNumber":84,"author":{"gitId":"-"},"content":"            return patch - other.patch;","lastModifiedDate":"2018-08-14"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {","lastModifiedDate":"2018-08-14"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return 0;","lastModifiedDate":"2017-05-22"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        if (isEarlyAccess) {","lastModifiedDate":"2018-08-14"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return -1;","lastModifiedDate":"2017-05-22"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-22"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        return 1;","lastModifiedDate":"2017-05-22"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Version)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        final Version other \u003d (Version) obj;","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        return compareTo(other) \u003d\u003d 0;","lastModifiedDate":"2018-08-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            hash \u003d \"1\" + hash;","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        return Integer.parseInt(hash);","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":115}},{"path":"src/main/java/seedu/medinfo/commons/core/index/Index.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core.index;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents a zero-based or one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" *","lastModifiedDate":"2017-05-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current","lastModifiedDate":"2017-05-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * base the other component is using for its index. However, after receiving the {@code Index}, that component can","lastModifiedDate":"2017-05-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * convert it back to an int if the index will not be passed to a different component again.","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Index {","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private int zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Index can only be created by calling {@link Index#fromZeroBased(int)} or","lastModifiedDate":"2017-05-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Index#fromOneBased(int)}.","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private Index(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        if (zeroBasedIndex \u003c 0) {","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.zeroBasedIndex \u003d zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public int getZeroBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return zeroBasedIndex;","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public int getOneBased() {","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return zeroBasedIndex + 1;","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a zero-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static Index fromZeroBased(int zeroBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return new Index(zeroBasedIndex);","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * Creates a new {@code Index} using a one-based index.","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public static Index fromOneBased(int oneBasedIndex) {","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        return new Index(oneBasedIndex - 1);","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                || (other instanceof Index // instanceof handles nulls","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"yitong241":1,"-":53}},{"path":"src/main/java/seedu/medinfo/commons/exceptions/DataConversionException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error during conversion of data from one format to another","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class DataConversionException extends Exception {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public DataConversionException(Exception cause) {","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(cause);","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":10}},{"path":"src/main/java/seedu/medinfo/commons/exceptions/IllegalValueException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Signals that some given data does not fulfill some constraints.","lastModifiedDate":"2016-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message) {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @param message should contain relevant information on the failed constraint(s)","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @param cause of the main exception","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public IllegalValueException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":1,"-":20}},{"path":"src/main/java/seedu/medinfo/commons/util/AppUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.MainApp;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A container for App specific utility functions","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class AppUtil {","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Gets an {@code Image} from the specified path.","lastModifiedDate":"2020-05-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(imagePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Checks that {@code condition} is true. Used for validating arguments to methods.","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-15"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false.","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static void checkArgument(Boolean condition, String errorMessage) {","lastModifiedDate":"2017-05-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (!condition) {","lastModifiedDate":"2017-05-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(errorMessage);","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-15"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":2,"-":40}},{"path":"src/main/java/seedu/medinfo/commons/util/CollectionUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-06-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2017-01-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2016-12-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods related to Collections","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class CollectionUtil {","lastModifiedDate":"2016-09-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /** @see #requireAllNonNull(Collection) */","lastModifiedDate":"2017-05-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Object... items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        Stream.of(items).forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Throws NullPointerException if {@code items} or any element of {@code items} is null.","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public static void requireAllNonNull(Collection\u003c?\u003e items) {","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        requireNonNull(items);","lastModifiedDate":"2017-06-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        items.forEach(Objects::requireNonNull);","lastModifiedDate":"2017-05-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Returns true if {@code items} contain any elements that are non-null.","lastModifiedDate":"2017-06-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static boolean isAnyNonNull(Object... items) {","lastModifiedDate":"2017-06-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);","lastModifiedDate":"2017-06-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":1,"-":34}},{"path":"src/main/java/seedu/medinfo/commons/util/ConfigUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Config;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * A class for accessing the Config File.","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ConfigUtil {","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(configFilePath, Config.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void saveConfig(Config config, Path configFilePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(config, configFilePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yitong241":3,"-":20}},{"path":"src/main/java/seedu/medinfo/commons/util/FileUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2016-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.InvalidPathException;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Writes and reads files","lastModifiedDate":"2016-10-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class FileUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String CHARSET \u003d \"UTF-8\";","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static boolean isFileExists(Path file) {","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * otherwise returns false.","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param path A string representing the file path. Cannot be null.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static boolean isValidPath(String path) {","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"            Paths.get(path);","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        } catch (InvalidPathException ipe) {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        return true;","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws IOException if the file or directory cannot be created.","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static void createIfMissing(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        if (!isFileExists(file)) {","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            createFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Creates a file if it does not exist along with its missing parent directories.","lastModifiedDate":"2018-04-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public static void createFile(Path file) throws IOException {","lastModifiedDate":"2018-04-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (Files.exists(file)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2018-04-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        createParentDirsOfFile(file);","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        Files.createFile(file);","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Creates parent directories of file if it has a parent directory","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static void createParentDirsOfFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Path parentDir \u003d file.getParent();","lastModifiedDate":"2018-04-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        if (parentDir !\u003d null) {","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            Files.createDirectories(parentDir);","lastModifiedDate":"2018-04-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * Assumes file exists","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static String readFromFile(Path file) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new String(Files.readAllBytes(file), CHARSET);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * Writes given string to a file.","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * Will create the file if it does not exist yet.","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void writeToFile(Path file, String content) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        Files.write(file, content.getBytes(CHARSET));","lastModifiedDate":"2018-04-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":82}},{"path":"src/main/java/seedu/medinfo/commons/util/JsonUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonAutoDetect;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.PropertyAccessor;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.core.JsonProcessingException;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationContext;","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.DeserializationFeature;","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.module.SimpleModule;","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":" * Converts a Java object instance to JSON and vice versa","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class JsonUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()","lastModifiedDate":"2016-10-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)","lastModifiedDate":"2016-10-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)","lastModifiedDate":"2016-10-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            .registerModule(new SimpleModule(\"SimpleModule\")","lastModifiedDate":"2016-10-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                    .addSerializer(Level.class, new ToStringSerializer())","lastModifiedDate":"2016-10-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));","lastModifiedDate":"2016-10-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));","lastModifiedDate":"2016-10-07"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"            throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);","lastModifiedDate":"2016-10-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found.","lastModifiedDate":"2016-10-07"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * If any values are missing from the file, default values will be used, as long as the file is a valid json file.","lastModifiedDate":"2016-10-07"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null.","lastModifiedDate":"2016-10-07"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here.","lastModifiedDate":"2016-10-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-10-07"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(","lastModifiedDate":"2016-10-07"},{"lineNumber":59,"author":{"gitId":"-"},"content":"            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        if (!Files.exists(filePath)) {","lastModifiedDate":"2018-04-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"            logger.info(\"Json file \" + filePath + \" not found\");","lastModifiedDate":"2018-04-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return Optional.empty();","lastModifiedDate":"2016-10-07"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        T jsonFile;","lastModifiedDate":"2016-10-07"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-10-07"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);","lastModifiedDate":"2018-04-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-10-07"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"            throw new DataConversionException(e);","lastModifiedDate":"2016-10-07"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return Optional.of(jsonFile);","lastModifiedDate":"2016-10-07"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-07"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Saves the Json object to the specified file.","lastModifiedDate":"2016-10-07"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t.","lastModifiedDate":"2016-10-07"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     * @param jsonFile cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param filePath cannot be null","lastModifiedDate":"2016-10-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @throws IOException if there was an error during writing to the file","lastModifiedDate":"2016-10-07"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-07"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {","lastModifiedDate":"2018-04-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2017-05-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        requireNonNull(jsonFile);","lastModifiedDate":"2017-05-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        serializeObjectToJsonFile(filePath, jsonFile);","lastModifiedDate":"2018-04-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * Converts a given string representation of a JSON data to instance of a class","lastModifiedDate":"2016-10-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * @return The instance of T with the specified values in the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {","lastModifiedDate":"2016-10-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        return objectMapper.readValue(json, instanceClass);","lastModifiedDate":"2016-10-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"     * Converts a given instance of a class into its JSON data string representation","lastModifiedDate":"2016-10-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"     * @param instance The T object to be converted into the JSON string","lastModifiedDate":"2016-10-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"     * @param \u003cT\u003e The generic type to create an instance of","lastModifiedDate":"2016-10-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"     * @return JSON data representation of the given class instance, in string","lastModifiedDate":"2016-10-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {","lastModifiedDate":"2016-10-19"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);","lastModifiedDate":"2016-10-19"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Contains methods that retrieve logging level from serialized string.","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        protected LevelDeserializer(Class\u003c?\u003e vc) {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"            super(vc);","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        protected Level _deserialize(String value, DeserializationContext ctxt) {","lastModifiedDate":"2018-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"            return getLoggingLevel(value);","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"         * Gets the logging level that matches loggingLevelString","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"         * \u003cp\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"         * Returns null if there are no matches","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        private Level getLoggingLevel(String loggingLevelString) {","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"            return Level.parse(loggingLevelString);","lastModifiedDate":"2016-09-09"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":136,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"        public Class\u003cLevel\u003e handledType() {","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":"            return Level.class;","lastModifiedDate":"2016-08-08"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":3,"-":140}},{"path":"src/main/java/seedu/medinfo/commons/util/StringUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.StringWriter;","lastModifiedDate":"2016-09-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Helper functions for handling strings.","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class StringUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Returns true if the {@code sentence} contains the {@code word}.","lastModifiedDate":"2016-10-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Ignores case, but a full word match is required.","lastModifiedDate":"2016-10-13"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"     * examples:","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"     * \u003cpre\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true","lastModifiedDate":"2016-10-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match","lastModifiedDate":"2016-10-13"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * \u003c/pre\u003e","lastModifiedDate":"2016-10-13"},{"lineNumber":26,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"     * @param fullName cannot be null","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * @param word     cannot be null, cannot be empty, must be a single word","lastModifiedDate":"2016-10-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"    public static boolean containsWordIgnoreCase(String fullName, String word) {","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(fullName);","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        requireNonNull(word);","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        String preppedWord \u003d word.trim();","lastModifiedDate":"2016-10-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");","lastModifiedDate":"2017-05-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"        String preppedSentence \u003d fullName.toString();","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");","lastModifiedDate":"2016-10-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        return Arrays.stream(wordsInPreppedSentence)","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                .anyMatch(preppedWord::equalsIgnoreCase);","lastModifiedDate":"2018-01-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Returns a detailed message of the t, including the stack trace.","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public static String getDetails(Throwable t) {","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        requireNonNull(t);","lastModifiedDate":"2017-05-15"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        StringWriter sw \u003d new StringWriter();","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        t.printStackTrace(new PrintWriter(sw));","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return t.getMessage() + \"\\n\" + sw.toString();","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * Returns true if {@code s} represents a non-zero unsigned integer","lastModifiedDate":"2017-06-02"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e","lastModifiedDate":"2017-06-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * Will return false for any other non-null string input","lastModifiedDate":"2017-06-02"},{"lineNumber":59,"author":{"gitId":"jeraldkiew"},"content":"     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"     * whitespace), \"1 a\" (contains letters)","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code s} is null.","lastModifiedDate":"2017-06-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static boolean isNonZeroUnsignedInteger(String s) {","lastModifiedDate":"2017-06-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-06-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            int value \u003d Integer.parseInt(s);","lastModifiedDate":"2017-06-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)","lastModifiedDate":"2017-06-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2017-06-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-06-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-06-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":2,"jeraldkiew":12,"-":60}},{"path":"src/main/java/seedu/medinfo/logic/Logic.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * API of the Logic component","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public interface Logic {","lastModifiedDate":"2016-09-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2016-09-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * @param commandText The command as entered by the user.","lastModifiedDate":"2016-09-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @return the result of the command execution.","lastModifiedDate":"2016-09-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException If an error occurs during parsing.","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-03"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"     * Returns the MedInfo.","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-03"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"     * @see seedu.medinfo.model.Model#getMedInfo()","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-03"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    ReadOnlyMedInfo getMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    List\u003cString\u003e getStatsInfo();","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"    /** Returns an unmodifiable view of the filtered list of patients */","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-26"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"    /** Returns an unmodifiable view of the filtered list of wards */","lastModifiedDate":"2023-03-24"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    ObservableList\u003cWard\u003e getFilteredWardList();","lastModifiedDate":"2023-03-24"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"     * Returns the user prefs\u0027 medinfo book file path.","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    Path getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Set the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"yitong241":13,"daytona65":7,"-":36,"KSunil2001":2}},{"path":"src/main/java/seedu/medinfo/logic/LogicManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.Command;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.MedInfoParser;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.Storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * The main LogicManager of the app.","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class LogicManager implements Logic {","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);","lastModifiedDate":"2016-09-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private final Model model;","lastModifiedDate":"2016-09-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private final Storage storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    private final MedInfoParser medInfoParser;","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}.","lastModifiedDate":"2020-05-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public LogicManager(Model model, Storage storage) {","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.model \u003d model;","lastModifiedDate":"2016-09-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        medInfoParser \u003d new MedInfoParser();","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"    public List\u003cString\u003e getStatsInfo() {","lastModifiedDate":"2023-03-31"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        return model.getStatsInfo();","lastModifiedDate":"2023-03-31"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");","lastModifiedDate":"2016-09-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        CommandResult commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"        Command command \u003d medInfoParser.parseCommand(commandText);","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        commandResult \u003d command.execute(model);","lastModifiedDate":"2019-01-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"            storage.saveMedInfo(model.getMedInfo());","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-03"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"    public ReadOnlyMedInfo getMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"        return model.getMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-03"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-03"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"KSunil2001"},"content":"        return model.getFilteredPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"    public ObservableList\u003cWard\u003e getFilteredWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"        return model.getFilteredWardList();","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"    public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"        return model.getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        return model.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        model.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"yitong241":21,"daytona65":6,"-":64,"KSunil2001":2}},{"path":"src/main/java/seedu/medinfo/logic/commands/AddCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":" * Adds a patient to MedInfo.","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"add\";","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a patient to MedInfo. \\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"Parameters: \"","lastModifiedDate":"2017-06-06"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"            + PREFIX_NAME + \"NAME \"","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"            + PREFIX_NRIC + \"NRIC \"","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"            + \"[optional]\" + PREFIX_STATUS + \"STATUS \\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2017-06-06"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"            + PREFIX_NAME + \"John Doe \" + PREFIX_NRIC + \"S1234567A \" + PREFIX_STATUS + \"GRAY \\n\";","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New patient added: %1$s\";","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in MedInfo\";","lastModifiedDate":"2023-03-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"nramapurath"},"content":"    private final Patient toAdd;","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"nramapurath"},"content":"     * Creates an AddCommand to add the specified {@code Patient}","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"nramapurath"},"content":"    public AddCommand(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"nramapurath"},"content":"        toAdd \u003d patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        if (model.hasPatientNric(toAdd)) {","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"KSunil2001"},"content":"        model.addPatient(toAdd);","lastModifiedDate":"2023-03-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-22"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                || (other instanceof AddCommand // instanceof handles nulls","lastModifiedDate":"2017-06-22"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":6,"yitong241":12,"daytona65":1,"jeraldkiew":1,"-":35,"KSunil2001":3}},{"path":"src/main/java/seedu/medinfo/logic/commands/AddWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":" * Adds a patient to MedInfo.","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"public class AddWardCommand extends Command {","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"    public static final String COMMAND_WORD \u003d \"addward\";","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a ward to MedInfo. \\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: \"","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"            + PREFIX_WARD + \"WARD \"","lastModifiedDate":"2023-03-31"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"            + \" [optional]\" + PREFIX_CAPACITY + \"CAPACITY \\n\"","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"            + PREFIX_WARD + \"A03 \" + PREFIX_CAPACITY + \"100\\n\";","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"New ward added: %1$s\";","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"This ward already exists in MedInfo\";","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    private final Ward toAdd;","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"     * Creates an AddWardCommand to add the specified {@code Patient}","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    public AddWardCommand(Ward ward) {","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"        requireNonNull(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"        toAdd \u003d ward;","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        if (model.hasWard(toAdd)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_WARD);","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"        model.addWard(toAdd);","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"                || (other instanceof AddWardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 toAdd.equals(((AddWardCommand) other).toAdd));","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"nramapurath":2,"yitong241":54,"jeraldkiew":1}},{"path":"src/main/java/seedu/medinfo/logic/commands/ClearCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" * Clears the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ClearCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"clear\";","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"MedInfo has been cleared!\";","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2017-05-15"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"        model.setMedInfo(new MedInfo());","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":6,"-":17}},{"path":"src/main/java/seedu/medinfo/logic/commands/Command.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed.","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public abstract class Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result message.","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * @param model {@code Model} which the command should operate on.","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * @return feedback message of the operation result for display","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * @throws CommandException If an error occurs during command execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public abstract CommandResult execute(Model model) throws CommandException;","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":3,"-":17}},{"path":"src/main/java/seedu/medinfo/logic/commands/CommandResult.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2018-12-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Represents the result of a command execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResult {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final String feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /** Help information should be shown to the user. */","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final boolean showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** The application should exit. */","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final boolean exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified fields.","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.feedbackToUser \u003d requireNonNull(feedbackToUser);","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.showHelp \u003d showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        this.exit \u003d exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * and other fields set to their default value.","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public CommandResult(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        this(feedbackToUser, false, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public String getFeedbackToUser() {","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return feedbackToUser;","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public boolean isShowHelp() {","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return showHelp;","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public boolean isExit() {","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        return exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2018-12-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        if (!(other instanceof CommandResult)) {","lastModifiedDate":"2018-12-09"},{"lineNumber":57,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-12-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        CommandResult otherCommandResult \u003d (CommandResult) other;","lastModifiedDate":"2018-12-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return feedbackToUser.equals(otherCommandResult.feedbackToUser)","lastModifiedDate":"2018-12-09"},{"lineNumber":62,"author":{"gitId":"-"},"content":"                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp","lastModifiedDate":"2018-12-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;","lastModifiedDate":"2018-12-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return Objects.hash(feedbackToUser, showHelp, exit);","lastModifiedDate":"2018-12-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":1,"-":70}},{"path":"src/main/java/seedu/medinfo/logic/commands/DeleteCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-09-01"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":" * Deletes a patient identified using it\u0027s displayed index from MedInfo.","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"            + \": Deletes the patient identified by the index number used in the displayed patient list.\\n\"","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2016-09-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":25,"author":{"gitId":"KSunil2001"},"content":"    public static final String MESSAGE_DELETE_PATIENT_SUCCESS \u003d \"Deleted Patient: %1$s\";","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final Index targetIndex;","lastModifiedDate":"2017-06-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public DeleteCommand(Index targetIndex) {","lastModifiedDate":"2017-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2016-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"KSunil2001"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"nramapurath"},"content":"        Patient patientToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"        model.deletePatient(patientToDelete);","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete));","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                || (other instanceof DeleteCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":2,"yitong241":7,"-":39,"KSunil2001":5}},{"path":"src/main/java/seedu/medinfo/logic/commands/DeleteWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import java.util.List;","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":" * Deletes a ward identified using it\u0027s displayed index from MedInfo.","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"public class DeleteWardCommand extends Command {","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    public static final String COMMAND_WORD \u003d \"deleteward\";","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"            + \": Deletes the ward identified by the index number used in the displayed ward list.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_DELETE_WARD_SUCCESS \u003d \"Deleted Ward: %1$s\";","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    private final Index targetIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    public DeleteWardCommand(Index targetIndex) {","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"        List\u003cWard\u003e lastShownList \u003d model.getFilteredWardList();","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_WARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        if (targetIndex.getZeroBased() \u003d\u003d 0) {","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            throw new CommandException(Messages.MESSAGE_DELETE_WAITING_ROOM);","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"        Ward wardToDelete \u003d lastShownList.get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"        if (wardToDelete.getOccupancy() \u003e 0) {","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"            throw new CommandException(Messages.MESSAGE_DELETE_WARD_WITH_PATIENTS);","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"        model.deleteWard(wardToDelete);","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        return new CommandResult(String.format(MESSAGE_DELETE_WARD_SUCCESS, wardToDelete));","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"                || (other instanceof DeleteWardCommand // instanceof handles nulls","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 targetIndex.equals(((DeleteWardCommand) other).targetIndex)); // state check","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"yitong241":63}},{"path":"src/main/java/seedu/medinfo/logic/commands/EditCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_DISCHARGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-12-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.CollectionUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Discharge;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-26"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":" * Edits the details of an existing patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class EditCommand extends Command {","lastModifiedDate":"2018-04-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"edit\";","lastModifiedDate":"2016-12-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the status and/or ward and/or discharge \"","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"KSunil2001"},"content":"            + \"date-time of the patient identified by the index number used in the displayed patient list. \"","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2016-12-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2017-06-06"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"            + \"[\" + PREFIX_STATUS + \"STATUS \" + PREFIX_WARD + \"WARD \" + PREFIX_DISCHARGE + \"DISCHARGE]\\n\"","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2017-05-09"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"            + PREFIX_STATUS + \"GREEN \" + PREFIX_WARD + \"A1 \" + PREFIX_DISCHARGE + \"14/07/2023 1600 \";","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Patient: %1$s\";","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2016-12-26"},{"lineNumber":41,"author":{"gitId":"nramapurath"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"This patient already exists in MedInfo.\";","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_WARD_NOT_FOUND \u003d \"Ward not found.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    private final Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"    private final EditPatientDescriptor editPatientDescriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"     * @param index                 of the patient in the filtered patient list to","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"     *                              edit","lastModifiedDate":"2023-03-08"},{"lineNumber":50,"author":{"gitId":"KSunil2001"},"content":"     * @param editPatientDescriptor details to edit the patient with","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":52,"author":{"gitId":"KSunil2001"},"content":"    public EditCommand(Index index, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(index);","lastModifiedDate":"2017-05-25"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"        requireNonNull(editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        this.index \u003d index;","lastModifiedDate":"2017-05-25"},{"lineNumber":57,"author":{"gitId":"KSunil2001"},"content":"        this.editPatientDescriptor \u003d new EditPatientDescriptor(editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2019-01-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"        List\u003cPatient\u003e lastShownList \u003d model.getFilteredPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2018-04-19"},{"lineNumber":66,"author":{"gitId":"KSunil2001"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"nramapurath"},"content":"        Patient patientToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-08"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"        Patient editedPatient \u003d createEditedPatient(patientToEdit, editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":72,"author":{"gitId":"KSunil2001"},"content":"        if (!patientToEdit.isSamePatient(editedPatient) \u0026\u0026 model.hasPatient(editedPatient)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"KSunil2001"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"        if (!model.hasWard(editedPatient.getWard())) {","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"jeraldkiew"},"content":"            throw new CommandException(MESSAGE_WARD_NOT_FOUND);","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"        model.setPatient(patientToEdit, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"KSunil2001"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"KSunil2001"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient));","lastModifiedDate":"2023-03-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"     * Creates and returns a {@code Patient} with the details of","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"jeraldkiew"},"content":"     * {@code patientToEdit}","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"KSunil2001"},"content":"     * edited with {@code editPatientDescriptor}.","lastModifiedDate":"2023-03-09"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"    private static Patient createEditedPatient(Patient patientToEdit, EditPatientDescriptor editPatientDescriptor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"nramapurath"},"content":"        assert patientToEdit !\u003d null;","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"        Name updatedName \u003d editPatientDescriptor.getName().orElse((Name) patientToEdit.getName());","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"nramapurath"},"content":"        Nric updatedNric \u003d editPatientDescriptor.getNric().orElse((Nric) patientToEdit.getNric());","lastModifiedDate":"2023-03-14"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"        Status updatedStatus \u003d editPatientDescriptor.getStatus().orElse((Status) patientToEdit.getStatus());","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"        WardName updatedWard \u003d editPatientDescriptor.getWard().orElse(patientToEdit.getWardName());","lastModifiedDate":"2023-03-27"},{"lineNumber":97,"author":{"gitId":"KSunil2001"},"content":"        Discharge updatedDischarge \u003d editPatientDescriptor.getDischarge()","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"                .orElse((Discharge) patientToEdit.getDischarge());","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":100,"author":{"gitId":"KSunil2001"},"content":"        return new Patient(updatedNric, updatedName, updatedStatus, updatedWard, updatedDischarge);","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-05-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        if (!(other instanceof EditCommand)) {","lastModifiedDate":"2017-05-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        EditCommand e \u003d (EditCommand) other;","lastModifiedDate":"2017-05-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return index.equals(e.index)","lastModifiedDate":"2017-05-25"},{"lineNumber":118,"author":{"gitId":"KSunil2001"},"content":"                \u0026\u0026 editPatientDescriptor.equals(e.editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-26"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"jeraldkiew"},"content":"     * replace the","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"nramapurath"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-26"},{"lineNumber":126,"author":{"gitId":"KSunil2001"},"content":"    public static class EditPatientDescriptor {","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        private Name name;","lastModifiedDate":"2017-06-21"},{"lineNumber":128,"author":{"gitId":"nramapurath"},"content":"        private Nric nric;","lastModifiedDate":"2023-03-14"},{"lineNumber":129,"author":{"gitId":"yitong241"},"content":"        private Status status;","lastModifiedDate":"2023-03-13"},{"lineNumber":130,"author":{"gitId":"yitong241"},"content":"        private WardName ward;","lastModifiedDate":"2023-03-26"},{"lineNumber":131,"author":{"gitId":"KSunil2001"},"content":"        private Discharge discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":133,"author":{"gitId":"KSunil2001"},"content":"        public EditPatientDescriptor() {","lastModifiedDate":"2023-03-09"},{"lineNumber":134,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-01-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"         * Copy constructor.","lastModifiedDate":"2018-01-11"},{"lineNumber":138,"author":{"gitId":"-"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2018-01-11"},{"lineNumber":139,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-01-11"},{"lineNumber":140,"author":{"gitId":"KSunil2001"},"content":"        public EditPatientDescriptor(EditPatientDescriptor toCopy) {","lastModifiedDate":"2023-03-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"            setName(toCopy.name);","lastModifiedDate":"2018-01-15"},{"lineNumber":142,"author":{"gitId":"yitong241"},"content":"            setNric(toCopy.nric);","lastModifiedDate":"2023-03-13"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"            setStatus(toCopy.status);","lastModifiedDate":"2023-03-13"},{"lineNumber":144,"author":{"gitId":"nramapurath"},"content":"            setWard(toCopy.ward);","lastModifiedDate":"2023-03-17"},{"lineNumber":145,"author":{"gitId":"KSunil2001"},"content":"            setDischarge(toCopy.discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":146,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2016-12-26"},{"lineNumber":150,"author":{"gitId":"-"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2016-12-26"},{"lineNumber":151,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-26"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2016-12-26"},{"lineNumber":153,"author":{"gitId":"KSunil2001"},"content":"            return CollectionUtil.isAnyNonNull(name, nric, status, ward, discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        public void setName(Name name) {","lastModifiedDate":"2017-06-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"            this.name \u003d name;","lastModifiedDate":"2017-06-21"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":160,"author":{"gitId":"nramapurath"},"content":"        public void setNric(Nric nric) {","lastModifiedDate":"2023-03-14"},{"lineNumber":161,"author":{"gitId":"yitong241"},"content":"            this.nric \u003d nric;","lastModifiedDate":"2023-03-13"},{"lineNumber":162,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":163,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":164,"author":{"gitId":"yitong241"},"content":"        public void setStatus(Status status) {","lastModifiedDate":"2023-03-13"},{"lineNumber":165,"author":{"gitId":"yitong241"},"content":"            this.status \u003d status;","lastModifiedDate":"2023-03-13"},{"lineNumber":166,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":167,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":168,"author":{"gitId":"yitong241"},"content":"        public void setWard(WardName ward) {","lastModifiedDate":"2023-03-26"},{"lineNumber":169,"author":{"gitId":"nramapurath"},"content":"            this.ward \u003d ward;","lastModifiedDate":"2023-03-17"},{"lineNumber":170,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":171,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"KSunil2001"},"content":"        public void setDischarge(Discharge discharge) {","lastModifiedDate":"2023-03-22"},{"lineNumber":173,"author":{"gitId":"KSunil2001"},"content":"            this.discharge \u003d discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":174,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":175,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        public Optional\u003cName\u003e getName() {","lastModifiedDate":"2016-12-26"},{"lineNumber":177,"author":{"gitId":"-"},"content":"            return Optional.ofNullable(name);","lastModifiedDate":"2017-06-21"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-26"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-26"},{"lineNumber":180,"author":{"gitId":"nramapurath"},"content":"        public Optional\u003cNric\u003e getNric() {","lastModifiedDate":"2023-03-14"},{"lineNumber":181,"author":{"gitId":"yitong241"},"content":"            return Optional.ofNullable(nric);","lastModifiedDate":"2023-03-13"},{"lineNumber":182,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":183,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":184,"author":{"gitId":"yitong241"},"content":"        public Optional\u003cStatus\u003e getStatus() {","lastModifiedDate":"2023-03-13"},{"lineNumber":185,"author":{"gitId":"yitong241"},"content":"            return Optional.ofNullable(status);","lastModifiedDate":"2023-03-13"},{"lineNumber":186,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":187,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":188,"author":{"gitId":"yitong241"},"content":"        public Optional\u003cWardName\u003e getWard() {","lastModifiedDate":"2023-03-26"},{"lineNumber":189,"author":{"gitId":"nramapurath"},"content":"            return Optional.ofNullable(ward);","lastModifiedDate":"2023-03-17"},{"lineNumber":190,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":191,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":192,"author":{"gitId":"KSunil2001"},"content":"        public Optional\u003cDischarge\u003e getDischarge() {","lastModifiedDate":"2023-03-22"},{"lineNumber":193,"author":{"gitId":"KSunil2001"},"content":"            return Optional.ofNullable(discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":194,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":195,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-05"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2017-05-05"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            // short circuit if same object","lastModifiedDate":"2017-05-05"},{"lineNumber":199,"author":{"gitId":"-"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2017-05-05"},{"lineNumber":200,"author":{"gitId":"-"},"content":"                return true;","lastModifiedDate":"2017-05-05"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":202,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":203,"author":{"gitId":"-"},"content":"            // instanceof handles nulls","lastModifiedDate":"2017-05-05"},{"lineNumber":204,"author":{"gitId":"KSunil2001"},"content":"            if (!(other instanceof EditPatientDescriptor)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                return false;","lastModifiedDate":"2017-05-05"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2017-05-05"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            // state check","lastModifiedDate":"2017-05-05"},{"lineNumber":209,"author":{"gitId":"KSunil2001"},"content":"            EditPatientDescriptor e \u003d (EditPatientDescriptor) other;","lastModifiedDate":"2023-03-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":211,"author":{"gitId":"yitong241"},"content":"            return getName().equals(e.getName())","lastModifiedDate":"2023-03-13"},{"lineNumber":212,"author":{"gitId":"nramapurath"},"content":"                    \u0026\u0026 getNric().equals(e.getNric())","lastModifiedDate":"2023-03-17"},{"lineNumber":213,"author":{"gitId":"yitong241"},"content":"                    \u0026\u0026 getStatus().equals(e.getStatus())","lastModifiedDate":"2023-03-13"},{"lineNumber":214,"author":{"gitId":"KSunil2001"},"content":"                    \u0026\u0026 getWard().equals(e.getWard())","lastModifiedDate":"2023-03-22"},{"lineNumber":215,"author":{"gitId":"KSunil2001"},"content":"                    \u0026\u0026 getDischarge().equals(e.getDischarge());","lastModifiedDate":"2023-03-22"},{"lineNumber":216,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-05"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-26"},{"lineNumber":218,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-26"}],"authorContributionMap":{"nramapurath":16,"yitong241":41,"daytona65":1,"jeraldkiew":14,"-":105,"KSunil2001":41}},{"path":"src/main/java/seedu/medinfo/logic/commands/EditWardCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"jeraldkiew"},"content":"import java.util.List;","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"jeraldkiew"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.CollectionUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Capacity;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":" * Edits the details of an existing patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"public class EditWardCommand extends Command {","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"    public static final String COMMAND_WORD \u003d \"editward\";","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the ward name or capacity \"","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"        + \"of the ward identified by the index number used in the displayed ward list. \"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"        + \"Existing values will be overwritten by the input values.\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"        + \"Parameters: INDEX (must be a positive integer) \"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        + \"[\" + PREFIX_WARD + \"WARD \" + PREFIX_CAPACITY + \"CAPACITY]\\n\"","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"        + \"Example: \" + COMMAND_WORD + \" 1 \"","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"        + PREFIX_WARD + \"A1\" + \" \" + PREFIX_CAPACITY + \"35\";","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_EDIT_PATIENT_SUCCESS \u003d \"Edited Ward: %1$s\";","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"This ward already exists in MedInfo.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_EDITED_WARD_INSUFFICIENT_CAPACITY \u003d \"The given capacity is insufficient for this ward.\";","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"    private final Index index;","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"    private final EditWardDescriptor editWardDescriptor;","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"     * @param index              of the ward in the filtered ward list to","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"     *                           edit","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"     * @param editWardDescriptor details to edit the ward with","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"    public EditWardCommand(Index index, EditWardDescriptor editWardDescriptor) {","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(index);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(editWardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"jeraldkiew"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-03-29"},{"lineNumber":53,"author":{"gitId":"jeraldkiew"},"content":"        this.editWardDescriptor \u003d new EditWardDescriptor(editWardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"    public CommandResult execute(Model model) throws CommandException {","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"jeraldkiew"},"content":"        List\u003cWard\u003e lastShownList \u003d model.getFilteredWardList();","lastModifiedDate":"2023-03-29"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":61,"author":{"gitId":"jeraldkiew"},"content":"        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":62,"author":{"gitId":"jeraldkiew"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_WARD_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":64,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"jeraldkiew"},"content":"        Ward wardToEdit \u003d lastShownList.get(index.getZeroBased());","lastModifiedDate":"2023-03-29"},{"lineNumber":66,"author":{"gitId":"jeraldkiew"},"content":"        Ward editedWard \u003d createEditedWard(wardToEdit, editWardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":67,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"jeraldkiew"},"content":"        if (!wardToEdit.isSameWard(editedWard) \u0026\u0026 model.hasWard(editedWard)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"jeraldkiew"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_WARD);","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"jeraldkiew"},"content":"        if (!editedWard.canSupport(wardToEdit.getOccupancy())) {","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"jeraldkiew"},"content":"            throw new CommandException(MESSAGE_EDITED_WARD_INSUFFICIENT_CAPACITY);","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"        model.setWard(wardToEdit, editedWard);","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"jeraldkiew"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"jeraldkiew"},"content":"        return new CommandResult(String.format(MESSAGE_EDIT_PATIENT_SUCCESS, editedWard));","lastModifiedDate":"2023-03-29"},{"lineNumber":79,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":82,"author":{"gitId":"jeraldkiew"},"content":"     * Creates and returns a {@code Patient} with the details of","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"     * {@code wardToEdit}","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"     * edited with {@code editWardDescriptor}.","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"    private static Ward createEditedWard(Ward wardToEdit, EditWardDescriptor editWardDescriptor) {","lastModifiedDate":"2023-03-29"},{"lineNumber":87,"author":{"gitId":"jeraldkiew"},"content":"        assert wardToEdit !\u003d null;","lastModifiedDate":"2023-03-29"},{"lineNumber":88,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":89,"author":{"gitId":"jeraldkiew"},"content":"        WardName updatedName \u003d editWardDescriptor.getWard().orElse(wardToEdit.getName());","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":91,"author":{"gitId":"jeraldkiew"},"content":"        Capacity updatedCapacity \u003d editWardDescriptor.getCapacity()","lastModifiedDate":"2023-03-29"},{"lineNumber":92,"author":{"gitId":"jeraldkiew"},"content":"                .orElse(wardToEdit.getCapacity());","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":94,"author":{"gitId":"jeraldkiew"},"content":"        return new Ward(updatedName, updatedCapacity);","lastModifiedDate":"2023-03-29"},{"lineNumber":95,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":96,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":97,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":98,"author":{"gitId":"jeraldkiew"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":99,"author":{"gitId":"jeraldkiew"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":100,"author":{"gitId":"jeraldkiew"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-29"},{"lineNumber":101,"author":{"gitId":"jeraldkiew"},"content":"            return true;","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"jeraldkiew"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":105,"author":{"gitId":"jeraldkiew"},"content":"        if (!(other instanceof EditWardCommand)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"jeraldkiew"},"content":"            return false;","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"jeraldkiew"},"content":"        // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":110,"author":{"gitId":"jeraldkiew"},"content":"        EditWardCommand e \u003d (EditWardCommand) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"jeraldkiew"},"content":"        return index.equals(e.index)","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"jeraldkiew"},"content":"                \u0026\u0026 editWardDescriptor.equals(e.editWardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":114,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":115,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":116,"author":{"gitId":"jeraldkiew"},"content":"     * Stores the details to edit the patient with. Each non-empty field value will","lastModifiedDate":"2023-03-29"},{"lineNumber":117,"author":{"gitId":"jeraldkiew"},"content":"     * replace the","lastModifiedDate":"2023-03-29"},{"lineNumber":118,"author":{"gitId":"jeraldkiew"},"content":"     * corresponding field value of the patient.","lastModifiedDate":"2023-03-29"},{"lineNumber":119,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":120,"author":{"gitId":"jeraldkiew"},"content":"    public static class EditWardDescriptor {","lastModifiedDate":"2023-03-29"},{"lineNumber":121,"author":{"gitId":"jeraldkiew"},"content":"        private WardName ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"        private Capacity capacity;","lastModifiedDate":"2023-03-29"},{"lineNumber":123,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":124,"author":{"gitId":"jeraldkiew"},"content":"        public EditWardDescriptor() {","lastModifiedDate":"2023-03-29"},{"lineNumber":125,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":126,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":127,"author":{"gitId":"jeraldkiew"},"content":"        /**","lastModifiedDate":"2023-03-29"},{"lineNumber":128,"author":{"gitId":"jeraldkiew"},"content":"         * Copy constructor.","lastModifiedDate":"2023-03-29"},{"lineNumber":129,"author":{"gitId":"jeraldkiew"},"content":"         * A defensive copy of {@code tags} is used internally.","lastModifiedDate":"2023-03-29"},{"lineNumber":130,"author":{"gitId":"jeraldkiew"},"content":"         */","lastModifiedDate":"2023-03-29"},{"lineNumber":131,"author":{"gitId":"jeraldkiew"},"content":"        public EditWardDescriptor(EditWardDescriptor toCopy) {","lastModifiedDate":"2023-03-29"},{"lineNumber":132,"author":{"gitId":"jeraldkiew"},"content":"            setWard(toCopy.ward);","lastModifiedDate":"2023-03-29"},{"lineNumber":133,"author":{"gitId":"jeraldkiew"},"content":"            setCapacity(toCopy.capacity);","lastModifiedDate":"2023-03-29"},{"lineNumber":134,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":135,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":136,"author":{"gitId":"jeraldkiew"},"content":"        /**","lastModifiedDate":"2023-03-29"},{"lineNumber":137,"author":{"gitId":"jeraldkiew"},"content":"         * Returns true if at least one field is edited.","lastModifiedDate":"2023-03-29"},{"lineNumber":138,"author":{"gitId":"jeraldkiew"},"content":"         */","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"jeraldkiew"},"content":"        public boolean isAnyFieldEdited() {","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"jeraldkiew"},"content":"            return CollectionUtil.isAnyNonNull(ward, capacity);","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":142,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"jeraldkiew"},"content":"        public void setWard(WardName ward) {","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"jeraldkiew"},"content":"            this.ward \u003d ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"jeraldkiew"},"content":"        public void setCapacity(Capacity capacity) {","lastModifiedDate":"2023-03-29"},{"lineNumber":148,"author":{"gitId":"jeraldkiew"},"content":"            this.capacity \u003d capacity;","lastModifiedDate":"2023-03-29"},{"lineNumber":149,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":150,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":151,"author":{"gitId":"jeraldkiew"},"content":"        public Optional\u003cWardName\u003e getWard() {","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"jeraldkiew"},"content":"            return Optional.ofNullable(ward);","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":154,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":155,"author":{"gitId":"jeraldkiew"},"content":"        public Optional\u003cCapacity\u003e getCapacity() {","lastModifiedDate":"2023-03-29"},{"lineNumber":156,"author":{"gitId":"jeraldkiew"},"content":"            return Optional.ofNullable(capacity);","lastModifiedDate":"2023-03-29"},{"lineNumber":157,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":158,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":159,"author":{"gitId":"jeraldkiew"},"content":"        @Override","lastModifiedDate":"2023-03-29"},{"lineNumber":160,"author":{"gitId":"jeraldkiew"},"content":"        public boolean equals(Object other) {","lastModifiedDate":"2023-03-29"},{"lineNumber":161,"author":{"gitId":"jeraldkiew"},"content":"            // short circuit if same object","lastModifiedDate":"2023-03-29"},{"lineNumber":162,"author":{"gitId":"jeraldkiew"},"content":"            if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-29"},{"lineNumber":163,"author":{"gitId":"jeraldkiew"},"content":"                return true;","lastModifiedDate":"2023-03-29"},{"lineNumber":164,"author":{"gitId":"jeraldkiew"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":165,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":166,"author":{"gitId":"jeraldkiew"},"content":"            // instanceof handles nulls","lastModifiedDate":"2023-03-29"},{"lineNumber":167,"author":{"gitId":"jeraldkiew"},"content":"            if (!(other instanceof EditWardDescriptor)) {","lastModifiedDate":"2023-03-29"},{"lineNumber":168,"author":{"gitId":"jeraldkiew"},"content":"                return false;","lastModifiedDate":"2023-03-29"},{"lineNumber":169,"author":{"gitId":"jeraldkiew"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":170,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":171,"author":{"gitId":"jeraldkiew"},"content":"            // state check","lastModifiedDate":"2023-03-29"},{"lineNumber":172,"author":{"gitId":"jeraldkiew"},"content":"            EditWardDescriptor e \u003d (EditWardDescriptor) other;","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":174,"author":{"gitId":"jeraldkiew"},"content":"            return getWard().equals(e.getWard())","lastModifiedDate":"2023-03-29"},{"lineNumber":175,"author":{"gitId":"jeraldkiew"},"content":"                    \u0026\u0026 getCapacity().equals(e.getCapacity());","lastModifiedDate":"2023-03-29"},{"lineNumber":176,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":177,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"jeraldkiew"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"yitong241":14,"jeraldkiew":164}},{"path":"src/main/java/seedu/medinfo/logic/commands/ExitCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Terminates the program.","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";","lastModifiedDate":"2016-09-22"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting MedInfo as requested ...\";","lastModifiedDate":"2023-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"yitong241":3,"-":16}},{"path":"src/main/java/seedu/medinfo/logic/commands/FindCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-17"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-22"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":" * Finds and lists all patients in MedInfo whose name contains any of the","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":" * argument keywords.","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":" * Keyword matching is case-insensitive.","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2016-09-22"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2016-09-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"            + PREFIX_NAME","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"            + \": Finds all patients whose names contain any of \"","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \" alice bob charlie\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_NRIC","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"            + \": Finds all patients whose NRIC matches any of \"","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2018-04-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2016-09-22"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NRIC + \" S1234567A\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_STATUS","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"            + \": Finds all patients whose Status is any of \"","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_STATUS + \" GRAY GREEN\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_WARD","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"            + \": Finds all patients whose ward is any of \"","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\"","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_WARD + \" A03\\n\";","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"    private final Predicate\u003cPatient\u003e predicate;","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"    public FindCommand(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.predicate \u003d predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-26"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"        int total \u003d model.getFilteredPatientList().size();","lastModifiedDate":"2023-03-26"},{"lineNumber":58,"author":{"gitId":"KSunil2001"},"content":"        model.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return new CommandResult(","lastModifiedDate":"2018-04-01"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"                String.format(Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size(), total));","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                || (other instanceof FindCommand // instanceof handles nulls","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"yitong241":32,"daytona65":2,"jeraldkiew":5,"-":29,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/logic/commands/HelpCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Format full help instructions for every command for display.","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"help\";","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\"","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"Example: \" + COMMAND_WORD;","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";","lastModifiedDate":"2016-08-31"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":2,"-":19}},{"path":"src/main/java/seedu/medinfo/logic/commands/ListCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-08-08"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" * Lists all patients in MedInfo to the user.","lastModifiedDate":"2023-03-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2016-09-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2016-08-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2019-01-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        requireNonNull(model);","lastModifiedDate":"2018-08-08"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"        model.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"        return new CommandResult(","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"                String.format(Messages.MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW, model.getFilteredPatientList().size()));","lastModifiedDate":"2023-03-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"yitong241":5,"jeraldkiew":2,"-":15,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/logic/commands/SortCommand.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_DISCHARGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":" * Sort all patients in MedInfo based on the field and the order.","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"public class SortCommand extends Command {","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_UNKNOWN_ORDER_KEYWORD \u003d","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"            \"The order of Sort Command should be \u0027ASC\u0027 or \u0027DESC\u0027.\";","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_UNKNOWN_TYPE_KEYWORD \u003d \"You may only sort by \u0027name\u0027, \u0027status\u0027, \u0027discharge date\u0027\"","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"            + \"or \u0027ward name\u0027 \"","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"            + \"followed by \u0027asc\u0027 or \u0027desc\u0027 order.\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"            + \"Example: sort name/asc\";","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Sorted all patients by the given order\\n\";","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"            + \" \" + PREFIX_NAME","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"            + \": Sorts the list of all patients by name. \\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: asc/desc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_NAME + \"asc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_STATUS","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"            + \": Sorts all patients by status. \\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: asc/desc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_STATUS + \"asc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_DISCHARGE","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"            + \": Sorts all patients by discharge date. \\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: asc/desc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_DISCHARGE + \"asc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"            + COMMAND_WORD + \" \" + PREFIX_WARD","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"            + \": Sorts all patients by ward name. \\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"            + \"Parameters: asc/desc\\n\"","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_WARD + \"asc\\n\";","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"     * {@code FIELD} specifies what possible types {@code SortCommand} can accept.","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"    public static enum Field {","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"        NAME,","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        STATUS,","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        DISCHARGE,","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"        WARD","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"    };","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"     * {@code ORDER} specifies what possible order {@code SortCommand} can accept.","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"    public static enum Order {","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"        ASC,","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"        DESC","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"    };","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"    private final Comparator\u003cPatient\u003e comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"    public SortCommand(Field field, Order order) {","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"        this.comparator \u003d generateComparator(field, order);","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"     * Generates a Comparator for Patients based on parameters.","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"     * @param field field of attribute to be compared","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"     * @param order order of sorting","lastModifiedDate":"2023-03-28"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":79,"author":{"gitId":"yitong241"},"content":"    public static Comparator\u003cPatient\u003e generateComparator(Field field, Order order) {","lastModifiedDate":"2023-03-28"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"        switch (field) {","lastModifiedDate":"2023-03-28"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"        case NAME:","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"            if (order.equals(Order.ASC)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByNameAsc;","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"            } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByNameDesc;","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"        case STATUS:","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"            if (order.equals(Order.ASC)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByStatusAsc;","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"yitong241"},"content":"            } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByStatusDesc;","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"        case DISCHARGE:","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"            if (order.equals(Order.ASC)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByDischargeAsc;","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"yitong241"},"content":"            } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByDischargeDesc;","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"        case WARD:","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"            if (order.equals(Order.ASC)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":101,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByWardAsc;","lastModifiedDate":"2023-03-28"},{"lineNumber":102,"author":{"gitId":"yitong241"},"content":"            } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":103,"author":{"gitId":"yitong241"},"content":"                return Patient::compareToByWardDesc;","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"            }","lastModifiedDate":"2023-03-28"},{"lineNumber":105,"author":{"gitId":"yitong241"},"content":"        default:","lastModifiedDate":"2023-03-28"},{"lineNumber":106,"author":{"gitId":"yitong241"},"content":"            // default sorting order is by Name Asc","lastModifiedDate":"2023-03-28"},{"lineNumber":107,"author":{"gitId":"yitong241"},"content":"            return Patient::compareToByNameAsc;","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":109,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":110,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":111,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":112,"author":{"gitId":"yitong241"},"content":"    public CommandResult execute(Model model) {","lastModifiedDate":"2023-03-28"},{"lineNumber":113,"author":{"gitId":"yitong241"},"content":"        requireNonNull(model);","lastModifiedDate":"2023-03-28"},{"lineNumber":114,"author":{"gitId":"yitong241"},"content":"        model.sortPatients(this.comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"yitong241"},"content":"        return new CommandResult(MESSAGE_SUCCESS);","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"yitong241"},"content":"        return this \u003d\u003d other // short circuit if same object","lastModifiedDate":"2023-03-28"},{"lineNumber":121,"author":{"gitId":"yitong241"},"content":"                || (other instanceof SortCommand // instanceof handles null","lastModifiedDate":"2023-03-28"},{"lineNumber":122,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 this.comparator.equals(((SortCommand) other).comparator)); // state check","lastModifiedDate":"2023-03-28"},{"lineNumber":123,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":124,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"yitong241":124}},{"path":"src/main/java/seedu/medinfo/logic/commands/exceptions/CommandException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * Represents an error which occurs during execution of a {@link Command}.","lastModifiedDate":"2017-02-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class CommandException extends Exception {","lastModifiedDate":"2017-02-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public CommandException(String message) {","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-02-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}.","lastModifiedDate":"2018-08-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public CommandException(String message, Throwable cause) {","lastModifiedDate":"2018-08-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2018-08-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"yitong241":1,"-":16}},{"path":"src/main/java/seedu/medinfo/logic/parser/AddCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2017-03-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new AddCommand object","lastModifiedDate":"2017-02-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class AddCommandParser implements Parser\u003cAddCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the AddCommand","lastModifiedDate":"2017-02-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * and returns an AddCommand object for execution.","lastModifiedDate":"2017-02-05"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public AddCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_STATUS);","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC)","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2017-12-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());","lastModifiedDate":"2018-07-10"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        assert (name !\u003d null);","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"        Nric nric \u003d ParserUtil.parseNric(argMultimap.getValue(PREFIX_NRIC).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        assert (nric !\u003d null);","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        Patient patient;","lastModifiedDate":"2023-03-14"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        if (arePrefixesPresent(argMultimap, PREFIX_STATUS)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"            Status status \u003d ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get());","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"            assert(status !\u003d null);","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"            patient \u003d new Patient(nric, name, status);","lastModifiedDate":"2023-03-14"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"        } else {","lastModifiedDate":"2023-03-14"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"            patient \u003d new Patient(nric, name);","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-14"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"nramapurath"},"content":"        return new AddCommand(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-17"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"     * in the given","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2017-03-17"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2017-03-17"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-17"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-05"}],"authorContributionMap":{"nramapurath":2,"yitong241":26,"jeraldkiew":3,"-":33}},{"path":"src/main/java/seedu/medinfo/logic/parser/AddWardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Capacity;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":" * Parses input arguments and creates a new AddWardCommand object","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"public class AddWardCommandParser implements Parser\u003cAddWardCommand\u003e {","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"     * Parses the given {@code String} of arguments in the context of the AddWardCommand","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"     * and returns an AddWardCommand object for execution.","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    public AddWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WARD, PREFIX_CAPACITY);","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_WARD)","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"                || !argMultimap.getPreamble().isEmpty()) {","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddWardCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"        if (!arePrefixesPresent(argMultimap, PREFIX_CAPACITY)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"            WardName wardName \u003d ParserUtil.parseWardName(argMultimap.getValue(PREFIX_WARD).get());","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"            Ward ward \u003d new Ward(wardName);","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"            return new AddWardCommand(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"        WardName wardName \u003d ParserUtil.parseWardName(argMultimap.getValue(PREFIX_WARD).get());","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"nramapurath"},"content":"        Capacity wardCapacity \u003d ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get());","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"nramapurath"},"content":"        Ward ward \u003d new Ward(wardName, wardCapacity);","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        return new AddWardCommand(ward);","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"     * Returns true if none of the prefixes contains empty {@code Optional} values","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"     * in the given","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"     * {@code ArgumentMultimap}.","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"nramapurath":6,"yitong241":46,"jeraldkiew":4}},{"path":"src/main/java/seedu/medinfo/logic/parser/ArgumentMultimap.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2017-03-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-03-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2017-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-03-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Stores mapping of prefixes to their respective arguments.","lastModifiedDate":"2017-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Each key may be associated with multiple argument values.","lastModifiedDate":"2017-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Values for a given key are stored in a list, and the insertion ordering is maintained.","lastModifiedDate":"2017-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value","lastModifiedDate":"2017-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * can be inserted multiple times for the same prefix.","lastModifiedDate":"2017-03-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentMultimap {","lastModifiedDate":"2017-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /** Prefixes mapped to their respective arguments**/","lastModifiedDate":"2017-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Associates the specified argument value with {@code prefix} key in this map.","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values.","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @param prefix   Prefix key with which the specified argument value is to be associated","lastModifiedDate":"2017-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param argValue Argument value to be associated with the specified prefix key","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void put(Prefix prefix, String argValue) {","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        List\u003cString\u003e argValues \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        argValues.add(argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        argMultimap.put(prefix, argValues);","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns the last value of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public Optional\u003cString\u003e getValue(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        List\u003cString\u003e values \u003d getAllValues(prefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));","lastModifiedDate":"2017-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * Returns all values of {@code prefix}.","lastModifiedDate":"2017-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * If the prefix does not exist or has no values, this will return an empty list.","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap.","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public List\u003cString\u003e getAllValues(Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!argMultimap.containsKey(prefix)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            return new ArrayList\u003c\u003e();","lastModifiedDate":"2017-03-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return new ArrayList\u003c\u003e(argMultimap.get(prefix));","lastModifiedDate":"2017-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces.","lastModifiedDate":"2017-03-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public String getPreamble() {","lastModifiedDate":"2017-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return getValue(new Prefix(\"\")).orElse(\"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-08"}],"authorContributionMap":{"yitong241":1,"-":59}},{"path":"src/main/java/seedu/medinfo/logic/parser/ArgumentTokenizer.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-01-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-01-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-01-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-10-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e","lastModifiedDate":"2017-05-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}","lastModifiedDate":"2017-05-19"},{"lineNumber":14,"author":{"gitId":"-"},"content":" *    in the above example.\u003cbr\u003e","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class ArgumentTokenizer {","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their","lastModifiedDate":"2017-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * respective argument values. Only the given prefixes will be recognized in the arguments string.","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to tokenize the arguments string with","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @return           ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return extractArguments(argsString, positions);","lastModifiedDate":"2017-03-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Finds all zero-based prefix positions in the given arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefixes   Prefixes to find in the arguments string","lastModifiedDate":"2017-03-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @return           List of zero-based prefix positions in the given arguments string","lastModifiedDate":"2017-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {","lastModifiedDate":"2017-03-20"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return Arrays.stream(prefixes)","lastModifiedDate":"2018-01-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())","lastModifiedDate":"2018-01-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2018-01-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * {@see findAllPrefixPositions}","lastModifiedDate":"2017-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {","lastModifiedDate":"2017-03-20"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-10-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        while (prefixPosition !\u003d -1) {","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":53,"author":{"gitId":"-"},"content":"            positions.add(extendedPrefix);","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return positions;","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     * Returns the index of the first occurrence of {@code prefix} in","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * {@code argsString} starting from index {@code fromIndex}. An occurrence","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no","lastModifiedDate":"2017-05-19"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * such occurrence can be found.","lastModifiedDate":"2017-05-19"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid","lastModifiedDate":"2017-05-19"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     * occurrences of \"p/\" with whitespace before it. However, if","lastModifiedDate":"2017-05-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     * {@code fromIndex} \u003d 0, this method returns 5.","lastModifiedDate":"2017-05-19"},{"lineNumber":71,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {","lastModifiedDate":"2017-05-19"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        return prefixIndex \u003d\u003d -1 ? -1","lastModifiedDate":"2017-05-19"},{"lineNumber":75,"author":{"gitId":"-"},"content":"                : prefixIndex + 1; // +1 as offset for whitespace","lastModifiedDate":"2017-05-19"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the","lastModifiedDate":"2017-03-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in","lastModifiedDate":"2017-03-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * {@code argsString}.","lastModifiedDate":"2017-03-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}","lastModifiedDate":"2017-03-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}","lastModifiedDate":"2017-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * @return                ArgumentMultimap object that maps prefixes to their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {","lastModifiedDate":"2017-03-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        // Sort by start position","lastModifiedDate":"2016-10-16"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Insert a PrefixPosition to represent the preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);","lastModifiedDate":"2016-10-16"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        prefixPositions.add(0, preambleMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        // Add a dummy PrefixPosition to represent the end of the string","lastModifiedDate":"2016-10-16"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());","lastModifiedDate":"2016-10-16"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        prefixPositions.add(endPositionMarker);","lastModifiedDate":"2016-10-16"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        // Map prefixes to their argument values (if any)","lastModifiedDate":"2017-03-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();","lastModifiedDate":"2017-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            // Extract and store prefixes and their arguments","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));","lastModifiedDate":"2016-10-16"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            argMultimap.put(argPrefix, argValue);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        return argMultimap;","lastModifiedDate":"2017-03-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * The end position of the value is determined by {@code nextPrefixPosition}.","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    private static String extractArgumentValue(String argsString,","lastModifiedDate":"2017-03-20"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                                        PrefixPosition currentPrefixPosition,","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"                                        PrefixPosition nextPrefixPosition) {","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Prefix prefix \u003d currentPrefixPosition.getPrefix();","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();","lastModifiedDate":"2016-10-16"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());","lastModifiedDate":"2016-10-16"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        return value.trim();","lastModifiedDate":"2016-10-16"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"     * Represents a prefix\u0027s position in an arguments string.","lastModifiedDate":"2017-03-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    private static class PrefixPosition {","lastModifiedDate":"2017-03-20"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        private int startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        private final Prefix prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        PrefixPosition(Prefix prefix, int startPosition) {","lastModifiedDate":"2016-10-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            this.prefix \u003d prefix;","lastModifiedDate":"2016-10-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"            this.startPosition \u003d startPosition;","lastModifiedDate":"2016-10-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"        int getStartPosition() {","lastModifiedDate":"2016-10-19"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            return startPosition;","lastModifiedDate":"2018-08-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        Prefix getPrefix() {","lastModifiedDate":"2016-10-19"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            return prefix;","lastModifiedDate":"2018-08-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-19"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-19"},{"lineNumber":147,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-19"},{"lineNumber":148,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"yitong241":1,"-":147}},{"path":"src/main/java/seedu/medinfo/logic/parser/CliSyntax.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":4,"author":{"gitId":"jeraldkiew"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple","lastModifiedDate":"2023-03-12"},{"lineNumber":5,"author":{"gitId":"jeraldkiew"},"content":" * commands","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class CliSyntax {","lastModifiedDate":"2017-02-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    /* Prefix definitions */","lastModifiedDate":"2017-02-11"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":"    public static final Prefix PREFIX_NRIC \u003d new Prefix(\"nric/\");","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"jeraldkiew"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"name/\");","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"jeraldkiew"},"content":"    public static final Prefix PREFIX_STATUS \u003d new Prefix(\"s/\");","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"    public static final Prefix PREFIX_WARD \u003d new Prefix(\"w/\");","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"KSunil2001"},"content":"    public static final Prefix PREFIX_DISCHARGE \u003d new Prefix(\"d/\");","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"    public static final Prefix PREFIX_CAPACITY \u003d new Prefix(\"c/\");","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"nramapurath":2,"yitong241":1,"jeraldkiew":5,"-":7,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/logic/parser/DeleteCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new DeleteCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public DeleteCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2017-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            return new DeleteCommand(index);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"yitong241":5,"-":24}},{"path":"src/main/java/seedu/medinfo/logic/parser/DeleteWardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" * Parses input arguments and creates a new DeleteWardCommand object","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"public class DeleteWardCommandParser implements Parser\u003cDeleteWardCommand\u003e {","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"     * Parses the given {@code String} of arguments in the context of the DeleteWardCommand","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"     * and returns a DeleteCommand object for execution.","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    public DeleteWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"        try {","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"            Index index \u003d ParserUtil.parseIndex(args);","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"            return new DeleteWardCommand(index);","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteWardCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"yitong241":29}},{"path":"src/main/java/seedu/medinfo/logic/parser/EditCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_DISCHARGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":14,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class EditCommandParser implements Parser\u003cEditCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"     * EditCommand","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * and returns an EditCommand object for execution.","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public EditCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        requireNonNull(args);","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"KSunil2001"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_STATUS, PREFIX_WARD, PREFIX_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        Index index;","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2017-06-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2018-07-10"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2018-08-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor editPatientDescriptor \u003d new EditCommand.EditPatientDescriptor();","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"        if (argMultimap.getValue(PREFIX_STATUS).isPresent()) {","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"nramapurath"},"content":"            editPatientDescriptor.setStatus(ParserUtil.parseStatus(argMultimap.getValue(PREFIX_STATUS).get()));","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"nramapurath"},"content":"        if (argMultimap.getValue(PREFIX_WARD).isPresent()) {","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            editPatientDescriptor.setWard(ParserUtil.parseWardName(argMultimap.getValue(PREFIX_WARD).get()));","lastModifiedDate":"2023-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"        if (argMultimap.getValue(PREFIX_DISCHARGE).isPresent()) {","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"            editPatientDescriptor.setDischarge(ParserUtil.parseDischarge(argMultimap.getValue(PREFIX_DISCHARGE).get()));","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"        if (!editPatientDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2017-03-11"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"        return new EditCommand(index, editPatientDescriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"nramapurath":4,"yitong241":10,"jeraldkiew":3,"-":32,"KSunil2001":7}},{"path":"src/main/java/seedu/medinfo/logic/parser/EditWardCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_CAPACITY;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditWardCommand.EditWardDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"jeraldkiew"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":" * Parses input arguments and creates a new EditCommand object","lastModifiedDate":"2023-03-29"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"public class EditWardCommandParser implements Parser\u003cEditWardCommand\u003e {","lastModifiedDate":"2023-03-29"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-29"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"     * Parses the given {@code String} of arguments in the context of the","lastModifiedDate":"2023-03-29"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"     * EditWardCommand","lastModifiedDate":"2023-03-29"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"     * and returns an EditWardCommand object for execution.","lastModifiedDate":"2023-03-29"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-29"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-29"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-29"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"    public EditWardCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(args);","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_WARD, PREFIX_CAPACITY);","lastModifiedDate":"2023-03-29"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"        Index index;","lastModifiedDate":"2023-03-29"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        try {","lastModifiedDate":"2023-03-29"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2023-03-29"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditWardCommand.MESSAGE_USAGE), pe);","lastModifiedDate":"2023-03-29"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"        EditWardDescriptor editWardDescriptor \u003d new EditWardCommand.EditWardDescriptor();","lastModifiedDate":"2023-03-29"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"        if (argMultimap.getValue(PREFIX_WARD).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"            editWardDescriptor.setWard(ParserUtil.parseWardName(argMultimap.getValue(PREFIX_WARD).get()));","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"        if (argMultimap.getValue(PREFIX_CAPACITY).isPresent()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"            editWardDescriptor.setCapacity(ParserUtil.parseCapacity(argMultimap.getValue(PREFIX_CAPACITY).get()));","lastModifiedDate":"2023-03-29"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"        if (!editWardDescriptor.isAnyFieldEdited()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"            throw new ParseException(EditWardCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-29"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"        return new EditWardCommand(index, editWardDescriptor);","lastModifiedDate":"2023-03-29"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"jeraldkiew"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"yitong241":8,"jeraldkiew":44}},{"path":"src/main/java/seedu/medinfo/logic/parser/FindCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-01-26"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.FindCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NricContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.StatusContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.WardNameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-01-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * Parses input arguments and creates a new FindCommand object","lastModifiedDate":"2017-01-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-01-26"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-01-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2017-01-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2019-05-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public FindCommand parse(String args) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_NRIC, PREFIX_STATUS,","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"                PREFIX_WARD);","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"        if (!anyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_STATUS, PREFIX_WARD)","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"                || !argMultimap.getPreamble().isEmpty()","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"                || manyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_NRIC, PREFIX_STATUS, PREFIX_WARD)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-16"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        if (anyPrefixesPresent(argMultimap, PREFIX_NAME)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"            String trimmedNames \u003d argMultimap.getValue(PREFIX_NAME).get();","lastModifiedDate":"2023-03-16"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedNames);","lastModifiedDate":"2023-03-16"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"            String[] nameKeywords \u003d trimmedNames.split(\"\\\\s+\");","lastModifiedDate":"2023-03-16"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));","lastModifiedDate":"2023-03-16"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"        } else if (anyPrefixesPresent(argMultimap, PREFIX_NRIC)) {","lastModifiedDate":"2023-03-16"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"            String trimmedNric \u003d argMultimap.getValue(PREFIX_NRIC).get();","lastModifiedDate":"2023-03-16"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedNric);","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"            String [] nricKeywords \u003d trimmedNric.split(\"\\\\s+\");","lastModifiedDate":"2023-03-16"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"            return new FindCommand(new NricContainsKeywordsPredicate(Arrays.asList(nricKeywords)));","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"        } else if (anyPrefixesPresent(argMultimap, PREFIX_STATUS)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"            String trimmedStatus \u003d argMultimap.getValue(PREFIX_STATUS).get();","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedStatus);","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"            String [] statusKeywords \u003d trimmedStatus.split(\"\\\\s+\");","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"            return new FindCommand(new StatusContainsKeywordsPredicate(Arrays.asList(statusKeywords)));","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"            String trimmedWardName \u003d argMultimap.getValue(PREFIX_WARD).get();","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedWardName);","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"            String [] statusKeywords \u003d trimmedWardName.split(\"\\\\s+\");","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"            return new FindCommand(new WardNameContainsKeywordsPredicate(Arrays.asList(statusKeywords)));","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-16"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-16"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"    private static boolean manyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"        return Stream.of(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count() \u003e 1;","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"    private void checkArgsEmpty(String trimmedArgs) throws ParseException {","lastModifiedDate":"2023-03-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2017-02-12"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            throw new ParseException(","lastModifiedDate":"2017-03-11"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-01-26"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-01-26"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-26"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-26"},{"lineNumber":81,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-26"}],"authorContributionMap":{"yitong241":56,"daytona65":2,"-":23}},{"path":"src/main/java/seedu/medinfo/logic/parser/MedInfoParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_ABORT_DELETE;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2023-03-29"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"import javafx.scene.control.ButtonType;","lastModifiedDate":"2023-03-29"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.Command;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditWardCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.FindCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ListCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Parses user input.","lastModifiedDate":"2016-08-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"public class MedInfoParser {","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Used for initial separation of command word and args.","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");","lastModifiedDate":"2016-09-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     * @param userInput full user input string","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @return the command based on the user input","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2017-03-11"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {","lastModifiedDate":"2017-03-11"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-03-11"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\");","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":55,"author":{"gitId":"nramapurath"},"content":"        // for confirmation window","lastModifiedDate":"2023-03-29"},{"lineNumber":56,"author":{"gitId":"nramapurath"},"content":"        Alert confirmationDialog;","lastModifiedDate":"2023-03-29"},{"lineNumber":57,"author":{"gitId":"nramapurath"},"content":"        Optional\u003cButtonType\u003e result;","lastModifiedDate":"2023-03-29"},{"lineNumber":58,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        switch (commandWord) {","lastModifiedDate":"2016-08-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        case AddCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"            return new AddCommandParser().parse(arguments);","lastModifiedDate":"2017-02-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        case EditCommand.COMMAND_WORD:","lastModifiedDate":"2016-12-21"},{"lineNumber":64,"author":{"gitId":"-"},"content":"            return new EditCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"nramapurath"},"content":"            confirmationDialog \u003d new Alert(Alert.AlertType.CONFIRMATION,","lastModifiedDate":"2023-03-29"},{"lineNumber":68,"author":{"gitId":"nramapurath"},"content":"                    \"Are you sure you want to delete the patient?\");","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"nramapurath"},"content":"            result \u003d confirmationDialog.showAndWait();","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"nramapurath"},"content":"            if (result.isPresent() \u0026\u0026 result.get() \u003d\u003d ButtonType.OK) {","lastModifiedDate":"2023-03-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"                return new DeleteCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":72,"author":{"gitId":"nramapurath"},"content":"            } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"nramapurath"},"content":"                throw new ParseException(MESSAGE_ABORT_DELETE); // cancel the deletion command","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"nramapurath"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        case ClearCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":77,"author":{"gitId":"nramapurath"},"content":"            confirmationDialog \u003d new Alert(Alert.AlertType.CONFIRMATION,","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"nramapurath"},"content":"                    \"Are you sure you want to clear ALL patients and wards?\");","lastModifiedDate":"2023-03-31"},{"lineNumber":79,"author":{"gitId":"nramapurath"},"content":"            result \u003d confirmationDialog.showAndWait();","lastModifiedDate":"2023-03-29"},{"lineNumber":80,"author":{"gitId":"nramapurath"},"content":"            if (result.isPresent() \u0026\u0026 result.get() \u003d\u003d ButtonType.OK) {","lastModifiedDate":"2023-03-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"                return new ClearCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"nramapurath"},"content":"            } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":83,"author":{"gitId":"nramapurath"},"content":"                throw new ParseException(MESSAGE_ABORT_DELETE); // cancel the deletion command","lastModifiedDate":"2023-03-29"},{"lineNumber":84,"author":{"gitId":"nramapurath"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"            return new FindCommandParser().parse(arguments);","lastModifiedDate":"2017-01-26"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2016-09-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"            return new ListCommand();","lastModifiedDate":"2016-09-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"            return new ExitCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        case HelpCommand.COMMAND_WORD:","lastModifiedDate":"2016-08-26"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            return new HelpCommand();","lastModifiedDate":"2016-08-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"        case AddWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-25"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"            return new AddWardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-25"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":101,"author":{"gitId":"jeraldkiew"},"content":"        case EditWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-29"},{"lineNumber":102,"author":{"gitId":"jeraldkiew"},"content":"            return new EditWardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-29"},{"lineNumber":103,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"        case DeleteWardCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"nramapurath"},"content":"            confirmationDialog \u003d new Alert(Alert.AlertType.CONFIRMATION,","lastModifiedDate":"2023-03-29"},{"lineNumber":106,"author":{"gitId":"nramapurath"},"content":"                    \"Are you sure you want to delete the ward?\");","lastModifiedDate":"2023-03-29"},{"lineNumber":107,"author":{"gitId":"nramapurath"},"content":"            result \u003d confirmationDialog.showAndWait();","lastModifiedDate":"2023-03-29"},{"lineNumber":108,"author":{"gitId":"nramapurath"},"content":"            if (result.isPresent() \u0026\u0026 result.get() \u003d\u003d ButtonType.OK) {","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"yitong241"},"content":"                return new DeleteWardCommandParser().parse(arguments);","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"nramapurath"},"content":"            } else {","lastModifiedDate":"2023-03-29"},{"lineNumber":111,"author":{"gitId":"nramapurath"},"content":"                throw new ParseException(MESSAGE_ABORT_DELETE); // cancel the deletion command","lastModifiedDate":"2023-03-29"},{"lineNumber":112,"author":{"gitId":"nramapurath"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":113,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"yitong241"},"content":"        case SortCommand.COMMAND_WORD:","lastModifiedDate":"2023-03-28"},{"lineNumber":115,"author":{"gitId":"yitong241"},"content":"            return new SortCommandParser().parse(arguments);","lastModifiedDate":"2023-03-28"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        default:","lastModifiedDate":"2016-08-26"},{"lineNumber":118,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-24"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":30,"yitong241":28,"jeraldkiew":3,"-":61}},{"path":"src/main/java/seedu/medinfo/logic/parser/Parser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.Command;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}.","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public interface Parser\u003cT extends Command\u003e {","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a command and returns it.","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * @throws ParseException if {@code userInput} does not conform the expected format","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    T parse(String userInput) throws ParseException;","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"yitong241":3,"-":13}},{"path":"src/main/java/seedu/medinfo/logic/parser/ParserUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand.Field;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand.Order;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Discharge;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Capacity;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":19,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-02-11"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":" * Contains utility methods used for parsing strings in the various *Parser","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":" * classes.","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-02-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ParserUtil {","lastModifiedDate":"2017-02-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";","lastModifiedDate":"2017-06-02"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-11"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"     * and trailing whitespaces will be","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * trimmed.","lastModifiedDate":"2017-05-25"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"     * @throws ParseException if the specified index is invalid (not non-zero","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"     *                        unsigned integer).","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();","lastModifiedDate":"2017-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"            throw new ParseException(MESSAGE_INVALID_INDEX);","lastModifiedDate":"2018-07-10"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-02-11"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));","lastModifiedDate":"2017-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-11"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-11"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"nramapurath"},"content":"     * Parses a {@code String nric} into a {@code Nric}.","lastModifiedDate":"2023-03-14"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"     * @throws ParseException if the given {@code nric} is invalid.","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"nramapurath"},"content":"    public static Nric parseNric(String nric) throws ParseException {","lastModifiedDate":"2023-03-14"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"nramapurath"},"content":"        String trimmedNric \u003d nric.trim();","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"nramapurath"},"content":"        if (!Nric.isValidNric(trimmedNric)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"nramapurath"},"content":"            throw new ParseException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"nramapurath"},"content":"        return new Nric(trimmedNric);","lastModifiedDate":"2023-03-14"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * Parses a {@code String name} into a {@code Name}.","lastModifiedDate":"2017-05-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2017-05-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-05-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * @throws ParseException if the given {@code name} is invalid.","lastModifiedDate":"2018-07-10"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    public static Name parseName(String name) throws ParseException {","lastModifiedDate":"2018-07-10"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        String trimmedName \u003d name.trim();","lastModifiedDate":"2017-05-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(trimmedName)) {","lastModifiedDate":"2017-05-30"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            throw new ParseException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-30"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return new Name(trimmedName);","lastModifiedDate":"2017-05-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":73,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":74,"author":{"gitId":"nramapurath"},"content":"     * Parses a {@code String status} into a {@code Status}.","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"jeraldkiew"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-12"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":77,"author":{"gitId":"KSunil2001"},"content":"     * @throws ParseException if the given {@code status} is invalid.","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":79,"author":{"gitId":"jeraldkiew"},"content":"    public static Status parseStatus(String status) throws ParseException {","lastModifiedDate":"2023-03-12"},{"lineNumber":80,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-03-12"},{"lineNumber":81,"author":{"gitId":"jeraldkiew"},"content":"        String trimmedStatus \u003d status.trim();","lastModifiedDate":"2023-03-12"},{"lineNumber":82,"author":{"gitId":"jeraldkiew"},"content":"        if (!Status.isValidStatus(trimmedStatus)) {","lastModifiedDate":"2023-03-12"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"            throw new ParseException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-12"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"        return new Status(trimmedStatus);","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":87,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"nramapurath"},"content":"     * Parses a {@code String ward} into a {@code Ward}.","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"nramapurath"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"nramapurath"},"content":"     *","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"     * @throws ParseException if the given {@code ward} is invalid.","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"    public static WardName parseWardName(String ward) throws ParseException {","lastModifiedDate":"2023-03-26"},{"lineNumber":95,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(ward);","lastModifiedDate":"2023-03-17"},{"lineNumber":96,"author":{"gitId":"nramapurath"},"content":"        String trimmedWard \u003d ward.trim();","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"nramapurath"},"content":"        if (!Ward.isValidWard(trimmedWard)) {","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"nramapurath"},"content":"            throw new ParseException(Ward.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-17"},{"lineNumber":99,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"        return new WardName(trimmedWard);","lastModifiedDate":"2023-03-26"},{"lineNumber":101,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":104,"author":{"gitId":"nramapurath"},"content":"     * Parses a {@code String ward} into a {@code Ward}.","lastModifiedDate":"2023-03-25"},{"lineNumber":105,"author":{"gitId":"nramapurath"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-25"},{"lineNumber":106,"author":{"gitId":"nramapurath"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":107,"author":{"gitId":"nramapurath"},"content":"     * @throws ParseException if the given {@code ward} is invalid.","lastModifiedDate":"2023-03-25"},{"lineNumber":108,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":109,"author":{"gitId":"nramapurath"},"content":"    public static Capacity parseCapacity(String capacity) throws ParseException {","lastModifiedDate":"2023-03-25"},{"lineNumber":110,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(capacity);","lastModifiedDate":"2023-03-25"},{"lineNumber":111,"author":{"gitId":"nramapurath"},"content":"        String trimmedCapacity \u003d capacity.trim();","lastModifiedDate":"2023-03-25"},{"lineNumber":112,"author":{"gitId":"nramapurath"},"content":"        if (!Capacity.isValidCapacity(trimmedCapacity)) {","lastModifiedDate":"2023-03-25"},{"lineNumber":113,"author":{"gitId":"nramapurath"},"content":"            throw new ParseException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-25"},{"lineNumber":114,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":115,"author":{"gitId":"nramapurath"},"content":"        return new Capacity(trimmedCapacity);","lastModifiedDate":"2023-03-25"},{"lineNumber":116,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":117,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":118,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":119,"author":{"gitId":"KSunil2001"},"content":"     * Parses a {@code String discharge} into a {@code Discharge}.","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"KSunil2001"},"content":"     * Leading and trailing whitespaces will be trimmed.","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"KSunil2001"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"KSunil2001"},"content":"     * @throws ParseException if the given {@code discharge} is invalid.","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":124,"author":{"gitId":"KSunil2001"},"content":"    public static Discharge parseDischarge(String discharge) throws ParseException {","lastModifiedDate":"2023-03-22"},{"lineNumber":125,"author":{"gitId":"KSunil2001"},"content":"        requireNonNull(discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":126,"author":{"gitId":"KSunil2001"},"content":"        String trimmedDischarge \u003d discharge.trim();","lastModifiedDate":"2023-03-22"},{"lineNumber":127,"author":{"gitId":"KSunil2001"},"content":"        if (!Discharge.isValidDischarge(trimmedDischarge)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":128,"author":{"gitId":"KSunil2001"},"content":"            throw new ParseException(Discharge.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-22"},{"lineNumber":129,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":130,"author":{"gitId":"KSunil2001"},"content":"        return new Discharge(trimmedDischarge);","lastModifiedDate":"2023-03-22"},{"lineNumber":131,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":132,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":135,"author":{"gitId":"yitong241"},"content":"     * Parses {@code String arg} into a {@code Order}.","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"yitong241"},"content":"     * @throws ParseException if the given {@code arg} is invalid.","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"yitong241"},"content":"    public static Order parseSortOrder(String arg) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"yitong241"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"yitong241"},"content":"            return Order.valueOf(arg.toUpperCase());","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"yitong241"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(SortCommand.MESSAGE_UNKNOWN_ORDER_KEYWORD);","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"yitong241"},"content":"     * Parses {@code String arg} into a {@code Type}.","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"yitong241"},"content":"     * @throws ParseException if the given {@code arg} is invalid.","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"yitong241"},"content":"    public static Field parseSortType(String arg) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"yitong241"},"content":"        try {","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"yitong241"},"content":"            return Field.valueOf(arg.toUpperCase());","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"yitong241"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(SortCommand.MESSAGE_UNKNOWN_ORDER_KEYWORD);","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-11"}],"authorContributionMap":{"nramapurath":34,"yitong241":44,"jeraldkiew":27,"-":37,"KSunil2001":17}},{"path":"src/main/java/seedu/medinfo/logic/parser/Prefix.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":4,"author":{"gitId":"-"},"content":" * A prefix that marks the beginning of an argument in an arguments string.","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":" * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027.","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Prefix {","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    private final String prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public Prefix(String prefix) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        this.prefix \u003d prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public String getPrefix() {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        return prefix;","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2017-05-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        return getPrefix();","lastModifiedDate":"2017-05-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2017-03-11"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        return prefix \u003d\u003d null ? 0 : prefix.hashCode();","lastModifiedDate":"2017-03-11"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-03-11"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-03-11"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        if (!(obj instanceof Prefix)) {","lastModifiedDate":"2017-03-11"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-03-11"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-03-11"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-03-11"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-11"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Prefix otherPrefix \u003d (Prefix) obj;","lastModifiedDate":"2017-03-11"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        return otherPrefix.getPrefix().equals(getPrefix());","lastModifiedDate":"2017-03-11"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"yitong241":1,"-":38}},{"path":"src/main/java/seedu/medinfo/logic/parser/SortCommandParser.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_DISCHARGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.ParserUtil.parseSortOrder;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand.Field;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.SortCommand.Order;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":" * Parses input arguments and creates a new SortCommand object","lastModifiedDate":"2023-03-28"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {","lastModifiedDate":"2023-03-28"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand","lastModifiedDate":"2023-03-28"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     * and returns a FindCommand object for execution.","lastModifiedDate":"2023-03-28"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"     * @throws ParseException if the user input does not conform the expected format","lastModifiedDate":"2023-03-28"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    public SortCommand parse(String args) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_STATUS, PREFIX_DISCHARGE,","lastModifiedDate":"2023-03-28"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"                PREFIX_WARD);","lastModifiedDate":"2023-03-28"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"        if (!anyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_STATUS, PREFIX_DISCHARGE, PREFIX_WARD)","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"                || !argMultimap.getPreamble().isEmpty()","lastModifiedDate":"2023-03-28"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"                || manyPrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_STATUS, PREFIX_DISCHARGE, PREFIX_WARD)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-28"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        if (anyPrefixesPresent(argMultimap, PREFIX_NAME)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"            String trimmedName \u003d argMultimap.getValue(PREFIX_NAME).get();","lastModifiedDate":"2023-03-28"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedName);","lastModifiedDate":"2023-03-28"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"            Order order \u003d parseSortOrder(trimmedName);","lastModifiedDate":"2023-03-28"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"            return new SortCommand(Field.NAME, order);","lastModifiedDate":"2023-03-28"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        } else if (anyPrefixesPresent(argMultimap, PREFIX_STATUS)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"            String trimmedStatus \u003d argMultimap.getValue(PREFIX_STATUS).get();","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedStatus);","lastModifiedDate":"2023-03-28"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"            Order order \u003d parseSortOrder(trimmedStatus);","lastModifiedDate":"2023-03-28"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"            return new SortCommand(Field.STATUS, order);","lastModifiedDate":"2023-03-28"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"        } else if (anyPrefixesPresent(argMultimap, PREFIX_DISCHARGE)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"            String trimmedDischarge \u003d argMultimap.getValue(PREFIX_DISCHARGE).get();","lastModifiedDate":"2023-03-28"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedDischarge);","lastModifiedDate":"2023-03-28"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"            Order order \u003d parseSortOrder(trimmedDischarge);","lastModifiedDate":"2023-03-28"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"            return new SortCommand(Field.DISCHARGE, order);","lastModifiedDate":"2023-03-28"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        } else {","lastModifiedDate":"2023-03-28"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"            String trimmedWard \u003d argMultimap.getValue(PREFIX_WARD).get();","lastModifiedDate":"2023-03-28"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"            checkArgsEmpty(trimmedWard);","lastModifiedDate":"2023-03-28"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"            Order order \u003d parseSortOrder(trimmedWard);","lastModifiedDate":"2023-03-28"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"            return new SortCommand(Field.WARD, order);","lastModifiedDate":"2023-03-28"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"    private static boolean anyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-28"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2023-03-28"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"    private static boolean manyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {","lastModifiedDate":"2023-03-28"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"        return Stream.of(prefixes).filter(prefix -\u003e argumentMultimap.getValue(prefix).isPresent()).count() \u003e 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"    private void checkArgsEmpty(String trimmedArgs) throws ParseException {","lastModifiedDate":"2023-03-28"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"        if (trimmedArgs.isEmpty()) {","lastModifiedDate":"2023-03-28"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"            throw new ParseException(","lastModifiedDate":"2023-03-28"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));","lastModifiedDate":"2023-03-29"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-28"}],"authorContributionMap":{"yitong241":77}},{"path":"src/main/java/seedu/medinfo/logic/parser/exceptions/ParseException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-03-11"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * Represents a parse error encountered by a parser.","lastModifiedDate":"2017-03-11"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-03-11"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class ParseException extends IllegalValueException {","lastModifiedDate":"2017-03-11"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public ParseException(String message) {","lastModifiedDate":"2017-03-11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        super(message);","lastModifiedDate":"2017-03-11"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public ParseException(String message, Throwable cause) {","lastModifiedDate":"2017-03-11"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        super(message, cause);","lastModifiedDate":"2017-03-11"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-11"}],"authorContributionMap":{"yitong241":2,"-":15}},{"path":"src/main/java/seedu/medinfo/model/MedInfo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-27"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.UniquePatientList;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.UniqueWardList;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.exceptions.WardNotFoundException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":" * Wraps all data at the medinfo-book level","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":" * Duplicates are not allowed (by .isSamePatient comparison)","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"public class MedInfo implements ReadOnlyMedInfo {","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":"    private final UniquePatientList patients;","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    private final UniqueWardList wards;","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"     * The \u0027unusual\u0027 code block below is a non-static initialization block,","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"     * sometimes used to avoid duplication","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"     * between constructors. See","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":"     * https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-19"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"     * Note that non-static init blocks are not recommended to use. There are other","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"     * ways to avoid duplication","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * among constructors.","lastModifiedDate":"2016-10-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */ ","lastModifiedDate":"2016-10-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"        wards \u003d new UniqueWardList();","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"    public MedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"     * Creates an MedInfo using the Patients in the {@code toBeCopied}","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"    public MedInfo(ReadOnlyMedInfo toBeCopied) {","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2016-12-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        resetData(toBeCopied);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    //// list overwrite operations","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"     * FOR TESTING","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"     * Replaces the contents of the patient list with a COPY of {@code patients}.","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"nramapurath"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":59,"author":{"gitId":"KSunil2001"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-03-09"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"        List\u003cPatient\u003e patientsCopy \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        for (Patient patient : patients) {","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"jeraldkiew"},"content":"            Patient toCopy \u003d new Patient(patient.getNric(), patient.getName(),","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"jeraldkiew"},"content":"                    patient.getStatus(), patient.getWardName(), patient.getDischarge());","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"            patientsCopy.add(toCopy);","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"        this.patients.setPatients(patientsCopy);","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"     * FOR TESTING","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"     * Replaces the contents of the ward list with {@code wards}.","lastModifiedDate":"2023-03-24"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"     * {@code wards} must not contain duplicate wards.","lastModifiedDate":"2023-03-24"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"    public void setWards(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-24"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"        this.wards.setWards(wards);","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"yitong241"},"content":"     * Resets the existing data of this {@code MedInfo} with {@code newData}.","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"    public void resetData(ReadOnlyMedInfo newData) {","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(newData);","lastModifiedDate":"2017-05-15"},{"lineNumber":83,"author":{"gitId":"KSunil2001"},"content":"        setPatients(newData.getPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":"        setWards(newData.getWardList());","lastModifiedDate":"2023-03-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"nramapurath"},"content":"    //// patient-level operations","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"yitong241"},"content":"     * the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"KSunil2001"},"content":"        return patients.contains(patient);","lastModifiedDate":"2023-03-09"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"     * Returns true if a patient with the same NRIC as {@code patient} exists in","lastModifiedDate":"2023-03-23"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"     * the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"    public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"        return patients.containsNric(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":108,"author":{"gitId":"yitong241"},"content":"     * Adds a patient to the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"yitong241"},"content":"     * The patient must not already exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":110,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"KSunil2001"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2023-03-09"},{"lineNumber":112,"author":{"gitId":"daytona65"},"content":"        if (!wards.contains(p.getWardNameString())) { // If wardlist does not contain patient\u0027s ward, don\u0027t add it in.","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"            throw new WardNotFoundException();","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"KSunil2001"},"content":"        patients.add(p);","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"        wards.addPatient(p);","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":120,"author":{"gitId":"jeraldkiew"},"content":"     * Replaces the given patient {@code target} in the list with","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"jeraldkiew"},"content":"     * {@code editedPatient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"yitong241"},"content":"     * {@code target} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"jeraldkiew"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"yitong241"},"content":"     * existing patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":126,"author":{"gitId":"KSunil2001"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"daytona65"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"KSunil2001"},"content":"        patients.setPatient(target, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":"        wards.setPatient(target, editedPatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":133,"author":{"gitId":"yitong241"},"content":"     * Removes {@code key} from this {@code MedInfo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":134,"author":{"gitId":"yitong241"},"content":"     * {@code key} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":136,"author":{"gitId":"KSunil2001"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"        requireNonNull(key);","lastModifiedDate":"2023-03-27"},{"lineNumber":138,"author":{"gitId":"KSunil2001"},"content":"        patients.remove(key);","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"        wards.remove(key);","lastModifiedDate":"2023-03-27"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":142,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"    public void sortPatients(Comparator\u003cPatient\u003e comparator) {","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"yitong241"},"content":"        patients.sortPatients(comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"daytona65"},"content":"    //// ward-level operations","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"daytona65"},"content":"     * Returns true if a ward with the same identity as {@code ward} exists in","lastModifiedDate":"2023-03-24"},{"lineNumber":151,"author":{"gitId":"yitong241"},"content":"     * the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":152,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":153,"author":{"gitId":"daytona65"},"content":"    public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":154,"author":{"gitId":"daytona65"},"content":"        requireNonNull(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":155,"author":{"gitId":"daytona65"},"content":"        return wards.contains(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":156,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":157,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"yitong241"},"content":"     * Adds a ward to the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":160,"author":{"gitId":"yitong241"},"content":"     * The ward must not already exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":161,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"    public void addWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"        wards.add(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"daytona65"},"content":"     * Replaces the given ward {@code target} in the list with","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"daytona65"},"content":"     * {@code editedWard}.","lastModifiedDate":"2023-03-24"},{"lineNumber":169,"author":{"gitId":"yitong241"},"content":"     * {@code target} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":170,"author":{"gitId":"daytona65"},"content":"     * The ward identity of {@code editedWard} must not be the same as another","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"yitong241"},"content":"     * existing ward in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":172,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"daytona65"},"content":"    public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"daytona65"},"content":"        requireNonNull(editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"        wards.setWard(target, editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":177,"author":{"gitId":"jeraldkiew"},"content":"        for (Patient patient : patients) {","lastModifiedDate":"2023-03-29"},{"lineNumber":178,"author":{"gitId":"jeraldkiew"},"content":"            if (patient.getWardName().equals(target.getName())) {","lastModifiedDate":"2023-03-29"},{"lineNumber":179,"author":{"gitId":"jeraldkiew"},"content":"                Patient editedPatient \u003d new Patient(patient.getNric(), patient.getName(), patient.getStatus(),","lastModifiedDate":"2023-03-29"},{"lineNumber":180,"author":{"gitId":"jeraldkiew"},"content":"                        editedWard.getName(),","lastModifiedDate":"2023-03-29"},{"lineNumber":181,"author":{"gitId":"jeraldkiew"},"content":"                        patient.getDischarge());","lastModifiedDate":"2023-03-29"},{"lineNumber":182,"author":{"gitId":"jeraldkiew"},"content":"                patients.setPatient(patient, editedPatient);","lastModifiedDate":"2023-03-29"},{"lineNumber":183,"author":{"gitId":"jeraldkiew"},"content":"            }","lastModifiedDate":"2023-03-29"},{"lineNumber":184,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"yitong241"},"content":"     * Removes {@code key} from this {@code MedInfo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":189,"author":{"gitId":"yitong241"},"content":"     * {@code key} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"daytona65"},"content":"    public void removeWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"        wards.remove(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":195,"author":{"gitId":"-"},"content":"    //// util methods","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"KSunil2001"},"content":"        return patients.asUnmodifiableObservableList().size() + \" patients\";","lastModifiedDate":"2023-03-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"KSunil2001"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":204,"author":{"gitId":"KSunil2001"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-01"},{"lineNumber":206,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-01"},{"lineNumber":207,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":208,"author":{"gitId":"daytona65"},"content":"    public ObservableList\u003cWard\u003e getWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":209,"author":{"gitId":"daytona65"},"content":"        return wards.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":213,"author":{"gitId":"daytona65"},"content":"     * Stats to be displayed on StatusBarFooter.","lastModifiedDate":"2023-03-31"},{"lineNumber":214,"author":{"gitId":"daytona65"},"content":"     * This is the method to modify to choose what you want to display.","lastModifiedDate":"2023-03-31"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-31"},{"lineNumber":216,"author":{"gitId":"daytona65"},"content":"     * @return List of information to display.","lastModifiedDate":"2023-03-31"},{"lineNumber":217,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":218,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":219,"author":{"gitId":"daytona65"},"content":"    public List\u003cString\u003e getStatsInfo() {","lastModifiedDate":"2023-03-31"},{"lineNumber":220,"author":{"gitId":"daytona65"},"content":"        List\u003cString\u003e statsInfo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-31"},{"lineNumber":221,"author":{"gitId":"daytona65"},"content":"        String currentOccupancy \u003d \"Current Occupancy: \" + patients.size() + \"/\" + wards.capacity();","lastModifiedDate":"2023-03-31"},{"lineNumber":222,"author":{"gitId":"daytona65"},"content":"        String currentCriticals \u003d \"Critical Patients: \" + patients.numberOfCritical();","lastModifiedDate":"2023-03-31"},{"lineNumber":223,"author":{"gitId":"daytona65"},"content":"        statsInfo.add(currentOccupancy);","lastModifiedDate":"2023-03-31"},{"lineNumber":224,"author":{"gitId":"daytona65"},"content":"        statsInfo.add(currentCriticals);","lastModifiedDate":"2023-03-31"},{"lineNumber":225,"author":{"gitId":"daytona65"},"content":"        return statsInfo;","lastModifiedDate":"2023-03-31"},{"lineNumber":226,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":227,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-21"},{"lineNumber":230,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-09-21"},{"lineNumber":231,"author":{"gitId":"yitong241"},"content":"                || (other instanceof MedInfo // instanceof handles nulls","lastModifiedDate":"2023-03-30"},{"lineNumber":232,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 patients.equals(((MedInfo) other).patients));","lastModifiedDate":"2023-03-30"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":235,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":236,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-21"},{"lineNumber":237,"author":{"gitId":"KSunil2001"},"content":"        return patients.hashCode();","lastModifiedDate":"2023-03-09"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":239,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nramapurath":3,"yitong241":37,"daytona65":89,"jeraldkiew":22,"-":71,"KSunil2001":17}},{"path":"src/main/java/seedu/medinfo/model/Model.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * The API of the Model component.","lastModifiedDate":"2016-09-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public interface Model {","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2017-08-05"},{"lineNumber":18,"author":{"gitId":"KSunil2001"},"content":"    Predicate\u003cPatient\u003e PREDICATE_SHOW_ALL_PATIENTS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"    /** {@code Predicate} that always evaluate to true */","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"    Predicate\u003cWard\u003e PREDICATE_SHOW_ALL_WARDS \u003d unused -\u003e true;","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Replaces user prefs data with the data in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    void setUserPrefs(ReadOnlyUserPrefs userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Returns the user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    ReadOnlyUserPrefs getUserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Returns the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Sets the user prefs\u0027 GUI settings.","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    void setGuiSettings(GuiSettings guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"     * Returns the user prefs\u0027 medinfo book file path.","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    Path getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"     * Sets the user prefs\u0027 medinfo book file path.","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    void setMedInfoFilePath(Path addressBookFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"     * Replaces medinfo book data with the data in {@code addressBook}.","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"    void setMedInfo(ReadOnlyMedInfo addressBook);","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"    /** Returns the MedInfo */","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"    ReadOnlyMedInfo getMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-06"},{"lineNumber":64,"author":{"gitId":"KSunil2001"},"content":"    boolean hasPatient(Patient patient);","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":67,"author":{"gitId":"nramapurath"},"content":"     * Deletes the given patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"     * The patient must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"    void deletePatient(Patient target);","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-07"},{"lineNumber":73,"author":{"gitId":"nramapurath"},"content":"     * Adds the given patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"     * {@code patient} must not already exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-07"},{"lineNumber":76,"author":{"gitId":"KSunil2001"},"content":"    void addPatient(Patient patient);","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-13"},{"lineNumber":79,"author":{"gitId":"nramapurath"},"content":"     * Replaces the given patient {@code target} with {@code editedPatient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"     * {@code target} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"nramapurath"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-03-14"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"     * existing patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-13"},{"lineNumber":84,"author":{"gitId":"KSunil2001"},"content":"    void setPatient(Patient target, Patient editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"     * Sorts the list of patients by given {@code comparator}","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"    void sortPatients(Comparator\u003cPatient\u003e comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"     * Returns true if a ward with the same identity as {@code ward} exists in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"    boolean hasWard(Ward ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"     * Deletes the given ward.","lastModifiedDate":"2023-03-24"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"     * The ward must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":100,"author":{"gitId":"daytona65"},"content":"    void deleteWard(Ward target);","lastModifiedDate":"2023-03-24"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"     * Adds the given ward.","lastModifiedDate":"2023-03-24"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"     * {@code ward} must not already exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"    void addWard(Ward ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":109,"author":{"gitId":"daytona65"},"content":"     * Replaces the given ward {@code target} with {@code editedWard}.","lastModifiedDate":"2023-03-24"},{"lineNumber":110,"author":{"gitId":"yitong241"},"content":"     * {@code target} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"daytona65"},"content":"     * The ward identity of {@code editedWard} must not be the same as another","lastModifiedDate":"2023-03-24"},{"lineNumber":112,"author":{"gitId":"yitong241"},"content":"     * existing ward in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":"    void setWard(Ward target, Ward editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"    List\u003cString\u003e getStatsInfo();","lastModifiedDate":"2023-03-31"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":118,"author":{"gitId":"nramapurath"},"content":"    /** Returns an unmodifiable view of the filtered patient list */","lastModifiedDate":"2023-03-08"},{"lineNumber":119,"author":{"gitId":"KSunil2001"},"content":"    ObservableList\u003cPatient\u003e getFilteredPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":121,"author":{"gitId":"daytona65"},"content":"    /** Returns an unmodifiable view of the filtered ward list */","lastModifiedDate":"2023-03-24"},{"lineNumber":122,"author":{"gitId":"daytona65"},"content":"    ObservableList\u003cWard\u003e getFilteredWardList();","lastModifiedDate":"2023-03-24"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"nramapurath"},"content":"     * Updates the filter of the filtered patient list to filter by the given {@code predicate}.","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2017-08-05"},{"lineNumber":127,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-05"},{"lineNumber":128,"author":{"gitId":"KSunil2001"},"content":"    void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"daytona65"},"content":"     * Updates the filter of the filtered ward list to filter by the given {@code predicate}.","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"daytona65"},"content":"     * @throws NullPointerException if {@code predicate} is null.","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"    void updateFilteredWardList(Predicate\u003cWard\u003e predicate);","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"yitong241"},"content":"     * Returns true if a patient with the same NRIC as {@code patient} exists in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":138,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"    boolean hasPatientNric(Patient patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"nramapurath":6,"yitong241":29,"daytona65":40,"-":59,"KSunil2001":7}},{"path":"src/main/java/seedu/medinfo/model/ModelManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-08-05"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import javafx.collections.transformation.FilteredList;","lastModifiedDate":"2016-08-26"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":" * Represents the in-memory model of the MedInfo data.","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class ModelManager implements Model {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    private final MedInfo medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private final UserPrefs userPrefs;","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":"    private final FilteredList\u003cPatient\u003e filteredPatients;","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"    private final FilteredList\u003cWard\u003e filteredWards;","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"     * Initializes a ModelManager with the given medInfo and userPrefs.","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    public ModelManager(ReadOnlyMedInfo addressBook, ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        requireAllNonNull(addressBook, userPrefs);","lastModifiedDate":"2017-05-19"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"        logger.fine(\"Initializing with medinfo book: \" + addressBook + \" and user prefs \" + userPrefs);","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        this.medInfo \u003d new MedInfo(addressBook);","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        this.userPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        filteredPatients \u003d new FilteredList\u003c\u003e(this.medInfo.getPatientList());","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        filteredWards \u003d new FilteredList\u003c\u003e(this.medInfo.getWardList());","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public ModelManager() {","lastModifiedDate":"2016-09-22"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"        this(new MedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        requireNonNull(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        this.userPrefs.resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return userPrefs.getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"    public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"        return userPrefs.getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":79,"author":{"gitId":"yitong241"},"content":"    public void setMedInfoFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        requireNonNull(addressBookFilePath);","lastModifiedDate":"2018-11-27"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"        userPrefs.setMedInfoFilePath(addressBookFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MedInfo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"    public void setMedInfo(ReadOnlyMedInfo addressBook) {","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"        this.medInfo.resetData(addressBook);","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"    public ReadOnlyMedInfo getMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"        return medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"    //// Patient methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"        return medInfo.hasPatient(patient);","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"    public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":106,"author":{"gitId":"yitong241"},"content":"        return medInfo.hasPatientNric(patient);","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":110,"author":{"gitId":"KSunil2001"},"content":"    public void deletePatient(Patient target) {","lastModifiedDate":"2023-03-09"},{"lineNumber":111,"author":{"gitId":"yitong241"},"content":"        medInfo.removePatient(target);","lastModifiedDate":"2023-03-30"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":115,"author":{"gitId":"KSunil2001"},"content":"    public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"        medInfo.addPatient(patient);","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"KSunil2001"},"content":"        updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"daytona65"},"content":"        updateFilteredWardList(PREDICATE_SHOW_ALL_WARDS);","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-26"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-13"},{"lineNumber":122,"author":{"gitId":"KSunil2001"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"nramapurath"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"yitong241"},"content":"        medInfo.setPatient(target, editedPatient);","lastModifiedDate":"2023-03-30"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-13"},{"lineNumber":127,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":128,"author":{"gitId":"yitong241"},"content":"    public void sortPatients(Comparator\u003cPatient\u003e comparator) {","lastModifiedDate":"2023-03-28"},{"lineNumber":129,"author":{"gitId":"yitong241"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":130,"author":{"gitId":"yitong241"},"content":"        medInfo.sortPatients(comparator);","lastModifiedDate":"2023-03-30"},{"lineNumber":131,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":132,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":133,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"    //// Ward methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"    public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"        requireNonNull(ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"yitong241"},"content":"        return medInfo.hasWard(ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":140,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":141,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":142,"author":{"gitId":"daytona65"},"content":"    public void deleteWard(Ward target) {","lastModifiedDate":"2023-03-24"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"        medInfo.removeWard(target);","lastModifiedDate":"2023-03-30"},{"lineNumber":144,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":145,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":146,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":147,"author":{"gitId":"daytona65"},"content":"    public void addWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"yitong241"},"content":"        medInfo.addWard(ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"        updateFilteredWardList(PREDICATE_SHOW_ALL_WARDS);","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":151,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":152,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":153,"author":{"gitId":"daytona65"},"content":"    public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-24"},{"lineNumber":154,"author":{"gitId":"daytona65"},"content":"        requireAllNonNull(target, editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":155,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":156,"author":{"gitId":"yitong241"},"content":"        medInfo.setWard(target, editedWard);","lastModifiedDate":"2023-03-30"},{"lineNumber":157,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":158,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":159,"author":{"gitId":"nramapurath"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Patient List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-19"},{"lineNumber":162,"author":{"gitId":"nramapurath"},"content":"     * Returns an unmodifiable view of the list of {@code Patient} backed by the internal list of","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"yitong241"},"content":"     * {@code versionedMedInfo}","lastModifiedDate":"2023-03-30"},{"lineNumber":164,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-19"},{"lineNumber":165,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":166,"author":{"gitId":"KSunil2001"},"content":"    public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"nramapurath"},"content":"        return filteredPatients;","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":169,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":171,"author":{"gitId":"KSunil2001"},"content":"    public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-03-09"},{"lineNumber":172,"author":{"gitId":"-"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2017-08-05"},{"lineNumber":173,"author":{"gitId":"nramapurath"},"content":"        filteredPatients.setPredicate(predicate);","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":175,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":176,"author":{"gitId":"daytona65"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Ward List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"     * Returns an unmodifiable view of the list of {@code Ward} backed by the internal list of","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"yitong241"},"content":"     * {@code versionedMedInfo}","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":182,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"    public ObservableList\u003cWard\u003e getFilteredWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"        return filteredWards;","lastModifiedDate":"2023-03-24"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"daytona65"},"content":"    public void updateFilteredWardList(Predicate\u003cWard\u003e predicate) {","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"        requireNonNull(predicate);","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"        filteredWards.setPredicate(predicate);","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"    public List\u003cString\u003e getStatsInfo() {","lastModifiedDate":"2023-03-31"},{"lineNumber":195,"author":{"gitId":"daytona65"},"content":"        return medInfo.getStatsInfo();","lastModifiedDate":"2023-03-31"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-05-31"},{"lineNumber":198,"author":{"gitId":"-"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2017-05-31"},{"lineNumber":199,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-05-31"},{"lineNumber":200,"author":{"gitId":"-"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2017-05-31"},{"lineNumber":201,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-05-31"},{"lineNumber":202,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":204,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-05-31"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        if (!(obj instanceof ModelManager)) {","lastModifiedDate":"2017-05-31"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-05-31"},{"lineNumber":207,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-31"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-05-31"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        ModelManager other \u003d (ModelManager) obj;","lastModifiedDate":"2017-05-31"},{"lineNumber":211,"author":{"gitId":"yitong241"},"content":"        return medInfo.equals(other.medInfo)","lastModifiedDate":"2023-03-30"},{"lineNumber":212,"author":{"gitId":"-"},"content":"                \u0026\u0026 userPrefs.equals(other.userPrefs)","lastModifiedDate":"2018-11-27"},{"lineNumber":213,"author":{"gitId":"nramapurath"},"content":"                \u0026\u0026 filteredPatients.equals(other.filteredPatients);","lastModifiedDate":"2023-03-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":215,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":216,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nramapurath":8,"yitong241":44,"daytona65":51,"-":106,"KSunil2001":7}},{"path":"src/main/java/seedu/medinfo/model/ReadOnlyMedInfo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":" * Unmodifiable view of an medinfo book","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"public interface ReadOnlyMedInfo {","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"    void sortPatients(Comparator\u003cPatient\u003e comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"     * Returns an unmodifiable view of the patients list.","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"     * This list will not contain any duplicate patients.","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"    ObservableList\u003cPatient\u003e getPatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    ObservableList\u003cWard\u003e getWardList();","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"    List\u003cString\u003e getStatsInfo();","lastModifiedDate":"2023-03-31"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":10,"daytona65":3,"-":10,"KSunil2001":3}},{"path":"src/main/java/seedu/medinfo/model/ReadOnlyUserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Unmodifiable view of user prefs.","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public interface ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    GuiSettings getGuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"    Path getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"yitong241":3,"-":13}},{"path":"src/main/java/seedu/medinfo/model/UserPrefs.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-11-27"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Objects;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents User\u0027s preferences.","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class UserPrefs implements ReadOnlyUserPrefs {","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private GuiSettings guiSettings \u003d new GuiSettings();","lastModifiedDate":"2018-11-27"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    private Path medInfoFilePath \u003d Paths.get(\"data\" , \"medinfo.json\");","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with default values.","lastModifiedDate":"2018-12-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public UserPrefs() {}","lastModifiedDate":"2018-12-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public UserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        this();","lastModifiedDate":"2018-12-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        resetData(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}.","lastModifiedDate":"2018-12-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData(ReadOnlyUserPrefs newUserPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        requireNonNull(newUserPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        setGuiSettings(newUserPrefs.getGuiSettings());","lastModifiedDate":"2018-12-06"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        setMedInfoFilePath(newUserPrefs.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-06"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public GuiSettings getGuiSettings() {","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return guiSettings;","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-08-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        requireNonNull(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        this.guiSettings \u003d guiSettings;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"    public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"        return medInfoFilePath;","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    public void setMedInfoFilePath(Path medInfoFilePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        requireNonNull(medInfoFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"        this.medInfoFilePath \u003d medInfoFilePath;","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well.","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return guiSettings.equals(o.guiSettings)","lastModifiedDate":"2018-11-27"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 medInfoFilePath.equals(o.medInfoFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"        return Objects.hash(guiSettings, medInfoFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-02-25"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"        sb.append(\"\\nLocal data file location : \" + medInfoFilePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-02-25"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":12,"-":75}},{"path":"src/main/java/seedu/medinfo/model/patient/Discharge.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"KSunil2001"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import java.text.ParseException;","lastModifiedDate":"2023-04-01"},{"lineNumber":7,"author":{"gitId":"KSunil2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-22"},{"lineNumber":8,"author":{"gitId":"KSunil2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-03-22"},{"lineNumber":9,"author":{"gitId":"KSunil2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-03-22"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2023-04-01"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import java.text.DateFormat;","lastModifiedDate":"2023-04-01"},{"lineNumber":12,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":"/**","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"KSunil2001"},"content":" * Represents a Patient\u0027s discharge date in MedInfo.","lastModifiedDate":"2023-03-22"},{"lineNumber":15,"author":{"gitId":"KSunil2001"},"content":" */","lastModifiedDate":"2023-03-22"},{"lineNumber":16,"author":{"gitId":"KSunil2001"},"content":"public class Discharge {","lastModifiedDate":"2023-03-22"},{"lineNumber":17,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Discharge date-time should be a valid date-time\" +","lastModifiedDate":"2023-04-01"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"            \" of the form dd/MM/yyyy HHmm\";","lastModifiedDate":"2023-04-01"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"    public static final String DEFAULT_DISCHARGE \u003d \"To Be Confirmed\";","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"    public final String value;","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    final static String DATE_FORMAT \u003d \"dd/MM/yyyy HHmm\";","lastModifiedDate":"2023-04-01"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"KSunil2001"},"content":"     * Constructs a {@code Discharge}.","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"KSunil2001"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"KSunil2001"},"content":"     * @param discharge A valid discharge.","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"    public Discharge(String discharge) {","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"KSunil2001"},"content":"        requireNonNull(discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"KSunil2001"},"content":"        checkArgument(isValidDischarge(discharge), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-22"},{"lineNumber":34,"author":{"gitId":"KSunil2001"},"content":"        value \u003d discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"     * Returns true if a given discharge date-time is valid.","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-04-01"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"    public static boolean isValidDischarge(String date) {","lastModifiedDate":"2023-04-01"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        if (date.equals(DEFAULT_DISCHARGE)) {","lastModifiedDate":"2023-04-01"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"            return true;","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"        try {","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"            DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);","lastModifiedDate":"2023-04-01"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"            df.setLenient(false);","lastModifiedDate":"2023-04-01"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"            df.parse(date);","lastModifiedDate":"2023-04-01"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"            return true;","lastModifiedDate":"2023-04-01"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"        } catch (ParseException e) {","lastModifiedDate":"2023-04-01"},{"lineNumber":52,"author":{"gitId":"KSunil2001"},"content":"            return false;","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-04-01"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"     * Returns the dateTime.","lastModifiedDate":"2023-04-01"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"     * @return LocalDateTime","lastModifiedDate":"2023-04-01"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-04-01"},{"lineNumber":60,"author":{"gitId":"nramapurath"},"content":"    public LocalDateTime getDateTime() {","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"nramapurath"},"content":"        try {","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"nramapurath"},"content":"            DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"nramapurath"},"content":"            return LocalDateTime.parse(value, format);","lastModifiedDate":"2023-03-31"},{"lineNumber":64,"author":{"gitId":"nramapurath"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"nramapurath"},"content":"            return LocalDateTime.MIN;","lastModifiedDate":"2023-03-31"},{"lineNumber":66,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":67,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":69,"author":{"gitId":"KSunil2001"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"    public String toString() {","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"KSunil2001"},"content":"        return value;","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":73,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"KSunil2001"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"KSunil2001"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-22"},{"lineNumber":76,"author":{"gitId":"KSunil2001"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"KSunil2001"},"content":"                || (other instanceof Discharge // instanceof handles nulls","lastModifiedDate":"2023-03-22"},{"lineNumber":78,"author":{"gitId":"KSunil2001"},"content":"                \u0026\u0026 value.equals(((Discharge) other).value)); // state check","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"KSunil2001"},"content":"    @Override","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"KSunil2001"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"KSunil2001"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"KSunil2001"},"content":"}","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"nramapurath":9,"yitong241":22,"KSunil2001":56}},{"path":"src/main/java/seedu/medinfo/model/patient/Name.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":7,"author":{"gitId":"jeraldkiew"},"content":" * Represents a Patient\u0027s name in MedInfo.","lastModifiedDate":"2023-03-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2016-08-24"},{"lineNumber":9,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Name {","lastModifiedDate":"2016-08-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Names should only contain alphanumeric characters\"","lastModifiedDate":"2023-03-14"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"            + \" and spaces, and it should not be blank\";","lastModifiedDate":"2023-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2017-01-16"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2023-03-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2017-01-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-01-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2018-09-22"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public final String fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Constructs a {@code Name}.","lastModifiedDate":"2017-05-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-08-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * @param name A valid name.","lastModifiedDate":"2017-05-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public Name(String name) {","lastModifiedDate":"2017-05-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        requireNonNull(name);","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-09-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        fullName \u003d name;","lastModifiedDate":"2018-08-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Returns true if a given string is a valid name.","lastModifiedDate":"2018-04-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2016-08-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2018-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return fullName;","lastModifiedDate":"2016-08-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2016-08-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                || (other instanceof Name // instanceof handles nulls","lastModifiedDate":"2016-08-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                        \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        return fullName.hashCode();","lastModifiedDate":"2016-08-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":2,"yitong241":2,"jeraldkiew":2,"-":52}},{"path":"src/main/java/seedu/medinfo/model/patient/NameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"jeraldkiew"},"content":" * Tests that a {@code Patient}\u0027s {@code Name} matches any of the keywords","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":" * given.","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"public class NameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return keywords.stream()","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"nramapurath"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getName().fullName, keyword));","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2018-08-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"nramapurath":3,"yitong241":2,"jeraldkiew":2,"-":25}},{"path":"src/main/java/seedu/medinfo/model/patient/Nric.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"jeraldkiew"},"content":"/**","lastModifiedDate":"2023-03-12"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":" * Represents a Patient\u0027s Nric in MedInfo.","lastModifiedDate":"2023-03-14"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidNric(String)}","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"jeraldkiew"},"content":" */","lastModifiedDate":"2023-03-12"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"public class Nric {","lastModifiedDate":"2023-03-14"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"NRIC should not be blank. It should only begin with either the letter \"","lastModifiedDate":"2023-04-01"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"            + \"S, T, F or G, followed by 7 numbers, then ending with a capital letter.\";","lastModifiedDate":"2023-04-01"},{"lineNumber":13,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":"     * The National Registry Identification Number (NRIC) of Singapore","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"     * is made up of the first character being a S/F/T or G.","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"     * The next 2 numbers is the year of birth for people born 1967 and later.","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"     * The last character is a checksum done on the numbers,","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"     * and the algorithm will not be released.","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"    public static final String VALIDATION_REGEX \u003d \"^[STFG]\\\\d{7}[A-Z]$\";","lastModifiedDate":"2023-03-12"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"    public final String value;","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"nramapurath"},"content":"     * Constructs an {@code Nric}.","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":"     * @param nric A valid NRIC.","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"nramapurath"},"content":"    public Nric(String nric) {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(nric);","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"nramapurath"},"content":"        checkArgument(isValidNric(nric), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"        value \u003d nric;","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"nramapurath"},"content":"     * Returns true if a given string is a valid NRIC.","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"    public static boolean isValidNric(String test) {","lastModifiedDate":"2023-03-14"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-12"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"        return value;","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"nramapurath"},"content":"                || (other instanceof Nric // instanceof handles nulls","lastModifiedDate":"2023-03-14"},{"lineNumber":52,"author":{"gitId":"nramapurath"},"content":"                        \u0026\u0026 value.equals(((Nric) other).value)); // state check","lastModifiedDate":"2023-03-14"},{"lineNumber":53,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-12"},{"lineNumber":58,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":59,"author":{"gitId":"jeraldkiew"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"nramapurath":11,"yitong241":2,"daytona65":2,"jeraldkiew":44}},{"path":"src/main/java/seedu/medinfo/model/patient/NricContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.util.List;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" * Tests that a {@code Patient}\u0027s {@code NRIC} matches any of the keywords","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" * given.","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"public class NricContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    public NricContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getNric().value, keyword));","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"                || (other instanceof NricContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 keywords.equals(((NricContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"yitong241":32}},{"path":"src/main/java/seedu/medinfo/model/patient/Patient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.ward.Ward.wardWithName;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-03-31"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.util.Objects;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-24"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":" * Represents a Patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":" * Guarantees: details are present and not null, field values are validated,","lastModifiedDate":"2023-03-08"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":" * immutable.","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-24"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"public class Patient {","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    // Identity fields","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"    private final Nric nric;","lastModifiedDate":"2023-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private final Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    // Data fields","lastModifiedDate":"2018-04-19"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    private Status status \u003d new Status(\"GRAY\");","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    private WardName ward \u003d new WardName(\"Waiting Room\");","lastModifiedDate":"2023-03-26"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"    private Discharge discharge \u003d new Discharge(\"To Be Confirmed\");","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    private final int INVERTER \u003d -1;","lastModifiedDate":"2023-03-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-24"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"     * Constructor for Patient taking in nric and name.","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"     * @param nric Patient NRIC","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"     * @param name Patient name","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     *             Every field must be present and not null.","lastModifiedDate":"2016-08-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-24"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"    public Patient(Nric nric, Name name) {","lastModifiedDate":"2023-03-14"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(nric, name);","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2017-12-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"     * Constructor for Patient taking in nric, name, status.","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"     * @param nric   Patient NRIC","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"     * @param name   Patient name","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"     * @param status Patient status","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"     *               Every field must be present and not null.","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"    public Patient(Nric nric, Name name, Status status) {","lastModifiedDate":"2023-03-16"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(nric, name, status);","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"jeraldkiew"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-12"},{"lineNumber":53,"author":{"gitId":"jeraldkiew"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-12"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-12"},{"lineNumber":55,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":56,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"     * Constructor for Patient taking in nric, name, ward.","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"     * @param nric Patient NRIC","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"     * @param name Patient name","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"     * @param ward Patient ward","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"     *             Every field must be present and not null.","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"    public Patient(Nric nric, Name name, WardName ward) {","lastModifiedDate":"2023-03-26"},{"lineNumber":66,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(nric, name, ward);","lastModifiedDate":"2023-03-14"},{"lineNumber":67,"author":{"gitId":"jeraldkiew"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-14"},{"lineNumber":68,"author":{"gitId":"jeraldkiew"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-14"},{"lineNumber":69,"author":{"gitId":"jeraldkiew"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-14"},{"lineNumber":70,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":71,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"     * Constructor for Patient taking in nric, name, status, ward.","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"     * @param nric   Patient NRIC","lastModifiedDate":"2023-03-17"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"     * @param name   Patient name","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"     * @param status Patient status","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"     * @param ward   Patient ward","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"     *               Every field must be present and not null.","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"    public Patient(Nric nric, Name name, Status status, WardName ward) {","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(nric, name, status, ward);","lastModifiedDate":"2023-03-14"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-14"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-14"},{"lineNumber":85,"author":{"gitId":"jeraldkiew"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-14"},{"lineNumber":87,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":89,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"     * Constructor for Patient taking in nric, name, status, ward.","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"KSunil2001"},"content":"     *","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"     * @param nric        Patient NRIC","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"     * @param name        Patient name","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"KSunil2001"},"content":"     * @param status      Patient status","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"KSunil2001"},"content":"     * @param ward        Patient ward","lastModifiedDate":"2023-03-22"},{"lineNumber":96,"author":{"gitId":"KSunil2001"},"content":"     * @param discharge   Patient discharge","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"KSunil2001"},"content":"     *               Every field must be present and not null.","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"    public Patient(Nric nric, Name name, Status status, WardName ward, Discharge discharge) {","lastModifiedDate":"2023-03-26"},{"lineNumber":100,"author":{"gitId":"KSunil2001"},"content":"        requireAllNonNull(nric, name, status, ward, discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"KSunil2001"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"KSunil2001"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"KSunil2001"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"KSunil2001"},"content":"        this.discharge \u003d discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"nramapurath"},"content":"    public Nric getNric() {","lastModifiedDate":"2023-03-14"},{"lineNumber":109,"author":{"gitId":"jeraldkiew"},"content":"        return nric;","lastModifiedDate":"2023-03-12"},{"lineNumber":110,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":111,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    public Name getName() {","lastModifiedDate":"2017-07-12"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2017-12-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"    public String getNameString() {","lastModifiedDate":"2023-03-28"},{"lineNumber":117,"author":{"gitId":"yitong241"},"content":"        return name.fullName;","lastModifiedDate":"2023-03-28"},{"lineNumber":118,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":119,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":120,"author":{"gitId":"jeraldkiew"},"content":"    public Status getStatus() {","lastModifiedDate":"2023-03-12"},{"lineNumber":121,"author":{"gitId":"jeraldkiew"},"content":"        return status;","lastModifiedDate":"2023-03-12"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"    public String getStatusDesc() {","lastModifiedDate":"2023-03-23"},{"lineNumber":124,"author":{"gitId":"daytona65"},"content":"        return status.getDesc();","lastModifiedDate":"2023-03-23"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":126,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":127,"author":{"gitId":"daytona65"},"content":"    public Ward getWard() {","lastModifiedDate":"2023-03-27"},{"lineNumber":128,"author":{"gitId":"daytona65"},"content":"        return wardWithName(ward.wardName);","lastModifiedDate":"2023-03-27"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":130,"author":{"gitId":"daytona65"},"content":"    public WardName getWardName() {","lastModifiedDate":"2023-03-27"},{"lineNumber":131,"author":{"gitId":"jeraldkiew"},"content":"        return ward;","lastModifiedDate":"2023-03-14"},{"lineNumber":132,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"    public String getWardNameString() {","lastModifiedDate":"2023-03-27"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"        return wardWithName(ward.wardName).getNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":136,"author":{"gitId":"KSunil2001"},"content":"    public Discharge getDischarge() {","lastModifiedDate":"2023-03-22"},{"lineNumber":137,"author":{"gitId":"KSunil2001"},"content":"        return discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":138,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":139,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":140,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"yitong241"},"content":"     * Returns the discharge date as String.","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"    public String getDischargeString() {","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"yitong241"},"content":"        return discharge.value;","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":148,"author":{"gitId":"nramapurath"},"content":"     * Returns the discharge date as LocalDateTime.","lastModifiedDate":"2023-03-31"},{"lineNumber":149,"author":{"gitId":"nramapurath"},"content":"     * @return LocalDateTime representing the discharge date-time.","lastModifiedDate":"2023-03-31"},{"lineNumber":150,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":151,"author":{"gitId":"nramapurath"},"content":"    public LocalDateTime getDischargeDateTime() {","lastModifiedDate":"2023-03-31"},{"lineNumber":152,"author":{"gitId":"nramapurath"},"content":"        return discharge.getDateTime();","lastModifiedDate":"2023-03-31"},{"lineNumber":153,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":154,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":155,"author":{"gitId":"jeraldkiew"},"content":"    public void setStatus(Status newStatus) {","lastModifiedDate":"2023-03-12"},{"lineNumber":156,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(newStatus);","lastModifiedDate":"2023-03-14"},{"lineNumber":157,"author":{"gitId":"jeraldkiew"},"content":"        status \u003d newStatus;","lastModifiedDate":"2023-03-12"},{"lineNumber":158,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":159,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":160,"author":{"gitId":"yitong241"},"content":"    public void setWard(WardName newWard) {","lastModifiedDate":"2023-03-26"},{"lineNumber":161,"author":{"gitId":"jeraldkiew"},"content":"        requireAllNonNull(newWard);","lastModifiedDate":"2023-03-14"},{"lineNumber":162,"author":{"gitId":"jeraldkiew"},"content":"        ward \u003d newWard;","lastModifiedDate":"2023-03-14"},{"lineNumber":163,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-14"},{"lineNumber":164,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":165,"author":{"gitId":"KSunil2001"},"content":"    public void setDischarge(Discharge newDischarge) {","lastModifiedDate":"2023-03-22"},{"lineNumber":166,"author":{"gitId":"KSunil2001"},"content":"        requireAllNonNull(newDischarge);","lastModifiedDate":"2023-03-22"},{"lineNumber":167,"author":{"gitId":"KSunil2001"},"content":"        discharge \u003d newDischarge;","lastModifiedDate":"2023-03-22"},{"lineNumber":168,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":169,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":171,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if both patients have the same nric and name.","lastModifiedDate":"2023-03-12"},{"lineNumber":172,"author":{"gitId":"KSunil2001"},"content":"     * This defines a weaker notion of equality between two patients.","lastModifiedDate":"2023-03-09"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":174,"author":{"gitId":"jeraldkiew"},"content":"    public boolean isSamePatient(Patient otherPatient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"        return this.equals(otherPatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":176,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":177,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"     * Returns true if both patients have the same nric.","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"daytona65"},"content":"     * This defines a weaker notion of equality between two patients in order to prevent duplicate nric","lastModifiedDate":"2023-03-23"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"     * being added to the list.","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"    public boolean isSameNric(Patient otherPatient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"        if (otherPatient \u003d\u003d this) {","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"            return true;","lastModifiedDate":"2023-03-23"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":188,"author":{"gitId":"nramapurath"},"content":"        return otherPatient !\u003d null","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"            \u0026\u0026 otherPatient.getNric().equals(this.getNric());","lastModifiedDate":"2023-03-22"},{"lineNumber":190,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":192,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":193,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Name in ascending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":194,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":195,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":196,"author":{"gitId":"yitong241"},"content":"    public int compareToByNameAsc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":197,"author":{"gitId":"yitong241"},"content":"        return this.getNameString().compareTo(patient.getNameString());","lastModifiedDate":"2023-03-28"},{"lineNumber":198,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":199,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":200,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":201,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":202,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Name in descending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":203,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":204,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":205,"author":{"gitId":"yitong241"},"content":"    public int compareToByNameDesc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":206,"author":{"gitId":"yitong241"},"content":"        return INVERTER * this.getNameString().compareTo(patient.getNameString());","lastModifiedDate":"2023-03-28"},{"lineNumber":207,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":208,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":210,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Status in ascending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":211,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":212,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":213,"author":{"gitId":"yitong241"},"content":"    public int compareToByStatusAsc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":214,"author":{"gitId":"yitong241"},"content":"        return this.getStatus().getValue().compareTo(patient.getStatus().getValue());","lastModifiedDate":"2023-03-28"},{"lineNumber":215,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":216,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":217,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":218,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Status in descending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":219,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":220,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":221,"author":{"gitId":"yitong241"},"content":"    public int compareToByStatusDesc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":222,"author":{"gitId":"yitong241"},"content":"        return INVERTER * this.getStatus().getValue().compareTo(patient.getStatus().getValue());","lastModifiedDate":"2023-03-28"},{"lineNumber":223,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":224,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":225,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":226,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Discharge in ascending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":227,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":228,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":229,"author":{"gitId":"yitong241"},"content":"    public int compareToByDischargeAsc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":230,"author":{"gitId":"nramapurath"},"content":"        return this.getDischargeDateTime().compareTo(patient.getDischargeDateTime());","lastModifiedDate":"2023-03-31"},{"lineNumber":231,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":232,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":233,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":234,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Discharge in descending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":235,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":236,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":237,"author":{"gitId":"yitong241"},"content":"    public int compareToByDischargeDesc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":238,"author":{"gitId":"nramapurath"},"content":"        return INVERTER * this.getDischargeDateTime().compareTo(patient.getDischargeDateTime());","lastModifiedDate":"2023-03-31"},{"lineNumber":239,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":240,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":241,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":242,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Ward in ascending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":243,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":244,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":245,"author":{"gitId":"yitong241"},"content":"    public int compareToByWardAsc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":246,"author":{"gitId":"yitong241"},"content":"        return this.getWardNameString().compareTo(patient.getWardNameString());","lastModifiedDate":"2023-03-28"},{"lineNumber":247,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":248,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":249,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":250,"author":{"gitId":"yitong241"},"content":"     * Returns compared result between {@code this} and the given {@code patient} by Ward in descending order.","lastModifiedDate":"2023-03-28"},{"lineNumber":251,"author":{"gitId":"yitong241"},"content":"     * Returns positive integer if {@code this} should be placed after, 0 if same, and negative if before.","lastModifiedDate":"2023-03-28"},{"lineNumber":252,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":253,"author":{"gitId":"yitong241"},"content":"    public int compareToByWardDesc(Patient patient) {","lastModifiedDate":"2023-03-28"},{"lineNumber":254,"author":{"gitId":"yitong241"},"content":"        return INVERTER * this.getWardNameString().compareTo(patient.getWardNameString());","lastModifiedDate":"2023-03-28"},{"lineNumber":255,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":256,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":257,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-04-19"},{"lineNumber":258,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if both patients have the same identity and data fields.","lastModifiedDate":"2023-03-08"},{"lineNumber":259,"author":{"gitId":"jeraldkiew"},"content":"     * This defines a stronger notion of equality between two patients.","lastModifiedDate":"2023-03-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-04-19"},{"lineNumber":261,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":262,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-08-24"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2018-01-10"},{"lineNumber":264,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2018-01-10"},{"lineNumber":265,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":267,"author":{"gitId":"nramapurath"},"content":"        if (!(other instanceof Patient)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2018-01-10"},{"lineNumber":269,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-01-10"},{"lineNumber":270,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-10"},{"lineNumber":271,"author":{"gitId":"nramapurath"},"content":"        Patient otherPatient \u003d (Patient) other;","lastModifiedDate":"2023-03-08"},{"lineNumber":272,"author":{"gitId":"jeraldkiew"},"content":"        return otherPatient.getNric().equals(getNric())","lastModifiedDate":"2023-03-12"},{"lineNumber":273,"author":{"gitId":"daytona65"},"content":"            \u0026\u0026 otherPatient.getName().equals(getName());","lastModifiedDate":"2023-03-27"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":275,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":276,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    public int hashCode() {","lastModifiedDate":"2016-08-24"},{"lineNumber":278,"author":{"gitId":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own","lastModifiedDate":"2016-08-24"},{"lineNumber":279,"author":{"gitId":"KSunil2001"},"content":"        return Objects.hash(nric, name, status, ward, discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":281,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-24"},{"lineNumber":282,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-08-24"},{"lineNumber":283,"author":{"gitId":"-"},"content":"    public String toString() {","lastModifiedDate":"2016-08-24"},{"lineNumber":284,"author":{"gitId":"-"},"content":"        final StringBuilder builder \u003d new StringBuilder();","lastModifiedDate":"2018-01-10"},{"lineNumber":285,"author":{"gitId":"jeraldkiew"},"content":"        builder.append(getNric())","lastModifiedDate":"2023-03-12"},{"lineNumber":286,"author":{"gitId":"jeraldkiew"},"content":"            .append(\"; Name: \")","lastModifiedDate":"2023-03-12"},{"lineNumber":287,"author":{"gitId":"jeraldkiew"},"content":"            .append(getName())","lastModifiedDate":"2023-03-12"},{"lineNumber":288,"author":{"gitId":"jeraldkiew"},"content":"            .append(\"; Status: \")","lastModifiedDate":"2023-03-12"},{"lineNumber":289,"author":{"gitId":"jeraldkiew"},"content":"            .append(getStatus())","lastModifiedDate":"2023-03-14"},{"lineNumber":290,"author":{"gitId":"jeraldkiew"},"content":"            .append(\"; Ward: \")","lastModifiedDate":"2023-03-14"},{"lineNumber":291,"author":{"gitId":"KSunil2001"},"content":"            .append(getWard())","lastModifiedDate":"2023-03-22"},{"lineNumber":292,"author":{"gitId":"KSunil2001"},"content":"            .append(\"; Discharge: \")","lastModifiedDate":"2023-03-22"},{"lineNumber":293,"author":{"gitId":"KSunil2001"},"content":"            .append(getDischarge());","lastModifiedDate":"2023-03-22"},{"lineNumber":294,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":295,"author":{"gitId":"-"},"content":"        return builder.toString();","lastModifiedDate":"2018-01-10"},{"lineNumber":296,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-24"},{"lineNumber":297,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-24"}],"authorContributionMap":{"nramapurath":18,"yitong241":89,"daytona65":52,"jeraldkiew":55,"-":51,"KSunil2001":32}},{"path":"src/main/java/seedu/medinfo/model/patient/Status.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-12"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":6,"author":{"gitId":"nramapurath"},"content":"/**","lastModifiedDate":"2023-03-14"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":" * Represents a patient status in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":" */","lastModifiedDate":"2023-03-14"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"public class Status {","lastModifiedDate":"2023-03-14"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":11,"author":{"gitId":"jeraldkiew"},"content":"     * The colour codes below reflect the severity of a patient\u0027s condition","lastModifiedDate":"2023-03-12"},{"lineNumber":12,"author":{"gitId":"jeraldkiew"},"content":"     * and the urgency of treatment needed.","lastModifiedDate":"2023-03-12"},{"lineNumber":13,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":"     * GRAY: Unknown condition, waiting for evaluation","lastModifiedDate":"2023-03-12"},{"lineNumber":15,"author":{"gitId":"jeraldkiew"},"content":"     * GREEN: Non-urgent, re-evaluation every 180 min","lastModifiedDate":"2023-03-12"},{"lineNumber":16,"author":{"gitId":"jeraldkiew"},"content":"     * YELLOW: Potentially unstable, re-evaluation every 60 min","lastModifiedDate":"2023-03-12"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"     * RED: Requires immediate evaluation by physician","lastModifiedDate":"2023-03-12"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Statuses should only be \u0027GRAY\u0027, \u0027GREEN\u0027, \u0027YELLOW\u0027, or \u0027RED\u0027\";","lastModifiedDate":"2023-03-12"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"    private static String[] values \u003d { \"GRAY\", \"GREEN\", \"YELLOW\", \"RED\" };","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"    public final String value;","lastModifiedDate":"2023-03-12"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"     * Constructs an {@code status}.","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-12"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"     * @param status A valid status.","lastModifiedDate":"2023-03-14"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    public Status(String status) {","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"jeraldkiew"},"content":"        requireNonNull(status);","lastModifiedDate":"2023-03-12"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"        checkArgument(isValidStatus(status), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-12"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"        value \u003d status;","lastModifiedDate":"2023-03-12"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":36,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-12"},{"lineNumber":37,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if a given string is a valid status.","lastModifiedDate":"2023-03-12"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-12"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"    public static boolean isValidStatus(String test) {","lastModifiedDate":"2023-03-12"},{"lineNumber":40,"author":{"gitId":"nramapurath"},"content":"        for (String value : values) {","lastModifiedDate":"2023-03-14"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"            if (test.equals(value)) {","lastModifiedDate":"2023-03-12"},{"lineNumber":42,"author":{"gitId":"jeraldkiew"},"content":"                return true;","lastModifiedDate":"2023-03-12"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"            }","lastModifiedDate":"2023-03-12"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-12"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"        return false;","lastModifiedDate":"2023-03-12"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-12"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"    @Override","lastModifiedDate":"2023-03-12"},{"lineNumber":49,"author":{"gitId":"jeraldkiew"},"content":"    public String toString() {","lastModifiedDate":"2023-03-12"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"        return value;","lastModifiedDate":"2023-03-12"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-12"},{"lineNumber":52,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":56,"author":{"gitId":"KSunil2001"},"content":"                || (other instanceof Status // instanceof handles nulls","lastModifiedDate":"2023-03-16"},{"lineNumber":57,"author":{"gitId":"KSunil2001"},"content":"                \u0026\u0026 value.equals(((Status) other).value)); // state check","lastModifiedDate":"2023-03-16"},{"lineNumber":58,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":59,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":60,"author":{"gitId":"KSunil2001"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":61,"author":{"gitId":"KSunil2001"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-16"},{"lineNumber":62,"author":{"gitId":"KSunil2001"},"content":"        return value.hashCode();","lastModifiedDate":"2023-03-16"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"     * Returns description of the status code.","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"     * @return Description of status code.","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"    public String getDesc() {","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"        switch(value) {","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"        case \"GREEN\":","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"            return \"STABLE\";","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"        case \"YELLOW\":","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"            return \"SERIOUS\";","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"        case \"RED\":","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"            return \"CRITICAL\";","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"        default:","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"            return \"UNKNOWN\";","lastModifiedDate":"2023-03-21"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-21"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-21"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"     * Returns the numeric value of each status.","lastModifiedDate":"2023-03-28"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"     * @return Numeric value of each status.","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"    public Integer getValue() {","lastModifiedDate":"2023-03-28"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"        switch ((value)) {","lastModifiedDate":"2023-03-28"},{"lineNumber":90,"author":{"gitId":"yitong241"},"content":"        case \"GREEN\":","lastModifiedDate":"2023-03-28"},{"lineNumber":91,"author":{"gitId":"yitong241"},"content":"            return 1;","lastModifiedDate":"2023-03-28"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"        case \"YELLOW\":","lastModifiedDate":"2023-03-28"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"            return 2;","lastModifiedDate":"2023-03-28"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"        case \"RED\":","lastModifiedDate":"2023-03-28"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"            return 3;","lastModifiedDate":"2023-03-28"},{"lineNumber":96,"author":{"gitId":"yitong241"},"content":"        default:","lastModifiedDate":"2023-03-28"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"            return 0;","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"jeraldkiew"},"content":"}","lastModifiedDate":"2023-03-12"}],"authorContributionMap":{"nramapurath":4,"yitong241":25,"daytona65":18,"jeraldkiew":41,"KSunil2001":12}},{"path":"src/main/java/seedu/medinfo/model/patient/StatusContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.util.List;","lastModifiedDate":"2023-03-16"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-16"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-16"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" * Tests that a {@code Patient}\u0027s {@code Status} matches any of the keywords","lastModifiedDate":"2023-03-16"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" * given.","lastModifiedDate":"2023-03-16"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-16"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"public class StatusContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-03-16"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-16"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    public StatusContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-16"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-16"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-03-16"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-16"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getStatus().value, keyword));","lastModifiedDate":"2023-03-16"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-16"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-16"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-16"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"                || (other instanceof StatusContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-16"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 keywords.equals(((StatusContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-16"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-16"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-16"}],"authorContributionMap":{"yitong241":32}},{"path":"src/main/java/seedu/medinfo/model/patient/UniquePatientList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-28"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-08"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":"import java.util.List;","lastModifiedDate":"2023-03-08"},{"lineNumber":10,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-08"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"KSunil2001"},"content":" * A list of patients that enforces uniqueness between its elements and does not","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":" * allow nulls.","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":" * A patient is considered unique by comparing using","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":" * {@code Patient#isSamePatient(Patient)}. As such, adding and updating of","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":" * patients uses Patient#isSamePatient(Patient) for equality so as to ensure that","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":" * the patient being added or updated is","lastModifiedDate":"2023-03-08"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":" * unique in terms of identity in the UniquePatientList. However, the removal of","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"jeraldkiew"},"content":" * a patient uses Patient#equals(Object) so","lastModifiedDate":"2023-03-08"},{"lineNumber":25,"author":{"gitId":"nramapurath"},"content":" * as to ensure that the patient with exactly the same fields will be removed.","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"nramapurath"},"content":" *","lastModifiedDate":"2023-03-08"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":" *","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"KSunil2001"},"content":" * @see Patient#isSamePatient(Patient)","lastModifiedDate":"2023-03-09"},{"lineNumber":30,"author":{"gitId":"nramapurath"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"public class UniquePatientList implements Iterable\u003cPatient\u003e {","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":33,"author":{"gitId":"nramapurath"},"content":"    private final ObservableList\u003cPatient\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-08"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"    private final ObservableList\u003cPatient\u003e internalUnmodifiableList \u003d FXCollections","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"            .unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"     * Returns size of list.","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    public int size() {","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        return internalList.size();","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"     * Returns total number of critical patients.","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    public int numberOfCritical() {","lastModifiedDate":"2023-03-31"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"        int critical \u003d 0;","lastModifiedDate":"2023-03-31"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"        for (Patient patient:internalList) {","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"            critical \u003d patient.getStatusDesc().equals(\"CRITICAL\") ? critical + 1 : critical;","lastModifiedDate":"2023-03-31"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        return critical;","lastModifiedDate":"2023-03-31"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":56,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if the list contains an equivalent patient as the given","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"jeraldkiew"},"content":"     * argument.","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"nramapurath"},"content":"    public boolean contains(Patient toCheck) {","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"jeraldkiew"},"content":"        return internalList.stream().anyMatch(toCheck::isSamePatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":63,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"     * Returns true if the list contains a patient with equivalent NRIC as the given","lastModifiedDate":"2023-03-23"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"     * argument.","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"    public boolean containsNric(Patient toCheck) {","lastModifiedDate":"2023-03-23"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-23"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"        return internalList.stream().anyMatch(toCheck::isSameNric);","lastModifiedDate":"2023-03-23"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":74,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":75,"author":{"gitId":"nramapurath"},"content":"     * Adds a patient to the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"nramapurath"},"content":"     * The patient must not already exist in the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"nramapurath"},"content":"    public void add(Patient toAdd) {","lastModifiedDate":"2023-03-08"},{"lineNumber":79,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-08"},{"lineNumber":80,"author":{"gitId":"nramapurath"},"content":"        if (contains(toAdd)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":81,"author":{"gitId":"KSunil2001"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-03-09"},{"lineNumber":82,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":83,"author":{"gitId":"nramapurath"},"content":"        internalList.add(toAdd);","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":86,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":87,"author":{"gitId":"nramapurath"},"content":"     * Replaces the patient {@code target} in the list with {@code editedPatient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":88,"author":{"gitId":"nramapurath"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":89,"author":{"gitId":"jeraldkiew"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-03-08"},{"lineNumber":90,"author":{"gitId":"jeraldkiew"},"content":"     * existing patient in the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"nramapurath"},"content":"        requireAllNonNull(target, editedPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":94,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"nramapurath"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-08"},{"lineNumber":96,"author":{"gitId":"nramapurath"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-08"},{"lineNumber":97,"author":{"gitId":"KSunil2001"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-03-09"},{"lineNumber":98,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"jeraldkiew"},"content":"        if (!target.isSamePatient(editedPatient) \u0026\u0026 contains(editedPatient)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":104,"author":{"gitId":"nramapurath"},"content":"        internalList.set(index, editedPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":105,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":106,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":107,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":108,"author":{"gitId":"nramapurath"},"content":"     * Removes the equivalent patient from the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":109,"author":{"gitId":"nramapurath"},"content":"     * The patient must exist in the list.","lastModifiedDate":"2023-03-08"},{"lineNumber":110,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"nramapurath"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2023-03-08"},{"lineNumber":112,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"nramapurath"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"KSunil2001"},"content":"            throw new PatientNotFoundException();","lastModifiedDate":"2023-03-09"},{"lineNumber":115,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":116,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":117,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":118,"author":{"gitId":"KSunil2001"},"content":"    public void setPatients(UniquePatientList replacement) {","lastModifiedDate":"2023-03-09"},{"lineNumber":119,"author":{"gitId":"nramapurath"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-08"},{"lineNumber":120,"author":{"gitId":"nramapurath"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":122,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"nramapurath"},"content":"     * Replaces the contents of this list with {@code patients}.","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"nramapurath"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2023-03-08"},{"lineNumber":126,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":127,"author":{"gitId":"KSunil2001"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-03-09"},{"lineNumber":128,"author":{"gitId":"nramapurath"},"content":"        requireAllNonNull(patients);","lastModifiedDate":"2023-03-08"},{"lineNumber":129,"author":{"gitId":"KSunil2001"},"content":"        if (!patientsAreUnique(patients)) {","lastModifiedDate":"2023-03-09"},{"lineNumber":130,"author":{"gitId":"KSunil2001"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":132,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"nramapurath"},"content":"        internalList.setAll(patients);","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":136,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"yitong241"},"content":"     * Sorts the patient list with {@code comparator}.","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"yitong241"},"content":"     * @param comparator","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":140,"author":{"gitId":"yitong241"},"content":"    public void sortPatients(Comparator\u003cPatient\u003e comparator) {","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"yitong241"},"content":"        requireNonNull(comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":142,"author":{"gitId":"yitong241"},"content":"        ArrayList\u003cPatient\u003e sortedList \u003d replaceSort(internalList, comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":143,"author":{"gitId":"yitong241"},"content":"        internalList.setAll(sortedList);","lastModifiedDate":"2023-03-28"},{"lineNumber":144,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"yitong241"},"content":"     * Sorts the list of patients and replace the original list.","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"yitong241"},"content":"     * @param observableList","lastModifiedDate":"2023-03-28"},{"lineNumber":149,"author":{"gitId":"yitong241"},"content":"     * @param comparator","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"yitong241"},"content":"     * @return","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"yitong241"},"content":"    private static ArrayList\u003cPatient\u003e replaceSort(","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"yitong241"},"content":"            ObservableList\u003cPatient\u003e observableList, Comparator\u003cPatient\u003e comparator) {","lastModifiedDate":"2023-03-28"},{"lineNumber":154,"author":{"gitId":"yitong241"},"content":"        ArrayList\u003cPatient\u003e duplicatedList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-28"},{"lineNumber":155,"author":{"gitId":"yitong241"},"content":"        for (int i \u003d 0; i \u003c observableList.size(); i++) {","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"yitong241"},"content":"            duplicatedList.add(observableList.get(i));","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"yitong241"},"content":"        duplicatedList.sort(comparator);","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"yitong241"},"content":"        return duplicatedList;","lastModifiedDate":"2023-03-28"},{"lineNumber":160,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":162,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":163,"author":{"gitId":"nramapurath"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-08"},{"lineNumber":164,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":165,"author":{"gitId":"nramapurath"},"content":"    public ObservableList\u003cPatient\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-08"},{"lineNumber":166,"author":{"gitId":"nramapurath"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-08"},{"lineNumber":167,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":168,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":169,"author":{"gitId":"nramapurath"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":170,"author":{"gitId":"nramapurath"},"content":"    public Iterator\u003cPatient\u003e iterator() {","lastModifiedDate":"2023-03-08"},{"lineNumber":171,"author":{"gitId":"nramapurath"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-08"},{"lineNumber":172,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":173,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":174,"author":{"gitId":"nramapurath"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":175,"author":{"gitId":"nramapurath"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-08"},{"lineNumber":176,"author":{"gitId":"nramapurath"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-08"},{"lineNumber":177,"author":{"gitId":"KSunil2001"},"content":"                || (other instanceof UniquePatientList // instanceof handles nulls","lastModifiedDate":"2023-03-09"},{"lineNumber":178,"author":{"gitId":"KSunil2001"},"content":"                        \u0026\u0026 internalList.equals(((UniquePatientList) other).internalList));","lastModifiedDate":"2023-03-09"},{"lineNumber":179,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":180,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":181,"author":{"gitId":"nramapurath"},"content":"    @Override","lastModifiedDate":"2023-03-08"},{"lineNumber":182,"author":{"gitId":"nramapurath"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-08"},{"lineNumber":183,"author":{"gitId":"nramapurath"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-08"},{"lineNumber":184,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":185,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":186,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-08"},{"lineNumber":187,"author":{"gitId":"nramapurath"},"content":"     * Returns true if {@code patients} contains only unique patients.","lastModifiedDate":"2023-03-08"},{"lineNumber":188,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-08"},{"lineNumber":189,"author":{"gitId":"KSunil2001"},"content":"    private boolean patientsAreUnique(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-03-09"},{"lineNumber":190,"author":{"gitId":"nramapurath"},"content":"        for (int i \u003d 0; i \u003c patients.size() - 1; i++) {","lastModifiedDate":"2023-03-08"},{"lineNumber":191,"author":{"gitId":"nramapurath"},"content":"            for (int j \u003d i + 1; j \u003c patients.size(); j++) {","lastModifiedDate":"2023-03-08"},{"lineNumber":192,"author":{"gitId":"jeraldkiew"},"content":"                if (patients.get(i).isSamePatient(patients.get(j))) {","lastModifiedDate":"2023-03-08"},{"lineNumber":193,"author":{"gitId":"nramapurath"},"content":"                    return false;","lastModifiedDate":"2023-03-08"},{"lineNumber":194,"author":{"gitId":"nramapurath"},"content":"                }","lastModifiedDate":"2023-03-08"},{"lineNumber":195,"author":{"gitId":"nramapurath"},"content":"            }","lastModifiedDate":"2023-03-08"},{"lineNumber":196,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-08"},{"lineNumber":197,"author":{"gitId":"nramapurath"},"content":"        return true;","lastModifiedDate":"2023-03-08"},{"lineNumber":198,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-08"},{"lineNumber":199,"author":{"gitId":"nramapurath"},"content":"}","lastModifiedDate":"2023-03-08"}],"authorContributionMap":{"nramapurath":108,"yitong241":32,"daytona65":28,"jeraldkiew":13,"KSunil2001":18}},{"path":"src/main/java/seedu/medinfo/model/patient/WardNameContainsKeywordsPredicate.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.util.List;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" * Tests that a {@code Patient}\u0027s {@code Status} matches any of the keywords","lastModifiedDate":"2023-03-27"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" * given.","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"public class WardNameContainsKeywordsPredicate implements Predicate\u003cPatient\u003e {","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"    private final List\u003cString\u003e keywords;","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    public WardNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"        this.keywords \u003d keywords;","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    public boolean test(Patient patient) {","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"        return keywords.stream()","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(patient.getWard().getNameString(), keyword));","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"                || (other instanceof WardNameContainsKeywordsPredicate // instanceof handles nulls","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"                \u0026\u0026 keywords.equals(((WardNameContainsKeywordsPredicate) other).keywords)); // state check","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"yitong241":32}},{"path":"src/main/java/seedu/medinfo/model/patient/exceptions/DuplicatePatientException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-09"},{"lineNumber":3,"author":{"gitId":"KSunil2001"},"content":"/**","lastModifiedDate":"2023-03-09"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":" * Signals that the operation will result in duplicate Patients.","lastModifiedDate":"2023-03-14"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":" * Patients are considered duplicates if they have the same identity.","lastModifiedDate":"2023-03-14"},{"lineNumber":6,"author":{"gitId":"KSunil2001"},"content":" */","lastModifiedDate":"2023-03-09"},{"lineNumber":7,"author":{"gitId":"KSunil2001"},"content":"public class DuplicatePatientException extends RuntimeException {","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"KSunil2001"},"content":"    public DuplicatePatientException() {","lastModifiedDate":"2023-03-09"},{"lineNumber":9,"author":{"gitId":"KSunil2001"},"content":"        super(\"Operation would result in duplicate patients\");","lastModifiedDate":"2023-03-09"},{"lineNumber":10,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-09"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"KSunil2001"},"content":"}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"nramapurath":2,"yitong241":1,"daytona65":1,"KSunil2001":8}},{"path":"src/main/java/seedu/medinfo/model/patient/exceptions/PatientNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":3,"author":{"gitId":"nramapurath"},"content":"/**","lastModifiedDate":"2023-03-08"},{"lineNumber":4,"author":{"gitId":"nramapurath"},"content":" * Signals that the operation is unable to find the specified patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":5,"author":{"gitId":"nramapurath"},"content":" */","lastModifiedDate":"2023-03-08"},{"lineNumber":6,"author":{"gitId":"KSunil2001"},"content":"public class PatientNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-09"}],"authorContributionMap":{"nramapurath":4,"yitong241":1,"KSunil2001":1}},{"path":"src/main/java/seedu/medinfo/model/util/SampleDataUtil.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":" * Contains utility methods for populating {@code MedInfo} with sample data.","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class SampleDataUtil {","lastModifiedDate":"2016-12-20"},{"lineNumber":16,"author":{"gitId":"KSunil2001"},"content":"    public static Patient[] getSamplePatients() {","lastModifiedDate":"2023-03-09"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"        return new Patient[] {","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"            new Patient(new Nric(\"S1234567A\"), new Name(\"Alex Yeoh\"), new Status(\"RED\"),","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"                    new WardName(\"Intensive Care\")),","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"            new Patient(new Nric(\"S0000000A\"), new Name(\"Bernice Yu\"), new WardName(\"Class C\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"            new Patient(new Nric(\"S0000001A\"), new Name(\"Charlotte Oliveiro\"), new Status(\"GRAY\")),","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"nramapurath"},"content":"            new Patient(new Nric(\"S0000002A\"), new Name(\"David Li\"), new Status(\"GREEN\")),","lastModifiedDate":"2023-03-14"},{"lineNumber":23,"author":{"gitId":"nramapurath"},"content":"            new Patient(new Nric(\"S0000003A\"), new Name(\"Irfan Ibrahim\"), new Status(\"YELLOW\")),","lastModifiedDate":"2023-03-14"},{"lineNumber":24,"author":{"gitId":"nramapurath"},"content":"            new Patient(new Nric(\"S0000004A\"), new Name(\"Roy Balakrishnan\"), new Status(\"RED\"))","lastModifiedDate":"2023-03-14"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        };","lastModifiedDate":"2016-12-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-20"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    public static Ward[] getSampleWards() {","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"        return new Ward[] {","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"            new Ward(new WardName(\"Waiting Room\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"            new Ward(new WardName(\"Class A\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"            new Ward(new WardName(\"Class B\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"            new Ward(new WardName(\"Class C\")),","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"            new Ward(new WardName(\"Intensive Care\"))","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"        };","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"    public static ReadOnlyMedInfo getSampleMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        MedInfo sampleAb \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"        for (Ward sampleWard : getSampleWards()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"            sampleAb.addWard(sampleWard);","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"        for (Patient samplePatient : getSamplePatients()) {","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"            sampleAb.addPatient(samplePatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-20"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        return sampleAb;","lastModifiedDate":"2017-04-07"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-20"}],"authorContributionMap":{"nramapurath":5,"yitong241":20,"daytona65":10,"-":12,"KSunil2001":3}},{"path":"src/main/java/seedu/medinfo/model/ward/Capacity.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":" * Represents the capacity and occupancy of a ward.","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"public class Capacity {","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"nramapurath"},"content":"    private static final int MIN_CAPACITY \u003d 0;","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"nramapurath"},"content":"    private static final int MAX_CAPACITY \u003d 1000;","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Capacity should be a\"","lastModifiedDate":"2023-03-27"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"            + \" positive integer (less than \" + Integer.valueOf(MAX_CAPACITY) + \")\"","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"nramapurath"},"content":"            + \" and it should not be blank\";","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"jeraldkiew"},"content":"    private int value;","lastModifiedDate":"2023-03-24"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    public Capacity(int capacity) {","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":"        value \u003d capacity;","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"    public Capacity(String capacity) {","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"        value \u003d Integer.parseInt(capacity);","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    public void setCapacity(int capacity) {","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":"        value \u003d capacity;","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"nramapurath"},"content":"     * Returns true if a given string is a valid capacity.","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"nramapurath"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"nramapurath"},"content":"    public static boolean isValidCapacity(String test) {","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"nramapurath"},"content":"        try {","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"nramapurath"},"content":"            int value \u003d Integer.parseInt(test);","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"nramapurath"},"content":"            if (value \u003c MIN_CAPACITY || value \u003e MAX_CAPACITY) {","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"nramapurath"},"content":"                return false;","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"            }","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"nramapurath"},"content":"            return true;","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"nramapurath"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"            return false;","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"nramapurath"},"content":"        }","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"nramapurath"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"jeraldkiew"},"content":"    public int getValue() {","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"        return value;","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"nramapurath"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"nramapurath"},"content":"    public String toString() {","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"nramapurath"},"content":"        return Integer.toString(value);","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"nramapurath":28,"yitong241":1,"daytona65":16,"jeraldkiew":6}},{"path":"src/main/java/seedu/medinfo/model/ward/UniqueWardList.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.ward.Ward.wardWithName;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-24"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.exceptions.DuplicateWardException;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.exceptions.EditedWardInsufficientCapacityException;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.exceptions.WardNotFoundException;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":" * A list of wards that enforces uniqueness between its elements and does not","lastModifiedDate":"2023-03-24"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":" * allow nulls.","lastModifiedDate":"2023-03-24"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":" * A ward is considered unique by comparing using","lastModifiedDate":"2023-03-24"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":" * {@code Ward#isSameWard(Ward)}. As such, adding and updating of","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":" * wards uses Ward#isSameWard(Ward) for equality so as to ensure that","lastModifiedDate":"2023-03-24"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":" * the ward being added or updated is","lastModifiedDate":"2023-03-24"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":" * unique in terms of identity in the UniqueWardList. However, the removal of","lastModifiedDate":"2023-03-24"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":" * a ward uses Ward#equals(Object) so","lastModifiedDate":"2023-03-24"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":" * as to ensure that the ward with exactly the same fields will be removed.","lastModifiedDate":"2023-03-24"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":" *","lastModifiedDate":"2023-03-24"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":" * Supports a minimal set of list operations.","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":" *","lastModifiedDate":"2023-03-24"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":" * @see Ward#isSameWard(Ward)","lastModifiedDate":"2023-03-24"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"public class UniqueWardList implements Iterable\u003cWard\u003e {","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    private final ObservableList\u003cWard\u003e internalList \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    private final ObservableList\u003cWard\u003e internalUnmodifiableList \u003d FXCollections","lastModifiedDate":"2023-03-24"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"            .unmodifiableObservableList(internalList);","lastModifiedDate":"2023-03-24"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"     * Initializes wardlist with default Waiting Room ward with capacity of 30","lastModifiedDate":"2023-03-29"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"     * inside.","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"    public UniqueWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"        WardName waitingRoomName \u003d new WardName(\"Waiting Room\");","lastModifiedDate":"2023-03-26"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        Ward waitingRoom \u003d new Ward(waitingRoomName);","lastModifiedDate":"2023-03-26"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"        add(waitingRoom);","lastModifiedDate":"2023-03-24"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"     * Returns size of list.","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    public int size() {","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        return internalList.size();","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"     * Returns total capacity of all wards.","lastModifiedDate":"2023-03-31"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"    public int capacity() {","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"        int capacity \u003d 0;","lastModifiedDate":"2023-03-31"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        for (Ward ward: internalList) {","lastModifiedDate":"2023-03-31"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"            Capacity cap \u003d ward.getCapacity();","lastModifiedDate":"2023-03-31"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"            capacity +\u003d cap.getValue();","lastModifiedDate":"2023-03-31"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"        return capacity;","lastModifiedDate":"2023-03-31"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"     * Returns specified ward to edit.","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"    public Ward getWard(String wardName) {","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"        return internalList.get(internalList.indexOf(wardWithName(wardName)));","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"     * Returns true if the list contains an equivalent ward as the given","lastModifiedDate":"2023-03-24"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"     * {@code Ward}.","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"    public boolean contains(Ward toCheck) {","lastModifiedDate":"2023-03-24"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toCheck);","lastModifiedDate":"2023-03-24"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"        return internalList.stream().anyMatch(toCheck::isSameWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":82,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":83,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"     * Returns true if the list contains an equivalent ward as the given","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"     * {@code String}.","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"    public boolean contains(String toCheckName) {","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toCheckName);","lastModifiedDate":"2023-03-27"},{"lineNumber":90,"author":{"gitId":"daytona65"},"content":"        WardName wardName \u003d new WardName(toCheckName);","lastModifiedDate":"2023-03-27"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"        Ward toCheck \u003d new Ward(wardName);","lastModifiedDate":"2023-03-27"},{"lineNumber":92,"author":{"gitId":"daytona65"},"content":"        return internalList.stream().anyMatch(toCheck::isSameWard);","lastModifiedDate":"2023-03-27"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"     * Adds a ward to the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"     * The ward must not already exist in the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":98,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"    public void add(Ward toAdd) {","lastModifiedDate":"2023-03-24"},{"lineNumber":100,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toAdd);","lastModifiedDate":"2023-03-24"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"        if (!contains(toAdd)) {","lastModifiedDate":"2023-03-26"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"            internalList.add(toAdd);","lastModifiedDate":"2023-03-24"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-26"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"     * Adds patient p to their assigned ward.","lastModifiedDate":"2023-03-27"},{"lineNumber":108,"author":{"gitId":"jeraldkiew"},"content":"     * ","lastModifiedDate":"2023-03-29"},{"lineNumber":109,"author":{"gitId":"daytona65"},"content":"     * @param p","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"daytona65"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"daytona65"},"content":"        requireNonNull(p);","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"        String targetName \u003d p.getWardNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":"        int index \u003d internalList.indexOf(wardWithName(targetName));","lastModifiedDate":"2023-03-27"},{"lineNumber":115,"author":{"gitId":"daytona65"},"content":"        Ward target \u003d internalList.get(index);","lastModifiedDate":"2023-03-27"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"        target.addPatient(p);","lastModifiedDate":"2023-03-27"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"        internalList.set(index, target);","lastModifiedDate":"2023-03-27"},{"lineNumber":118,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":119,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":121,"author":{"gitId":"daytona65"},"content":"     * Replaces the ward {@code target} in the list with {@code editedWard}.","lastModifiedDate":"2023-03-24"},{"lineNumber":122,"author":{"gitId":"daytona65"},"content":"     * {@code target} must exist in the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"     * The ward identity of {@code editedWard} must not be the same as another","lastModifiedDate":"2023-03-24"},{"lineNumber":124,"author":{"gitId":"daytona65"},"content":"     * existing ward in the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":126,"author":{"gitId":"daytona65"},"content":"    public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-24"},{"lineNumber":127,"author":{"gitId":"daytona65"},"content":"        requireAllNonNull(target, editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":"        int index \u003d internalList.indexOf(target);","lastModifiedDate":"2023-03-24"},{"lineNumber":130,"author":{"gitId":"daytona65"},"content":"        if (index \u003d\u003d -1) {","lastModifiedDate":"2023-03-24"},{"lineNumber":131,"author":{"gitId":"daytona65"},"content":"            throw new WardNotFoundException();","lastModifiedDate":"2023-03-24"},{"lineNumber":132,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"        if (!target.isSameWard(editedWard) \u0026\u0026 contains(editedWard)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"            throw new DuplicatePatientException();","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"jeraldkiew"},"content":"        if (editedWard.getCapacity().getValue() \u003c target.getOccupancy()) {","lastModifiedDate":"2023-03-29"},{"lineNumber":139,"author":{"gitId":"jeraldkiew"},"content":"            throw new EditedWardInsufficientCapacityException();","lastModifiedDate":"2023-03-29"},{"lineNumber":140,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":141,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":142,"author":{"gitId":"jeraldkiew"},"content":"        ObservableList\u003cPatient\u003e patients \u003d target.getPatientList();","lastModifiedDate":"2023-03-29"},{"lineNumber":143,"author":{"gitId":"jeraldkiew"},"content":"        for (Patient patient : patients) {","lastModifiedDate":"2023-03-29"},{"lineNumber":144,"author":{"gitId":"jeraldkiew"},"content":"            editedWard.addPatient(patient);","lastModifiedDate":"2023-03-29"},{"lineNumber":145,"author":{"gitId":"jeraldkiew"},"content":"        }","lastModifiedDate":"2023-03-29"},{"lineNumber":146,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":147,"author":{"gitId":"daytona65"},"content":"        internalList.set(index, editedWard);","lastModifiedDate":"2023-03-24"},{"lineNumber":148,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":150,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":151,"author":{"gitId":"jeraldkiew"},"content":"     * Replaces the ward {@code target} in the target\u0027s ward with","lastModifiedDate":"2023-03-29"},{"lineNumber":152,"author":{"gitId":"jeraldkiew"},"content":"     * {@code editedPatient}.","lastModifiedDate":"2023-03-29"},{"lineNumber":153,"author":{"gitId":"daytona65"},"content":"     * {@code target} must exist in the ward.","lastModifiedDate":"2023-03-27"},{"lineNumber":154,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":155,"author":{"gitId":"daytona65"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-27"},{"lineNumber":156,"author":{"gitId":"daytona65"},"content":"        String targetName \u003d target.getWardNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":157,"author":{"gitId":"daytona65"},"content":"        String editedName \u003d editedPatient.getWardNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":158,"author":{"gitId":"daytona65"},"content":"        int targetIndex \u003d internalList.indexOf(wardWithName(targetName));","lastModifiedDate":"2023-03-27"},{"lineNumber":159,"author":{"gitId":"daytona65"},"content":"        int editedIndex \u003d internalList.indexOf(wardWithName(editedName));","lastModifiedDate":"2023-03-27"},{"lineNumber":160,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":161,"author":{"gitId":"daytona65"},"content":"        if (!targetName.equals(editedName)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"            changePatientWard(target, targetIndex, editedIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"        } else {","lastModifiedDate":"2023-03-27"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":"            Ward targetWard \u003d internalList.get(targetIndex);","lastModifiedDate":"2023-03-27"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":"            targetWard.setPatient(target, editedPatient);","lastModifiedDate":"2023-03-27"},{"lineNumber":166,"author":{"gitId":"daytona65"},"content":"            internalList.set(targetIndex, targetWard);","lastModifiedDate":"2023-03-27"},{"lineNumber":167,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":168,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":169,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":170,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":171,"author":{"gitId":"daytona65"},"content":"     * Moves patient from one ward to another","lastModifiedDate":"2023-03-27"},{"lineNumber":172,"author":{"gitId":"jeraldkiew"},"content":"     * ","lastModifiedDate":"2023-03-29"},{"lineNumber":173,"author":{"gitId":"daytona65"},"content":"     * @param target The target patient","lastModifiedDate":"2023-03-27"},{"lineNumber":174,"author":{"gitId":"daytona65"},"content":"     * @param from   The patient\u0027s current ward index in internalList.","lastModifiedDate":"2023-03-27"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"     * @param to     The patient\u0027s next ward index in internalList.","lastModifiedDate":"2023-03-27"},{"lineNumber":176,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":177,"author":{"gitId":"daytona65"},"content":"    public void changePatientWard(Patient target, int from, int to) {","lastModifiedDate":"2023-03-27"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"        Ward start \u003d internalList.get(from);","lastModifiedDate":"2023-03-27"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"        Ward end \u003d internalList.get(to);","lastModifiedDate":"2023-03-27"},{"lineNumber":180,"author":{"gitId":"daytona65"},"content":"        start.removePatient(target);","lastModifiedDate":"2023-03-27"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"        end.addPatient(target);","lastModifiedDate":"2023-03-27"},{"lineNumber":182,"author":{"gitId":"daytona65"},"content":"        internalList.set(from, start);","lastModifiedDate":"2023-03-27"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"        internalList.set(to, end);","lastModifiedDate":"2023-03-27"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"     * Removes the equivalent ward from the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"daytona65"},"content":"     * The ward must exist in the list.","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"    public void remove(Ward toRemove) {","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"        if (!internalList.remove(toRemove)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"            throw new WardNotFoundException();","lastModifiedDate":"2023-03-24"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":195,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":197,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":198,"author":{"gitId":"daytona65"},"content":"     * Removes the equivalent patient from their assigned ward.","lastModifiedDate":"2023-03-27"},{"lineNumber":199,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":200,"author":{"gitId":"daytona65"},"content":"    public void remove(Patient toRemove) {","lastModifiedDate":"2023-03-27"},{"lineNumber":201,"author":{"gitId":"daytona65"},"content":"        requireNonNull(toRemove);","lastModifiedDate":"2023-03-27"},{"lineNumber":202,"author":{"gitId":"daytona65"},"content":"        String targetName \u003d toRemove.getWardNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":203,"author":{"gitId":"daytona65"},"content":"        int index \u003d internalList.indexOf(wardWithName(targetName));","lastModifiedDate":"2023-03-27"},{"lineNumber":204,"author":{"gitId":"daytona65"},"content":"        Ward targetWard \u003d internalList.get(index);","lastModifiedDate":"2023-03-27"},{"lineNumber":205,"author":{"gitId":"daytona65"},"content":"        targetWard.removePatient(toRemove);","lastModifiedDate":"2023-03-27"},{"lineNumber":206,"author":{"gitId":"daytona65"},"content":"        internalList.set(index, targetWard);","lastModifiedDate":"2023-03-27"},{"lineNumber":207,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":208,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":209,"author":{"gitId":"daytona65"},"content":"    public void setWards(UniqueWardList replacement) {","lastModifiedDate":"2023-03-24"},{"lineNumber":210,"author":{"gitId":"daytona65"},"content":"        requireNonNull(replacement);","lastModifiedDate":"2023-03-24"},{"lineNumber":211,"author":{"gitId":"daytona65"},"content":"        internalList.setAll(replacement.internalList);","lastModifiedDate":"2023-03-24"},{"lineNumber":212,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":213,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":214,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"     * Replaces the contents of this list with {@code wards}.","lastModifiedDate":"2023-03-24"},{"lineNumber":216,"author":{"gitId":"daytona65"},"content":"     * {@code wards} must not contain duplicate wards.","lastModifiedDate":"2023-03-24"},{"lineNumber":217,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":218,"author":{"gitId":"daytona65"},"content":"    public void setWards(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-24"},{"lineNumber":219,"author":{"gitId":"daytona65"},"content":"        requireAllNonNull(wards);","lastModifiedDate":"2023-03-24"},{"lineNumber":220,"author":{"gitId":"daytona65"},"content":"        if (!wardsAreUnique(wards)) {","lastModifiedDate":"2023-03-24"},{"lineNumber":221,"author":{"gitId":"daytona65"},"content":"            throw new DuplicateWardException();","lastModifiedDate":"2023-03-24"},{"lineNumber":222,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":223,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":224,"author":{"gitId":"daytona65"},"content":"        internalList.setAll(wards);","lastModifiedDate":"2023-03-24"},{"lineNumber":225,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":226,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":227,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":228,"author":{"gitId":"daytona65"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}.","lastModifiedDate":"2023-03-24"},{"lineNumber":229,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":230,"author":{"gitId":"daytona65"},"content":"    public ObservableList\u003cWard\u003e asUnmodifiableObservableList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":231,"author":{"gitId":"daytona65"},"content":"        return internalUnmodifiableList;","lastModifiedDate":"2023-03-24"},{"lineNumber":232,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":233,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":234,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":235,"author":{"gitId":"daytona65"},"content":"    public Iterator\u003cWard\u003e iterator() {","lastModifiedDate":"2023-03-24"},{"lineNumber":236,"author":{"gitId":"daytona65"},"content":"        return internalList.iterator();","lastModifiedDate":"2023-03-24"},{"lineNumber":237,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":238,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":239,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":240,"author":{"gitId":"daytona65"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-24"},{"lineNumber":241,"author":{"gitId":"daytona65"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-24"},{"lineNumber":242,"author":{"gitId":"daytona65"},"content":"                || (other instanceof UniqueWardList // instanceof handles nulls","lastModifiedDate":"2023-03-24"},{"lineNumber":243,"author":{"gitId":"daytona65"},"content":"                        \u0026\u0026 internalList.equals(((UniqueWardList) other).internalList));","lastModifiedDate":"2023-03-24"},{"lineNumber":244,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":245,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":246,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":247,"author":{"gitId":"daytona65"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-24"},{"lineNumber":248,"author":{"gitId":"daytona65"},"content":"        return internalList.hashCode();","lastModifiedDate":"2023-03-24"},{"lineNumber":249,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":250,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":251,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":252,"author":{"gitId":"daytona65"},"content":"     * Returns true if {@code patients} contains only unique patients.","lastModifiedDate":"2023-03-24"},{"lineNumber":253,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":254,"author":{"gitId":"daytona65"},"content":"    private boolean wardsAreUnique(List\u003cWard\u003e wards) {","lastModifiedDate":"2023-03-24"},{"lineNumber":255,"author":{"gitId":"daytona65"},"content":"        for (int i \u003d 0; i \u003c wards.size() - 1; i++) {","lastModifiedDate":"2023-03-24"},{"lineNumber":256,"author":{"gitId":"daytona65"},"content":"            for (int j \u003d i + 1; j \u003c wards.size(); j++) {","lastModifiedDate":"2023-03-24"},{"lineNumber":257,"author":{"gitId":"daytona65"},"content":"                if (wards.get(i).isSameWard(wards.get(j))) {","lastModifiedDate":"2023-03-24"},{"lineNumber":258,"author":{"gitId":"daytona65"},"content":"                    return false;","lastModifiedDate":"2023-03-24"},{"lineNumber":259,"author":{"gitId":"daytona65"},"content":"                }","lastModifiedDate":"2023-03-24"},{"lineNumber":260,"author":{"gitId":"daytona65"},"content":"            }","lastModifiedDate":"2023-03-24"},{"lineNumber":261,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":262,"author":{"gitId":"daytona65"},"content":"        return true;","lastModifiedDate":"2023-03-24"},{"lineNumber":263,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":264,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":265,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"yitong241":10,"daytona65":239,"jeraldkiew":16}},{"path":"src/main/java/seedu/medinfo/model/ward/Ward.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.UniquePatientList;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":" * Represents a ward which stores patients.","lastModifiedDate":"2023-03-24"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"public class Ward {","lastModifiedDate":"2023-03-24"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Wards should only contain alphanumeric characters and spaces, \"","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"            + \"and it should not be blank\";","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"jeraldkiew"},"content":"    public static final String WARD_FULL_MESSAGE_CONSTRAINTS \u003d \"The ward cannot be assigned to more patients \"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"jeraldkiew"},"content":"            + \"than its capacity.\";","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"    /*","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"     * The first character of the ward must not be a whitespace,","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    public final WardName value;","lastModifiedDate":"2023-03-26"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"    private Capacity capacity;","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    private UniquePatientList patients;","lastModifiedDate":"2023-03-24"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"     * Constructs a {@code Ward}.","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"     * @param name A valid name.","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"    public Ward(WardName name) {","lastModifiedDate":"2023-03-26"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        checkArgument(isValidWard(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"        this.value \u003d name;","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        this.capacity \u003d new Capacity(10);","lastModifiedDate":"2023-03-24"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"     * Constructs a {@code Ward}.","lastModifiedDate":"2023-03-24"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-24"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"     * @param name     A valid name.","lastModifiedDate":"2023-03-24"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"     * @param capacity A specified capacity.","lastModifiedDate":"2023-03-24"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    public Ward(WardName name, Capacity capacity) {","lastModifiedDate":"2023-03-26"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-03-24"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        checkArgument(isValidWard(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-24"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"        this.value \u003d name;","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        patients \u003d new UniquePatientList();","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"     * Ward factory constructor with string for comparisons","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"jeraldkiew"},"content":"     * ","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"     * @param name","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"     * @return placeholder Ward","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"    public static Ward wardWithName(String name) {","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"        WardName wardName \u003d new WardName(name);","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"        return new Ward(wardName);","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"     * Edit capacity of this ward","lastModifiedDate":"2023-03-27"},{"lineNumber":75,"author":{"gitId":"jeraldkiew"},"content":"     * ","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"     * @param capacity","lastModifiedDate":"2023-03-27"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"     * @return Ward with edited capacity","lastModifiedDate":"2023-03-27"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"    public Ward withCapacity(int capacity) {","lastModifiedDate":"2023-03-27"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"        this.capacity \u003d new Capacity(capacity);","lastModifiedDate":"2023-03-27"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"        return this;","lastModifiedDate":"2023-03-27"},{"lineNumber":82,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":83,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"     * Returns true if a given string is a valid ward.","lastModifiedDate":"2023-03-24"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"    public static boolean isValidWard(String name) {","lastModifiedDate":"2023-03-24"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"        return name.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-24"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":90,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":91,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"    public static boolean isValidWard(WardName name) {","lastModifiedDate":"2023-03-25"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"        return name.toString().matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-23"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":96,"author":{"gitId":"jeraldkiew"},"content":"    /**","lastModifiedDate":"2023-03-24"},{"lineNumber":97,"author":{"gitId":"jeraldkiew"},"content":"     * Returns true if a given occupany can fit in the","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"jeraldkiew"},"content":"     * ward\u0027s capacity","lastModifiedDate":"2023-03-24"},{"lineNumber":99,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-24"},{"lineNumber":100,"author":{"gitId":"jeraldkiew"},"content":"    public boolean canSupport(int occupancy) {","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"jeraldkiew"},"content":"        return capacity.getValue() \u003e\u003d occupancy;","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":103,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"    // public String getName() {","lastModifiedDate":"2023-03-27"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"    // return name;","lastModifiedDate":"2023-03-27"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":107,"author":{"gitId":"yitong241"},"content":"    public WardName getName() {","lastModifiedDate":"2023-03-26"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"        return value;","lastModifiedDate":"2023-03-24"},{"lineNumber":109,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":110,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":111,"author":{"gitId":"daytona65"},"content":"    public String getNameString() {","lastModifiedDate":"2023-03-27"},{"lineNumber":112,"author":{"gitId":"daytona65"},"content":"        return value.wardName;","lastModifiedDate":"2023-03-27"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":114,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"daytona65"},"content":"    public Capacity getCapacity() {","lastModifiedDate":"2023-03-24"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"        return capacity;","lastModifiedDate":"2023-03-24"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":118,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":119,"author":{"gitId":"daytona65"},"content":"    public String getCapacityString() {","lastModifiedDate":"2023-03-27"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"        return capacity.toString();","lastModifiedDate":"2023-03-27"},{"lineNumber":121,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":123,"author":{"gitId":"jeraldkiew"},"content":"    public int getOccupancy() {","lastModifiedDate":"2023-03-24"},{"lineNumber":124,"author":{"gitId":"jeraldkiew"},"content":"        return patients.size();","lastModifiedDate":"2023-03-24"},{"lineNumber":125,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":126,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":127,"author":{"gitId":"jeraldkiew"},"content":"    public boolean isFull() {","lastModifiedDate":"2023-03-24"},{"lineNumber":128,"author":{"gitId":"jeraldkiew"},"content":"        return getOccupancy() \u003e\u003d capacity.getValue();","lastModifiedDate":"2023-03-24"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":130,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":131,"author":{"gitId":"daytona65"},"content":"    public String getOccupancyString() {","lastModifiedDate":"2023-03-27"},{"lineNumber":132,"author":{"gitId":"daytona65"},"content":"        return \"Current occupancy: \" + getOccupancy() + \"/\" + capacity.getValue();","lastModifiedDate":"2023-03-30"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"    public boolean isSameWard(Ward other) {","lastModifiedDate":"2023-03-24"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"        return this.equals(other);","lastModifiedDate":"2023-03-24"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":138,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"    //// list overwrite operations","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":141,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":142,"author":{"gitId":"daytona65"},"content":"     * Replaces the contents of the patient list with {@code patients}.","lastModifiedDate":"2023-03-23"},{"lineNumber":143,"author":{"gitId":"daytona65"},"content":"     * {@code patients} must not contain duplicate patients.","lastModifiedDate":"2023-03-23"},{"lineNumber":144,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":145,"author":{"gitId":"daytona65"},"content":"    public void setPatients(List\u003cPatient\u003e patients) {","lastModifiedDate":"2023-03-23"},{"lineNumber":146,"author":{"gitId":"daytona65"},"content":"        this.patients.setPatients(patients);","lastModifiedDate":"2023-03-23"},{"lineNumber":147,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":148,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"    //// patient-level operations","lastModifiedDate":"2023-03-23"},{"lineNumber":150,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":151,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":152,"author":{"gitId":"daytona65"},"content":"     * Returns true if a patient with the same identity as {@code patient} exists in","lastModifiedDate":"2023-03-23"},{"lineNumber":153,"author":{"gitId":"daytona65"},"content":"     * the ward.","lastModifiedDate":"2023-03-23"},{"lineNumber":154,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":155,"author":{"gitId":"daytona65"},"content":"    public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":156,"author":{"gitId":"daytona65"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":157,"author":{"gitId":"daytona65"},"content":"        return patients.contains(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":158,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":159,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":160,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":161,"author":{"gitId":"daytona65"},"content":"     * Returns true if a patient with the same NRIC as {@code patient} exists in","lastModifiedDate":"2023-03-23"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"     * the ward.","lastModifiedDate":"2023-03-23"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":"    public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":"        requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":166,"author":{"gitId":"daytona65"},"content":"        return patients.containsNric(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":167,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":168,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":169,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":170,"author":{"gitId":"daytona65"},"content":"     * Adds a patient to the ward.","lastModifiedDate":"2023-03-23"},{"lineNumber":171,"author":{"gitId":"yitong241"},"content":"     * The patient must not already exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":172,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":173,"author":{"gitId":"daytona65"},"content":"    public void addPatient(Patient p) {","lastModifiedDate":"2023-03-23"},{"lineNumber":174,"author":{"gitId":"daytona65"},"content":"        patients.add(p);","lastModifiedDate":"2023-03-23"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":176,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":177,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"     * Replaces the given patient {@code target} in the list with","lastModifiedDate":"2023-03-23"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"     * {@code editedPatient}.","lastModifiedDate":"2023-03-23"},{"lineNumber":180,"author":{"gitId":"yitong241"},"content":"     * {@code target} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"     * The patient identity of {@code editedPatient} must not be the same as another","lastModifiedDate":"2023-03-23"},{"lineNumber":182,"author":{"gitId":"yitong241"},"content":"     * existing patient in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"    public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"        requireNonNull(editedPatient);","lastModifiedDate":"2023-03-23"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"        patients.setPatient(target, editedPatient);","lastModifiedDate":"2023-03-23"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":188,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"     * Removes {@code key} from this {@code Ward}.","lastModifiedDate":"2023-03-23"},{"lineNumber":191,"author":{"gitId":"yitong241"},"content":"     * {@code key} must exist in the medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"    public void removePatient(Patient key) {","lastModifiedDate":"2023-03-23"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"        patients.remove(key);","lastModifiedDate":"2023-03-23"},{"lineNumber":195,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":197,"author":{"gitId":"daytona65"},"content":"    //// util methods","lastModifiedDate":"2023-03-23"},{"lineNumber":198,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":199,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":200,"author":{"gitId":"daytona65"},"content":"    public String toString() {","lastModifiedDate":"2023-03-23"},{"lineNumber":201,"author":{"gitId":"daytona65"},"content":"        return patients.asUnmodifiableObservableList().size() + \" patients\";","lastModifiedDate":"2023-03-23"},{"lineNumber":202,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":203,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":204,"author":{"gitId":"daytona65"},"content":"    public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-03-23"},{"lineNumber":205,"author":{"gitId":"daytona65"},"content":"        return patients.asUnmodifiableObservableList();","lastModifiedDate":"2023-03-23"},{"lineNumber":206,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":207,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":208,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":209,"author":{"gitId":"daytona65"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-23"},{"lineNumber":210,"author":{"gitId":"daytona65"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-23"},{"lineNumber":211,"author":{"gitId":"daytona65"},"content":"                || (other instanceof Ward // instanceof handles nulls","lastModifiedDate":"2023-03-23"},{"lineNumber":212,"author":{"gitId":"nramapurath"},"content":"                        \u0026\u0026 value.equals(((Ward) other).value));","lastModifiedDate":"2023-03-31"},{"lineNumber":213,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":214,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":216,"author":{"gitId":"daytona65"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-23"},{"lineNumber":217,"author":{"gitId":"daytona65"},"content":"        return patients.hashCode();","lastModifiedDate":"2023-03-23"},{"lineNumber":218,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":219,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":220,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"nramapurath":1,"yitong241":13,"daytona65":183,"jeraldkiew":23}},{"path":"src/main/java/seedu/medinfo/model/ward/WardName.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-25"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.AppUtil.checkArgument;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-25"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":" * Represents a Ward\u0027s name in MedInfo.","lastModifiedDate":"2023-03-25"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}","lastModifiedDate":"2023-03-25"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-25"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"public class WardName {","lastModifiedDate":"2023-03-25"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"    public static final String MESSAGE_CONSTRAINTS \u003d \"Ward names should only contain alphanumeric characters\"","lastModifiedDate":"2023-03-25"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"            + \"and spaces, and it should not be blank\";","lastModifiedDate":"2023-03-25"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    /*","lastModifiedDate":"2023-03-25"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"     * The first character of the name must not be a whitespace,","lastModifiedDate":"2023-03-25"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"     * otherwise \" \" (a blank string) becomes a valid input.","lastModifiedDate":"2023-03-25"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";","lastModifiedDate":"2023-03-25"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    public final String wardName;","lastModifiedDate":"2023-03-25"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     * Constructs a {@code WardName}.","lastModifiedDate":"2023-03-25"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-25"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"     * @param name A valid ward name.","lastModifiedDate":"2023-03-25"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    public WardName(String name) {","lastModifiedDate":"2023-03-25"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"        requireNonNull(name);","lastModifiedDate":"2023-03-25"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-25"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"        wardName \u003d name;","lastModifiedDate":"2023-03-25"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-25"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"     * Returns true if a given string is a valid ward name.","lastModifiedDate":"2023-03-25"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-25"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"    public static boolean isValidName(String test) {","lastModifiedDate":"2023-03-25"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        return test.matches(VALIDATION_REGEX);","lastModifiedDate":"2023-03-25"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"    public String toString() {","lastModifiedDate":"2023-03-25"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        return wardName;","lastModifiedDate":"2023-03-25"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-25"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2023-03-25"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"                || (other instanceof WardName // instanceof handles nulls","lastModifiedDate":"2023-03-25"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"                \u0026\u0026 wardName.equalsIgnoreCase(((WardName) other).wardName)); // state check","lastModifiedDate":"2023-03-31"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-25"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    public int hashCode() {","lastModifiedDate":"2023-03-25"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        return wardName.hashCode();","lastModifiedDate":"2023-03-25"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-25"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-25"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-25"}],"authorContributionMap":{"nramapurath":1,"yitong241":57}},{"path":"src/main/java/seedu/medinfo/model/ward/exceptions/DuplicateWardException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":" * Signals that the operation will result in duplicate Wards.","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":" * Wards are considered duplicates if they have the same name.","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"public class DuplicateWardException extends RuntimeException {","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"    public DuplicateWardException() {","lastModifiedDate":"2023-03-24"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"        super(\"Operation would result in duplicate wards\");","lastModifiedDate":"2023-03-24"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"yitong241":1,"daytona65":10}},{"path":"src/main/java/seedu/medinfo/model/ward/exceptions/EditedWardInsufficientCapacityException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-29"},{"lineNumber":3,"author":{"gitId":"jeraldkiew"},"content":"/**","lastModifiedDate":"2023-03-29"},{"lineNumber":4,"author":{"gitId":"jeraldkiew"},"content":" * Signals that the operation will result in an edited Ward with insufficient","lastModifiedDate":"2023-03-29"},{"lineNumber":5,"author":{"gitId":"jeraldkiew"},"content":" * capacity.","lastModifiedDate":"2023-03-29"},{"lineNumber":6,"author":{"gitId":"jeraldkiew"},"content":" */","lastModifiedDate":"2023-03-29"},{"lineNumber":7,"author":{"gitId":"jeraldkiew"},"content":"public class EditedWardInsufficientCapacityException extends RuntimeException {","lastModifiedDate":"2023-03-29"},{"lineNumber":8,"author":{"gitId":"jeraldkiew"},"content":"    public EditedWardInsufficientCapacityException() {","lastModifiedDate":"2023-03-29"},{"lineNumber":9,"author":{"gitId":"jeraldkiew"},"content":"        super(\"Operation would result in the edited ward having insufficient capacity!\");","lastModifiedDate":"2023-03-29"},{"lineNumber":10,"author":{"gitId":"jeraldkiew"},"content":"    }","lastModifiedDate":"2023-03-29"},{"lineNumber":11,"author":{"gitId":"jeraldkiew"},"content":"}","lastModifiedDate":"2023-03-29"}],"authorContributionMap":{"yitong241":1,"jeraldkiew":10}},{"path":"src/main/java/seedu/medinfo/model/ward/exceptions/WardNotFoundException.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.ward.exceptions;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":" * Signals that the operation is unable to find the specified ward.","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"public class WardNotFoundException extends RuntimeException {}","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"yitong241":1,"daytona65":5}},{"path":"src/main/java/seedu/medinfo/storage/JsonAdaptedPatient.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Discharge;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":" * Jackson-friendly version of {@link Patient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"class JsonAdaptedPatient {","lastModifiedDate":"2023-03-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Patient\u0027s %s field is missing!\";","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private final String name;","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    private final String nric;","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    private final String status;","lastModifiedDate":"2023-03-13"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"    private final String ward;","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"KSunil2001"},"content":"    private final String discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"     * Constructs a {@code JsonAdaptedPatient} with the given patient details.","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    public JsonAdaptedPatient(@JsonProperty(\"name\") String name, @JsonProperty(\"nric\") String nric,","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"                              @JsonProperty(\"status\") String status, @JsonProperty(\"ward\") String ward,","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"KSunil2001"},"content":"                              @JsonProperty(\"discharge\") String discharge) {","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        this.name \u003d name;","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        this.nric \u003d nric;","lastModifiedDate":"2023-03-13"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        this.status \u003d status;","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"KSunil2001"},"content":"        this.discharge \u003d discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":45,"author":{"gitId":"nramapurath"},"content":"     * Converts a given {@code Patient} into this class for Jackson use.","lastModifiedDate":"2023-03-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":47,"author":{"gitId":"KSunil2001"},"content":"    public JsonAdaptedPatient(Patient source) {","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        name \u003d source.getName().fullName;","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"        nric \u003d source.getNric().value;","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"        status \u003d source.getStatus().value;","lastModifiedDate":"2023-03-13"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"        ward \u003d source.getWardNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"KSunil2001"},"content":"        discharge \u003d source.getDischarge().value;","lastModifiedDate":"2023-03-22"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"jeraldkiew"},"content":"     * {@code Patient} object.","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-03-08"},{"lineNumber":61,"author":{"gitId":"jeraldkiew"},"content":"     *                               the adapted patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":63,"author":{"gitId":"nramapurath"},"content":"    public Patient toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2018-08-13"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2018-08-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2018-08-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        final Name modelName \u003d new Name(name);","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"        if (nric \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"nramapurath"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName()));","lastModifiedDate":"2023-03-14"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"nramapurath"},"content":"        if (!Nric.isValidNric(nric)) {","lastModifiedDate":"2023-03-14"},{"lineNumber":77,"author":{"gitId":"nramapurath"},"content":"            throw new IllegalValueException(Nric.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"nramapurath"},"content":"        final Nric modelNric \u003d new Nric(nric);","lastModifiedDate":"2023-03-14"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"        if (status \u003d\u003d null) {","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName()));","lastModifiedDate":"2023-03-13"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"        if (!Status.isValidStatus(status)) {","lastModifiedDate":"2023-03-13"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"            throw new IllegalValueException(Status.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-14"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"        final Status modelStatus \u003d new Status(status);","lastModifiedDate":"2023-03-14"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":89,"author":{"gitId":"KSunil2001"},"content":"        if (ward \u003d\u003d null) {","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Ward.class.getSimpleName()));","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"        if (!Ward.isValidWard(ward)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"            throw new IllegalValueException(Ward.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"        final WardName modelWard \u003d new WardName(ward);","lastModifiedDate":"2023-03-26"},{"lineNumber":96,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"KSunil2001"},"content":"        if (discharge \u003d\u003d null) {","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"KSunil2001"},"content":"                    Discharge.class.getSimpleName()));","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"        if (!Discharge.isValidDischarge(discharge)) {","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"KSunil2001"},"content":"            throw new IllegalValueException(Discharge.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"KSunil2001"},"content":"        }","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"KSunil2001"},"content":"        final Discharge modelDischarge \u003d new Discharge(discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":107,"author":{"gitId":"KSunil2001"},"content":"        return new Patient(modelNric, modelName, modelStatus, modelWard, modelDischarge);","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"nramapurath":8,"yitong241":33,"daytona65":1,"jeraldkiew":4,"-":37,"KSunil2001":27}},{"path":"src/main/java/seedu/medinfo/storage/JsonAdaptedWard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2023-03-27"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2023-03-27"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Capacity;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-27"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":" * Jackson-friendly version of {@link Ward}.","lastModifiedDate":"2023-03-27"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-27"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"class JsonAdaptedWard {","lastModifiedDate":"2023-03-27"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ward %s field is missing!\";","lastModifiedDate":"2023-03-27"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"    private final String name;","lastModifiedDate":"2023-03-27"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"    private final String capacity;","lastModifiedDate":"2023-03-27"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"     * Constructs a {@code JsonAdaptedWard} with the given details.","lastModifiedDate":"2023-03-27"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"    @JsonCreator","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    public JsonAdaptedWard(@JsonProperty(\"name\") String name, @JsonProperty(\"capacity\") String capacity) {","lastModifiedDate":"2023-03-27"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-03-27"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        this.capacity \u003d capacity;","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"     * Converts a given {@code Ward} into this class for Jackson use.","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    public JsonAdaptedWard(Ward source) {","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"        name \u003d source.getNameString();","lastModifiedDate":"2023-03-27"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"        capacity \u003d source.getCapacityString();","lastModifiedDate":"2023-03-27"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"     * Converts this Jackson-friendly adapted patient object into the model\u0027s","lastModifiedDate":"2023-03-27"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"     * {@code Ward} object.","lastModifiedDate":"2023-03-27"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"     * @throws IllegalValueException if there were any data constraints violated in","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"     *                               the adapted patient.","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"    public Ward toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-27"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"        if (name \u003d\u003d null) {","lastModifiedDate":"2023-03-27"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"        if (!Name.isValidName(name)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"        final WardName modelName \u003d new WardName(name);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        if (capacity \u003d\u003d null) {","lastModifiedDate":"2023-03-27"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"                Capacity.class.getSimpleName()));","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"        if (!Capacity.isValidCapacity(capacity)) {","lastModifiedDate":"2023-03-27"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"            throw new IllegalValueException(Capacity.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-27"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"        final Capacity modelCapacity \u003d new Capacity(capacity);","lastModifiedDate":"2023-03-27"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"        return new Ward(modelName, modelCapacity);","lastModifiedDate":"2023-03-27"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-27"}],"authorContributionMap":{"yitong241":6,"daytona65":65}},{"path":"src/main/java/seedu/medinfo/storage/JsonMedInfoStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.FileUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.JsonUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":" * A class to access MedInfo data stored as a json file on the hard disk.","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"public class JsonMedInfoStorage implements MedInfoStorage {","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(JsonMedInfoStorage.class);","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    private Path filePath;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public JsonMedInfoStorage(Path filePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"        return filePath;","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"    public Optional\u003cReadOnlyMedInfo\u003e readMedInfo() throws DataConversionException {","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"        return readMedInfo(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"     * Similar to {@link #readMedInfo()}.","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"     * @throws DataConversionException if the file is not in the correct format.","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"    public Optional\u003cReadOnlyMedInfo\u003e readMedInfo(Path filePath) throws DataConversionException {","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"        Optional\u003cJsonSerializableMedInfo\u003e jsonMedInfo \u003d JsonUtil.readJsonFile(","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"                filePath, JsonSerializableMedInfo.class);","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"        if (!jsonMedInfo.isPresent()) {","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"            return Optional.empty();","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"            return Optional.of(jsonMedInfo.get().toModelType());","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"        } catch (IllegalValueException ive) {","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"            throw new DataConversionException(ive);","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo(ReadOnlyMedInfo addressBook) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"        saveMedInfo(addressBook, filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"     * Similar to {@link #saveMedInfo(ReadOnlyMedInfo)}.","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"     *","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"     * @param filePath location of the data. Cannot be null.","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo(ReadOnlyMedInfo addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"        requireNonNull(addressBook);","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"        requireNonNull(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"        FileUtil.createIfMissing(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"        JsonUtil.saveJsonFile(new JsonSerializableMedInfo(addressBook), filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":80}},{"path":"src/main/java/seedu/medinfo/storage/JsonSerializableMedInfo.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2018-08-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2018-08-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonCreator;","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;","lastModifiedDate":"2018-08-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import com.fasterxml.jackson.annotation.JsonRootName;","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2018-08-13"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":" * An Immutable MedInfo that is serializable to JSON format.","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2018-08-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@JsonRootName(value \u003d \"addressbook\")","lastModifiedDate":"2018-08-13"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"class JsonSerializableMedInfo {","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":"    public static final String MESSAGE_DUPLICATE_PATIENT \u003d \"Patients list contains duplicate patient(s).\";","lastModifiedDate":"2023-03-09"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    public static final String MESSAGE_DUPLICATE_WARD \u003d \"Ward list contains duplicate ward(s).\";","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"    private final List\u003cJsonAdaptedPatient\u003e patients \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"    private final List\u003cJsonAdaptedWard\u003e wards \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"     * Constructs a {@code JsonSerializableMedInfo} with the given patients.","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @JsonCreator","lastModifiedDate":"2018-08-13"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    public JsonSerializableMedInfo(@JsonProperty(\"patients\") List\u003cJsonAdaptedPatient\u003e patients,","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"                                   @JsonProperty(\"wards\") List\u003cJsonAdaptedWard\u003e wards) {","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"        this.patients.addAll(patients);","lastModifiedDate":"2023-03-09"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"        this.wards.addAll(wards);","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"     * Converts a given {@code ReadOnlyMedInfo} into this class for Jackson use.","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"     * @param source future changes to this will not affect the created {@code JsonSerializableMedInfo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"    public JsonSerializableMedInfo(ReadOnlyMedInfo source) {","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        patients.addAll(source.getPatientList().stream().map(JsonAdaptedPatient::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-14"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"        wards.addAll(source.getWardList().stream().map(JsonAdaptedWard::new).collect(Collectors.toList()));","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-08-13"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"     * Converts this medinfo book into the model\u0027s {@code MedInfo} object.","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-08-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated.","lastModifiedDate":"2018-08-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-08-13"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    public MedInfo toModelType() throws IllegalValueException {","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        MedInfo medInfo \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        for (JsonAdaptedWard jsonAdaptedWard : wards) {","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"            Ward ward \u003d jsonAdaptedWard.toModelType();","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"            if (!medInfo.hasWard(ward)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"                medInfo.addWard(ward);","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"            }","lastModifiedDate":"2023-03-27"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"        for (JsonAdaptedPatient jsonAdaptedPatient : patients) {","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"KSunil2001"},"content":"            Patient patient \u003d jsonAdaptedPatient.toModelType();","lastModifiedDate":"2023-03-09"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"            if (medInfo.hasPatient(patient)) {","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"KSunil2001"},"content":"                throw new IllegalValueException(MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":67,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-08-13"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"            medInfo.addPatient(patient);","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-13"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"        return medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"yitong241":22,"daytona65":10,"-":35,"KSunil2001":6}},{"path":"src/main/java/seedu/medinfo/storage/JsonUserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.JsonUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A class to access UserPrefs stored in the hard disk as a json file","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorage implements UserPrefsStorage {","lastModifiedDate":"2016-10-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private Path filePath;","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public JsonUserPrefsStorage(Path filePath) {","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-02-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return filePath;","lastModifiedDate":"2017-02-15"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return readUserPrefs(filePath);","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * Similar to {@link #readUserPrefs()}","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param prefsFilePath location of the data. Cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the file format is not as expected.","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-10-07"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        JsonUtil.saveJsonFile(userPrefs, filePath);","lastModifiedDate":"2016-10-07"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yitong241":5,"-":42}},{"path":"src/main/java/seedu/medinfo/storage/MedInfoStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":" * Represents a storage for {@link MedInfo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"public interface MedInfoStorage {","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"     * Returns the file path of the data file.","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    Path getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"     * Returns MedInfo data as a {@link ReadOnlyMedInfo}.","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    Optional\u003cReadOnlyMedInfo\u003e readMedInfo() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"     * @see #getMedInfoFilePath()","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"    Optional\u003cReadOnlyMedInfo\u003e readMedInfo(Path filePath) throws DataConversionException, IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"     * Saves the given {@link ReadOnlyMedInfo} to the storage.","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"     * @param addressBook cannot be null.","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    void saveMedInfo(ReadOnlyMedInfo addressBook) throws IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"     * @see #saveMedInfo(ReadOnlyMedInfo)","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"    void saveMedInfo(ReadOnlyMedInfo addressBook, Path filePath) throws IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":46}},{"path":"src/main/java/seedu/medinfo/storage/Storage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":" * API of the Storage component","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"public interface Storage extends MedInfoStorage, UserPrefsStorage {","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    Path getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    Optional\u003cReadOnlyMedInfo\u003e readMedInfo() throws DataConversionException, IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    void saveMedInfo(ReadOnlyMedInfo addressBook) throws IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":32}},{"path":"src/main/java/seedu/medinfo/storage/StorageManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import java.util.Optional;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":" * Manages storage of MedInfo data in local storage.","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"public class StorageManager implements Storage {","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    private MedInfoStorage medInfoStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    private UserPrefsStorage userPrefsStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     * Creates a {@code StorageManager} with the given {@code MedInfoStorage} and {@code UserPrefStorage}.","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public StorageManager(MedInfoStorage medInfoStorage, UserPrefsStorage userPrefsStorage) {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        this.medInfoStorage \u003d medInfoStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    public Path getUserPrefsFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"        return userPrefsStorage.getUserPrefsFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        return userPrefsStorage.readUserPrefs();","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MedInfo methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"    public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"        return medInfoStorage.getMedInfoFilePath();","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"    public Optional\u003cReadOnlyMedInfo\u003e readMedInfo() throws DataConversionException, IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"        return readMedInfo(medInfoStorage.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"    public Optional\u003cReadOnlyMedInfo\u003e readMedInfo(Path filePath) throws DataConversionException, IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"        return medInfoStorage.readMedInfo(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo(ReadOnlyMedInfo addressBook) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"        saveMedInfo(addressBook, medInfoStorage.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"    @Override","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo(ReadOnlyMedInfo addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"        medInfoStorage.saveMedInfo(addressBook, filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":78}},{"path":"src/main/java/seedu/medinfo/storage/UserPrefsStorage.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":" * Represents a storage for {@link seedu.medinfo.model.UserPrefs}.","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public interface UserPrefsStorage {","lastModifiedDate":"2016-09-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Returns the file path of the UserPrefs data file.","lastModifiedDate":"2017-02-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    Path getUserPrefsFilePath();","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Returns UserPrefs data from storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found.","lastModifiedDate":"2016-09-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format.","lastModifiedDate":"2016-09-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage.","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"     * Saves the given {@link seedu.medinfo.model.ReadOnlyUserPrefs} to the storage.","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param userPrefs cannot be null.","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @throws IOException if there was any problem writing to the file.","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;","lastModifiedDate":"2018-11-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yitong241":6,"-":30}},{"path":"src/main/java/seedu/medinfo/ui/CommandBox.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-14"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * The UI component that is responsible for receiving user command inputs.","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class CommandBox extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static final String ERROR_STYLE_CLASS \u003d \"error\";","lastModifiedDate":"2017-02-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"CommandBox.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private final CommandExecutor commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private TextField commandTextField;","lastModifiedDate":"2016-09-14"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Creates a {@code CommandBox} with the given {@code CommandExecutor}.","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public CommandBox(CommandExecutor commandExecutor) {","lastModifiedDate":"2019-01-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        this.commandExecutor \u003d commandExecutor;","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // calls #setStyleToDefault() whenever there is a change to the text of the command box.","lastModifiedDate":"2017-06-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());","lastModifiedDate":"2017-06-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Handles the Enter button pressed event.","lastModifiedDate":"2017-08-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void handleCommandEntered() {","lastModifiedDate":"2018-04-01"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        String commandText \u003d commandTextField.getText();","lastModifiedDate":"2020-12-04"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        if (commandText.equals(\"\")) {","lastModifiedDate":"2020-12-04"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2020-12-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2020-12-04"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-12-04"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-02-05"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            commandExecutor.execute(commandText);","lastModifiedDate":"2020-12-04"},{"lineNumber":46,"author":{"gitId":"-"},"content":"            commandTextField.setText(\"\");","lastModifiedDate":"2016-09-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2017-03-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            setStyleToIndicateCommandFailure();","lastModifiedDate":"2017-02-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Sets the command box style to use the default style.","lastModifiedDate":"2017-06-28"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    private void setStyleToDefault() {","lastModifiedDate":"2017-06-28"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-02-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-28"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-28"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * Sets the command box style to indicate a failed command.","lastModifiedDate":"2017-02-05"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    private void setStyleToIndicateCommandFailure() {","lastModifiedDate":"2017-02-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();","lastModifiedDate":"2017-03-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (styleClass.contains(ERROR_STYLE_CLASS)) {","lastModifiedDate":"2017-03-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return;","lastModifiedDate":"2017-03-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-03-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        styleClass.add(ERROR_STYLE_CLASS);","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     * Represents a function that can execute commands.","lastModifiedDate":"2018-12-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @FunctionalInterface","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public interface CommandExecutor {","lastModifiedDate":"2018-12-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        /**","lastModifiedDate":"2018-12-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"         * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2018-12-09"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"         * @see seedu.medinfo.logic.Logic#execute(String)","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2018-12-09"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        CommandResult execute(String commandText) throws CommandException, ParseException;","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":85,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"}],"authorContributionMap":{"yitong241":5,"-":80}},{"path":"src/main/java/seedu/medinfo/ui/HelpWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2019-08-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2019-08-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.input.Clipboard;","lastModifiedDate":"2019-08-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.ClipboardContent;","lastModifiedDate":"2019-08-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Controller for a help page","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class HelpWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-12-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    public static final String USERGUIDE_URL \u003d \"https://ay2223s2-cs2103t-t12-2.github.io/tp/\";","lastModifiedDate":"2023-03-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;","lastModifiedDate":"2019-08-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-03"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"HelpWindow.fxml\";","lastModifiedDate":"2016-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Button copyButton;","lastModifiedDate":"2019-08-19"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private Label helpMessage;","lastModifiedDate":"2019-08-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-12-01"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public HelpWindow(Stage root) {","lastModifiedDate":"2017-12-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(FXML, root);","lastModifiedDate":"2017-12-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        helpMessage.setText(HELP_MESSAGE);","lastModifiedDate":"2019-08-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-12-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     * Creates a new HelpWindow.","lastModifiedDate":"2017-12-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-12-01"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public HelpWindow() {","lastModifiedDate":"2017-12-01"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        this(new Stage());","lastModifiedDate":"2017-12-01"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-01"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-01"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * Shows the help window.","lastModifiedDate":"2017-08-16"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @throws IllegalStateException","lastModifiedDate":"2017-08-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *     \u003cul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     *             if this method is called on a thread other than the JavaFX Application Thread.","lastModifiedDate":"2017-08-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     *             if this method is called during animation or layout processing.","lastModifiedDate":"2017-08-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *             if this method is called on the primary stage.","lastModifiedDate":"2017-08-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *         \u003cli\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     *             if {@code dialogStage} is already showing.","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     *         \u003c/li\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     *     \u003c/ul\u003e","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void show() {","lastModifiedDate":"2016-08-18"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        logger.fine(\"Showing help page about the application.\");","lastModifiedDate":"2016-12-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        getRoot().show();","lastModifiedDate":"2018-02-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        getRoot().centerOnScreen();","lastModifiedDate":"2019-08-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"     * Returns true if the help window is currently being shown.","lastModifiedDate":"2018-03-15"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public boolean isShowing() {","lastModifiedDate":"2018-03-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return getRoot().isShowing();","lastModifiedDate":"2018-03-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Hides the help window.","lastModifiedDate":"2018-12-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void hide() {","lastModifiedDate":"2018-12-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        getRoot().hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Focuses on the help window.","lastModifiedDate":"2018-03-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    public void focus() {","lastModifiedDate":"2018-03-15"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        getRoot().requestFocus();","lastModifiedDate":"2018-03-15"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-08-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2019-08-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * Copies the URL to the user guide to the clipboard.","lastModifiedDate":"2019-08-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2019-08-19"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2019-08-19"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    private void copyUrl() {","lastModifiedDate":"2019-08-19"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();","lastModifiedDate":"2019-08-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        final ClipboardContent url \u003d new ClipboardContent();","lastModifiedDate":"2019-08-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        url.putString(USERGUIDE_URL);","lastModifiedDate":"2019-08-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        clipboard.setContent(url);","lastModifiedDate":"2019-08-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-08-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":2,"daytona65":1,"-":99}},{"path":"src/main/java/seedu/medinfo/ui/MainWindow.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-06-16"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.event.ActionEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-26"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.MenuItem;","lastModifiedDate":"2016-08-26"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextInputControl;","lastModifiedDate":"2016-12-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyCombination;","lastModifiedDate":"2016-08-26"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import javafx.scene.input.KeyEvent;","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.StackPane;","lastModifiedDate":"2017-05-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.Logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":21,"author":{"gitId":"-"},"content":" * The Main Window. Provides the basic application layout containing","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed.","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":24,"author":{"gitId":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {","lastModifiedDate":"2017-11-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(getClass());","lastModifiedDate":"2018-08-14"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private Stage primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    // Independent Ui parts residing in this Ui container","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"KSunil2001"},"content":"    private PatientListPanel patientListPanel;","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    private WardListPanel wardListPanel;","lastModifiedDate":"2023-03-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    private ResultDisplay resultDisplay;","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    private HelpWindow helpWindow;","lastModifiedDate":"2018-03-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private StackPane commandBoxPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    private MenuItem helpMenuItem;","lastModifiedDate":"2016-08-18"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"    private StackPane patientListPanelPlaceholder;","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-24"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    private StackPane wardListPanelPlaceholder;","lastModifiedDate":"2023-03-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    private StackPane resultDisplayPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    private StackPane statusbarPlaceholder;","lastModifiedDate":"2017-05-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public MainWindow(Stage primaryStage, Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        super(FXML, primaryStage);","lastModifiedDate":"2017-11-29"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Set dependencies","lastModifiedDate":"2016-09-21"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        this.primaryStage \u003d primaryStage;","lastModifiedDate":"2016-12-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Configure the UI","lastModifiedDate":"2016-09-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        setWindowDefaultSize(logic.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        setAccelerators();","lastModifiedDate":"2016-09-21"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-15"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        helpWindow \u003d new HelpWindow();","lastModifiedDate":"2018-03-15"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public Stage getPrimaryStage() {","lastModifiedDate":"2016-12-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        return primaryStage;","lastModifiedDate":"2016-12-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private void setAccelerators() {","lastModifiedDate":"2016-09-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));","lastModifiedDate":"2016-12-18"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * Sets the accelerator of a MenuItem.","lastModifiedDate":"2016-12-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator","lastModifiedDate":"2016-12-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {","lastModifiedDate":"2016-12-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        menuItem.setAccelerator(keyCombination);","lastModifiedDate":"2016-12-18"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-12-18"},{"lineNumber":90,"author":{"gitId":"-"},"content":"         * TODO: the code below can be removed once the bug reported here","lastModifiedDate":"2016-12-18"},{"lineNumber":91,"author":{"gitId":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666","lastModifiedDate":"2016-12-18"},{"lineNumber":92,"author":{"gitId":"-"},"content":"         * is fixed in later version of SDK.","lastModifiedDate":"2016-12-18"},{"lineNumber":93,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":94,"author":{"gitId":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will","lastModifiedDate":"2016-12-18"},{"lineNumber":95,"author":{"gitId":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and","lastModifiedDate":"2016-12-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will","lastModifiedDate":"2016-12-18"},{"lineNumber":97,"author":{"gitId":"-"},"content":"         * not work when the focus is in them because the key event is consumed by","lastModifiedDate":"2016-12-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"         * the TextInputControl(s).","lastModifiedDate":"2016-12-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"         *","lastModifiedDate":"2016-12-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"         * For now, we add following event filter to capture such key events and open","lastModifiedDate":"2016-12-18"},{"lineNumber":101,"author":{"gitId":"-"},"content":"         * help window purposely so to support accelerators even when focus is","lastModifiedDate":"2016-12-18"},{"lineNumber":102,"author":{"gitId":"-"},"content":"         * in CommandBox or ResultDisplay.","lastModifiedDate":"2016-12-18"},{"lineNumber":103,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-12-18"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {","lastModifiedDate":"2016-12-18"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());","lastModifiedDate":"2016-12-18"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                event.consume();","lastModifiedDate":"2016-12-18"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-12-18"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        });","lastModifiedDate":"2016-12-18"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Fills up all the placeholders of this window.","lastModifiedDate":"2017-08-16"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    void fillInnerParts() {","lastModifiedDate":"2016-09-21"},{"lineNumber":116,"author":{"gitId":"KSunil2001"},"content":"        patientListPanel \u003d new PatientListPanel(logic.getFilteredPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"KSunil2001"},"content":"        patientListPanelPlaceholder.getChildren().add(patientListPanel.getRoot());","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":119,"author":{"gitId":"daytona65"},"content":"        wardListPanel \u003d new WardListPanel(logic.getFilteredWardList());","lastModifiedDate":"2023-03-24"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"        wardListPanelPlaceholder.getChildren().add(wardListPanel.getRoot());","lastModifiedDate":"2023-03-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        resultDisplay \u003d new ResultDisplay();","lastModifiedDate":"2018-12-09"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMedInfoFilePath(), logic.getStatsInfo());","lastModifiedDate":"2023-03-31"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(this::executeCommand);","lastModifiedDate":"2019-01-25"},{"lineNumber":129,"author":{"gitId":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":132,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-31"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"     * Updates Stats placeholder.","lastModifiedDate":"2023-03-31"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-31"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"    void updateStats() {","lastModifiedDate":"2023-03-31"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMedInfoFilePath(), logic.getStatsInfo());","lastModifiedDate":"2023-03-31"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());","lastModifiedDate":"2023-03-31"},{"lineNumber":138,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-31"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     * Sets the default size based on {@code guiSettings}.","lastModifiedDate":"2018-11-27"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    private void setWindowDefaultSize(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        primaryStage.setHeight(guiSettings.getWindowHeight());","lastModifiedDate":"2018-11-27"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        primaryStage.setWidth(guiSettings.getWindowWidth());","lastModifiedDate":"2018-11-27"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        if (guiSettings.getWindowCoordinates() !\u003d null) {","lastModifiedDate":"2018-11-27"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            primaryStage.setX(guiSettings.getWindowCoordinates().getX());","lastModifiedDate":"2018-11-27"},{"lineNumber":148,"author":{"gitId":"-"},"content":"            primaryStage.setY(guiSettings.getWindowCoordinates().getY());","lastModifiedDate":"2018-11-27"},{"lineNumber":149,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":151,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":153,"author":{"gitId":"-"},"content":"     * Opens the help window or focuses on it if it\u0027s already opened.","lastModifiedDate":"2018-03-15"},{"lineNumber":154,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    public void handleHelp() {","lastModifiedDate":"2016-08-31"},{"lineNumber":157,"author":{"gitId":"-"},"content":"        if (!helpWindow.isShowing()) {","lastModifiedDate":"2018-03-15"},{"lineNumber":158,"author":{"gitId":"-"},"content":"            helpWindow.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        } else {","lastModifiedDate":"2018-03-15"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            helpWindow.focus();","lastModifiedDate":"2018-03-15"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-03-15"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    void show() {","lastModifiedDate":"2016-10-15"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        primaryStage.show();","lastModifiedDate":"2016-08-18"},{"lineNumber":166,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":167,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-18"},{"lineNumber":169,"author":{"gitId":"-"},"content":"     * Closes the application.","lastModifiedDate":"2016-08-18"},{"lineNumber":170,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":172,"author":{"gitId":"-"},"content":"    private void handleExit() {","lastModifiedDate":"2016-08-18"},{"lineNumber":173,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),","lastModifiedDate":"2018-12-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());","lastModifiedDate":"2018-12-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"        logic.setGuiSettings(guiSettings);","lastModifiedDate":"2018-12-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"        helpWindow.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":"        primaryStage.hide();","lastModifiedDate":"2018-12-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":179,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":180,"author":{"gitId":"KSunil2001"},"content":"    public PatientListPanel getPatientListPanel() {","lastModifiedDate":"2023-03-09"},{"lineNumber":181,"author":{"gitId":"KSunil2001"},"content":"        return patientListPanel;","lastModifiedDate":"2023-03-09"},{"lineNumber":182,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-25"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"    public WardListPanel getWardListPanel() {","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"        return wardListPanel;","lastModifiedDate":"2023-03-24"},{"lineNumber":185,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":188,"author":{"gitId":"-"},"content":"     * Executes the command and returns the result.","lastModifiedDate":"2018-12-09"},{"lineNumber":189,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2018-12-09"},{"lineNumber":190,"author":{"gitId":"yitong241"},"content":"     * @see seedu.medinfo.logic.Logic#execute(String)","lastModifiedDate":"2023-03-30"},{"lineNumber":191,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {","lastModifiedDate":"2018-12-09"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2018-12-09"},{"lineNumber":194,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":195,"author":{"gitId":"-"},"content":"            CommandResult commandResult \u003d logic.execute(commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"            updateStats();","lastModifiedDate":"2023-03-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"            logger.info(\"Result: \" + commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());","lastModifiedDate":"2018-12-09"},{"lineNumber":199,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            if (commandResult.isShowHelp()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                handleHelp();","lastModifiedDate":"2018-12-09"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":203,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            if (commandResult.isExit()) {","lastModifiedDate":"2018-12-09"},{"lineNumber":205,"author":{"gitId":"-"},"content":"                handleExit();","lastModifiedDate":"2018-12-09"},{"lineNumber":206,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2018-12-09"},{"lineNumber":207,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":208,"author":{"gitId":"-"},"content":"            return commandResult;","lastModifiedDate":"2018-12-09"},{"lineNumber":209,"author":{"gitId":"-"},"content":"        } catch (CommandException | ParseException e) {","lastModifiedDate":"2018-12-09"},{"lineNumber":210,"author":{"gitId":"-"},"content":"            logger.info(\"Invalid command: \" + commandText);","lastModifiedDate":"2018-12-09"},{"lineNumber":211,"author":{"gitId":"-"},"content":"            resultDisplay.setFeedbackToUser(e.getMessage());","lastModifiedDate":"2018-12-09"},{"lineNumber":212,"author":{"gitId":"-"},"content":"            throw e;","lastModifiedDate":"2018-12-09"},{"lineNumber":213,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":214,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":215,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":9,"daytona65":17,"-":183,"KSunil2001":6}},{"path":"src/main/java/seedu/medinfo/ui/PatientCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-09-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2016-09-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-16"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-16"},{"lineNumber":13,"author":{"gitId":"jeraldkiew"},"content":"public class PatientCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":15,"author":{"gitId":"KSunil2001"},"content":"    private static final String FXML \u003d \"PatientListCard.fxml\";","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-25"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"jeraldkiew"},"content":"     * keywords in JavaFX.","lastModifiedDate":"2023-03-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2017-03-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2017-03-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2017-03-25"},{"lineNumber":23,"author":{"gitId":"jeraldkiew"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe","lastModifiedDate":"2023-03-08"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     *      issue on MedInfo level 4\u003c/a\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":"    public final Patient patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private HBox cardPane;","lastModifiedDate":"2016-09-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Label name;","lastModifiedDate":"2016-09-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Label id;","lastModifiedDate":"2016-09-21"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    private Label nric;","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    private Label status;","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"    private Label ward;","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    private Label discharge;","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"jeraldkiew"},"content":"     * display.","lastModifiedDate":"2023-03-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"    public PatientCard(Patient patient, int displayedIndex) {","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"        this.patient \u003d patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2016-09-21"},{"lineNumber":52,"author":{"gitId":"nramapurath"},"content":"        name.setText(patient.getName().fullName);","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        nric.setText(patient.getNric().value);","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"        String statusString \u003d patient.getStatusDesc();","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"        status.setText(statusString);","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        status.getStyleClass().clear();","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"        status.getStyleClass().add(\"status-\" + statusString);","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"        ward.setText(patient.getWardNameString());","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"nramapurath"},"content":"        discharge.setText(patient.getDischargeString());","lastModifiedDate":"2023-03-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2017-07-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2017-07-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // short circuit if same object","lastModifiedDate":"2017-07-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2017-07-14"},{"lineNumber":66,"author":{"gitId":"-"},"content":"            return true;","lastModifiedDate":"2017-07-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        // instanceof handles nulls","lastModifiedDate":"2017-07-14"},{"lineNumber":70,"author":{"gitId":"jeraldkiew"},"content":"        if (!(other instanceof PatientCard)) {","lastModifiedDate":"2023-03-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            return false;","lastModifiedDate":"2017-07-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // state check","lastModifiedDate":"2017-07-14"},{"lineNumber":75,"author":{"gitId":"jeraldkiew"},"content":"        PatientCard card \u003d (PatientCard) other;","lastModifiedDate":"2023-03-08"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"        return nric.getText().equals(card.nric.getText())","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"nramapurath"},"content":"                \u0026\u0026 patient.equals(card.patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-14"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"nramapurath":6,"yitong241":3,"daytona65":16,"jeraldkiew":8,"-":44,"KSunil2001":2}},{"path":"src/main/java/seedu/medinfo/ui/PatientListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-08-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2016-09-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2016-08-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"KSunil2001"},"content":" * Panel containing the list of patients.","lastModifiedDate":"2023-03-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":"public class PatientListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-09"},{"lineNumber":14,"author":{"gitId":"KSunil2001"},"content":"    private static final String FXML \u003d \"PatientListPanel.fxml\";","lastModifiedDate":"2023-03-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-08-18"},{"lineNumber":17,"author":{"gitId":"KSunil2001"},"content":"    private ListView\u003cPatient\u003e patientListView;","lastModifiedDate":"2023-03-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"     * Creates a {@code PatientListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"    public PatientListPanel(ObservableList\u003cPatient\u003e patientList) {","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":24,"author":{"gitId":"KSunil2001"},"content":"        patientListView.setItems(patientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":25,"author":{"gitId":"KSunil2001"},"content":"        patientListView.setCellFactory(listView -\u003e new PatientListViewCell());","lastModifiedDate":"2023-03-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-16"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Patient} using","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"KSunil2001"},"content":"     * a {@code PatientCard}.","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":32,"author":{"gitId":"KSunil2001"},"content":"    class PatientListViewCell extends ListCell\u003cPatient\u003e {","lastModifiedDate":"2023-03-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-09-21"},{"lineNumber":34,"author":{"gitId":"nramapurath"},"content":"        protected void updateItem(Patient patient, boolean empty) {","lastModifiedDate":"2023-03-08"},{"lineNumber":35,"author":{"gitId":"nramapurath"},"content":"            super.updateItem(patient, empty);","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":37,"author":{"gitId":"nramapurath"},"content":"            if (empty || patient \u003d\u003d null) {","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                setGraphic(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                setText(null);","lastModifiedDate":"2016-09-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            } else {","lastModifiedDate":"2016-09-21"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"                setGraphic(new PatientCard(patient, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"            }","lastModifiedDate":"2016-09-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"nramapurath":3,"yitong241":2,"jeraldkiew":2,"-":29,"KSunil2001":10}},{"path":"src/main/java/seedu/medinfo/ui/ResultDisplay.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-12-09"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2016-09-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the header of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":11,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class ResultDisplay extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"ResultDisplay.fxml\";","lastModifiedDate":"2016-09-14"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-10-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private TextArea resultDisplay;","lastModifiedDate":"2016-10-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public ResultDisplay() {","lastModifiedDate":"2017-06-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2016-12-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void setFeedbackToUser(String feedbackToUser) {","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        requireNonNull(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        resultDisplay.setText(feedbackToUser);","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":1,"-":27}},{"path":"src/main/java/seedu/medinfo/ui/StatusBarFooter.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-31"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2018-12-08"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2016-12-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application.","lastModifiedDate":"2016-09-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2016-12-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-14"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";","lastModifiedDate":"2017-04-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @FXML","lastModifiedDate":"2016-12-10"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Label saveLocationStatus;","lastModifiedDate":"2018-12-08"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"    private Label stats;","lastModifiedDate":"2023-03-31"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * Creates a {@code StatusBarFooter} with the given {@code Path}.","lastModifiedDate":"2020-05-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    public StatusBarFooter(Path saveLocation, List\u003cString\u003e statsInfo) {","lastModifiedDate":"2023-03-31"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        super(FXML);","lastModifiedDate":"2017-04-01"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        statsInfo.get(0);","lastModifiedDate":"2023-03-31"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"        statsInfo.get(1);","lastModifiedDate":"2023-03-31"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"        this.saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        for (String stat:statsInfo) {","lastModifiedDate":"2023-03-31"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"            stats.setText(stats.getText() + \"       \" + stat + \"       \");","lastModifiedDate":"2023-03-31"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"daytona65":12,"-":25}},{"path":"src/main/java/seedu/medinfo/ui/Ui.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-09-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * API of UI component","lastModifiedDate":"2016-09-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public interface Ui {","lastModifiedDate":"2016-09-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /** Starts the UI (and the App).  */","lastModifiedDate":"2016-09-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    void start(Stage primaryStage);","lastModifiedDate":"2016-09-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-25"}],"authorContributionMap":{"yitong241":1,"-":12}},{"path":"src/main/java/seedu/medinfo/ui/UiManager.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.logging.Logger;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import javafx.application.Platform;","lastModifiedDate":"2016-08-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert;","lastModifiedDate":"2016-08-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import javafx.scene.control.Alert.AlertType;","lastModifiedDate":"2016-08-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2016-08-18"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2016-08-18"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.MainApp;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.LogsCenter;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.StringUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.Logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":15,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The manager of the UI component.","lastModifiedDate":"2016-09-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-18"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class UiManager implements Ui {","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";","lastModifiedDate":"2017-04-01"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-01"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);","lastModifiedDate":"2016-09-23"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/MedInfo.png\";","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private MainWindow mainWindow;","lastModifiedDate":"2016-08-18"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Creates a {@code UiManager} with the given {@code Logic}.","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public UiManager(Logic logic) {","lastModifiedDate":"2018-12-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.logic \u003d logic;","lastModifiedDate":"2016-09-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-09-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public void start(Stage primaryStage) {","lastModifiedDate":"2016-09-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        logger.info(\"Starting UI...\");","lastModifiedDate":"2016-09-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        //Set the application icon.","lastModifiedDate":"2016-08-18"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));","lastModifiedDate":"2016-08-18"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-08-18"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, logic);","lastModifiedDate":"2018-12-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts","lastModifiedDate":"2016-08-18"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            mainWindow.fillInnerParts();","lastModifiedDate":"2016-08-18"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        } catch (Throwable e) {","lastModifiedDate":"2016-08-18"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            logger.severe(StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);","lastModifiedDate":"2016-08-18"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-08-18"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    private Image getImage(String imagePath) {","lastModifiedDate":"2016-08-18"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));","lastModifiedDate":"2016-08-18"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {","lastModifiedDate":"2016-09-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters.","lastModifiedDate":"2017-08-16"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * This method only returns after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,","lastModifiedDate":"2016-09-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                                               String contentText) {","lastModifiedDate":"2016-08-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        final Alert alert \u003d new Alert(type);","lastModifiedDate":"2016-08-18"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");","lastModifiedDate":"2016-08-20"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        alert.initOwner(owner);","lastModifiedDate":"2016-08-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        alert.setTitle(title);","lastModifiedDate":"2016-08-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        alert.setHeaderText(headerText);","lastModifiedDate":"2016-08-18"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        alert.setContentText(contentText);","lastModifiedDate":"2016-08-18"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);","lastModifiedDate":"2016-10-12"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        alert.showAndWait();","lastModifiedDate":"2016-08-18"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-16"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},","lastModifiedDate":"2017-08-16"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * and exits the application after the user has closed the alert dialog.","lastModifiedDate":"2017-08-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {","lastModifiedDate":"2016-09-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));","lastModifiedDate":"2016-09-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());","lastModifiedDate":"2016-08-18"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        Platform.exit();","lastModifiedDate":"2016-08-18"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        System.exit(1);","lastModifiedDate":"2016-08-18"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-18"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":6,"-":82}},{"path":"src/main/java/seedu/medinfo/ui/UiPart.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2017-05-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.MainApp;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-18"},{"lineNumber":12,"author":{"gitId":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc.","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * It contains a scene graph with a root node of type {@code T}.","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public abstract class UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /** Resource folder where FXML files are stored. */","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();","lastModifiedDate":"2017-11-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL.","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);","lastModifiedDate":"2017-11-29"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL)","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));","lastModifiedDate":"2017-11-29"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute.","lastModifiedDate":"2017-11-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object.","lastModifiedDate":"2017-11-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @see #UiPart(URL, T)","lastModifiedDate":"2017-11-29"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public UiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);","lastModifiedDate":"2017-11-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Returns the root object of the scene graph of this UiPart.","lastModifiedDate":"2016-12-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public T getRoot() {","lastModifiedDate":"2016-12-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        return fxmlLoader.getRoot();","lastModifiedDate":"2016-12-21"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"     * Loads the object hierarchy from a FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * @param location Location of the FXML document.","lastModifiedDate":"2017-11-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * @param root Specifies the root of the object hierarchy.","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    private void loadFxmlFile(URL location, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        requireNonNull(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        fxmlLoader.setLocation(location);","lastModifiedDate":"2017-11-29"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        fxmlLoader.setController(this);","lastModifiedDate":"2017-11-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        fxmlLoader.setRoot(root);","lastModifiedDate":"2017-11-29"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-11-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            fxmlLoader.load();","lastModifiedDate":"2017-11-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2017-11-29"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            throw new AssertionError(e);","lastModifiedDate":"2017-11-29"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-11-29"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}.","lastModifiedDate":"2017-11-29"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-11-29"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {","lastModifiedDate":"2017-11-29"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        requireNonNull(fxmlFileName);","lastModifiedDate":"2017-11-29"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;","lastModifiedDate":"2017-11-29"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);","lastModifiedDate":"2017-11-29"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        return requireNonNull(fxmlFileUrl);","lastModifiedDate":"2017-11-29"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":87,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"}],"authorContributionMap":{"yitong241":2,"-":86}},{"path":"src/main/java/seedu/medinfo/ui/WardCard.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":" * An UI component that displays information of a {@code Patient}.","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"public class WardCard extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"    private static final String FXML \u003d \"WardListCard.fxml\";","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"     * keywords in JavaFX.","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"     * or an exception will be thrown by JavaFX during runtime.","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"     *","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     *      issue on MedInfo level 4\u003c/a\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"    public final Ward ward;","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"    private HBox cardPane;","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"    private Label name;","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"    private Label id;","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    private Label capacity;","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"     * Creates a {@code PatientCode} with the given {@code Patient} and index to","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"     * display.","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    public WardCard(Ward ward, int displayedIndex) {","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"        super(FXML);","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"        id.setText(displayedIndex + \". \");","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"        name.setText(ward.getNameString());","lastModifiedDate":"2023-03-27"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"        capacity.setText(ward.getOccupancyString());","lastModifiedDate":"2023-03-27"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"    @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2023-03-23"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        // short circuit if same object","lastModifiedDate":"2023-03-23"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"        if (other \u003d\u003d this) {","lastModifiedDate":"2023-03-23"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"            return true;","lastModifiedDate":"2023-03-23"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"        // instanceof handles nulls","lastModifiedDate":"2023-03-23"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        if (!(other instanceof WardCard)) {","lastModifiedDate":"2023-03-23"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"            return false;","lastModifiedDate":"2023-03-23"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"        // state check","lastModifiedDate":"2023-03-23"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"        WardCard card \u003d (WardCard) other;","lastModifiedDate":"2023-03-23"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"        return name.getText().equals(card.name.getText())","lastModifiedDate":"2023-03-24"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"                \u0026\u0026 ward.equals(card.ward);","lastModifiedDate":"2023-03-24"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"yitong241":3,"daytona65":65}},{"path":"src/main/java/seedu/medinfo/ui/WardListPanel.java","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"import javafx.scene.control.ListCell;","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"import javafx.scene.control.ListView;","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":" * Panel containing the list of wards.","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"public class WardListPanel extends UiPart\u003cRegion\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"    private static final String FXML \u003d \"WardListPanel.fxml\";","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    @FXML","lastModifiedDate":"2023-03-23"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"    private ListView\u003cWard\u003e wardListView;","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"     * Creates a {@code WardListPanel} with the given {@code ObservableList}.","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"    public WardListPanel(ObservableList\u003cWard\u003e wardList) {","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"        super(FXML);","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"        wardListView.setItems(wardList);","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"        wardListView.setCellFactory(listView -\u003e new WardListViewCell());","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code Ward} using","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"     * a {@code WardCard}.","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"    class WardListViewCell extends ListCell\u003cWard\u003e {","lastModifiedDate":"2023-03-23"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"        protected void updateItem(Ward ward, boolean empty) {","lastModifiedDate":"2023-03-23"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"            super.updateItem(ward, empty);","lastModifiedDate":"2023-03-23"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"            if (empty || ward \u003d\u003d null) {","lastModifiedDate":"2023-03-23"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"                setGraphic(null);","lastModifiedDate":"2023-03-23"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"                setText(null);","lastModifiedDate":"2023-03-23"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"            } else {","lastModifiedDate":"2023-03-23"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"                setGraphic(new WardCard(ward, getIndex() + 1).getRoot());","lastModifiedDate":"2023-03-23"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"            }","lastModifiedDate":"2023-03-23"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-23"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"yitong241":2,"daytona65":44}},{"path":"src/main/resources/view/DarkTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":".background {","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    background-color: #383838; /* Used in the default.html file */","lastModifiedDate":"2017-03-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".label {","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    -fx-text-fill: #555555;","lastModifiedDate":"2016-08-15"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":".label-bright {","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":".label-header {","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":".text-field {","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":".tab-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":".table-view {","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    -fx-padding: 5;","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":".table-view .column-header-background {","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    -fx-size: 35;","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    -fx-border-color:","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        transparent","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":".table-view .column-header .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":".split-pane:horizontal .split-pane-divider {","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    -fx-border-color: transparent transparent transparent #4d4d4d;","lastModifiedDate":"2017-03-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":84,"author":{"gitId":"-"},"content":".split-pane {","lastModifiedDate":"2016-08-15"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    -fx-border-radius: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":".list-view {","lastModifiedDate":"2017-03-02"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    -fx-padding: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2018-01-10"},{"lineNumber":94,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":96,"author":{"gitId":"-"},"content":".list-cell {","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":".list-cell:filled:even {","lastModifiedDate":"2017-03-02"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    -fx-background-color: #3c3e3f;","lastModifiedDate":"2017-03-02"},{"lineNumber":104,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":106,"author":{"gitId":"-"},"content":".list-cell:filled:odd {","lastModifiedDate":"2017-03-02"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    -fx-background-color: #515658;","lastModifiedDate":"2017-03-02"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":110,"author":{"gitId":"-"},"content":".list-cell:filled:selected {","lastModifiedDate":"2017-03-02"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2017-03-02"},{"lineNumber":112,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":114,"author":{"gitId":"-"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2017-03-02"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":119,"author":{"gitId":"-"},"content":".list-cell .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":".cell_big_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2022-01-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":".cell_small_label {","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2022-01-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2017-03-02"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":".stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":139,"author":{"gitId":"-"},"content":".pane-with-border {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"     -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-05-09"},{"lineNumber":141,"author":{"gitId":"-"},"content":"     -fx-border-color: derive(#1d1d1d, 10%);","lastModifiedDate":"2017-05-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2017-05-09"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":".status-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2018-12-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":148,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":149,"author":{"gitId":"-"},"content":".result-display {","lastModifiedDate":"2016-09-14"},{"lineNumber":150,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2017-03-02"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":153,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":154,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":156,"author":{"gitId":"-"},"content":".result-display .label {","lastModifiedDate":"2016-09-14"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2016-09-14"},{"lineNumber":158,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":".status-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":162,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2018-12-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2018-12-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":".status-bar-with-border {","lastModifiedDate":"2016-08-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":172,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":173,"author":{"gitId":"-"},"content":".status-bar-with-border .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":174,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":175,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":176,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":177,"author":{"gitId":"-"},"content":".grid-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":178,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":180,"author":{"gitId":"-"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2016-08-08"},{"lineNumber":181,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":183,"author":{"gitId":"-"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2018-04-01"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2016-08-15"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":186,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":187,"author":{"gitId":"-"},"content":".context-menu {","lastModifiedDate":"2016-08-08"},{"lineNumber":188,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":189,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":190,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":191,"author":{"gitId":"-"},"content":".context-menu .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":192,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":193,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":194,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":195,"author":{"gitId":"-"},"content":".menu-bar {","lastModifiedDate":"2016-08-08"},{"lineNumber":196,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2016-08-15"},{"lineNumber":197,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":199,"author":{"gitId":"-"},"content":".menu-bar .label {","lastModifiedDate":"2016-08-08"},{"lineNumber":200,"author":{"gitId":"-"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":203,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2016-08-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":205,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":206,"author":{"gitId":"-"},"content":".menu .left-container {","lastModifiedDate":"2016-08-08"},{"lineNumber":207,"author":{"gitId":"-"},"content":"    -fx-background-color: black;","lastModifiedDate":"2016-08-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":210,"author":{"gitId":"-"},"content":"/*","lastModifiedDate":"2016-08-08"},{"lineNumber":211,"author":{"gitId":"-"},"content":" * Metro style Push Button","lastModifiedDate":"2016-08-08"},{"lineNumber":212,"author":{"gitId":"-"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2016-08-08"},{"lineNumber":213,"author":{"gitId":"-"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2016-08-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":215,"author":{"gitId":"-"},"content":".button {","lastModifiedDate":"2016-08-08"},{"lineNumber":216,"author":{"gitId":"-"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2016-08-08"},{"lineNumber":217,"author":{"gitId":"-"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2016-08-08"},{"lineNumber":218,"author":{"gitId":"-"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":219,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":220,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2022-01-13"},{"lineNumber":222,"author":{"gitId":"-"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2016-08-08"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2016-08-08"},{"lineNumber":224,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2016-08-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":226,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":227,"author":{"gitId":"-"},"content":".button:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2016-08-08"},{"lineNumber":229,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":230,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":231,"author":{"gitId":"-"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2016-08-08"},{"lineNumber":232,"author":{"gitId":"-"},"content":"  -fx-background-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":234,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":235,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":236,"author":{"gitId":"-"},"content":".button:focused {","lastModifiedDate":"2016-08-08"},{"lineNumber":237,"author":{"gitId":"-"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2016-08-08"},{"lineNumber":238,"author":{"gitId":"-"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2016-08-08"},{"lineNumber":240,"author":{"gitId":"-"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":241,"author":{"gitId":"-"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2016-08-08"},{"lineNumber":242,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":243,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":244,"author":{"gitId":"-"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2016-08-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2016-08-08"},{"lineNumber":246,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":247,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":248,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":250,"author":{"gitId":"-"},"content":".button:default {","lastModifiedDate":"2016-08-08"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2016-08-08"},{"lineNumber":252,"author":{"gitId":"-"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2016-08-08"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":254,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":255,"author":{"gitId":"-"},"content":".button:default:hover {","lastModifiedDate":"2016-08-08"},{"lineNumber":256,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2016-08-08"},{"lineNumber":257,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":259,"author":{"gitId":"-"},"content":".dialog-pane {","lastModifiedDate":"2016-08-08"},{"lineNumber":260,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":261,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":262,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":263,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2016-08-08"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2016-08-15"},{"lineNumber":265,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":266,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":267,"author":{"gitId":"-"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2016-08-08"},{"lineNumber":268,"author":{"gitId":"-"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2016-08-08"},{"lineNumber":269,"author":{"gitId":"-"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2016-08-08"},{"lineNumber":270,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":271,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":272,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":273,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2016-08-08"},{"lineNumber":274,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2016-08-15"},{"lineNumber":275,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":276,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":277,"author":{"gitId":"-"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2016-08-08"},{"lineNumber":278,"author":{"gitId":"-"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2016-08-08"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2016-08-08"},{"lineNumber":280,"author":{"gitId":"-"},"content":"    -fx-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":281,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":282,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":283,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":284,"author":{"gitId":"-"},"content":".scroll-bar {","lastModifiedDate":"2017-03-02"},{"lineNumber":285,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2017-03-02"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":287,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":288,"author":{"gitId":"-"},"content":".scroll-bar .thumb {","lastModifiedDate":"2016-08-15"},{"lineNumber":289,"author":{"gitId":"-"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2016-08-15"},{"lineNumber":290,"author":{"gitId":"-"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2016-08-15"},{"lineNumber":291,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":292,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":293,"author":{"gitId":"-"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2016-08-15"},{"lineNumber":294,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-15"},{"lineNumber":295,"author":{"gitId":"-"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2016-08-15"},{"lineNumber":296,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":297,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":298,"author":{"gitId":"-"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2016-08-15"},{"lineNumber":299,"author":{"gitId":"-"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2016-08-15"},{"lineNumber":300,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":301,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":302,"author":{"gitId":"-"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2016-08-15"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-15"},{"lineNumber":305,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-15"},{"lineNumber":306,"author":{"gitId":"-"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2016-08-18"},{"lineNumber":307,"author":{"gitId":"-"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2016-08-18"},{"lineNumber":308,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-18"},{"lineNumber":309,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-18"},{"lineNumber":310,"author":{"gitId":"-"},"content":"#cardPane {","lastModifiedDate":"2016-08-08"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2016-08-08"},{"lineNumber":312,"author":{"gitId":"-"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":313,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":314,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":315,"author":{"gitId":"-"},"content":"#commandTypeLabel {","lastModifiedDate":"2016-08-08"},{"lineNumber":316,"author":{"gitId":"-"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2016-08-08"},{"lineNumber":317,"author":{"gitId":"-"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2016-08-08"},{"lineNumber":318,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":319,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":320,"author":{"gitId":"-"},"content":"#commandTextField {","lastModifiedDate":"2017-03-02"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent #383838 transparent #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":322,"author":{"gitId":"-"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":323,"author":{"gitId":"-"},"content":"    -fx-border-color: #383838 #383838 #ffffff #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":324,"author":{"gitId":"-"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":325,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2017-03-02"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2022-01-13"},{"lineNumber":327,"author":{"gitId":"-"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2017-03-02"},{"lineNumber":328,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2017-03-02"},{"lineNumber":329,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":330,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":331,"author":{"gitId":"KSunil2001"},"content":"#filterField, #patientListPanel, #patientWebpage {","lastModifiedDate":"2023-03-09"},{"lineNumber":332,"author":{"gitId":"-"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2016-08-15"},{"lineNumber":333,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":334,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":335,"author":{"gitId":"-"},"content":"#resultDisplay .content {","lastModifiedDate":"2017-03-02"},{"lineNumber":336,"author":{"gitId":"-"},"content":"    -fx-background-color: transparent, #383838, transparent, #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":337,"author":{"gitId":"-"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2017-03-02"},{"lineNumber":338,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-03-02"},{"lineNumber":339,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-02"},{"lineNumber":340,"author":{"gitId":"-"},"content":"#tags {","lastModifiedDate":"2016-12-18"},{"lineNumber":341,"author":{"gitId":"-"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2016-12-18"},{"lineNumber":342,"author":{"gitId":"-"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":343,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"},{"lineNumber":344,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":345,"author":{"gitId":"-"},"content":"#tags .label {","lastModifiedDate":"2016-12-18"},{"lineNumber":346,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-12-18"},{"lineNumber":347,"author":{"gitId":"-"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2017-03-02"},{"lineNumber":348,"author":{"gitId":"-"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2016-12-18"},{"lineNumber":349,"author":{"gitId":"-"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":350,"author":{"gitId":"-"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2016-12-18"},{"lineNumber":351,"author":{"gitId":"-"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2016-12-18"},{"lineNumber":352,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-18"}],"authorContributionMap":{"-":351,"KSunil2001":1}},{"path":"src/main/resources/view/Extensions.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":".error {","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #d06651 !important;","lastModifiedDate":"2023-03-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":".list-cell:empty {","lastModifiedDate":"2017-02-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    -fx-background: #383838;","lastModifiedDate":"2017-03-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-02-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":".tag-selector {","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    -fx-border-color: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    -fx-border-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-background-radius: 3;","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":".tooltip-text {","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"daytona65":1,"-":18}},{"path":"src/main/resources/view/HelpWindow.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#copyButton, #helpMessage {","lastModifiedDate":"2021-08-28"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"#copyButton {","lastModifiedDate":"2022-01-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    -fx-background-color: dimgray;","lastModifiedDate":"2022-01-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":9,"author":{"gitId":"-"},"content":"#copyButton:hover {","lastModifiedDate":"2022-01-02"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    -fx-background-color: gray;","lastModifiedDate":"2022-01-02"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"#copyButton:armed {","lastModifiedDate":"2022-01-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    -fx-background-color: darkgray;","lastModifiedDate":"2022-01-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2022-01-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2022-01-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"#helpMessageContainer {","lastModifiedDate":"2022-01-02"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#ccedee, 10%);","lastModifiedDate":"2023-03-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-03-22"}],"authorContributionMap":{"daytona65":2,"-":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import java.net.URL?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.Scene?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Menu?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuBar?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.MenuItem?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.SplitPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.image.Image?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2017-11-29"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"         title\u003d\"MedInfo\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"  \u003cicons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    \u003cImage url\u003d\"@/images/MedInfo.png\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"  \u003c/icons\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  \u003cscene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    \u003cScene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      \u003cstylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"        \u003cURL value\u003d\"@MedInfoTheme.css\" /\u003e","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003cURL value\u003d\"@Extensions.css\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"      \u003c/stylesheets\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"      \u003cVBox\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2017-06-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"          \u003c/Menu\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003c/MenuBar\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e","lastModifiedDate":"2017-05-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"          \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"          \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"        \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"          \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"","lastModifiedDate":"2023-03-31"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"                     minHeight\u003d\"100\" prefHeight\u003d\"150\" maxHeight\u003d\"200\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            \u003cpadding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":49,"author":{"gitId":"-"},"content":"              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            \u003c/padding\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":51,"author":{"gitId":"-"},"content":"          \u003c/StackPane\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"            \u003cSplitPane VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"              \u003cVBox id\u003d\"listView\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"                \u003cStackPane fx:id\u003d\"patientListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2016-08-15"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"              \u003cVBox id\u003d\"listView\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"200\" prefWidth\u003d\"200\" VBox.vgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"                \u003cStackPane fx:id\u003d\"wardListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"              \u003c/VBox\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"            \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        \u003c/SplitPane\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e","lastModifiedDate":"2017-05-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    \u003c/Scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"  \u003c/scene\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"nramapurath":1,"yitong241":1,"daytona65":14,"-":49,"KSunil2001":1}},{"path":"src/main/resources/view/MedInfoTheme.css","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"daytona65"},"content":".background {","lastModifiedDate":"2023-03-21"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-28"},{"lineNumber":3,"author":{"gitId":"daytona65"},"content":"    background-color: #1d1d1d; /* Used in the default.html file */","lastModifiedDate":"2023-03-28"},{"lineNumber":4,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":5,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":".label {","lastModifiedDate":"2023-03-21"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-21"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"    /* -fx-text-fill: #555555; */","lastModifiedDate":"2023-03-21"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-21"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":".label-bright {","lastModifiedDate":"2023-03-21"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-21"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":19,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":".label-header {","lastModifiedDate":"2023-03-21"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 32pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":".text-field {","lastModifiedDate":"2023-03-21"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 12pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-21"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":".tab-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 0 0 0 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":".tab-pane .tab-header-area {","lastModifiedDate":"2023-03-21"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    -fx-min-height: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"    -fx-max-height: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":".table-view {","lastModifiedDate":"2023-03-21"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"    -fx-base: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"    -fx-control-inner-background: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    -fx-table-cell-border-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"    -fx-table-header-border-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 5;","lastModifiedDate":"2023-03-21"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":".table-view .column-header-background {","lastModifiedDate":"2023-03-21"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":".table-view .column-header, .table-view .filler {","lastModifiedDate":"2023-03-21"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"    -fx-size: 35;","lastModifiedDate":"2023-03-21"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 0 0 1 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"    -fx-border-color:","lastModifiedDate":"2023-03-21"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"        transparent","lastModifiedDate":"2023-03-21"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        transparent","lastModifiedDate":"2023-03-21"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"        derive(-fx-base, 80%)","lastModifiedDate":"2023-03-21"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"        transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"    -fx-border-insets: 0 10 1 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":".table-view .column-header .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 20pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"    -fx-alignment: center-left;","lastModifiedDate":"2023-03-21"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":".table-view:focused .table-row-cell:filled:focused:selected {","lastModifiedDate":"2023-03-21"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2023-03-21"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":".split-pane-divider {","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#A8C5C9, 10%);","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2023-03-28"},{"lineNumber":82,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":83,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":".split-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"    -fx-border-radius: 5;","lastModifiedDate":"2023-03-28"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2023-03-28"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#FFFFFF, 20%);","lastModifiedDate":"2023-03-28"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":90,"author":{"gitId":"daytona65"},"content":".list-view {","lastModifiedDate":"2023-03-21"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":92,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 20%);","lastModifiedDate":"2023-03-21"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":".list-cell {","lastModifiedDate":"2023-03-21"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"    -fx-label-padding: 0 0 0 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":98,"author":{"gitId":"daytona65"},"content":"    -fx-graphic-text-gap : 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":100,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":".list-cell:filled:even {","lastModifiedDate":"2023-03-21"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #a8acad;","lastModifiedDate":"2023-03-28"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":".list-cell:filled:odd {","lastModifiedDate":"2023-03-21"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #8c9091;","lastModifiedDate":"2023-03-28"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":109,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":110,"author":{"gitId":"daytona65"},"content":".list-cell:filled:selected {","lastModifiedDate":"2023-03-21"},{"lineNumber":111,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #424d5f;","lastModifiedDate":"2023-03-21"},{"lineNumber":112,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":".list-cell:filled:selected #cardPane {","lastModifiedDate":"2023-03-21"},{"lineNumber":115,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: #3e7b91;","lastModifiedDate":"2023-03-21"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":118,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":119,"author":{"gitId":"daytona65"},"content":".list-cell .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-30"},{"lineNumber":121,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":122,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":".cell_big_label {","lastModifiedDate":"2023-03-21"},{"lineNumber":124,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-21"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 16px;","lastModifiedDate":"2023-03-21"},{"lineNumber":126,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-21"},{"lineNumber":127,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":128,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":129,"author":{"gitId":"daytona65"},"content":".cell_small_label {","lastModifiedDate":"2023-03-21"},{"lineNumber":130,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI\";","lastModifiedDate":"2023-03-21"},{"lineNumber":131,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13px;","lastModifiedDate":"2023-03-21"},{"lineNumber":132,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #010504;","lastModifiedDate":"2023-03-21"},{"lineNumber":133,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":134,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":" * CLI Text box","lastModifiedDate":"2023-03-28"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":" * MainWindow.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":138,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":".stack-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":140,"author":{"gitId":"daytona65"},"content":"     -fx-background-color: derive(#A8C5C9, 20%);","lastModifiedDate":"2023-03-28"},{"lineNumber":141,"author":{"gitId":"daytona65"},"content":"     -fx-border-radius: 100;","lastModifiedDate":"2023-03-30"},{"lineNumber":142,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":143,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":144,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":145,"author":{"gitId":"daytona65"},"content":" * Main body holding CLI and lists","lastModifiedDate":"2023-03-28"},{"lineNumber":146,"author":{"gitId":"daytona65"},"content":" * MainWindow.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":147,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":148,"author":{"gitId":"daytona65"},"content":".pane-with-border {","lastModifiedDate":"2023-03-21"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"     -fx-background-color: derive(#FFFFFF, 20%);","lastModifiedDate":"2023-03-28"},{"lineNumber":150,"author":{"gitId":"daytona65"},"content":"     -fx-border-color: derive(#FFFFFF, 10%);","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"daytona65"},"content":"     -fx-border-top-width: 1px;","lastModifiedDate":"2023-03-21"},{"lineNumber":152,"author":{"gitId":"daytona65"},"content":"     -fx-border-radius: 100;","lastModifiedDate":"2023-03-30"},{"lineNumber":153,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":154,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":155,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":156,"author":{"gitId":"daytona65"},"content":" * Used at the bottom status-bar","lastModifiedDate":"2023-03-28"},{"lineNumber":157,"author":{"gitId":"daytona65"},"content":" * StatusBarFooter.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":158,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":159,"author":{"gitId":"daytona65"},"content":".status-bar {","lastModifiedDate":"2023-03-21"},{"lineNumber":160,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#A8C5C9, 30%);","lastModifiedDate":"2023-03-28"},{"lineNumber":161,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":" * Status indicators GRAY/GREEN/YELLOW/RED","lastModifiedDate":"2023-03-28"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":" * PatientListCard.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":166,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":167,"author":{"gitId":"daytona65"},"content":".status-UNKNOWN {","lastModifiedDate":"2023-03-21"},{"lineNumber":168,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":169,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":170,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":171,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":172,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 20px;","lastModifiedDate":"2023-03-30"},{"lineNumber":173,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":174,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":".status-STABLE {","lastModifiedDate":"2023-03-21"},{"lineNumber":176,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#023020, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":177,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":180,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 20px;","lastModifiedDate":"2023-03-30"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":182,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":".status-SERIOUS {","lastModifiedDate":"2023-03-21"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#c29500, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":188,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 20px;","lastModifiedDate":"2023-03-30"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":191,"author":{"gitId":"daytona65"},"content":".status-CRITICAL {","lastModifiedDate":"2023-03-21"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#8B0000, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":195,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 20px;","lastModifiedDate":"2023-03-30"},{"lineNumber":197,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":198,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":199,"author":{"gitId":"daytona65"},"content":".status-bar .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":200,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":201,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":202,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 4px;","lastModifiedDate":"2023-03-21"},{"lineNumber":203,"author":{"gitId":"daytona65"},"content":"    -fx-pref-height: 30px;","lastModifiedDate":"2023-03-21"},{"lineNumber":204,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":205,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":206,"author":{"gitId":"daytona65"},"content":".status-bar-with-border {","lastModifiedDate":"2023-03-21"},{"lineNumber":207,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":208,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2023-03-28"},{"lineNumber":209,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2023-03-21"},{"lineNumber":210,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":211,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":212,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":213,"author":{"gitId":"daytona65"},"content":".status-bar-with-border .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":214,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":216,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":217,"author":{"gitId":"daytona65"},"content":".grid-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":218,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":219,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":220,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 1px;","lastModifiedDate":"2023-03-21"},{"lineNumber":221,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":222,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":223,"author":{"gitId":"daytona65"},"content":".grid-pane .stack-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":224,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":225,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":226,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":227,"author":{"gitId":"daytona65"},"content":".context-menu {","lastModifiedDate":"2023-03-21"},{"lineNumber":228,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2023-03-21"},{"lineNumber":229,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":230,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":231,"author":{"gitId":"daytona65"},"content":".context-menu .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":232,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":233,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":234,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":235,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":236,"author":{"gitId":"daytona65"},"content":" * Menu","lastModifiedDate":"2023-03-28"},{"lineNumber":237,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":238,"author":{"gitId":"daytona65"},"content":".menu-bar {","lastModifiedDate":"2023-03-21"},{"lineNumber":239,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#A8C5C9, 20%);","lastModifiedDate":"2023-03-28"},{"lineNumber":240,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":241,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":242,"author":{"gitId":"daytona65"},"content":".menu-bar .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":243,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 14pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":244,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":245,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-28"},{"lineNumber":246,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 0.9;","lastModifiedDate":"2023-03-21"},{"lineNumber":247,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":248,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":249,"author":{"gitId":"daytona65"},"content":".menu .left-container {","lastModifiedDate":"2023-03-21"},{"lineNumber":250,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: black;","lastModifiedDate":"2023-03-21"},{"lineNumber":251,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":252,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":253,"author":{"gitId":"daytona65"},"content":"/*","lastModifiedDate":"2023-03-21"},{"lineNumber":254,"author":{"gitId":"daytona65"},"content":" * Metro style Push Button","lastModifiedDate":"2023-03-21"},{"lineNumber":255,"author":{"gitId":"daytona65"},"content":" * Author: Pedro Duque Vieira","lastModifiedDate":"2023-03-21"},{"lineNumber":256,"author":{"gitId":"daytona65"},"content":" * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/","lastModifiedDate":"2023-03-21"},{"lineNumber":257,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-21"},{"lineNumber":258,"author":{"gitId":"daytona65"},"content":".button {","lastModifiedDate":"2023-03-21"},{"lineNumber":259,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 5 22 5 22;","lastModifiedDate":"2023-03-21"},{"lineNumber":260,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: #e2e2e2;","lastModifiedDate":"2023-03-21"},{"lineNumber":261,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":262,"author":{"gitId":"daytona65"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":263,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":264,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;","lastModifiedDate":"2023-03-21"},{"lineNumber":265,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":266,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #d8d8d8;","lastModifiedDate":"2023-03-21"},{"lineNumber":267,"author":{"gitId":"daytona65"},"content":"    -fx-background-insets: 0 0 0 0, 0, 1, 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":268,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":269,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":270,"author":{"gitId":"daytona65"},"content":".button:hover {","lastModifiedDate":"2023-03-21"},{"lineNumber":271,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #3a3a3a;","lastModifiedDate":"2023-03-21"},{"lineNumber":272,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":273,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":274,"author":{"gitId":"daytona65"},"content":".button:pressed, .button:default:hover:pressed {","lastModifiedDate":"2023-03-21"},{"lineNumber":275,"author":{"gitId":"daytona65"},"content":"  -fx-background-color: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":276,"author":{"gitId":"daytona65"},"content":"  -fx-text-fill: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":277,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":278,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":279,"author":{"gitId":"daytona65"},"content":".button:focused {","lastModifiedDate":"2023-03-21"},{"lineNumber":280,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: white, white;","lastModifiedDate":"2023-03-21"},{"lineNumber":281,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 1, 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":282,"author":{"gitId":"daytona65"},"content":"    -fx-border-style: solid, segments(1, 1);","lastModifiedDate":"2023-03-21"},{"lineNumber":283,"author":{"gitId":"daytona65"},"content":"    -fx-border-radius: 0, 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":284,"author":{"gitId":"daytona65"},"content":"    -fx-border-insets: 1 1 1 1, 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":285,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":286,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":287,"author":{"gitId":"daytona65"},"content":".button:disabled, .button:default:disabled {","lastModifiedDate":"2023-03-21"},{"lineNumber":288,"author":{"gitId":"daytona65"},"content":"    -fx-opacity: 0.4;","lastModifiedDate":"2023-03-21"},{"lineNumber":289,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":290,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":291,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":292,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":293,"author":{"gitId":"daytona65"},"content":".button:default {","lastModifiedDate":"2023-03-21"},{"lineNumber":294,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: -fx-focus-color;","lastModifiedDate":"2023-03-21"},{"lineNumber":295,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #ffffff;","lastModifiedDate":"2023-03-21"},{"lineNumber":296,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":297,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":298,"author":{"gitId":"daytona65"},"content":".button:default:hover {","lastModifiedDate":"2023-03-21"},{"lineNumber":299,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(-fx-focus-color, 30%);","lastModifiedDate":"2023-03-21"},{"lineNumber":300,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":301,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":302,"author":{"gitId":"daytona65"},"content":".dialog-pane {","lastModifiedDate":"2023-03-21"},{"lineNumber":303,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":304,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":305,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":306,"author":{"gitId":"daytona65"},"content":".dialog-pane \u003e *.button-bar \u003e *.container {","lastModifiedDate":"2023-03-21"},{"lineNumber":307,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #1d1d1d;","lastModifiedDate":"2023-03-21"},{"lineNumber":308,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":309,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":310,"author":{"gitId":"daytona65"},"content":".dialog-pane \u003e *.label.content {","lastModifiedDate":"2023-03-21"},{"lineNumber":311,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 14px;","lastModifiedDate":"2023-03-21"},{"lineNumber":312,"author":{"gitId":"daytona65"},"content":"    -fx-font-weight: bold;","lastModifiedDate":"2023-03-21"},{"lineNumber":313,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":314,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":315,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":316,"author":{"gitId":"daytona65"},"content":".dialog-pane:header *.header-panel {","lastModifiedDate":"2023-03-21"},{"lineNumber":317,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 25%);","lastModifiedDate":"2023-03-21"},{"lineNumber":318,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":319,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":320,"author":{"gitId":"daytona65"},"content":".dialog-pane:header *.header-panel *.label {","lastModifiedDate":"2023-03-21"},{"lineNumber":321,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 18px;","lastModifiedDate":"2023-03-21"},{"lineNumber":322,"author":{"gitId":"daytona65"},"content":"    -fx-font-style: italic;","lastModifiedDate":"2023-03-21"},{"lineNumber":323,"author":{"gitId":"daytona65"},"content":"    -fx-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":324,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":325,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":326,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":327,"author":{"gitId":"daytona65"},"content":".scroll-bar {","lastModifiedDate":"2023-03-21"},{"lineNumber":328,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#A8C5C9, 20%);","lastModifiedDate":"2023-03-30"},{"lineNumber":329,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":330,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":331,"author":{"gitId":"daytona65"},"content":".scroll-bar .thumb {","lastModifiedDate":"2023-03-21"},{"lineNumber":332,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: derive(#1d1d1d, 50%);","lastModifiedDate":"2023-03-21"},{"lineNumber":333,"author":{"gitId":"daytona65"},"content":"    -fx-background-insets: 3;","lastModifiedDate":"2023-03-21"},{"lineNumber":334,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":335,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":336,"author":{"gitId":"daytona65"},"content":".scroll-bar .increment-button, .scroll-bar .decrement-button {","lastModifiedDate":"2023-03-21"},{"lineNumber":337,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":338,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 0 0 0 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":339,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":340,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":341,"author":{"gitId":"daytona65"},"content":".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {","lastModifiedDate":"2023-03-21"},{"lineNumber":342,"author":{"gitId":"daytona65"},"content":"    -fx-shape: \" \";","lastModifiedDate":"2023-03-21"},{"lineNumber":343,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":344,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":345,"author":{"gitId":"daytona65"},"content":".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {","lastModifiedDate":"2023-03-21"},{"lineNumber":346,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 1 8 1 8;","lastModifiedDate":"2023-03-21"},{"lineNumber":347,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":348,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":349,"author":{"gitId":"daytona65"},"content":".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {","lastModifiedDate":"2023-03-21"},{"lineNumber":350,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 8 1 8 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":351,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":352,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":353,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":354,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":355,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":356,"author":{"gitId":"daytona65"},"content":" * Patient card","lastModifiedDate":"2023-03-28"},{"lineNumber":357,"author":{"gitId":"daytona65"},"content":" * PatientListCard.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":358,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":359,"author":{"gitId":"daytona65"},"content":"#cardPane {","lastModifiedDate":"2023-03-21"},{"lineNumber":360,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-21"},{"lineNumber":361,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":362,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":363,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":364,"author":{"gitId":"daytona65"},"content":"#cardPaneRed {","lastModifiedDate":"2023-03-30"},{"lineNumber":365,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: red;","lastModifiedDate":"2023-03-30"},{"lineNumber":366,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2023-03-30"},{"lineNumber":367,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-30"},{"lineNumber":368,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":369,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":370,"author":{"gitId":"daytona65"},"content":" * List for patients/wards","lastModifiedDate":"2023-03-30"},{"lineNumber":371,"author":{"gitId":"daytona65"},"content":" * PatientListPanel.fxml","lastModifiedDate":"2023-03-30"},{"lineNumber":372,"author":{"gitId":"daytona65"},"content":" * WardListPanel.fxml","lastModifiedDate":"2023-03-30"},{"lineNumber":373,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":374,"author":{"gitId":"daytona65"},"content":"#listView {","lastModifiedDate":"2023-03-30"},{"lineNumber":375,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-30"},{"lineNumber":376,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 0;","lastModifiedDate":"2023-03-30"},{"lineNumber":377,"author":{"gitId":"daytona65"},"content":"    -fx-border-radius: 400;","lastModifiedDate":"2023-03-30"},{"lineNumber":378,"author":{"gitId":"daytona65"},"content":"    -fx-background-radius: 400;","lastModifiedDate":"2023-03-30"},{"lineNumber":379,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-30"},{"lineNumber":380,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":381,"author":{"gitId":"daytona65"},"content":"#commandTypeLabel {","lastModifiedDate":"2023-03-21"},{"lineNumber":382,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11px;","lastModifiedDate":"2023-03-21"},{"lineNumber":383,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: #F70D1A;","lastModifiedDate":"2023-03-21"},{"lineNumber":384,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":385,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":386,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":387,"author":{"gitId":"daytona65"},"content":" * CLI text field","lastModifiedDate":"2023-03-30"},{"lineNumber":388,"author":{"gitId":"daytona65"},"content":" * MainWindow.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":389,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":390,"author":{"gitId":"daytona65"},"content":"#commandTextField {","lastModifiedDate":"2023-03-21"},{"lineNumber":391,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: transparent;","lastModifiedDate":"2023-03-30"},{"lineNumber":392,"author":{"gitId":"daytona65"},"content":"    -fx-background-insets: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":393,"author":{"gitId":"daytona65"},"content":"    -fx-border-color: transparent;","lastModifiedDate":"2023-03-30"},{"lineNumber":394,"author":{"gitId":"daytona65"},"content":"    -fx-border-insets: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":395,"author":{"gitId":"daytona65"},"content":"    -fx-border-width: 1;","lastModifiedDate":"2023-03-21"},{"lineNumber":396,"author":{"gitId":"daytona65"},"content":"    -fx-border-radius: 100;","lastModifiedDate":"2023-03-30"},{"lineNumber":397,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-21"},{"lineNumber":398,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 13pt;","lastModifiedDate":"2023-03-21"},{"lineNumber":399,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-28"},{"lineNumber":400,"author":{"gitId":"daytona65"},"content":"    -fx-prompt-text-fill: grey;","lastModifiedDate":"2023-03-30"},{"lineNumber":401,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":402,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":403,"author":{"gitId":"daytona65"},"content":"#filterField, #patientListPanel, #patientWebpage {","lastModifiedDate":"2023-03-21"},{"lineNumber":404,"author":{"gitId":"daytona65"},"content":"    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);","lastModifiedDate":"2023-03-21"},{"lineNumber":405,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":406,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":407,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":408,"author":{"gitId":"daytona65"},"content":" * Results Display","lastModifiedDate":"2023-03-28"},{"lineNumber":409,"author":{"gitId":"daytona65"},"content":" * ResultDisplay.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":410,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":411,"author":{"gitId":"daytona65"},"content":"#resultDisplay .content {","lastModifiedDate":"2023-03-21"},{"lineNumber":412,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #A8C5C9;","lastModifiedDate":"2023-03-28"},{"lineNumber":413,"author":{"gitId":"daytona65"},"content":"    -fx-background-radius: 0;","lastModifiedDate":"2023-03-21"},{"lineNumber":414,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":415,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":416,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":417,"author":{"gitId":"daytona65"},"content":" * Stats","lastModifiedDate":"2023-03-31"},{"lineNumber":418,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":419,"author":{"gitId":"daytona65"},"content":"#stats {","lastModifiedDate":"2023-03-31"},{"lineNumber":420,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: gray;","lastModifiedDate":"2023-03-31"},{"lineNumber":421,"author":{"gitId":"daytona65"},"content":"    -fx-background-radius: 50;","lastModifiedDate":"2023-03-31"},{"lineNumber":422,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Semibold\";","lastModifiedDate":"2023-03-31"},{"lineNumber":423,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-31"},{"lineNumber":424,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-30"},{"lineNumber":425,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":426,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-28"},{"lineNumber":427,"author":{"gitId":"daytona65"},"content":" * RESULT display output font","lastModifiedDate":"2023-03-28"},{"lineNumber":428,"author":{"gitId":"daytona65"},"content":" * ResultDisplay.fxml","lastModifiedDate":"2023-03-28"},{"lineNumber":429,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-28"},{"lineNumber":430,"author":{"gitId":"daytona65"},"content":".result-display {","lastModifiedDate":"2023-03-28"},{"lineNumber":431,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #A8C5C9;","lastModifiedDate":"2023-03-28"},{"lineNumber":432,"author":{"gitId":"daytona65"},"content":"    -fx-font-family: \"Segoe UI Light\";","lastModifiedDate":"2023-03-28"},{"lineNumber":433,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11pt;","lastModifiedDate":"2023-03-28"},{"lineNumber":434,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black;","lastModifiedDate":"2023-03-28"},{"lineNumber":435,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 5px;","lastModifiedDate":"2023-03-28"},{"lineNumber":436,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":437,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":438,"author":{"gitId":"daytona65"},"content":".result-display .label {","lastModifiedDate":"2023-03-28"},{"lineNumber":439,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: black !important;","lastModifiedDate":"2023-03-28"},{"lineNumber":440,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-28"},{"lineNumber":441,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":442,"author":{"gitId":"daytona65"},"content":"#tags {","lastModifiedDate":"2023-03-21"},{"lineNumber":443,"author":{"gitId":"daytona65"},"content":"    -fx-hgap: 7;","lastModifiedDate":"2023-03-21"},{"lineNumber":444,"author":{"gitId":"daytona65"},"content":"    -fx-vgap: 3;","lastModifiedDate":"2023-03-21"},{"lineNumber":445,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"},{"lineNumber":446,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-21"},{"lineNumber":447,"author":{"gitId":"daytona65"},"content":"#tags .label {","lastModifiedDate":"2023-03-21"},{"lineNumber":448,"author":{"gitId":"daytona65"},"content":"    -fx-text-fill: white;","lastModifiedDate":"2023-03-21"},{"lineNumber":449,"author":{"gitId":"daytona65"},"content":"    -fx-background-color: #3e7b91;","lastModifiedDate":"2023-03-21"},{"lineNumber":450,"author":{"gitId":"daytona65"},"content":"    -fx-padding: 1 3 1 3;","lastModifiedDate":"2023-03-21"},{"lineNumber":451,"author":{"gitId":"daytona65"},"content":"    -fx-border-radius: 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":452,"author":{"gitId":"daytona65"},"content":"    -fx-background-radius: 2;","lastModifiedDate":"2023-03-21"},{"lineNumber":453,"author":{"gitId":"daytona65"},"content":"    -fx-font-size: 11;","lastModifiedDate":"2023-03-21"},{"lineNumber":454,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-21"}],"authorContributionMap":{"daytona65":454}},{"path":"src/main/resources/view/PatientListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2016-12-18"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2017-03-28"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cpadding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"          \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2017-03-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003c/padding\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003cminWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"              \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/minWidth\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"          \u003c/Label\u003e","lastModifiedDate":"2017-03-20"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"          \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003c/HBox\u003e","lastModifiedDate":"2016-09-03"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"        \u003cLabel fx:id\u003d\"nric\" styleClass\u003d\"cell_small_label\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"        \u003cLabel fx:id\u003d\"ward\" styleClass\u003d\"cell_small_label\" /\u003e","lastModifiedDate":"2023-03-22"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        \u003cLabel fx:id\u003d\"discharge\" text\u003d\"No discharge date set\" styleClass\u003d\"cell_small_label\" /\u003e","lastModifiedDate":"2023-03-28"},{"lineNumber":34,"author":{"gitId":"-"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"      \u003cLabel fx:id\u003d\"status\" /\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    \u003c/HBox\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"daytona65":8,"-":30}},{"path":"src/main/resources/view/PatientListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"\u003cVBox id\u003d\"listView\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"KSunil2001"},"content":"  \u003cListView fx:id\u003d\"patientListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"daytona65":1,"-":6,"KSunil2001":1}},{"path":"src/main/resources/view/ResultDisplay.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-14"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e","lastModifiedDate":"2016-10-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2017-06-22"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\"","lastModifiedDate":"2017-06-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2016-12-24"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c/StackPane\u003e","lastModifiedDate":"2017-06-22"}],"authorContributionMap":{"daytona65":1,"-":8}},{"path":"src/main/resources/view/StatusBarFooter.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-26"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2018-12-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2017-03-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-25"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.layout.StackPane?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"daytona65"},"content":"\u003cHBox styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" spacing\u003d\"80\"\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"  \u003cLabel fx:id\u003d\"saveLocationStatus\" /\u003e","lastModifiedDate":"2019-01-25"},{"lineNumber":12,"author":{"gitId":"daytona65"},"content":"  \u003cLabel fx:id\u003d\"stats\" textAlignment\u003d\"CENTER\"/\u003e","lastModifiedDate":"2023-03-31"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"daytona65":6,"-":7}},{"path":"src/main/resources/view/WardListCard.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":5,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.Region?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    \u003ccolumnConstraints\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":14,"author":{"gitId":"-"},"content":"      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003c/columnConstraints\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    \u003cVBox alignment\u003d\"CENTER\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"      \u003cpadding\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"      \u003c/padding\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":22,"author":{"gitId":"-"},"content":"          \u003cminWidth\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            \u003c!-- Ensures that the label text is never truncated --\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":25,"author":{"gitId":"-"},"content":"          \u003c/minWidth\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" /\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"      \u003c/HBox\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"      \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\"/\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    \u003c/VBox\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"-"},"content":"  \u003c/GridPane\u003e","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"\u003c/HBox\u003e","lastModifiedDate":"2023-03-23"}],"authorContributionMap":{"daytona65":4,"-":28}},{"path":"src/main/resources/view/WardListPanel.fxml","fileType":"functional-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ListView?\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":7,"author":{"gitId":"daytona65"},"content":"  \u003cListView fx:id\u003d\"wardListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e","lastModifiedDate":"2023-03-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c/VBox\u003e","lastModifiedDate":"2023-03-24"}],"authorContributionMap":{"daytona65":1,"-":7}},{"path":"src/test/java/seedu/medinfo/AppParametersTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Map;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.application.Application;","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class AppParametersTest {","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    private final ParametersStub parametersStub \u003d new ParametersStub();","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private final AppParameters expected \u003d new AppParameters();","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void parse_validConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"config.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        expected.setConfigPath(Paths.get(\"config.json\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void parse_nullConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", null);","lastModifiedDate":"2018-04-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void parse_invalidConfigPath_success() {","lastModifiedDate":"2018-04-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        parametersStub.namedParameters.put(\"config\", \"a\\0\");","lastModifiedDate":"2018-04-21"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        expected.setConfigPath(null);","lastModifiedDate":"2018-04-21"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(expected, AppParameters.parse(parametersStub));","lastModifiedDate":"2018-04-21"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    private static class ParametersStub extends Application.Parameters {","lastModifiedDate":"2018-04-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2018-04-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getRaw() {","lastModifiedDate":"2018-04-21"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        public List\u003cString\u003e getUnnamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"should not be called\");","lastModifiedDate":"2018-04-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-04-21"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        public Map\u003cString, String\u003e getNamed() {","lastModifiedDate":"2018-04-21"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            return Collections.unmodifiableMap(namedParameters);","lastModifiedDate":"2018-04-21"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-04-21"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-04-21"}],"authorContributionMap":{"yitong241":1,"-":57}},{"path":"src/test/java/seedu/medinfo/commons/core/ConfigTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class ConfigTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void toString_defaultObject_stringReturned() {","lastModifiedDate":"2016-09-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        String defaultConfigAsString \u003d \"Current log level : INFO\\n\"","lastModifiedDate":"2018-12-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"                + \"Preference file Location : preferences.json\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());","lastModifiedDate":"2016-09-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-09-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        Config defaultConfig \u003d new Config();","lastModifiedDate":"2016-09-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNotNull(defaultConfig);","lastModifiedDate":"2016-10-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));","lastModifiedDate":"2016-09-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"yitong241":1,"-":26}},{"path":"src/test/java/seedu/medinfo/commons/core/VersionTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class VersionTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {","lastModifiedDate":"2016-08-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void versionConstructor_correctParameter_valueAsExpected() {","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(19, 10, 20, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(19, version.getMajor());","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(10, version.getMinor());","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertEquals(20, version.getPatch());","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertEquals(true, version.isEarlyAccess());","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void versionToString_validVersion_correctStringRepresentation() {","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // boundary at 0","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(\"V0.0.0ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // normal values","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        version \u003d new Version(4, 10, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(\"V4.10.5\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // big numbers","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertEquals(\"V100.100.100ea\", version.toString());","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_compareToIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2017-09-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2017-09-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // Tests equality","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        one \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        another \u003d new Version(11, 12, 13, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003d\u003d 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Tests different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // Tests different minor","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 5, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        // Tests different major","lastModifiedDate":"2016-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        // Tests high major vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        one \u003d new Version(10, 0, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003e 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        // Tests high patch vs low minor","lastModifiedDate":"2016-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 1, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // Tests same major minor different patch","lastModifiedDate":"2016-08-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // Tests early access vs not early access on same version number","lastModifiedDate":"2016-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        // Tests early access lower version vs not early access higher version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Tests early access higher version vs not early access lower version compare by version number first","lastModifiedDate":"2016-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        one \u003d new Version(2, 15, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        another \u003d new Version(2, 15, 5, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(one.compareTo(another) \u003c 0);","lastModifiedDate":"2016-08-08"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_hashCodeIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        Version version \u003d new Version(100, 100, 100, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertEquals(100100100, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        version \u003d new Version(10, 10, 10, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(1010010010, version.hashCode());","lastModifiedDate":"2016-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    public void versionComparable_validVersion_equalIsCorrect() {","lastModifiedDate":"2016-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        Version one;","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        Version another;","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        one \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        another \u003d new Version(0, 0, 0, false);","lastModifiedDate":"2016-08-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        one \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        another \u003d new Version(100, 191, 275, true);","lastModifiedDate":"2016-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertTrue(one.equals(another));","lastModifiedDate":"2016-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    private void verifyVersionParsedCorrectly(String versionString,","lastModifiedDate":"2016-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            int major, int minor, int patch, boolean isEarlyAccess) {","lastModifiedDate":"2016-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));","lastModifiedDate":"2016-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":2,"-":133}},{"path":"src/test/java/seedu/medinfo/commons/core/index/IndexTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.core.index;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class IndexTest {","lastModifiedDate":"2017-05-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void createOneBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));","lastModifiedDate":"2019-03-23"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // convert from one-based index to zero-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void createZeroBasedIndex() {","lastModifiedDate":"2017-05-24"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // invalid index","lastModifiedDate":"2017-05-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));","lastModifiedDate":"2019-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // check equality using the same base","lastModifiedDate":"2017-05-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // convert from zero-based index to one-based index","lastModifiedDate":"2017-05-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());","lastModifiedDate":"2017-05-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-05-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        final Index fifthPersonIndex \u003d Index.fromOneBased(5);","lastModifiedDate":"2017-05-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));","lastModifiedDate":"2017-05-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));","lastModifiedDate":"2017-05-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));","lastModifiedDate":"2017-05-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(null));","lastModifiedDate":"2017-05-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(5.0f));","lastModifiedDate":"2017-05-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));","lastModifiedDate":"2017-05-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"yitong241":2,"-":58}},{"path":"src/test/java/seedu/medinfo/commons/util/AppUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class AppUtilTest {","lastModifiedDate":"2016-09-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public void getImage_exitingImage() {","lastModifiedDate":"2016-09-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"        assertNotNull(AppUtil.getImage(\"/images/MedInfo.png\"));","lastModifiedDate":"2023-03-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void getImage_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void checkArgument_true_nothingHappens() {","lastModifiedDate":"2017-05-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true);","lastModifiedDate":"2017-05-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        AppUtil.checkArgument(true, \"\");","lastModifiedDate":"2017-05-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-15"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-15"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        String errorMessage \u003d \"error message\";","lastModifiedDate":"2017-05-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-30"}],"authorContributionMap":{"yitong241":3,"-":33}},{"path":"src/test/java/seedu/medinfo/commons/util/CollectionUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.util.CollectionUtil.requireAllNonNull;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2016-12-22"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.Collection;","lastModifiedDate":"2017-01-14"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-01-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-12-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class CollectionUtilTest {","lastModifiedDate":"2016-12-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void requireAllNonNullVarargs() {","lastModifiedDate":"2017-05-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // no arguments","lastModifiedDate":"2017-01-14"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown();","lastModifiedDate":"2017-05-19"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // any non-empty argument list","lastModifiedDate":"2017-01-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(\"\");","lastModifiedDate":"2017-05-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // argument lists with just one null at the beginning","lastModifiedDate":"2017-01-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, \"\", new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(null, new Object(), new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // argument lists with nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");","lastModifiedDate":"2017-05-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", null, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        // argument lists with one null as the last argument","lastModifiedDate":"2017-01-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(\"\", new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(new Object(), new Object(), null);","lastModifiedDate":"2017-05-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Object[]) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // confirms nulls inside lists in the argument list are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(containingNull, new Object());","lastModifiedDate":"2017-05-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-14"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void requireAllNonNullCollection() {","lastModifiedDate":"2017-05-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // lists containing nulls in the front","lastModifiedDate":"2017-01-14"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList((Object) null));","lastModifiedDate":"2017-05-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));","lastModifiedDate":"2017-05-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // lists containing nulls in the middle","lastModifiedDate":"2017-01-14"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        // lists containing nulls at the end","lastModifiedDate":"2017-01-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));","lastModifiedDate":"2017-05-19"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // null reference","lastModifiedDate":"2017-05-19"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);","lastModifiedDate":"2017-05-19"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        // empty list","lastModifiedDate":"2017-01-14"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Collections.emptyList());","lastModifiedDate":"2017-05-19"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        // list with all non-null elements","lastModifiedDate":"2017-01-14"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));","lastModifiedDate":"2018-04-01"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-14"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        // confirms nulls inside nested lists are not considered","lastModifiedDate":"2017-01-14"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);","lastModifiedDate":"2017-01-14"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));","lastModifiedDate":"2017-05-19"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-22"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void isAnyNonNull() {","lastModifiedDate":"2017-06-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull());","lastModifiedDate":"2017-06-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));","lastModifiedDate":"2017-06-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object()));","lastModifiedDate":"2017-06-21"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));","lastModifiedDate":"2017-06-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * if {@code objects} or any element of {@code objects} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));","lastModifiedDate":"2019-03-23"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}","lastModifiedDate":"2017-08-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * if {@code collection} or any element of {@code collection} is null.","lastModifiedDate":"2017-08-20"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));","lastModifiedDate":"2019-03-23"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Object... objects) {","lastModifiedDate":"2017-05-19"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        requireAllNonNull(objects);","lastModifiedDate":"2017-05-19"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {","lastModifiedDate":"2017-05-19"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        requireAllNonNull(collection);","lastModifiedDate":"2017-05-19"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-22"}],"authorContributionMap":{"yitong241":3,"-":105}},{"path":"src/test/java/seedu/medinfo/commons/util/ConfigUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-09-24"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2016-09-24"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.logging.Level;","lastModifiedDate":"2016-09-24"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Config;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class ConfigUtilTest {","lastModifiedDate":"2016-09-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path tempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void read_null_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e read(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void read_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(read(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void read_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"TypicalConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"EmptyConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertEquals(new Config(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        Config expected \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        Config actual \u003d read(\"ExtraValuesConfig.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    private Config getTypicalConfig() {","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        Config config \u003d new Config();","lastModifiedDate":"2016-09-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        config.setLogLevel(Level.INFO);","lastModifiedDate":"2016-09-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));","lastModifiedDate":"2018-04-12"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        return config;","lastModifiedDate":"2016-09-25"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return ConfigUtil.readConfig(configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    public void save_nullConfig_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void save_nullFile_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        Config original \u003d getTypicalConfig();","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        original.setLogLevel(Level.FINE);","lastModifiedDate":"2016-09-25"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(original, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        readBack \u003d ConfigUtil.readConfig(configFilePath).get();","lastModifiedDate":"2016-12-20"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void save(Config config, String configFileInTestDataFolder) throws IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        ConfigUtil.saveConfig(config, configFilePath);","lastModifiedDate":"2016-12-20"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        return configFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                                  : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yitong241":4,"-":112}},{"path":"src/test/java/seedu/medinfo/commons/util/FileUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class FileUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void isValidPath() {","lastModifiedDate":"2018-04-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        // valid path","lastModifiedDate":"2018-04-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        // invalid path","lastModifiedDate":"2018-04-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertFalse(FileUtil.isValidPath(\"a\\0\"));","lastModifiedDate":"2018-04-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // null path -\u003e throws NullPointerException","lastModifiedDate":"2018-04-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":2,"-":21}},{"path":"src/test/java/seedu/medinfo/commons/util/JsonUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2016-10-07"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.SerializableTestClass;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.TestUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":13,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * Tests JSON Read and Write","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class JsonUtilTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");","lastModifiedDate":"2018-04-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();","lastModifiedDate":"2016-10-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        serializableTestClass.setTestValues();","lastModifiedDate":"2016-10-07"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);","lastModifiedDate":"2016-10-07"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-07"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {","lastModifiedDate":"2016-10-07"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);","lastModifiedDate":"2016-10-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        SerializableTestClass serializableTestClass \u003d JsonUtil","lastModifiedDate":"2016-10-07"},{"lineNumber":35,"author":{"gitId":"-"},"content":"                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);","lastModifiedDate":"2016-10-07"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());","lastModifiedDate":"2016-10-07"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());","lastModifiedDate":"2016-10-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-07"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()","lastModifiedDate":"2016-09-28"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":3,"-":42}},{"path":"src/test/java/seedu/medinfo/commons/util/StringUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.commons.util;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class StringUtilTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------","lastModifiedDate":"2019-02-24"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void isNonZeroUnsignedInteger() {","lastModifiedDate":"2019-02-24"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // EP: empty strings","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));","lastModifiedDate":"2017-06-02"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // EP: not a number","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        // EP: zero","lastModifiedDate":"2016-10-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // EP: zero as prefix","lastModifiedDate":"2017-06-02"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        // EP: signed numbers","lastModifiedDate":"2016-10-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // EP: numbers with white space","lastModifiedDate":"2016-10-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces","lastModifiedDate":"2017-06-02"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle","lastModifiedDate":"2017-06-02"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-02"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // EP: number larger than Integer.MAX_VALUE","lastModifiedDate":"2017-06-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2017-06-02"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // EP: valid numbers, should return true","lastModifiedDate":"2016-10-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value","lastModifiedDate":"2017-06-02"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));","lastModifiedDate":"2017-06-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    //---------------- Tests for containsWordIgnoreCase --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":52,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for word: null, empty, multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"     * Invalid equivalence partitions for sentence: null","lastModifiedDate":"2016-10-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * The four test cases below test one invalid input at a time.","lastModifiedDate":"2016-10-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));","lastModifiedDate":"2019-03-23"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));","lastModifiedDate":"2019-03-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()","lastModifiedDate":"2019-03-23"},{"lineNumber":71,"author":{"gitId":"-"},"content":"            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for word:","lastModifiedDate":"2016-10-13"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *   - any word","lastModifiedDate":"2016-10-13"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *   - word containing symbols/numbers","lastModifiedDate":"2016-10-13"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     *   - word with leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * Valid equivalence partitions for sentence:","lastModifiedDate":"2016-10-13"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     *   - empty string","lastModifiedDate":"2016-10-13"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     *   - one word","lastModifiedDate":"2016-10-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     *   - multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *   - sentence with extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Possible scenarios returning true:","lastModifiedDate":"2016-10-13"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *   - matches first word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     *   - last word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     *   - middle word in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     *   - matches multiple words","lastModifiedDate":"2016-10-13"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * Possible scenarios returning false:","lastModifiedDate":"2016-10-13"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     *   - query word matches part of a sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     *   - sentence word matches part of the query word","lastModifiedDate":"2016-10-13"},{"lineNumber":100,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2016-10-13"},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * The test method below tries to verify all above with a reasonably low number of test cases.","lastModifiedDate":"2016-10-13"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-13"},{"lineNumber":105,"author":{"gitId":"-"},"content":"    public void containsWordIgnoreCase_validInputs_correctResult() {","lastModifiedDate":"2016-10-13"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // Empty sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case","lastModifiedDate":"2016-10-13"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Matches a partial word only","lastModifiedDate":"2016-10-13"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word","lastModifiedDate":"2016-10-13"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word","lastModifiedDate":"2016-10-13"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        // Matches word in the sentence, different upper/lower case letters","lastModifiedDate":"2016-10-13"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)","lastModifiedDate":"2016-10-13"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces","lastModifiedDate":"2016-10-13"},{"lineNumber":121,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        // Matches multiple words in sentence","lastModifiedDate":"2016-10-13"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));","lastModifiedDate":"2016-10-13"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-13"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    //---------------- Tests for getDetails --------------------------------------","lastModifiedDate":"2016-10-13"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    /*","lastModifiedDate":"2016-10-13"},{"lineNumber":129,"author":{"gitId":"-"},"content":"     * Equivalence Partitions: null, valid throwable object","lastModifiedDate":"2016-10-13"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-13"},{"lineNumber":131,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-13"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    public void getDetails_exceptionGiven() {","lastModifiedDate":"2016-09-30"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))","lastModifiedDate":"2019-03-14"},{"lineNumber":135,"author":{"gitId":"-"},"content":"            .contains(\"java.io.FileNotFoundException: file not found\"));","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":137,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":138,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    public void getDetails_nullGiven_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-30"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-30"},{"lineNumber":143,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-22"}],"authorContributionMap":{"yitong241":2,"-":141}},{"path":"src/test/java/seedu/medinfo/logic/LogicManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.CommandResult;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ListCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.JsonMedInfoStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.JsonUserPrefsStorage;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.storage.StorageManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"public class LogicManagerTest {","lastModifiedDate":"2016-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public Path temporaryFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2017-06-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    private Logic logic;","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2019-04-25"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"        JsonMedInfoStorage addressBookStorage \u003d new JsonMedInfoStorage(","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"                temporaryFolder.resolve(\"addressBook.json\"));","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));","lastModifiedDate":"2019-04-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-20"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";","lastModifiedDate":"2017-06-20"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);","lastModifiedDate":"2017-06-20"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-14"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void execute_commandExecutionError_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        String deleteCommand \u003d \"delete 9\";","lastModifiedDate":"2017-06-14"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"        assertCommandException(deleteCommand, MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-19"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void execute_validCommand_success() throws Exception {","lastModifiedDate":"2019-03-14"},{"lineNumber":60,"author":{"gitId":"jeraldkiew"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-26"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;","lastModifiedDate":"2017-06-19"},{"lineNumber":62,"author":{"gitId":"jeraldkiew"},"content":"        assertCommandSuccess(listCommand, expectedMessage, model);","lastModifiedDate":"2023-03-26"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-20"},{"lineNumber":65,"author":{"gitId":"KSunil2001"},"content":"    /*","lastModifiedDate":"2023-03-23"},{"lineNumber":66,"author":{"gitId":"jeraldkiew"},"content":"     * @Test","lastModifiedDate":"2023-03-26"},{"lineNumber":67,"author":{"gitId":"jeraldkiew"},"content":"     * public void execute_storageThrowsIoException_throwsCommandException() {","lastModifiedDate":"2023-03-26"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"     * // Setup LogicManager with JsonMedInfoIoExceptionThrowingStub","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"     * JsonMedInfoStorage addressBookStorage \u003d new","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"     * JsonMedInfoIoExceptionThrowingStub(","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"     * temporaryFolder.resolve(\"ioExceptionMedInfo.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"jeraldkiew"},"content":"     * JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(","lastModifiedDate":"2023-03-26"},{"lineNumber":73,"author":{"gitId":"jeraldkiew"},"content":"     * temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));","lastModifiedDate":"2023-03-26"},{"lineNumber":74,"author":{"gitId":"jeraldkiew"},"content":"     * StorageManager storage \u003d new StorageManager(addressBookStorage,","lastModifiedDate":"2023-03-26"},{"lineNumber":75,"author":{"gitId":"jeraldkiew"},"content":"     * userPrefsStorage);","lastModifiedDate":"2023-03-26"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"     * logic \u003d new LogicManager(model, storage);","lastModifiedDate":"2023-03-26"},{"lineNumber":77,"author":{"gitId":"jeraldkiew"},"content":"     * ","lastModifiedDate":"2023-03-26"},{"lineNumber":78,"author":{"gitId":"jeraldkiew"},"content":"     * // Execute add command","lastModifiedDate":"2023-03-26"},{"lineNumber":79,"author":{"gitId":"jeraldkiew"},"content":"     * String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + NRIC_DESC_AMY;","lastModifiedDate":"2023-03-26"},{"lineNumber":80,"author":{"gitId":"jeraldkiew"},"content":"     * Patient expectedPatient \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2023-03-26"},{"lineNumber":81,"author":{"gitId":"jeraldkiew"},"content":"     * ModelManager expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-26"},{"lineNumber":82,"author":{"gitId":"jeraldkiew"},"content":"     * expectedModel.addPatient(expectedPatient);","lastModifiedDate":"2023-03-26"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"     * String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE +","lastModifiedDate":"2023-03-26"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"     * DUMMY_IO_EXCEPTION;","lastModifiedDate":"2023-03-26"},{"lineNumber":85,"author":{"gitId":"jeraldkiew"},"content":"     * assertCommandFailure(addCommand, CommandException.class, expectedMessage,","lastModifiedDate":"2023-03-26"},{"lineNumber":86,"author":{"gitId":"jeraldkiew"},"content":"     * expectedModel);","lastModifiedDate":"2023-03-26"},{"lineNumber":87,"author":{"gitId":"jeraldkiew"},"content":"     * }","lastModifiedDate":"2023-03-26"},{"lineNumber":88,"author":{"gitId":"jeraldkiew"},"content":"     */","lastModifiedDate":"2023-03-26"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPatientList().remove(0));","lastModifiedDate":"2023-03-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-09-21"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":97,"author":{"gitId":"-"},"content":"     * - no exceptions are thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":99,"author":{"gitId":"jeraldkiew"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2023-03-08"},{"lineNumber":100,"author":{"gitId":"jeraldkiew"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":101,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage,","lastModifiedDate":"2019-03-14"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            Model expectedModel) throws CommandException, ParseException {","lastModifiedDate":"2019-03-14"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        CommandResult result \u003d logic.execute(inputCommand);","lastModifiedDate":"2019-03-14"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertEquals(expectedMessage, result.getFeedbackToUser());","lastModifiedDate":"2019-03-14"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2019-03-14"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":112,"author":{"gitId":"jeraldkiew"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"jeraldkiew"},"content":"     * result message is correct.","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":116,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":117,"author":{"gitId":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-03-11"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);","lastModifiedDate":"2017-03-11"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-03-11"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-03-11"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-14"},{"lineNumber":122,"author":{"gitId":"jeraldkiew"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the","lastModifiedDate":"2023-03-08"},{"lineNumber":123,"author":{"gitId":"jeraldkiew"},"content":"     * result message is correct.","lastModifiedDate":"2023-03-08"},{"lineNumber":124,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":126,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-14"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {","lastModifiedDate":"2017-06-14"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);","lastModifiedDate":"2017-06-14"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-14"},{"lineNumber":130,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-14"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-03-11"},{"lineNumber":132,"author":{"gitId":"jeraldkiew"},"content":"     * Executes the command, confirms that the exception is thrown and that the","lastModifiedDate":"2023-03-08"},{"lineNumber":133,"author":{"gitId":"jeraldkiew"},"content":"     * result message is correct.","lastModifiedDate":"2023-03-08"},{"lineNumber":134,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":135,"author":{"gitId":"-"},"content":"     * @see #assertCommandFailure(String, Class, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":136,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-03-11"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            String expectedMessage) {","lastModifiedDate":"2019-03-14"},{"lineNumber":139,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(model.getMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);","lastModifiedDate":"2019-03-14"},{"lineNumber":141,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-05"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-05"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-02-05"},{"lineNumber":144,"author":{"gitId":"-"},"content":"     * Executes the command and confirms that","lastModifiedDate":"2019-03-14"},{"lineNumber":145,"author":{"gitId":"-"},"content":"     * - the {@code expectedException} is thrown \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":146,"author":{"gitId":"-"},"content":"     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2019-03-14"},{"lineNumber":147,"author":{"gitId":"jeraldkiew"},"content":"     * - the internal model manager state is the same as that in","lastModifiedDate":"2023-03-08"},{"lineNumber":148,"author":{"gitId":"jeraldkiew"},"content":"     * {@code expectedModel} \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":149,"author":{"gitId":"jeraldkiew"},"content":"     *","lastModifiedDate":"2023-03-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"     * @see #assertCommandSuccess(String, String, Model)","lastModifiedDate":"2019-03-14"},{"lineNumber":151,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-09-21"},{"lineNumber":152,"author":{"gitId":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,","lastModifiedDate":"2019-03-14"},{"lineNumber":153,"author":{"gitId":"-"},"content":"            String expectedMessage, Model expectedModel) {","lastModifiedDate":"2017-05-31"},{"lineNumber":154,"author":{"gitId":"-"},"content":"        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));","lastModifiedDate":"2019-03-14"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        assertEquals(expectedModel, model);","lastModifiedDate":"2017-05-31"},{"lineNumber":156,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-21"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-19"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":159,"author":{"gitId":"-"},"content":"     * A stub class to throw an {@code IOException} when the save method is called.","lastModifiedDate":"2018-12-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":161,"author":{"gitId":"yitong241"},"content":"    private static class JsonMedInfoIoExceptionThrowingStub extends JsonMedInfoStorage {","lastModifiedDate":"2023-03-30"},{"lineNumber":162,"author":{"gitId":"yitong241"},"content":"        private JsonMedInfoIoExceptionThrowingStub(Path filePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":163,"author":{"gitId":"-"},"content":"            super(filePath);","lastModifiedDate":"2018-12-09"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":165,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":166,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-12-09"},{"lineNumber":167,"author":{"gitId":"yitong241"},"content":"        public void saveMedInfo(ReadOnlyMedInfo addressBook, Path filePath) throws IOException {","lastModifiedDate":"2023-03-30"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            throw DUMMY_IO_EXCEPTION;","lastModifiedDate":"2018-12-09"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-12-09"},{"lineNumber":170,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-21"}],"authorContributionMap":{"yitong241":25,"jeraldkiew":37,"-":106,"KSunil2001":3}},{"path":"src/test/java/seedu/medinfo/logic/commands/AddCommandIntegrationTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code AddCommand}.","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class AddCommandIntegrationTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"        model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void execute_newPerson_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(model.getMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.addPatient(validPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":35,"author":{"gitId":"nramapurath"},"content":"        assertCommandSuccess(new AddCommand(validPatient), model,","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"                String.format(AddCommand.MESSAGE_SUCCESS, validPatient), expectedModel);","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        Patient patientInList \u003d model.getMedInfo().getPatientList().get(0);","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(new AddCommand(patientInList), model, AddCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"nramapurath":2,"yitong241":12,"daytona65":1,"-":28,"KSunil2001":2}},{"path":"src/test/java/seedu/medinfo/logic/commands/AddCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static java.util.Objects.requireNonNull;","lastModifiedDate":"2018-01-10"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-05-12"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-12"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.function.Predicate;","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2017-09-01"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyUserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"public class AddCommandTest {","lastModifiedDate":"2017-05-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void constructor_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void execute_personAcceptedByModel_addSuccessful() throws Exception {","lastModifiedDate":"2017-05-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();","lastModifiedDate":"2017-05-12"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":41,"author":{"gitId":"nramapurath"},"content":"        CommandResult commandResult \u003d new AddCommand(validPatient).execute(modelStub);","lastModifiedDate":"2023-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":43,"author":{"gitId":"nramapurath"},"content":"        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPatient), commandResult.getFeedbackToUser());","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"nramapurath"},"content":"        assertEquals(Arrays.asList(validPatient), modelStub.personsAdded);","lastModifiedDate":"2023-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void execute_duplicatePerson_throwsCommandException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"        Patient validPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"        AddCommand addCommand \u003d new AddCommand(validPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"nramapurath"},"content":"        ModelStub modelStub \u003d new ModelStubWithPerson(validPatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PATIENT, () -\u003e addCommand.execute(modelStub));","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-22"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"        Patient alice \u003d new PatientBuilder().withName(\"Alice\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        Patient bob \u003d new PatientBuilder().withName(\"Bob\").build();","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommand \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        AddCommand addBobCommand \u003d new AddCommand(bob);","lastModifiedDate":"2017-06-22"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);","lastModifiedDate":"2017-06-22"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertTrue(addAliceCommand.equals(addAliceCommandCopy));","lastModifiedDate":"2017-06-22"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(1));","lastModifiedDate":"2017-06-22"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-22"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(null));","lastModifiedDate":"2017-06-22"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":76,"author":{"gitId":"nramapurath"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-03-08"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertFalse(addAliceCommand.equals(addBobCommand));","lastModifiedDate":"2017-06-22"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-22"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-22"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     * A default model stub that have all of the methods failing.","lastModifiedDate":"2017-05-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    private class ModelStub implements Model {","lastModifiedDate":"2017-05-12"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {","lastModifiedDate":"2018-12-06"},{"lineNumber":86,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        public ReadOnlyUserPrefs getUserPrefs() {","lastModifiedDate":"2018-11-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        public GuiSettings getGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        public void setGuiSettings(GuiSettings guiSettings) {","lastModifiedDate":"2018-11-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":103,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":105,"author":{"gitId":"yitong241"},"content":"        public Path getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-11-27"},{"lineNumber":110,"author":{"gitId":"yitong241"},"content":"        public void setMedInfoFilePath(Path addressBookFilePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":111,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-11-27"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-11-27"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":"        //// Patient methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":116,"author":{"gitId":"KSunil2001"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":121,"author":{"gitId":"yitong241"},"content":"        public void setMedInfo(ReadOnlyMedInfo newData) {","lastModifiedDate":"2023-03-30"},{"lineNumber":122,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":126,"author":{"gitId":"yitong241"},"content":"        public ReadOnlyMedInfo getMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":127,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":129,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":130,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-06"},{"lineNumber":131,"author":{"gitId":"KSunil2001"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-06"},{"lineNumber":134,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":136,"author":{"gitId":"daytona65"},"content":"        public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":137,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-23"},{"lineNumber":138,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":139,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":141,"author":{"gitId":"KSunil2001"},"content":"        public void deletePatient(Patient target) {","lastModifiedDate":"2023-03-09"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":144,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":146,"author":{"gitId":"KSunil2001"},"content":"        public void setPatient(Patient target, Patient editedPatient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":147,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":150,"author":{"gitId":"yitong241"},"content":"        @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":151,"author":{"gitId":"yitong241"},"content":"        public void sortPatients(Comparator\u003cPatient\u003e comparator) {}","lastModifiedDate":"2023-03-28"},{"lineNumber":152,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":154,"author":{"gitId":"KSunil2001"},"content":"        public ObservableList\u003cPatient\u003e getFilteredPatientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":159,"author":{"gitId":"KSunil2001"},"content":"        public void updateFilteredPatientList(Predicate\u003cPatient\u003e predicate) {","lastModifiedDate":"2023-03-09"},{"lineNumber":160,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":162,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":163,"author":{"gitId":"daytona65"},"content":"        //// Ward methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-03-24"},{"lineNumber":164,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":165,"author":{"gitId":"daytona65"},"content":"        public void addWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":166,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":167,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":168,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":169,"author":{"gitId":"daytona65"},"content":"        public boolean hasWard(Ward ward) {","lastModifiedDate":"2023-03-24"},{"lineNumber":170,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":171,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":172,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":173,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":174,"author":{"gitId":"daytona65"},"content":"        public void deleteWard(Ward target) {","lastModifiedDate":"2023-03-24"},{"lineNumber":175,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":176,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":177,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":178,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":179,"author":{"gitId":"daytona65"},"content":"        public void setWard(Ward target, Ward editedWard) {","lastModifiedDate":"2023-03-24"},{"lineNumber":180,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":181,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":182,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":183,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":184,"author":{"gitId":"daytona65"},"content":"        public ObservableList\u003cWard\u003e getFilteredWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":185,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":186,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":187,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":188,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":189,"author":{"gitId":"daytona65"},"content":"        public void updateFilteredWardList(Predicate\u003cWard\u003e predicate) {","lastModifiedDate":"2023-03-24"},{"lineNumber":190,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-24"},{"lineNumber":191,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":192,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-31"},{"lineNumber":193,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-31"},{"lineNumber":194,"author":{"gitId":"daytona65"},"content":"        public List\u003cString\u003e getStatsInfo() {","lastModifiedDate":"2023-03-31"},{"lineNumber":195,"author":{"gitId":"daytona65"},"content":"            throw new AssertionError(\"This method should not be called.\");","lastModifiedDate":"2023-03-31"},{"lineNumber":196,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-31"},{"lineNumber":197,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":200,"author":{"gitId":"nramapurath"},"content":"     * A Model stub that contains a single patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":201,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":202,"author":{"gitId":"-"},"content":"    private class ModelStubWithPerson extends ModelStub {","lastModifiedDate":"2018-08-07"},{"lineNumber":203,"author":{"gitId":"nramapurath"},"content":"        private final Patient patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":204,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":205,"author":{"gitId":"nramapurath"},"content":"        ModelStubWithPerson(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":206,"author":{"gitId":"nramapurath"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":207,"author":{"gitId":"nramapurath"},"content":"            this.patient \u003d patient;","lastModifiedDate":"2023-03-08"},{"lineNumber":208,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":209,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":210,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":211,"author":{"gitId":"KSunil2001"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":212,"author":{"gitId":"nramapurath"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":213,"author":{"gitId":"jeraldkiew"},"content":"            return this.patient.isSamePatient(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":214,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":215,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":216,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":217,"author":{"gitId":"daytona65"},"content":"        public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":218,"author":{"gitId":"daytona65"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":219,"author":{"gitId":"daytona65"},"content":"            return this.patient.isSameNric(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":220,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":222,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":223,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-12"},{"lineNumber":224,"author":{"gitId":"nramapurath"},"content":"     * A Model stub that always accept the patient being added.","lastModifiedDate":"2023-03-08"},{"lineNumber":225,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-12"},{"lineNumber":226,"author":{"gitId":"-"},"content":"    private class ModelStubAcceptingPersonAdded extends ModelStub {","lastModifiedDate":"2017-05-12"},{"lineNumber":227,"author":{"gitId":"nramapurath"},"content":"        final ArrayList\u003cPatient\u003e personsAdded \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-03-08"},{"lineNumber":228,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2018-08-07"},{"lineNumber":230,"author":{"gitId":"KSunil2001"},"content":"        public boolean hasPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":231,"author":{"gitId":"nramapurath"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":232,"author":{"gitId":"jeraldkiew"},"content":"            return personsAdded.stream().anyMatch(patient::isSamePatient);","lastModifiedDate":"2023-03-08"},{"lineNumber":233,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2018-08-07"},{"lineNumber":234,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-07"},{"lineNumber":235,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-23"},{"lineNumber":236,"author":{"gitId":"daytona65"},"content":"        public boolean hasPatientNric(Patient patient) {","lastModifiedDate":"2023-03-23"},{"lineNumber":237,"author":{"gitId":"daytona65"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-23"},{"lineNumber":238,"author":{"gitId":"daytona65"},"content":"            return personsAdded.stream().anyMatch(patient::isSameNric);","lastModifiedDate":"2023-03-23"},{"lineNumber":239,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-23"},{"lineNumber":240,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-23"},{"lineNumber":241,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-12"},{"lineNumber":242,"author":{"gitId":"KSunil2001"},"content":"        public void addPatient(Patient patient) {","lastModifiedDate":"2023-03-09"},{"lineNumber":243,"author":{"gitId":"nramapurath"},"content":"            requireNonNull(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":244,"author":{"gitId":"nramapurath"},"content":"            personsAdded.add(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":245,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-12"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":247,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2017-05-04"},{"lineNumber":248,"author":{"gitId":"yitong241"},"content":"        public ReadOnlyMedInfo getMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":249,"author":{"gitId":"yitong241"},"content":"            return new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":250,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-05-04"},{"lineNumber":251,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-12"},{"lineNumber":252,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-12"},{"lineNumber":253,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-12"}],"authorContributionMap":{"nramapurath":17,"yitong241":21,"daytona65":58,"jeraldkiew":2,"-":145,"KSunil2001":10}},{"path":"src/test/java/seedu/medinfo/logic/commands/ClearCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"public class ClearCommandTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"    public void execute_emptyMedInfo_success() {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"        Model model \u003d new ModelManager();","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    public void execute_nonEmptyMedInfo_success() {","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"        Model model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        expectedModel.setMedInfo(new MedInfo());","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":32}},{"path":"src/test/java/seedu/medinfo/logic/commands/CommandResultTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class CommandResultTest {","lastModifiedDate":"2018-12-09"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-12-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-12-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertTrue(commandResult.equals(commandResult));","lastModifiedDate":"2018-12-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(null));","lastModifiedDate":"2018-12-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(0.5f));","lastModifiedDate":"2018-12-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"different\")));","lastModifiedDate":"2018-12-09"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));","lastModifiedDate":"2018-12-09"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns false","lastModifiedDate":"2018-12-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));","lastModifiedDate":"2018-12-09"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-12-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void hashcode() {","lastModifiedDate":"2018-12-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        CommandResult commandResult \u003d new CommandResult(\"feedback\");","lastModifiedDate":"2018-12-09"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        // same values -\u003e returns same hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // different feedbackToUser value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        // different showHelp value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // different exit value -\u003e returns different hashcode","lastModifiedDate":"2018-12-09"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());","lastModifiedDate":"2018-12-09"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-12-09"}],"authorContributionMap":{"yitong241":1,"-":53}},{"path":"src/test/java/seedu/medinfo/logic/commands/CommandTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_DISCHARGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_WARD;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2017-06-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-07-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.exceptions.CommandException;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":" * Contains helper methods for testing commands.","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"public class CommandTestUtil {","lastModifiedDate":"2017-06-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";","lastModifiedDate":"2017-07-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";","lastModifiedDate":"2017-07-05"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"    public static final String VALID_NRIC_AMY \u003d \"S9999999P\";","lastModifiedDate":"2023-03-13"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"    public static final String VALID_NRIC_BOB \u003d \"S8888888P\";","lastModifiedDate":"2023-03-13"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    public static final String VALID_STATUS_AMY \u003d \"RED\";","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"    public static final String VALID_STATUS_BOB \u003d \"GRAY\";","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"    public static final String VALID_WARD_AMY \u003d \"A1\";","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"KSunil2001"},"content":"    public static final String VALID_WARD_BOB \u003d \"A2\";","lastModifiedDate":"2023-03-22"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"    public static final String VALID_DISCHARGE_AMY \u003d \"04/12/2023 1200\";","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"    public static final String VALID_DISCHARGE_BOB \u003d \"25/07/2023 1600\";","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;","lastModifiedDate":"2017-07-05"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    public static final String NRIC_DESC_AMY \u003d \" \" + PREFIX_NRIC + VALID_NRIC_AMY;","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"KSunil2001"},"content":"    public static final String STATUS_DESC_AMY \u003d \" \" + PREFIX_STATUS + VALID_STATUS_AMY;","lastModifiedDate":"2023-03-22"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"    public static final String WARD_DESC_AMY \u003d \" \" + PREFIX_WARD + VALID_WARD_AMY;","lastModifiedDate":"2023-03-22"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"    public static final String DISCHARGE_DESC_AMY \u003d \" \" + PREFIX_DISCHARGE + VALID_DISCHARGE_AMY;","lastModifiedDate":"2023-03-22"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;","lastModifiedDate":"2017-07-05"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    public static final String NRIC_DESC_BOB \u003d \" \" + PREFIX_NRIC + VALID_NRIC_BOB;","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"KSunil2001"},"content":"    public static final String STATUS_DESC_BOB \u003d \" \" + PREFIX_STATUS + VALID_STATUS_BOB;","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"KSunil2001"},"content":"    public static final String WARD_DESC_BOB \u003d \" \" + PREFIX_WARD + VALID_WARD_BOB;","lastModifiedDate":"2023-03-22"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"    public static final String DISCHARGE_DESC_BOB \u003d \" \" + PREFIX_DISCHARGE + VALID_DISCHARGE_BOB;","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names","lastModifiedDate":"2017-07-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";","lastModifiedDate":"2017-12-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";","lastModifiedDate":"2017-12-23"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"KSunil2001"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_AMY;","lastModifiedDate":"2023-03-09"},{"lineNumber":57,"author":{"gitId":"KSunil2001"},"content":"    public static final EditCommand.EditPatientDescriptor DESC_BOB;","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    static {","lastModifiedDate":"2017-07-05"},{"lineNumber":60,"author":{"gitId":"KSunil2001"},"content":"        DESC_AMY \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":61,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":62,"author":{"gitId":"KSunil2001"},"content":"        DESC_BOB \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"jeraldkiew"},"content":"     * - the returned {@link CommandResult} matches {@code expectedCommandResult}","lastModifiedDate":"2023-03-08"},{"lineNumber":68,"author":{"gitId":"jeraldkiew"},"content":"     * \u003cbr\u003e","lastModifiedDate":"2023-03-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,","lastModifiedDate":"2019-01-25"},{"lineNumber":72,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":74,"author":{"gitId":"-"},"content":"            CommandResult result \u003d command.execute(actualModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommandResult, result);","lastModifiedDate":"2018-12-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"            assertEquals(expectedModel, actualModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        } catch (CommandException ce) {","lastModifiedDate":"2017-08-15"},{"lineNumber":78,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);","lastModifiedDate":"2017-08-15"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-12-09"},{"lineNumber":83,"author":{"gitId":"jeraldkiew"},"content":"     * Convenience wrapper to","lastModifiedDate":"2023-03-08"},{"lineNumber":84,"author":{"gitId":"jeraldkiew"},"content":"     * {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}","lastModifiedDate":"2023-03-08"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     * that takes a string {@code expectedMessage}.","lastModifiedDate":"2018-12-09"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-12-09"},{"lineNumber":87,"author":{"gitId":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,","lastModifiedDate":"2019-01-25"},{"lineNumber":88,"author":{"gitId":"-"},"content":"            Model expectedModel) {","lastModifiedDate":"2019-01-25"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);","lastModifiedDate":"2018-12-09"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-12-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-09"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":95,"author":{"gitId":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":96,"author":{"gitId":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e","lastModifiedDate":"2017-06-05"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"     * - the medinfo book, filtered patient list and selected patient in","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"jeraldkiew"},"content":"     * {@code actualModel} remain unchanged","lastModifiedDate":"2023-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {","lastModifiedDate":"2019-01-25"},{"lineNumber":101,"author":{"gitId":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // only do so by copying its components.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"yitong241"},"content":"        MedInfo expectedMedInfo \u003d new MedInfo(actualModel.getMedInfo());","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"KSunil2001"},"content":"        List\u003cPatient\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":105,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));","lastModifiedDate":"2019-05-03"},{"lineNumber":107,"author":{"gitId":"yitong241"},"content":"        assertEquals(expectedMedInfo, actualModel.getMedInfo());","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedFilteredList, actualModel.getFilteredPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":110,"author":{"gitId":"jeraldkiew"},"content":"","lastModifiedDate":"2023-03-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-20"},{"lineNumber":112,"author":{"gitId":"jeraldkiew"},"content":"     * Updates {@code model}\u0027s filtered list to show only the patient at the given","lastModifiedDate":"2023-03-08"},{"lineNumber":113,"author":{"gitId":"jeraldkiew"},"content":"     * {@code targetIndex} in the","lastModifiedDate":"2023-03-08"},{"lineNumber":114,"author":{"gitId":"yitong241"},"content":"     * {@code model}\u0027s medinfo book.","lastModifiedDate":"2023-03-30"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-20"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public static void showPersonAtIndex(Model model, Index targetIndex) {","lastModifiedDate":"2018-01-31"},{"lineNumber":117,"author":{"gitId":"KSunil2001"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPatientList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-01-31"},{"lineNumber":119,"author":{"gitId":"KSunil2001"},"content":"        Patient patient \u003d model.getFilteredPatientList().get(targetIndex.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":120,"author":{"gitId":"nramapurath"},"content":"        final String[] splitName \u003d patient.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-03-08"},{"lineNumber":121,"author":{"gitId":"KSunil2001"},"content":"        model.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-20"},{"lineNumber":123,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(1, model.getFilteredPatientList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":124,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-20"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"nramapurath":1,"yitong241":18,"daytona65":6,"jeraldkiew":9,"-":72,"KSunil2001":20}},{"path":"src/test/java/seedu/medinfo/logic/commands/DeleteCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":21,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-05"},{"lineNumber":22,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2020-12-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":" * {@code DeleteCommand}.","lastModifiedDate":"2018-01-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    private Model model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":34,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2023-03-09"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2023-03-09"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-03-09"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":47,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    public void execute_validIndexFilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"        Patient patientToDelete \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":57,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PATIENT_SUCCESS, patientToDelete);","lastModifiedDate":"2023-03-09"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(model.getMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.deletePatient(patientToDelete);","lastModifiedDate":"2023-03-09"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        showNoPerson(expectedModel);","lastModifiedDate":"2017-06-05"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-05"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-06-05"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"        // ensures that outOfBoundIndex is still in bounds of medinfo book list","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMedInfo().getPatientList().size());","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":76,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":97,"author":{"gitId":"nramapurath"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":102,"author":{"gitId":"-"},"content":"     * Updates {@code model}\u0027s filtered list to show no one.","lastModifiedDate":"2017-06-05"},{"lineNumber":103,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    private void showNoPerson(Model model) {","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"KSunil2001"},"content":"        model.updateFilteredPatientList(p -\u003e false);","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":107,"author":{"gitId":"KSunil2001"},"content":"        assertTrue(model.getFilteredPatientList().isEmpty());","lastModifiedDate":"2023-03-09"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-05"}],"authorContributionMap":{"nramapurath":1,"yitong241":18,"-":79,"KSunil2001":11}},{"path":"src/test/java/seedu/medinfo/logic/commands/EditCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.Messages;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-04"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"jeraldkiew"},"content":" * EditCommand.","lastModifiedDate":"2023-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class EditCommandTest {","lastModifiedDate":"2017-05-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    private Model model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":36,"author":{"gitId":"KSunil2001"},"content":"    /*","lastModifiedDate":"2023-03-23"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_allFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"        Patient editedPatient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(editedPatient).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(new MedInfo(model.getMedInfo()), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"    }*/","lastModifiedDate":"2023-03-23"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void execute_someFieldsSpecifiedUnfilteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"        Patient lastPatient \u003d model.getFilteredPatientList().get(indexLastPerson.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        PatientBuilder personInList \u003d new PatientBuilder(lastPatient);","lastModifiedDate":"2023-03-13"},{"lineNumber":57,"author":{"gitId":"jeraldkiew"},"content":"        Patient editedPatient \u003d personInList.withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":59,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":62,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(new MedInfo(model.getMedInfo()), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.setPatient(lastPatient, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    public void execute_noFieldSpecifiedUnfilteredList_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":72,"author":{"gitId":"KSunil2001"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPatientDescriptor());","lastModifiedDate":"2023-03-09"},{"lineNumber":73,"author":{"gitId":"KSunil2001"},"content":"        Patient editedPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":75,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(new MedInfo(model.getMedInfo()), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void execute_filteredList_success() {","lastModifiedDate":"2018-08-07"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":86,"author":{"gitId":"KSunil2001"},"content":"        Patient patientInFilteredList \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"        Patient editedPatient \u003d new PatientBuilder(patientInFilteredList).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":89,"author":{"gitId":"KSunil2001"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":91,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PATIENT_SUCCESS, editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"        Model expectedModel \u003d new ModelManager(new MedInfo(model.getMedInfo()), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.setPatient(model.getFilteredPatientList().get(0), editedPatient);","lastModifiedDate":"2023-03-09"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":98,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"        Patient firstPatient \u003d model.getFilteredPatientList().get(INDEX_FIRST_PERSON.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"KSunil2001"},"content":"        EditCommand.EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder(firstPatient).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":105,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":106,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-04"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    public void execute_duplicatePersonFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":112,"author":{"gitId":"yitong241"},"content":"        // edit patient in filtered list into a duplicate in medinfo book","lastModifiedDate":"2023-03-30"},{"lineNumber":113,"author":{"gitId":"yitong241"},"content":"        Patient patientInList \u003d model.getMedInfo().getPatientList().get(INDEX_SECOND_PERSON.getZeroBased());","lastModifiedDate":"2023-03-30"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"KSunil2001"},"content":"                new EditPatientDescriptorBuilder(patientInList).build());","lastModifiedDate":"2023-03-22"},{"lineNumber":116,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":117,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PATIENT);","lastModifiedDate":"2023-03-09"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexUnfilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":122,"author":{"gitId":"KSunil2001"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPatientList().size() + 1);","lastModifiedDate":"2023-03-09"},{"lineNumber":123,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor descriptor \u003d new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":126,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-05-18"},{"lineNumber":130,"author":{"gitId":"-"},"content":"     * Edit filtered list where index is larger than size of filtered list,","lastModifiedDate":"2017-05-18"},{"lineNumber":131,"author":{"gitId":"yitong241"},"content":"     * but smaller than size of medinfo book","lastModifiedDate":"2023-03-30"},{"lineNumber":132,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-05-18"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-18"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void execute_invalidPersonIndexFilteredList_failure() {","lastModifiedDate":"2017-08-15"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2017-05-18"},{"lineNumber":137,"author":{"gitId":"yitong241"},"content":"        // ensures that outOfBoundIndex is still in bounds of medinfo book list","lastModifiedDate":"2023-03-30"},{"lineNumber":138,"author":{"gitId":"yitong241"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMedInfo().getPatientList().size());","lastModifiedDate":"2023-03-30"},{"lineNumber":139,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":140,"author":{"gitId":"-"},"content":"        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"KSunil2001"},"content":"                new EditPatientDescriptorBuilder().withName(VALID_NAME_BOB).build());","lastModifiedDate":"2023-03-22"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":143,"author":{"gitId":"KSunil2001"},"content":"        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PATIENT_DISPLAYED_INDEX);","lastModifiedDate":"2023-03-09"},{"lineNumber":144,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-18"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-18"},{"lineNumber":146,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-01-23"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":150,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":151,"author":{"gitId":"KSunil2001"},"content":"        EditCommand.EditPatientDescriptor copyDescriptor \u003d new EditCommand.EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"-"},"content":"        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);","lastModifiedDate":"2018-08-08"},{"lineNumber":153,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(commandWithSameValues));","lastModifiedDate":"2017-05-08"},{"lineNumber":154,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":155,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"        assertTrue(standardCommand.equals(standardCommand));","lastModifiedDate":"2017-05-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":159,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(null));","lastModifiedDate":"2017-05-08"},{"lineNumber":160,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new ClearCommand()));","lastModifiedDate":"2017-05-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        // different index -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));","lastModifiedDate":"2017-05-25"},{"lineNumber":166,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-08"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        // different descriptor -\u003e returns false","lastModifiedDate":"2017-05-08"},{"lineNumber":168,"author":{"gitId":"-"},"content":"        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));","lastModifiedDate":"2017-05-25"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-08"},{"lineNumber":170,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":171,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-08"}],"authorContributionMap":{"yitong241":30,"daytona65":3,"jeraldkiew":3,"-":107,"KSunil2001":28}},{"path":"src/test/java/seedu/medinfo/logic/commands/EditPatientDescriptorTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.DESC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.DESC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_STATUS_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.EditPatientDescriptorBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":16,"author":{"gitId":"nramapurath"},"content":"public class EditPatientDescriptorTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor descriptorWithSameValues \u003d new EditPatientDescriptor(DESC_AMY);","lastModifiedDate":"2023-03-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(descriptorWithSameValues));","lastModifiedDate":"2017-05-05"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(DESC_AMY.equals(DESC_AMY));","lastModifiedDate":"2017-05-05"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(null));","lastModifiedDate":"2017-05-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(5));","lastModifiedDate":"2017-05-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // different values -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(DESC_BOB));","lastModifiedDate":"2017-05-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2017-05-05"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"        EditPatientDescriptor editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"KSunil2001"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        // different status -\u003e returns false","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"        editedAmy \u003d new EditPatientDescriptorBuilder(DESC_AMY).withStatus(VALID_STATUS_BOB).build();","lastModifiedDate":"2023-03-22"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        assertFalse(DESC_AMY.equals(editedAmy));","lastModifiedDate":"2017-05-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"nramapurath":1,"yitong241":8,"daytona65":2,"-":33,"KSunil2001":4}},{"path":"src/test/java/seedu/medinfo/logic/commands/ExitCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class ExitCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-12-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_exit_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"yitong241":5,"-":15}},{"path":"src/test/java/seedu/medinfo/logic/commands/FindCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.CARL;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.DANIEL;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ELLE;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.FIONA;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.GEORGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NricContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.StatusContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}.","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"public class FindCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    private Model model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));","lastModifiedDate":"2017-06-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(1));","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(null));","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"nramapurath"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-03-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));","lastModifiedDate":"2017-06-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    public void execute_zeroKeywords_noPatientFound() {","lastModifiedDate":"2023-03-22"},{"lineNumber":65,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 0);","lastModifiedDate":"2023-03-09"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\" \");","lastModifiedDate":"2023-03-22"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(Collections.emptyList(), model.getFilteredPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"    public void execute_multipleKeywords_multiplePatientsFound() {","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 3);","lastModifiedDate":"2023-03-09"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"        NameContainsKeywordsPredicate predicate \u003d prepareNamePredicate(\"Carl Elle Fiona\");","lastModifiedDate":"2023-03-22"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2018-08-08"},{"lineNumber":78,"author":{"gitId":"KSunil2001"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"    public void execute_findByNric_onePatientFound() {","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 1);","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"        NricContainsKeywordsPredicate predicate \u003d prepareNricPredicate(\"S1235567A\");","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"yitong241"},"content":"        assertEquals(Arrays.asList(ELLE), model.getFilteredPatientList());","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"    public void execute_findByNric_multiplePatientsFound() {","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 2);","lastModifiedDate":"2023-03-22"},{"lineNumber":96,"author":{"gitId":"yitong241"},"content":"        NricContainsKeywordsPredicate predicate \u003d prepareNricPredicate(\"S1235567A S6969696B\");","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"        assertEquals(Arrays.asList(ELLE, FIONA), model.getFilteredPatientList());","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"    public void execute_findByStatus_multiplePatientsFound() {","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"yitong241"},"content":"        String expectedMessage \u003d String.format(MESSAGE_PATIENTS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"yitong241"},"content":"        StatusContainsKeywordsPredicate predicate \u003d prepareStatusPredicate(\"GRAY\");","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"yitong241"},"content":"        FindCommand command \u003d new FindCommand(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"yitong241"},"content":"        expectedModel.updateFilteredPatientList(predicate);","lastModifiedDate":"2023-03-22"},{"lineNumber":109,"author":{"gitId":"yitong241"},"content":"        assertCommandSuccess(command, model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-22"},{"lineNumber":110,"author":{"gitId":"yitong241"},"content":"        assertEquals(Arrays.asList(ALEX, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE), model.getFilteredPatientList());","lastModifiedDate":"2023-03-22"},{"lineNumber":111,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":112,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-12"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}.","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-12"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"    private NameContainsKeywordsPredicate prepareNamePredicate(String userInput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2018-08-08"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":119,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":120,"author":{"gitId":"yitong241"},"content":"    private NricContainsKeywordsPredicate prepareNricPredicate(String userInput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":121,"author":{"gitId":"yitong241"},"content":"        return new NricContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-22"},{"lineNumber":122,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":123,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":124,"author":{"gitId":"yitong241"},"content":"    private StatusContainsKeywordsPredicate prepareStatusPredicate(String userInput) {","lastModifiedDate":"2023-03-22"},{"lineNumber":125,"author":{"gitId":"yitong241"},"content":"        return new StatusContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));","lastModifiedDate":"2023-03-22"},{"lineNumber":126,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"nramapurath":1,"yitong241":62,"-":58,"KSunil2001":6}},{"path":"src/test/java/seedu/medinfo/logic/commands/HelpCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class HelpCommandTest {","lastModifiedDate":"2017-06-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private Model model \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private Model expectedModel \u003d new ModelManager();","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void execute_help_success() {","lastModifiedDate":"2017-06-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);","lastModifiedDate":"2018-12-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);","lastModifiedDate":"2019-01-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-08"},{"lineNumber":20,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-08"}],"authorContributionMap":{"yitong241":5,"-":15}},{"path":"src/test/java/seedu/medinfo/logic/commands/ListCommandTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.commands;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.assertCommandSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.showPersonAtIndex;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ModelManager;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"jeraldkiew"},"content":" * Contains integration tests (interaction with the Model) and unit tests for","lastModifiedDate":"2023-03-26"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":" * ListCommand.","lastModifiedDate":"2023-03-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class ListCommandTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Model model;","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private Model expectedModel;","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        model \u003d new ModelManager(getTypicalMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"        expectedModel \u003d new ModelManager(model.getMedInfo(), new UserPrefs());","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {","lastModifiedDate":"2017-08-15"},{"lineNumber":33,"author":{"gitId":"jeraldkiew"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2023-03-26"},{"lineNumber":34,"author":{"gitId":"jeraldkiew"},"content":"        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {","lastModifiedDate":"2017-08-15"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"        String expectedMessage \u003d String.format(MESSAGE_ALL_PATIENTS_LISTED_OVERVIEW, 7);","lastModifiedDate":"2023-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showPersonAtIndex(model, INDEX_FIRST_PERSON);","lastModifiedDate":"2018-01-31"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"        assertCommandSuccess(new ListCommand(), model, expectedMessage, expectedModel);","lastModifiedDate":"2023-03-26"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"yitong241":11,"jeraldkiew":6,"-":26}},{"path":"src/test/java/seedu/medinfo/logic/parser/AddCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.NAME_DESC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.NRIC_DESC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.NRIC_DESC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class AddCommandParserTest {","lastModifiedDate":"2017-06-15"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private AddCommandParser parser \u003d new AddCommandParser();","lastModifiedDate":"2017-06-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"    /*","lastModifiedDate":"2023-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public void parse_allFieldsPresent_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"        Patient expectedPatient \u003d new PatientBuilder(BOB).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // whitespace only preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"            + NRIC_DESC_BOB, new AddCommand(expectedPatient));","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // multiple names - last name accepted","lastModifiedDate":"2017-06-15"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY","lastModifiedDate":"2023-03-17"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"            + NAME_DESC_BOB + NRIC_DESC_BOB, new AddCommand(expectedPatient));","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        // multiple nrics - last phone accepted","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"        assertParseSuccess(parser, NAME_DESC_BOB + NRIC_DESC_AMY","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"            + NRIC_DESC_BOB, new AddCommand(expectedPatient));","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parse_optionalFieldsMissing_success() {","lastModifiedDate":"2017-08-15"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // zero tags","lastModifiedDate":"2017-06-15"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"        Patient expectedPatient \u003d new PatientBuilder(AMY).build();","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        assertParseSuccess(parser, NAME_DESC_AMY + NRIC_DESC_AMY, new AddCommand(expectedPatient));","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"    }*/","lastModifiedDate":"2023-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    public void parse_compulsoryFieldMissing_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);","lastModifiedDate":"2017-06-15"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // missing name prefix","lastModifiedDate":"2017-06-15"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"        assertParseFailure(parser, VALID_NAME_BOB,","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"            expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        // all prefixes missing","lastModifiedDate":"2017-06-15"},{"lineNumber":54,"author":{"gitId":"jeraldkiew"},"content":"        assertParseFailure(parser, VALID_NAME_BOB,","lastModifiedDate":"2023-03-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"            expectedMessage);","lastModifiedDate":"2017-12-23"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-15"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-15"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2017-06-15"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-06-15"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        assertParseFailure(parser, INVALID_NAME_DESC + NRIC_DESC_AMY, Name.MESSAGE_CONSTRAINTS);","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-23"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        // non-empty preamble","lastModifiedDate":"2017-12-23"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + NRIC_DESC_BOB,","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"-"},"content":"            String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-12-23"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-15"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-15"}],"authorContributionMap":{"yitong241":11,"daytona65":12,"jeraldkiew":2,"-":40,"KSunil2001":2}},{"path":"src/test/java/seedu/medinfo/logic/parser/ArgumentTokenizerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class ArgumentTokenizerTest {","lastModifiedDate":"2016-10-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");","lastModifiedDate":"2016-10-16"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private final Prefix pSlash \u003d new Prefix(\"p/\");","lastModifiedDate":"2017-03-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private final Prefix dashT \u003d new Prefix(\"-t\");","lastModifiedDate":"2016-10-16"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private final Prefix hatQ \u003d new Prefix(\"^Q\");","lastModifiedDate":"2016-10-16"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public void tokenize_emptyArgsString_noValues() {","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  \";","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {","lastModifiedDate":"2017-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(expectedPreamble, argMultimap.getPreamble());","lastModifiedDate":"2017-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {","lastModifiedDate":"2017-03-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertTrue(argMultimap.getPreamble().isEmpty());","lastModifiedDate":"2017-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-20"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}","lastModifiedDate":"2017-08-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}.","lastModifiedDate":"2017-08-20"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {","lastModifiedDate":"2017-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // Verify the last value is returned","lastModifiedDate":"2016-10-16"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());","lastModifiedDate":"2017-06-07"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // Verify the number of values returned is as expected","lastModifiedDate":"2016-10-16"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());","lastModifiedDate":"2017-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        // Verify all values returned are as expected and in order","lastModifiedDate":"2016-10-16"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c expectedValues.length; i++) {","lastModifiedDate":"2016-10-16"},{"lineNumber":48,"author":{"gitId":"-"},"content":"            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));","lastModifiedDate":"2017-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-10-16"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {","lastModifiedDate":"2017-03-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertFalse(argMultimap.getValue(prefix).isPresent());","lastModifiedDate":"2017-03-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void tokenize_noPrefixes_allTakenAsPreamble() {","lastModifiedDate":"2016-10-16"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";","lastModifiedDate":"2016-10-16"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);","lastModifiedDate":"2017-03-20"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // Same string expected as preamble, but leading/trailing spaces should be trimmed","lastModifiedDate":"2016-10-16"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString.trim());","lastModifiedDate":"2017-03-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void tokenize_oneArgument() {","lastModifiedDate":"2016-10-16"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        // Preamble present","lastModifiedDate":"2016-10-16"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        String argsString \u003d \"  Some preamble string p/ Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Some preamble string\");","lastModifiedDate":"2017-03-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        // No preamble","lastModifiedDate":"2016-10-16"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        argsString \u003d \" p/   Argument value \";","lastModifiedDate":"2017-03-08"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);","lastModifiedDate":"2017-03-20"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":78,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":81,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArguments() {","lastModifiedDate":"2016-10-16"},{"lineNumber":84,"author":{"gitId":"-"},"content":"        // Only two arguments are present","lastModifiedDate":"2016-10-16"},{"lineNumber":85,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":86,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":88,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":89,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":90,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-03-08"},{"lineNumber":91,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        // All three arguments are present","lastModifiedDate":"2017-05-19"},{"lineNumber":93,"author":{"gitId":"-"},"content":"        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";","lastModifiedDate":"2017-03-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"Different Preamble String\");","lastModifiedDate":"2017-03-08"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"111\");","lastModifiedDate":"2017-03-08"},{"lineNumber":99,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        /* Also covers: Reusing of the tokenizer multiple times */","lastModifiedDate":"2016-10-16"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset","lastModifiedDate":"2017-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        // (i.e. no stale values from the previous tokenizing remain)","lastModifiedDate":"2017-03-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        argsString \u003d \"\";","lastModifiedDate":"2017-03-08"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        assertPreambleEmpty(argMultimap);","lastModifiedDate":"2017-03-08"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-03-08"},{"lineNumber":108,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        /* Also covers: testing for prefixes not specified as a prefix */","lastModifiedDate":"2020-05-27"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        // Prefixes not previously given to the tokenizer should not return any values","lastModifiedDate":"2016-10-16"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        argsString \u003d unknownPrefix + \"some value\";","lastModifiedDate":"2017-05-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, unknownPrefix);","lastModifiedDate":"2017-03-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble","lastModifiedDate":"2017-03-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":117,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":119,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsWithRepeats() {","lastModifiedDate":"2016-10-16"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        // Two arguments repeated, some have empty values","lastModifiedDate":"2016-10-16"},{"lineNumber":121,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";","lastModifiedDate":"2017-03-08"},{"lineNumber":122,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-03-20"},{"lineNumber":123,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleString\");","lastModifiedDate":"2017-03-08"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");","lastModifiedDate":"2017-03-08"},{"lineNumber":125,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":126,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");","lastModifiedDate":"2017-03-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":128,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-19"},{"lineNumber":130,"author":{"gitId":"-"},"content":"    public void tokenize_multipleArgumentsJoined() {","lastModifiedDate":"2017-05-19"},{"lineNumber":131,"author":{"gitId":"-"},"content":"        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";","lastModifiedDate":"2017-05-19"},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":134,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, pSlash);","lastModifiedDate":"2017-05-19"},{"lineNumber":135,"author":{"gitId":"-"},"content":"        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");","lastModifiedDate":"2017-05-19"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        assertArgumentAbsent(argMultimap, hatQ);","lastModifiedDate":"2017-05-19"},{"lineNumber":137,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-19"},{"lineNumber":138,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-19"},{"lineNumber":139,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    public void equalsMethod() {","lastModifiedDate":"2016-10-16"},{"lineNumber":141,"author":{"gitId":"-"},"content":"        Prefix aaa \u003d new Prefix(\"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":142,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":143,"author":{"gitId":"-"},"content":"        assertEquals(aaa, aaa);","lastModifiedDate":"2016-10-16"},{"lineNumber":144,"author":{"gitId":"-"},"content":"        assertEquals(aaa, new Prefix(\"aaa\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":145,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":146,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, \"aaa\");","lastModifiedDate":"2016-10-16"},{"lineNumber":147,"author":{"gitId":"-"},"content":"        assertNotEquals(aaa, new Prefix(\"aab\"));","lastModifiedDate":"2016-10-16"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-16"},{"lineNumber":149,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":150,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-10-16"}],"authorContributionMap":{"yitong241":1,"-":149}},{"path":"src/test/java/seedu/medinfo/logic/parser/CommandParserTestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.Command;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-06"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * Contains helper methods for testing command parsers.","lastModifiedDate":"2017-07-06"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-06"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class CommandParserTestUtil {","lastModifiedDate":"2017-07-06"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created","lastModifiedDate":"2017-07-06"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * equals to {@code expectedCommand}.","lastModifiedDate":"2017-07-06"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static void assertParseSuccess(Parser\u003c? extends Command\u003e parser, String userInput,","lastModifiedDate":"2022-02-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            Command expectedCommand) {","lastModifiedDate":"2022-02-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            Command command \u003d parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            assertEquals(expectedCommand, command);","lastModifiedDate":"2017-07-06"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            throw new IllegalArgumentException(\"Invalid userInput.\", pe);","lastModifiedDate":"2017-08-15"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-06"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-06"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message","lastModifiedDate":"2017-07-06"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * equals to {@code expectedMessage}.","lastModifiedDate":"2017-07-06"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static void assertParseFailure(Parser\u003c? extends Command\u003e parser, String userInput, String expectedMessage) {","lastModifiedDate":"2022-02-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-07-06"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            parser.parse(userInput);","lastModifiedDate":"2017-07-06"},{"lineNumber":34,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"The expected ParseException was not thrown.\");","lastModifiedDate":"2018-08-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2017-07-06"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            assertEquals(expectedMessage, pe.getMessage());","lastModifiedDate":"2017-07-06"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-07-06"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-06"}],"authorContributionMap":{"yitong241":3,"-":36}},{"path":"src/test/java/seedu/medinfo/logic/parser/DeleteCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-06-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations","lastModifiedDate":"2017-06-09"},{"lineNumber":14,"author":{"gitId":"-"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the","lastModifiedDate":"2017-06-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":" * same path through the DeleteCommand, and therefore we test only one of them.","lastModifiedDate":"2017-06-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":" * The path variation for those two cases occur inside the ParserUtil, and","lastModifiedDate":"2017-06-09"},{"lineNumber":17,"author":{"gitId":"-"},"content":" * therefore should be covered by the ParserUtilTest.","lastModifiedDate":"2017-06-09"},{"lineNumber":18,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-06-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class DeleteCommandParserTest {","lastModifiedDate":"2017-06-09"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private DeleteCommandParser parser \u003d new DeleteCommandParser();","lastModifiedDate":"2017-06-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parse_validArgs_returnsDeleteCommand() {","lastModifiedDate":"2017-08-15"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));","lastModifiedDate":"2017-07-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-09"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-09"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-09"}],"authorContributionMap":{"yitong241":6,"-":26}},{"path":"src/test/java/seedu/medinfo/logic/parser/EditCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.commands.CommandTestUtil.INVALID_NAME_DESC;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.commands.CommandTestUtil.NAME_DESC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseSuccess;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.testutil.TypicalIndexes.INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"//import static seedu.medinfo.testutil.TypicalIndexes.INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"//","lastModifiedDate":"2023-03-17"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"//import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-17"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"//","lastModifiedDate":"2023-03-17"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"//import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"//import seedu.medinfo.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"//import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"//import seedu.medinfo.testutil.EditPersonDescriptorBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"public class EditCommandParserTest {","lastModifiedDate":"2017-05-04"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":28,"author":{"gitId":"jeraldkiew"},"content":"    private static final String MESSAGE_INVALID_FORMAT \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"jeraldkiew"},"content":"        EditCommand.MESSAGE_USAGE);","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private EditCommandParser parser \u003d new EditCommandParser();","lastModifiedDate":"2017-05-04"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-04"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"    public void parse_missingParts_failure() {","lastModifiedDate":"2023-03-17"},{"lineNumber":35,"author":{"gitId":"daytona65"},"content":"    //        // no index specified","lastModifiedDate":"2023-03-17"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"daytona65"},"content":"    //        // no field specified","lastModifiedDate":"2023-03-17"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);","lastModifiedDate":"2023-03-17"},{"lineNumber":40,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    //        // no index and no field specified","lastModifiedDate":"2023-03-17"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    public void parse_invalidPreamble_failure() {","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"    //        // negative index","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"    //        // zero index","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"    //        // invalid arguments being parsed as preamble","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"    //        // invalid prefix being parsed as preamble","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"    public void parse_invalidValue_failure() {","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"    //        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"    public void parse_allFieldsSpecified_success() {","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"    //        Index targetIndex \u003d INDEX_SECOND_PERSON;","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"    //        EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"    public void parse_someFieldsSpecified_success() {","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"    //        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-17"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + \"Some valid fields: EditCommandParserTest\";","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"    //        EditCommand.EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":82,"author":{"gitId":"daytona65"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"    public void parse_oneFieldSpecified_success() {","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"    //        // name","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"daytona65"},"content":"    //        Index targetIndex \u003d INDEX_THIRD_PERSON;","lastModifiedDate":"2023-03-17"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"daytona65"},"content":"    //        EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"    //        // nric","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"    //        userInput \u003d targetIndex.getOneBased() + VALID_NRIC_AMY;","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"daytona65"},"content":"    //        descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"    //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":100,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":103,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"    public void parse_multipleRepeatedFields_acceptsLast() {","lastModifiedDate":"2023-03-17"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"    //        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + \"Multiple repeated fields\";","lastModifiedDate":"2023-03-17"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"    //        EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":109,"author":{"gitId":"daytona65"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":110,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":111,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":112,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":113,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":114,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":115,"author":{"gitId":"daytona65"},"content":"    public void parse_invalidValueFollowedByValidValue_success() {","lastModifiedDate":"2023-03-17"},{"lineNumber":116,"author":{"gitId":"daytona65"},"content":"    //        // no other valid values specified","lastModifiedDate":"2023-03-17"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"    //        Index targetIndex \u003d INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"daytona65"},"content":"    //        String userInput \u003d targetIndex.getOneBased() + \"Invalid values only: EditCommandParserTest\";","lastModifiedDate":"2023-03-17"},{"lineNumber":119,"author":{"gitId":"daytona65"},"content":"    //        EditCommand.EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"    //        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":122,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"    //        // other valid values specified","lastModifiedDate":"2023-03-17"},{"lineNumber":124,"author":{"gitId":"daytona65"},"content":"    //        userInput \u003d targetIndex.getOneBased() + \"Invalid value with some valid values: EditCommandParserTest\";","lastModifiedDate":"2023-03-17"},{"lineNumber":125,"author":{"gitId":"daytona65"},"content":"    //        descriptor \u003d new EditPersonDescriptorBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":126,"author":{"gitId":"daytona65"},"content":"    //        expectedCommand \u003d new EditCommand(targetIndex, descriptor);","lastModifiedDate":"2023-03-17"},{"lineNumber":127,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, userInput, expectedCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":128,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":129,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-04"}],"authorContributionMap":{"yitong241":17,"daytona65":99,"jeraldkiew":2,"-":11}},{"path":"src/test/java/seedu/medinfo/logic/parser/FindCommandParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CommandParserTestUtil.assertParseFailure;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.FindCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class FindCommandParserTest {","lastModifiedDate":"2017-06-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();","lastModifiedDate":"2017-06-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public void parse_emptyArg_throwsParseException() {","lastModifiedDate":"2017-06-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));","lastModifiedDate":"2017-07-06"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"daytona65"},"content":"    public void parse_validArgs_returnsFindCommand() {","lastModifiedDate":"2023-03-17"},{"lineNumber":22,"author":{"gitId":"daytona65"},"content":"    //        // no leading and trailing whitespaces","lastModifiedDate":"2023-03-17"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"    //        FindCommand expectedFindCommand \u003d","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    //                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));","lastModifiedDate":"2023-03-17"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"    //","lastModifiedDate":"2023-03-17"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"    //        // multiple whitespaces between keywords","lastModifiedDate":"2023-03-17"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"    //        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);","lastModifiedDate":"2023-03-17"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-27"}],"authorContributionMap":{"yitong241":4,"daytona65":11,"-":15}},{"path":"src/test/java/seedu/medinfo/logic/parser/MedInfoParserTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ClearCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.DeleteCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ExitCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.HelpCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.ListCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"public class MedInfoParserTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    private final MedInfoParser parser \u003d new MedInfoParser();","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-24"},{"lineNumber":23,"author":{"gitId":"KSunil2001"},"content":"    /*","lastModifiedDate":"2023-03-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void parseCommand_add() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-13"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":"        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(patient));","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"nramapurath"},"content":"        assertEquals(new AddCommand(patient), command);","lastModifiedDate":"2023-03-08"},{"lineNumber":29,"author":{"gitId":"KSunil2001"},"content":"    }*/","lastModifiedDate":"2023-03-23"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public void parseCommand_clear() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void parseCommand_delete() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand(","lastModifiedDate":"2017-06-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"            DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());","lastModifiedDate":"2017-06-27"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);","lastModifiedDate":"2017-06-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"    //    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    //    public void parseCommand_edit() throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    //        Patient patient \u003d new PatientBuilder().build();","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"    //        EditPatientDescriptor descriptor \u003d new EditPersonDescriptorBuilder(patient).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"    //        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \"","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"    //                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"    //        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"    //    }","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void parseCommand_exit() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"    //    @Test","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"    //    public void parseCommand_find() throws Exception {","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"    //        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"    //        FindCommand command \u003d (FindCommand) parser.parseCommand(","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"    //                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"    //        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);","lastModifiedDate":"2023-03-17"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"    //    }","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public void parseCommand_help() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    public void parseCommand_list() throws Exception {","lastModifiedDate":"2017-06-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);","lastModifiedDate":"2017-06-27"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":78,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()","lastModifiedDate":"2019-03-23"},{"lineNumber":82,"author":{"gitId":"-"},"content":"            -\u003e parser.parseCommand(\"\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-27"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-27"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-27"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-24"}],"authorContributionMap":{"nramapurath":2,"yitong241":13,"daytona65":16,"-":56,"KSunil2001":2}},{"path":"src/test/java/seedu/medinfo/logic/parser/ParserUtilTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.logic.parser;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalIndexes.INDEX_FIRST_PERSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.parser.exceptions.ParseException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class ParserUtilTest {","lastModifiedDate":"2017-05-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2017-05-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";","lastModifiedDate":"2017-05-22"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";","lastModifiedDate":"2017-05-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public void parseIndex_invalidInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsParseException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":25,"author":{"gitId":"daytona65"},"content":"        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e","lastModifiedDate":"2023-03-14"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"                ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));","lastModifiedDate":"2023-03-14"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-26"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {","lastModifiedDate":"2017-05-26"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // No whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));","lastModifiedDate":"2017-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // Leading and trailing whitespaces","lastModifiedDate":"2017-05-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));","lastModifiedDate":"2017-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-26"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    public void parseName_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-29"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void parseName_invalidValue_throwsParseException() {","lastModifiedDate":"2018-07-10"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));","lastModifiedDate":"2019-03-14"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-22"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));","lastModifiedDate":"2017-05-29"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-29"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {","lastModifiedDate":"2017-05-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;","lastModifiedDate":"2017-05-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);","lastModifiedDate":"2017-05-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));","lastModifiedDate":"2017-05-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-22"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-22"}],"authorContributionMap":{"yitong241":6,"daytona65":2,"-":52}},{"path":"src/test/java/seedu/medinfo/model/MedInfoTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-28"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import java.util.Collection;","lastModifiedDate":"2023-03-28"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import java.util.Collections;","lastModifiedDate":"2023-03-28"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import java.util.Comparator;","lastModifiedDate":"2023-03-28"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import java.util.List;","lastModifiedDate":"2023-03-28"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":18,"author":{"gitId":"-"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2016-12-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2016-12-24"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"public class MedInfoTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"    private final MedInfo medInfo \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2016-12-24"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"        assertEquals(Collections.emptyList(), medInfo.getPatientList());","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void resetData_null_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e medInfo.resetData(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"    public void resetData_withValidReadOnlyMedInfo_replacesData() {","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        MedInfo newData \u003d getTypicalMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"        medInfo.resetData(newData);","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        assertEquals(newData, medInfo);","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-24"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-07"},{"lineNumber":48,"author":{"gitId":"nramapurath"},"content":"        // Two patients with the same identity fields","lastModifiedDate":"2023-03-08"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALEX).withNric(\"S1334567A\")","lastModifiedDate":"2023-03-17"},{"lineNumber":50,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-04-19"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"        List\u003cPatient\u003e newPatients \u003d Arrays.asList(ALEX, editedAlice);","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"        MedInfoStub newData \u003d new MedInfoStub(newPatients);","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e medInfo.resetData(newData));","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e medInfo.hasPatient(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"    public void hasPerson_personNotInMedInfo_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"        assertFalse(medInfo.hasPatient(ALEX));","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"    public void hasPerson_personInMedInfo_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"        medInfo.addPatient(ALEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"        assertTrue(medInfo.hasPatient(ALEX));","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"    public void hasPerson_personWithSameIdentityFieldsInMedInfo_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"        medInfo.addPatient(ALEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALEX).withStatus(\"YELLOW\")","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-06"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"        assertTrue(medInfo.hasPatient(editedAlice));","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public void getPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e medInfo.getPatientList().remove(0));","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":85,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-24"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"     * A stub ReadOnlyMedInfo whose patients list can violate interface constraints.","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-24"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"    private static class MedInfoStub implements ReadOnlyMedInfo {","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"nramapurath"},"content":"        private final ObservableList\u003cPatient\u003e patients \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-08"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"        private final ObservableList\u003cWard\u003e wards \u003d FXCollections.observableArrayList();","lastModifiedDate":"2023-03-24"},{"lineNumber":92,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"        MedInfoStub(Collection\u003cPatient\u003e patients) {","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"nramapurath"},"content":"            this.patients.setAll(patients);","lastModifiedDate":"2023-03-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":96,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"        @Override","lastModifiedDate":"2023-03-28"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"        public void sortPatients(Comparator\u003cPatient\u003e comparator) {}","lastModifiedDate":"2023-03-28"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-28"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        @Override","lastModifiedDate":"2016-12-24"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"        public ObservableList\u003cPatient\u003e getPatientList() {","lastModifiedDate":"2023-03-09"},{"lineNumber":102,"author":{"gitId":"nramapurath"},"content":"            return patients;","lastModifiedDate":"2023-03-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-24"},{"lineNumber":104,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-24"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"        @Override","lastModifiedDate":"2023-03-24"},{"lineNumber":106,"author":{"gitId":"daytona65"},"content":"        public ObservableList\u003cWard\u003e getWardList() {","lastModifiedDate":"2023-03-24"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"            return wards;","lastModifiedDate":"2023-03-24"},{"lineNumber":108,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-24"},{"lineNumber":109,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-24"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-24"}],"authorContributionMap":{"nramapurath":4,"yitong241":39,"daytona65":9,"-":58,"KSunil2001":1}},{"path":"src/test/java/seedu/medinfo/model/ModelManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.Model.PREDICATE_SHOW_ALL_PATIENTS;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-08-09"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-05-31"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":15,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.NameContainsKeywordsPredicate;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.MedInfoBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class ModelManagerTest {","lastModifiedDate":"2017-05-31"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private ModelManager modelManager \u003d new ModelManager();","lastModifiedDate":"2018-08-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void constructor() {","lastModifiedDate":"2018-11-27"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertEquals(new GuiSettings(), modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"        assertEquals(new MedInfo(), new MedInfo(modelManager.getMedInfo()));","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {","lastModifiedDate":"2018-12-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"        userPrefs.setMedInfoFilePath(Paths.get(\"medinfo/book/file/path\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));","lastModifiedDate":"2018-11-27"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        modelManager.setUserPrefs(userPrefs);","lastModifiedDate":"2018-11-27"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertEquals(userPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-11-27"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-12-06"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // Modifying userPrefs should not modify modelManager\u0027s userPrefs","lastModifiedDate":"2018-12-06"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);","lastModifiedDate":"2018-12-06"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"        userPrefs.setMedInfoFilePath(Paths.get(\"new/medinfo/book/file/path\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        assertEquals(oldUserPrefs, modelManager.getUserPrefs());","lastModifiedDate":"2018-12-06"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public void setGuiSettings_validGuiSettings_setsGuiSettings() {","lastModifiedDate":"2018-11-27"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);","lastModifiedDate":"2018-11-27"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        modelManager.setGuiSettings(guiSettings);","lastModifiedDate":"2018-11-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        assertEquals(guiSettings, modelManager.getGuiSettings());","lastModifiedDate":"2018-11-27"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    public void setMedInfoFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.setMedInfoFilePath(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"    public void setMedInfoFilePath_validPath_setsMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"        Path path \u003d Paths.get(\"medinfo/book/file/path\");","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"        modelManager.setMedInfoFilePath(path);","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"        assertEquals(path, modelManager.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":74,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    public void hasPerson_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-06"},{"lineNumber":77,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPatient(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"    public void hasPerson_personNotInMedInfo_returnsFalse() {","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"daytona65"},"content":"        assertFalse(modelManager.hasPatient(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-06"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"    public void hasPerson_personInMedInfo_returnsTrue() {","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"        modelManager.addPatient(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"        assertTrue(modelManager.hasPatient(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-06"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-06"},{"lineNumber":91,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2017-09-01"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPatientList().remove(0));","lastModifiedDate":"2023-03-09"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":95,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-31"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"        MedInfo medInfo \u003d new MedInfoBuilder().withPerson(ALEX).withPerson(BENSON).build();","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"        MedInfo differentMedInfo \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":103,"author":{"gitId":"yitong241"},"content":"        modelManager \u003d new ModelManager(medInfo, userPrefs);","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(medInfo, userPrefs);","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));","lastModifiedDate":"2017-05-31"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-05-31"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        assertTrue(modelManager.equals(modelManager));","lastModifiedDate":"2017-05-31"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(null));","lastModifiedDate":"2017-05-31"},{"lineNumber":112,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertFalse(modelManager.equals(5));","lastModifiedDate":"2017-05-31"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":116,"author":{"gitId":"yitong241"},"content":"        // different medInfo -\u003e returns false","lastModifiedDate":"2023-03-30"},{"lineNumber":117,"author":{"gitId":"yitong241"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentMedInfo, userPrefs)));","lastModifiedDate":"2023-03-30"},{"lineNumber":118,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        // different filteredList -\u003e returns false","lastModifiedDate":"2017-05-31"},{"lineNumber":120,"author":{"gitId":"daytona65"},"content":"        String[] keywords \u003d ALEX.getName().fullName.split(\"\\\\s+\");","lastModifiedDate":"2023-03-17"},{"lineNumber":121,"author":{"gitId":"KSunil2001"},"content":"        modelManager.updateFilteredPatientList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));","lastModifiedDate":"2023-03-09"},{"lineNumber":122,"author":{"gitId":"yitong241"},"content":"        assertFalse(modelManager.equals(new ModelManager(medInfo, userPrefs)));","lastModifiedDate":"2023-03-30"},{"lineNumber":123,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        // resets modelManager to initial state for upcoming tests","lastModifiedDate":"2017-08-05"},{"lineNumber":125,"author":{"gitId":"KSunil2001"},"content":"        modelManager.updateFilteredPatientList(PREDICATE_SHOW_ALL_PATIENTS);","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-31"},{"lineNumber":127,"author":{"gitId":"-"},"content":"        // different userPrefs -\u003e returns false","lastModifiedDate":"2018-11-27"},{"lineNumber":128,"author":{"gitId":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-05-31"},{"lineNumber":129,"author":{"gitId":"yitong241"},"content":"        differentUserPrefs.setMedInfoFilePath(Paths.get(\"differentFilePath\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":130,"author":{"gitId":"yitong241"},"content":"        assertFalse(modelManager.equals(new ModelManager(medInfo, differentUserPrefs)));","lastModifiedDate":"2023-03-30"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-31"},{"lineNumber":132,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-31"}],"authorContributionMap":{"yitong241":28,"daytona65":4,"-":96,"KSunil2001":4}},{"path":"src/test/java/seedu/medinfo/model/UserPrefsTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class UserPrefsTest {","lastModifiedDate":"2018-11-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {","lastModifiedDate":"2018-11-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"        UserPrefs userPref \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-11-27"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"    public void setMedInfoFilePath_nullPath_throwsNullPointerException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2018-11-27"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMedInfoFilePath(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-11-27"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-11-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-11-27"}],"authorContributionMap":{"yitong241":4,"-":17}},{"path":"src/test/java/seedu/medinfo/model/patient/NameContainsKeywordsPredicateTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2017-06-12"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2017-06-12"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2017-06-12"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class NameContainsKeywordsPredicateTest {","lastModifiedDate":"2017-06-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2017-06-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");","lastModifiedDate":"2017-06-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");","lastModifiedDate":"2017-06-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2017-06-12"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);","lastModifiedDate":"2017-06-12"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));","lastModifiedDate":"2017-06-12"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // different types -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(1));","lastModifiedDate":"2017-06-12"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2017-06-12"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(null));","lastModifiedDate":"2017-06-12"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":37,"author":{"gitId":"nramapurath"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-03-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));","lastModifiedDate":"2017-06-12"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {","lastModifiedDate":"2017-08-15"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // One keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        // Multiple keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":49,"author":{"gitId":"daytona65"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        // Only one matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Carol\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // Mixed-case keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"        assertTrue(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-06-12"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {","lastModifiedDate":"2017-08-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        // Zero keywords","lastModifiedDate":"2017-06-12"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());","lastModifiedDate":"2017-06-12"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        // Non-matching keyword","lastModifiedDate":"2017-06-12"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));","lastModifiedDate":"2017-06-12"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice Bob\").build()));","lastModifiedDate":"2023-03-13"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-12"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"        // Keywords match nric, but does not match name","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"S1234567A\"));","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"daytona65"},"content":"        assertFalse(predicate.test(new PatientBuilder().withName(\"Alice\").withNric(\"S1234567A\")","lastModifiedDate":"2023-03-17"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"                .build()));","lastModifiedDate":"2023-03-14"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-12"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-06-12"}],"authorContributionMap":{"nramapurath":1,"yitong241":2,"daytona65":10,"-":62}},{"path":"src/test/java/seedu/medinfo/model/patient/NameTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class NameTest {","lastModifiedDate":"2017-01-16"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-12-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public void constructor_null_throwsNullPointerException() {","lastModifiedDate":"2017-12-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new Name(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-12-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-05-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {","lastModifiedDate":"2017-05-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        String invalidName \u003d \"\";","lastModifiedDate":"2017-05-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));","lastModifiedDate":"2019-03-14"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-30"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-30"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-01-16"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void isValidName() {","lastModifiedDate":"2017-01-16"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // null name","lastModifiedDate":"2017-12-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));","lastModifiedDate":"2019-03-14"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-12-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // invalid name","lastModifiedDate":"2017-01-16"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string","lastModifiedDate":"2017-01-16"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only","lastModifiedDate":"2017-01-16"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-16"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // valid name","lastModifiedDate":"2017-01-16"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only","lastModifiedDate":"2017-01-16"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only","lastModifiedDate":"2017-01-16"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters","lastModifiedDate":"2017-01-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters","lastModifiedDate":"2017-01-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names","lastModifiedDate":"2017-01-16"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-01-16"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-01-16"}],"authorContributionMap":{"yitong241":2,"-":38}},{"path":"src/test/java/seedu/medinfo/model/patient/PatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_STATUS_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":15,"author":{"gitId":"nramapurath"},"content":"public class PatientTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":18,"author":{"gitId":"jeraldkiew"},"content":"    public void isSamePatient() {","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":20,"author":{"gitId":"daytona65"},"content":"        assertTrue(ALEX.isSamePatient(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.isSamePatient(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        // same name, all other attributes different -\u003e returns true","lastModifiedDate":"2020-12-18"},{"lineNumber":26,"author":{"gitId":"daytona65"},"content":"        Patient editedAlex \u003d new PatientBuilder(ALEX).withStatus(VALID_STATUS_AMY).build();","lastModifiedDate":"2023-03-23"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":"        assertTrue(ALEX.isSamePatient(editedAlex));","lastModifiedDate":"2023-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        // different name, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        editedAlex \u003d new PatientBuilder(ALEX).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-23"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.isSamePatient(editedAlex));","lastModifiedDate":"2023-03-23"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // name differs in case, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"        Patient editedBob \u003d new PatientBuilder(BOB).withName(VALID_NAME_BOB.toLowerCase()).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2023-03-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        // name has trailing spaces, all other attributes same -\u003e returns false","lastModifiedDate":"2020-12-18"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        String nameWithTrailingSpaces \u003d VALID_NAME_BOB + \" \";","lastModifiedDate":"2020-12-18"},{"lineNumber":39,"author":{"gitId":"daytona65"},"content":"        editedBob \u003d new PatientBuilder(BOB).withName(nameWithTrailingSpaces).build();","lastModifiedDate":"2023-03-13"},{"lineNumber":40,"author":{"gitId":"jeraldkiew"},"content":"        assertFalse(BOB.isSamePatient(editedBob));","lastModifiedDate":"2023-03-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-04-19"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    public void equals() {","lastModifiedDate":"2018-04-19"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        // same values -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"        Patient aliceCopy \u003d new PatientBuilder(ALEX).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"        assertTrue(ALEX.equals(aliceCopy));","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        // same object -\u003e returns true","lastModifiedDate":"2018-04-19"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"        assertTrue(ALEX.equals(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        // null -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.equals(null));","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        // different type -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.equals(5));","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":58,"author":{"gitId":"nramapurath"},"content":"        // different patient -\u003e returns false","lastModifiedDate":"2023-03-08"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.equals(BOB));","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        // different name -\u003e returns false","lastModifiedDate":"2018-04-19"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALEX).withName(VALID_NAME_BOB).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.equals(editedAlice));","lastModifiedDate":"2023-03-17"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-04-19"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"        // different nric -\u003e returns false","lastModifiedDate":"2023-03-14"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"        editedAlice \u003d new PatientBuilder(ALEX).withNric(VALID_NRIC_BOB).build();","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"        assertFalse(ALEX.equals(editedAlice));","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-04-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"nramapurath":2,"yitong241":7,"daytona65":19,"jeraldkiew":3,"-":38}},{"path":"src/test/java/seedu/medinfo/model/patient/UniquePatientListTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.model.patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2019-03-15"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Arrays;","lastModifiedDate":"2018-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import java.util.Collections;","lastModifiedDate":"2018-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2018-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.DuplicatePatientException;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.exceptions.PatientNotFoundException;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.PatientBuilder;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"public class UniquePatientListTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-09-01"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"    private final UniquePatientList uniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public void contains_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.contains(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    public void contains_personNotInList_returnsFalse() {","lastModifiedDate":"2018-08-08"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"        assertFalse(uniquePatientList.contains(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public void contains_personInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"        assertTrue(uniquePatientList.contains(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {","lastModifiedDate":"2018-08-08"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"daytona65"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALEX)","lastModifiedDate":"2023-03-17"},{"lineNumber":44,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"        assertTrue(uniquePatientList.contains(editedAlice));","lastModifiedDate":"2023-03-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void add_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":50,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.add(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void add_duplicatePerson_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.add(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void setPerson_nullTargetPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(null, ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public void setPerson_nullEditedPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatient(ALEX, null));","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":71,"author":{"gitId":"daytona65"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.setPatient(ALEX, ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":75,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonIsSamePerson_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":76,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":77,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.setPatient(ALEX, ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":78,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"        expectedUniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasSameIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"        Patient editedAlice \u003d new PatientBuilder(ALEX)","lastModifiedDate":"2023-03-17"},{"lineNumber":87,"author":{"gitId":"-"},"content":"                .build();","lastModifiedDate":"2018-08-08"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.setPatient(ALEX, editedAlice);","lastModifiedDate":"2023-03-17"},{"lineNumber":89,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"        expectedUniquePatientList.add(editedAlice);","lastModifiedDate":"2023-03-09"},{"lineNumber":91,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasDifferentIdentity_success() {","lastModifiedDate":"2018-08-08"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.setPatient(ALEX, BOB);","lastModifiedDate":"2023-03-17"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":99,"author":{"gitId":"KSunil2001"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":100,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":101,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":104,"author":{"gitId":"-"},"content":"    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":105,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":106,"author":{"gitId":"KSunil2001"},"content":"        uniquePatientList.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":107,"author":{"gitId":"daytona65"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatient(ALEX, BOB));","lastModifiedDate":"2023-03-17"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":109,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":110,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":111,"author":{"gitId":"-"},"content":"    public void remove_nullPerson_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":112,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.remove(null));","lastModifiedDate":"2023-03-09"},{"lineNumber":113,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":114,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":115,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    public void remove_personDoesNotExist_throwsPersonNotFoundException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":117,"author":{"gitId":"daytona65"},"content":"        assertThrows(PatientNotFoundException.class, () -\u003e uniquePatientList.remove(ALEX));","lastModifiedDate":"2023-03-17"},{"lineNumber":118,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":119,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    public void remove_existingPerson_removesPerson() {","lastModifiedDate":"2018-08-08"},{"lineNumber":122,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":123,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.remove(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":124,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":125,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":127,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":129,"author":{"gitId":"-"},"content":"    public void setPersons_nullUniquePersonList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":130,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((UniquePatientList) null));","lastModifiedDate":"2023-03-09"},{"lineNumber":131,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":132,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":133,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":134,"author":{"gitId":"-"},"content":"    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":135,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":136,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":137,"author":{"gitId":"KSunil2001"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":138,"author":{"gitId":"KSunil2001"},"content":"        uniquePatientList.setPatients(expectedUniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":139,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":140,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":141,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":142,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":143,"author":{"gitId":"-"},"content":"    public void setPersons_nullList_throwsNullPointerException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":144,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(NullPointerException.class, () -\u003e uniquePatientList.setPatients((List\u003cPatient\u003e) null));","lastModifiedDate":"2023-03-09"},{"lineNumber":145,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":146,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":147,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":148,"author":{"gitId":"-"},"content":"    public void setPersons_list_replacesOwnListWithProvidedList() {","lastModifiedDate":"2018-08-08"},{"lineNumber":149,"author":{"gitId":"daytona65"},"content":"        uniquePatientList.add(ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":150,"author":{"gitId":"nramapurath"},"content":"        List\u003cPatient\u003e patientList \u003d Collections.singletonList(BOB);","lastModifiedDate":"2023-03-08"},{"lineNumber":151,"author":{"gitId":"KSunil2001"},"content":"        uniquePatientList.setPatients(patientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":152,"author":{"gitId":"KSunil2001"},"content":"        UniquePatientList expectedUniquePatientList \u003d new UniquePatientList();","lastModifiedDate":"2023-03-09"},{"lineNumber":153,"author":{"gitId":"KSunil2001"},"content":"        expectedUniquePatientList.add(BOB);","lastModifiedDate":"2023-03-09"},{"lineNumber":154,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(expectedUniquePatientList, uniquePatientList);","lastModifiedDate":"2023-03-09"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":156,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":157,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-08"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {","lastModifiedDate":"2018-08-08"},{"lineNumber":159,"author":{"gitId":"daytona65"},"content":"        List\u003cPatient\u003e listWithDuplicatePatients \u003d Arrays.asList(ALEX, ALEX);","lastModifiedDate":"2023-03-17"},{"lineNumber":160,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(DuplicatePatientException.class, () -\u003e uniquePatientList.setPatients(listWithDuplicatePatients));","lastModifiedDate":"2023-03-09"},{"lineNumber":161,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-08"},{"lineNumber":162,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-08"},{"lineNumber":163,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-09-01"},{"lineNumber":164,"author":{"gitId":"-"},"content":"    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {","lastModifiedDate":"2018-04-05"},{"lineNumber":165,"author":{"gitId":"-"},"content":"        assertThrows(UnsupportedOperationException.class, ()","lastModifiedDate":"2019-03-23"},{"lineNumber":166,"author":{"gitId":"KSunil2001"},"content":"            -\u003e uniquePatientList.asUnmodifiableObservableList().remove(0));","lastModifiedDate":"2023-03-09"},{"lineNumber":167,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-09-01"},{"lineNumber":168,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-09-01"}],"authorContributionMap":{"nramapurath":2,"yitong241":7,"daytona65":26,"-":105,"KSunil2001":28}},{"path":"src/test/java/seedu/medinfo/storage/JsonAdaptedPatientTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.storage.JsonAdaptedPatient.MISSING_FIELD_MESSAGE_FORMAT;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.BENSON;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-27"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Discharge;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":17,"author":{"gitId":"nramapurath"},"content":"public class JsonAdaptedPatientTest {","lastModifiedDate":"2023-03-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";","lastModifiedDate":"2018-08-13"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"    private static final String INVALID_NRIC \u003d \"A1234567E\";","lastModifiedDate":"2023-03-15"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"    private static final String INVALID_STATUS \u003d \"PINK\";","lastModifiedDate":"2023-03-15"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":"    private static final String INVALID_WARD \u003d \"-123\";","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"    private static final String INVALID_DISCHARGE \u003d \"13/15/2123 1472\";","lastModifiedDate":"2023-03-22"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String VALID_NAME \u003d BENSON.getName().toString();","lastModifiedDate":"2018-08-13"},{"lineNumber":25,"author":{"gitId":"KSunil2001"},"content":"    private static final String VALID_NRIC \u003d BENSON.getNric().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"    private static final String VALID_STATUS \u003d BENSON.getStatus().toString();","lastModifiedDate":"2023-03-15"},{"lineNumber":27,"author":{"gitId":"KSunil2001"},"content":"    private static final String VALID_WARD \u003d \"A1\";","lastModifiedDate":"2023-03-22"},{"lineNumber":28,"author":{"gitId":"KSunil2001"},"content":"    private static final String VALID_DISCHARGE \u003d \"13/03/2023 1400\";","lastModifiedDate":"2023-03-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":31,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_validPatientDetails_returnsPatient() throws Exception {","lastModifiedDate":"2023-03-16"},{"lineNumber":32,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(BENSON);","lastModifiedDate":"2023-03-15"},{"lineNumber":33,"author":{"gitId":"KSunil2001"},"content":"        assertEquals(BENSON, patient.toModelType());","lastModifiedDate":"2023-03-15"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2018-08-13"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {","lastModifiedDate":"2018-08-13"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(INVALID_NAME, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2018-08-13"},{"lineNumber":41,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-08-13"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-08-13"},{"lineNumber":44,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":45,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(null, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":48,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":51,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":52,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_invalidNric_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":54,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, INVALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d Nric.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":57,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":58,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":59,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":60,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":61,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_nullNric_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":62,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, null, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Nric.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":65,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":66,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":67,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":68,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":69,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_invalidStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, INVALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":72,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d Status.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-15"},{"lineNumber":73,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":74,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":75,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-15"},{"lineNumber":76,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-15"},{"lineNumber":77,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_nullStatus_throwsIllegalValueException() {","lastModifiedDate":"2023-03-15"},{"lineNumber":78,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, null,","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Status.class.getSimpleName());","lastModifiedDate":"2023-03-15"},{"lineNumber":81,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-15"},{"lineNumber":82,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-15"},{"lineNumber":83,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_invalidWard_throwsIllegalValueException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"KSunil2001"},"content":"                INVALID_WARD, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d Ward.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-22"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":92,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":93,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_nullWard_throwsIllegalValueException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":94,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":95,"author":{"gitId":"KSunil2001"},"content":"                null, VALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":96,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Ward.class.getSimpleName());","lastModifiedDate":"2023-03-22"},{"lineNumber":97,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-22"},{"lineNumber":98,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":99,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":100,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":101,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_invalidDischarge_throwsIllegalValueException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":102,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":103,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, INVALID_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":104,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d Discharge.MESSAGE_CONSTRAINTS;","lastModifiedDate":"2023-03-22"},{"lineNumber":105,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-22"},{"lineNumber":106,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":107,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":108,"author":{"gitId":"KSunil2001"},"content":"    @Test","lastModifiedDate":"2023-03-22"},{"lineNumber":109,"author":{"gitId":"KSunil2001"},"content":"    public void toModelType_nullDischarge_throwsIllegalValueException() {","lastModifiedDate":"2023-03-22"},{"lineNumber":110,"author":{"gitId":"KSunil2001"},"content":"        JsonAdaptedPatient patient \u003d new JsonAdaptedPatient(VALID_NAME, VALID_NRIC, VALID_STATUS,","lastModifiedDate":"2023-03-22"},{"lineNumber":111,"author":{"gitId":"KSunil2001"},"content":"                VALID_WARD, null);","lastModifiedDate":"2023-03-22"},{"lineNumber":112,"author":{"gitId":"KSunil2001"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Discharge.class.getSimpleName());","lastModifiedDate":"2023-03-22"},{"lineNumber":113,"author":{"gitId":"KSunil2001"},"content":"        assertThrows(IllegalValueException.class, expectedMessage, patient::toModelType);","lastModifiedDate":"2023-03-22"},{"lineNumber":114,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":115,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2018-08-13"}],"authorContributionMap":{"nramapurath":1,"yitong241":10,"-":19,"KSunil2001":85}},{"path":"src/test/java/seedu/medinfo/storage/JsonMedInfoStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.ALEX;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.HOON;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.IDA;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import java.io.IOException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"public class JsonMedInfoStorageTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMedInfoStorageTest\");","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"    @TempDir","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public Path testFolder;","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    public void readMedInfo_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e readMedInfo(null));","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    private java.util.Optional\u003cReadOnlyMedInfo\u003e readMedInfo(String filePath) throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"        return new JsonMedInfoStorage(Paths.get(filePath)).readMedInfo(addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"        return prefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"                : null;","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"    public void read_missingFile_emptyResult() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"        assertFalse(readMedInfo(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":48,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":49,"author":{"gitId":"yitong241"},"content":"    public void read_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2023-03-30"},{"lineNumber":50,"author":{"gitId":"yitong241"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMedInfo(\"notJsonFormatMedInfo.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":53,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"    public void readMedInfo_invalidPersonMedInfo_throwDataConversionException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMedInfo(\"invalidPatientMedInfo.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"    public void readMedInfo_invalidAndValidPersonMedInfo_throwDataConversionException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"        assertThrows(DataConversionException.class, () -\u003e readMedInfo(\"invalidAndValidPatientMedInfo.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":62,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":63,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    public void readAndSaveMedInfo_allInOrder_success() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"        Path filePath \u003d testFolder.resolve(\"TempMedInfo.json\");","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"yitong241"},"content":"        MedInfo original \u003d getTypicalMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":67,"author":{"gitId":"yitong241"},"content":"        JsonMedInfoStorage jsonMedInfoStorage \u003d new JsonMedInfoStorage(filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":68,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":69,"author":{"gitId":"yitong241"},"content":"        // Save in new file and read back","lastModifiedDate":"2023-03-30"},{"lineNumber":70,"author":{"gitId":"yitong241"},"content":"        jsonMedInfoStorage.saveMedInfo(original, filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":71,"author":{"gitId":"yitong241"},"content":"        ReadOnlyMedInfo readBack \u003d jsonMedInfoStorage.readMedInfo(filePath).get();","lastModifiedDate":"2023-03-30"},{"lineNumber":72,"author":{"gitId":"yitong241"},"content":"        assertEquals(original, new MedInfo(readBack));","lastModifiedDate":"2023-03-30"},{"lineNumber":73,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":74,"author":{"gitId":"yitong241"},"content":"        // Modify data, overwrite exiting file, and read back","lastModifiedDate":"2023-03-30"},{"lineNumber":75,"author":{"gitId":"yitong241"},"content":"        original.addPatient(HOON);","lastModifiedDate":"2023-03-30"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"        original.removePatient(ALEX);","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"yitong241"},"content":"        jsonMedInfoStorage.saveMedInfo(original, filePath);","lastModifiedDate":"2023-03-30"},{"lineNumber":78,"author":{"gitId":"yitong241"},"content":"        readBack \u003d jsonMedInfoStorage.readMedInfo(filePath).get();","lastModifiedDate":"2023-03-30"},{"lineNumber":79,"author":{"gitId":"yitong241"},"content":"        assertEquals(original, new MedInfo(readBack));","lastModifiedDate":"2023-03-30"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"yitong241"},"content":"        // Save and read without specifying file path","lastModifiedDate":"2023-03-30"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"        original.addPatient(IDA);","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"        jsonMedInfoStorage.saveMedInfo(original); // file path not specified","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"yitong241"},"content":"        readBack \u003d jsonMedInfoStorage.readMedInfo().get(); // file path not specified","lastModifiedDate":"2023-03-30"},{"lineNumber":85,"author":{"gitId":"yitong241"},"content":"        assertEquals(original, new MedInfo(readBack));","lastModifiedDate":"2023-03-30"},{"lineNumber":86,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":87,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":88,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":89,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo_nullMedInfo_throwsNullPointerException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":90,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMedInfo(null, \"SomeFile.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":91,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":92,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":93,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":94,"author":{"gitId":"yitong241"},"content":"     * Saves {@code medInfo} at the specified {@code filePath}.","lastModifiedDate":"2023-03-30"},{"lineNumber":95,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":96,"author":{"gitId":"yitong241"},"content":"    private void saveMedInfo(ReadOnlyMedInfo medInfo, String filePath) {","lastModifiedDate":"2023-03-30"},{"lineNumber":97,"author":{"gitId":"yitong241"},"content":"        try {","lastModifiedDate":"2023-03-30"},{"lineNumber":98,"author":{"gitId":"yitong241"},"content":"            new JsonMedInfoStorage(Paths.get(filePath))","lastModifiedDate":"2023-03-30"},{"lineNumber":99,"author":{"gitId":"yitong241"},"content":"                    .saveMedInfo(medInfo, addToTestDataPathIfNotNull(filePath));","lastModifiedDate":"2023-03-30"},{"lineNumber":100,"author":{"gitId":"yitong241"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2023-03-30"},{"lineNumber":101,"author":{"gitId":"yitong241"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);","lastModifiedDate":"2023-03-30"},{"lineNumber":102,"author":{"gitId":"yitong241"},"content":"        }","lastModifiedDate":"2023-03-30"},{"lineNumber":103,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":104,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":105,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":106,"author":{"gitId":"yitong241"},"content":"    public void saveMedInfo_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2023-03-30"},{"lineNumber":107,"author":{"gitId":"yitong241"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveMedInfo(new MedInfo(), null));","lastModifiedDate":"2023-03-30"},{"lineNumber":108,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":109,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":109}},{"path":"src/test/java/seedu/medinfo/storage/JsonSerializableMedInfoTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.IllegalValueException;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.util.JsonUtil;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.testutil.TypicalPatients;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"public class JsonSerializableMedInfoTest {","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMedInfoTest\");","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    private static final Path TYPICAL_PATIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPatientsMedInfo.json\");","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"    private static final Path INVALID_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPatientMedInfo.json\");","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    private static final Path DUPLICATE_PATIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePatientMedInfo.json\");","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"    public void toModelType_typicalPatientsFile_success() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"        JsonSerializableMedInfo dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PATIENTS_FILE,","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"                JsonSerializableMedInfo.class).get();","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        MedInfo medInfoFromFile \u003d dataFromFile.toModelType();","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"        MedInfo typicalPatientsMedInfo \u003d TypicalPatients.getTypicalMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"        assertEquals(medInfoFromFile, typicalPatientsMedInfo);","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    public void toModelType_invalidPatientFile_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"        JsonSerializableMedInfo dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PATIENT_FILE,","lastModifiedDate":"2023-03-30"},{"lineNumber":35,"author":{"gitId":"yitong241"},"content":"                JsonSerializableMedInfo.class).get();","lastModifiedDate":"2023-03-30"},{"lineNumber":36,"author":{"gitId":"yitong241"},"content":"        assertThrows(IllegalValueException.class, dataFromFile::toModelType);","lastModifiedDate":"2023-03-30"},{"lineNumber":37,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":38,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":39,"author":{"gitId":"yitong241"},"content":"    @Test","lastModifiedDate":"2023-03-30"},{"lineNumber":40,"author":{"gitId":"yitong241"},"content":"    public void toModelType_duplicatePatients_throwsIllegalValueException() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":41,"author":{"gitId":"yitong241"},"content":"        JsonSerializableMedInfo dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PATIENT_FILE,","lastModifiedDate":"2023-03-30"},{"lineNumber":42,"author":{"gitId":"yitong241"},"content":"                JsonSerializableMedInfo.class).get();","lastModifiedDate":"2023-03-30"},{"lineNumber":43,"author":{"gitId":"yitong241"},"content":"        assertThrows(IllegalValueException.class, JsonSerializableMedInfo.MESSAGE_DUPLICATE_PATIENT,","lastModifiedDate":"2023-03-30"},{"lineNumber":44,"author":{"gitId":"yitong241"},"content":"                dataFromFile::toModelType);","lastModifiedDate":"2023-03-30"},{"lineNumber":45,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":46,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":47,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":47}},{"path":"src/test/java/seedu/medinfo/storage/JsonUserPrefsStorageTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import java.util.Optional;","lastModifiedDate":"2017-01-19"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.exceptions.DataConversionException;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class JsonUserPrefsStorageTest {","lastModifiedDate":"2016-10-01"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");","lastModifiedDate":"2018-04-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2019-03-23"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));","lastModifiedDate":"2019-03-23"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());","lastModifiedDate":"2016-09-24"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() {","lastModifiedDate":"2019-03-23"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {","lastModifiedDate":"2018-04-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)","lastModifiedDate":"2018-04-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"                : null;","lastModifiedDate":"2016-09-24"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertEquals(new UserPrefs(), actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {","lastModifiedDate":"2016-09-24"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();","lastModifiedDate":"2016-09-24"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        assertEquals(expected, actual);","lastModifiedDate":"2016-09-24"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {","lastModifiedDate":"2017-02-25"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();","lastModifiedDate":"2017-02-25"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));","lastModifiedDate":"2018-11-27"},{"lineNumber":76,"author":{"gitId":"yitong241"},"content":"        userPrefs.setMedInfoFilePath(Paths.get(\"addressbook.json\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":77,"author":{"gitId":"-"},"content":"        return userPrefs;","lastModifiedDate":"2017-02-25"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-02-25"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-02-25"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));","lastModifiedDate":"2019-03-23"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {","lastModifiedDate":"2017-08-15"},{"lineNumber":87,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));","lastModifiedDate":"2019-03-23"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":89,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-08-15"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath.","lastModifiedDate":"2017-08-15"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-08-15"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {","lastModifiedDate":"2017-08-15"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2017-08-15"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))","lastModifiedDate":"2016-10-12"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    .saveUserPrefs(userPrefs);","lastModifiedDate":"2016-10-12"},{"lineNumber":97,"author":{"gitId":"-"},"content":"        } catch (IOException ioe) {","lastModifiedDate":"2017-08-15"},{"lineNumber":98,"author":{"gitId":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);","lastModifiedDate":"2017-08-15"},{"lineNumber":99,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-08-15"},{"lineNumber":100,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":102,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-09-24"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {","lastModifiedDate":"2016-09-24"},{"lineNumber":104,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));","lastModifiedDate":"2018-11-27"},{"lineNumber":107,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":108,"author":{"gitId":"-"},"content":"        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");","lastModifiedDate":"2019-04-25"},{"lineNumber":109,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);","lastModifiedDate":"2016-10-01"},{"lineNumber":110,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":111,"author":{"gitId":"-"},"content":"        //Try writing when the file doesn\u0027t exist","lastModifiedDate":"2016-09-24"},{"lineNumber":112,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":113,"author":{"gitId":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":114,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":115,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":116,"author":{"gitId":"-"},"content":"        //Try saving when the file exists","lastModifiedDate":"2016-09-24"},{"lineNumber":117,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));","lastModifiedDate":"2018-11-27"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);","lastModifiedDate":"2016-10-01"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();","lastModifiedDate":"2016-10-01"},{"lineNumber":120,"author":{"gitId":"-"},"content":"        assertEquals(original, readBack);","lastModifiedDate":"2016-09-24"},{"lineNumber":121,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-24"},{"lineNumber":122,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-24"},{"lineNumber":123,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-24"}],"authorContributionMap":{"yitong241":6,"-":117}},{"path":"src/test/java/seedu/medinfo/storage/StorageManagerTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.storage;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.TypicalPatients.getTypicalMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2019-04-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.GuiSettings;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ReadOnlyMedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.UserPrefs;","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class StorageManagerTest {","lastModifiedDate":"2016-08-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-28"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private StorageManager storageManager;","lastModifiedDate":"2017-04-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    @BeforeEach","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public void setUp() {","lastModifiedDate":"2016-10-19"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        JsonMedInfoStorage addressBookStorage \u003d new JsonMedInfoStorage(getTempFilePath(\"ab\"));","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));","lastModifiedDate":"2017-02-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);","lastModifiedDate":"2017-02-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    private Path getTempFilePath(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return testFolder.resolve(fileName);","lastModifiedDate":"2019-04-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-16"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void prefsReadSave() throws Exception {","lastModifiedDate":"2016-10-16"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-09-28"},{"lineNumber":39,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-09-28"},{"lineNumber":40,"author":{"gitId":"-"},"content":"         * {@link JsonUserPrefsStorage} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":41,"author":{"gitId":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class.","lastModifiedDate":"2016-10-01"},{"lineNumber":42,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-09-28"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        UserPrefs original \u003d new UserPrefs();","lastModifiedDate":"2016-09-24"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));","lastModifiedDate":"2018-11-27"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        storageManager.saveUserPrefs(original);","lastModifiedDate":"2016-09-28"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();","lastModifiedDate":"2016-09-28"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        assertEquals(original, retrieved);","lastModifiedDate":"2016-09-24"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"yitong241"},"content":"    public void medInfoReadSave() throws Exception {","lastModifiedDate":"2023-03-30"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        /*","lastModifiedDate":"2016-10-16"},{"lineNumber":53,"author":{"gitId":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the","lastModifiedDate":"2016-10-16"},{"lineNumber":54,"author":{"gitId":"yitong241"},"content":"         * {@link JsonMedInfoStorage} class.","lastModifiedDate":"2023-03-30"},{"lineNumber":55,"author":{"gitId":"yitong241"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonMedInfoStorageTest} class.","lastModifiedDate":"2023-03-30"},{"lineNumber":56,"author":{"gitId":"-"},"content":"         */","lastModifiedDate":"2016-10-16"},{"lineNumber":57,"author":{"gitId":"yitong241"},"content":"        MedInfo original \u003d getTypicalMedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":58,"author":{"gitId":"yitong241"},"content":"        storageManager.saveMedInfo(original);","lastModifiedDate":"2023-03-30"},{"lineNumber":59,"author":{"gitId":"yitong241"},"content":"        ReadOnlyMedInfo retrieved \u003d storageManager.readMedInfo().get();","lastModifiedDate":"2023-03-30"},{"lineNumber":60,"author":{"gitId":"yitong241"},"content":"        assertEquals(original, new MedInfo(retrieved));","lastModifiedDate":"2023-03-30"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-10-01"},{"lineNumber":64,"author":{"gitId":"yitong241"},"content":"    public void getMedInfoFilePath() {","lastModifiedDate":"2023-03-30"},{"lineNumber":65,"author":{"gitId":"yitong241"},"content":"        assertNotNull(storageManager.getMedInfoFilePath());","lastModifiedDate":"2023-03-30"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-10-01"},{"lineNumber":67,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-01"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":16,"-":52}},{"path":"src/test/java/seedu/medinfo/testutil/Assert.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-17"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Assertions;","lastModifiedDate":"2019-03-13"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.function.Executable;","lastModifiedDate":"2019-03-13"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-03-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * A set of assertion methods useful for writing tests.","lastModifiedDate":"2017-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Assert {","lastModifiedDate":"2017-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-26"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception.","lastModifiedDate":"2019-03-13"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency","lastModifiedDate":"2019-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * with our custom {@link #assertThrows(Class, String, Executable)} method.","lastModifiedDate":"2019-03-13"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * To standardize API calls in this project, users should use this method instead of","lastModifiedDate":"2019-03-13"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * {@link Assertions#assertThrows(Class, Executable)}.","lastModifiedDate":"2019-03-13"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-02-09"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-02-09"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-02-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}.","lastModifiedDate":"2019-03-13"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * If there\u0027s no need for the verification of the exception\u0027s error message, call","lastModifiedDate":"2018-02-09"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * {@link #assertThrows(Class, Executable)} instead.","lastModifiedDate":"2019-03-13"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     *","lastModifiedDate":"2019-03-13"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * @see #assertThrows(Class, Executable)","lastModifiedDate":"2019-03-13"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-02-09"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,","lastModifiedDate":"2019-03-13"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            Executable executable) {","lastModifiedDate":"2019-03-13"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);","lastModifiedDate":"2019-03-13"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        Assertions.assertEquals(expectedMessage, thrownException.getMessage());","lastModifiedDate":"2019-03-13"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-07-17"}],"authorContributionMap":{"yitong241":1,"-":33}},{"path":"src/test/java/seedu/medinfo/testutil/EditPatientDescriptorBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand.EditPatientDescriptor;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-05-05"},{"lineNumber":11,"author":{"gitId":"KSunil2001"},"content":" * A utility class to help with building EditPatientDescriptor objects.","lastModifiedDate":"2023-03-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-05-05"},{"lineNumber":13,"author":{"gitId":"KSunil2001"},"content":"public class EditPatientDescriptorBuilder {","lastModifiedDate":"2023-03-22"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":15,"author":{"gitId":"KSunil2001"},"content":"    private EditCommand.EditPatientDescriptor descriptor;","lastModifiedDate":"2023-03-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":17,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder() {","lastModifiedDate":"2023-03-22"},{"lineNumber":18,"author":{"gitId":"KSunil2001"},"content":"        descriptor \u003d new EditPatientDescriptor();","lastModifiedDate":"2023-03-09"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":21,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder(EditPatientDescriptor descriptor) {","lastModifiedDate":"2023-03-22"},{"lineNumber":22,"author":{"gitId":"KSunil2001"},"content":"        this.descriptor \u003d new EditPatientDescriptor(descriptor);","lastModifiedDate":"2023-03-09"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-06-05"},{"lineNumber":26,"author":{"gitId":"KSunil2001"},"content":"     * Returns an {@code EditPatientDescriptor} with fields containing","lastModifiedDate":"2023-03-22"},{"lineNumber":27,"author":{"gitId":"jeraldkiew"},"content":"     * {@code patient}\u0027s details","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-06-05"},{"lineNumber":29,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder(Patient patient) {","lastModifiedDate":"2023-03-22"},{"lineNumber":30,"author":{"gitId":"KSunil2001"},"content":"        descriptor \u003d new EditCommand.EditPatientDescriptor();","lastModifiedDate":"2023-03-09"},{"lineNumber":31,"author":{"gitId":"nramapurath"},"content":"        descriptor.setName(patient.getName());","lastModifiedDate":"2023-03-08"},{"lineNumber":32,"author":{"gitId":"daytona65"},"content":"        descriptor.setNric(patient.getNric());","lastModifiedDate":"2023-03-17"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        descriptor.setStatus(patient.getStatus());","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-06-05"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-06-05"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":37,"author":{"gitId":"KSunil2001"},"content":"     * Sets the {@code Name} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2023-03-22"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"     * building.","lastModifiedDate":"2023-03-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder withName(String name) {","lastModifiedDate":"2023-03-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        descriptor.setName(new Name(name));","lastModifiedDate":"2017-12-23"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2017-05-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-05-05"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"     * Sets the {@code Nric} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"daytona65"},"content":"     * building.","lastModifiedDate":"2023-03-17"},{"lineNumber":48,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder withNric(String nric) {","lastModifiedDate":"2023-03-22"},{"lineNumber":50,"author":{"gitId":"daytona65"},"content":"        descriptor.setNric(new Nric(nric));","lastModifiedDate":"2023-03-17"},{"lineNumber":51,"author":{"gitId":"daytona65"},"content":"        return this;","lastModifiedDate":"2023-03-17"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":55,"author":{"gitId":"KSunil2001"},"content":"     * Sets the {@code Status} of the {@code EditPatientDescriptor} that we are","lastModifiedDate":"2023-03-22"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"     * building.","lastModifiedDate":"2023-03-17"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":58,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptorBuilder withStatus(String status) {","lastModifiedDate":"2023-03-22"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"        descriptor.setStatus(new Status(status));","lastModifiedDate":"2023-03-17"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"        return this;","lastModifiedDate":"2023-03-17"},{"lineNumber":61,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"    public EditPatientDescriptor build() {","lastModifiedDate":"2023-03-09"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return descriptor;","lastModifiedDate":"2017-05-05"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-05-05"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-05-05"}],"authorContributionMap":{"nramapurath":1,"yitong241":7,"daytona65":18,"jeraldkiew":2,"-":23,"KSunil2001":17}},{"path":"src/test/java/seedu/medinfo/testutil/MedInfoBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"/**","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":" * A utility class to help with building Addressbook objects.","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":" * Example usage: \u003cbr\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":" *     {@code MedInfo ab \u003d new MedInfoBuilder().withPerson(\"John\", \"Doe\").build();}","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":" */","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"public class MedInfoBuilder {","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"    private MedInfo medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"yitong241"},"content":"    public MedInfoBuilder() {","lastModifiedDate":"2023-03-30"},{"lineNumber":16,"author":{"gitId":"yitong241"},"content":"        medInfo \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":17,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":18,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"    public MedInfoBuilder(MedInfo medInfo) {","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"        this.medInfo \u003d medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"yitong241"},"content":"    /**","lastModifiedDate":"2023-03-30"},{"lineNumber":24,"author":{"gitId":"yitong241"},"content":"     * Adds a new {@code Patient} to the {@code MedInfo} that we are building.","lastModifiedDate":"2023-03-30"},{"lineNumber":25,"author":{"gitId":"yitong241"},"content":"     */","lastModifiedDate":"2023-03-30"},{"lineNumber":26,"author":{"gitId":"yitong241"},"content":"    public MedInfoBuilder withPerson(Patient patient) {","lastModifiedDate":"2023-03-30"},{"lineNumber":27,"author":{"gitId":"yitong241"},"content":"        medInfo.addPatient(patient);","lastModifiedDate":"2023-03-30"},{"lineNumber":28,"author":{"gitId":"yitong241"},"content":"        return this;","lastModifiedDate":"2023-03-30"},{"lineNumber":29,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":30,"author":{"gitId":"yitong241"},"content":"","lastModifiedDate":"2023-03-30"},{"lineNumber":31,"author":{"gitId":"yitong241"},"content":"    public MedInfo build() {","lastModifiedDate":"2023-03-30"},{"lineNumber":32,"author":{"gitId":"yitong241"},"content":"        return medInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":33,"author":{"gitId":"yitong241"},"content":"    }","lastModifiedDate":"2023-03-30"},{"lineNumber":34,"author":{"gitId":"yitong241"},"content":"}","lastModifiedDate":"2023-03-30"}],"authorContributionMap":{"yitong241":34}},{"path":"src/test/java/seedu/medinfo/testutil/PatientBuilder.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Discharge;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Name;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Nric;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Status;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":10,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-09-03"},{"lineNumber":11,"author":{"gitId":"nramapurath"},"content":" * A utility class to help with building Patient objects.","lastModifiedDate":"2023-03-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-09-03"},{"lineNumber":13,"author":{"gitId":"daytona65"},"content":"public class PatientBuilder {","lastModifiedDate":"2023-03-13"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"    public static final String DEFAULT_NRIC \u003d \"T1234567A\";","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"    public static final String DEFAULT_NAME \u003d \"Alex Smith\";","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"    public static final String DEFAULT_STATUS \u003d \"GRAY\";","lastModifiedDate":"2023-03-17"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"    public static final String DEFAULT_WARD \u003d \"Waiting Room\";","lastModifiedDate":"2023-03-24"},{"lineNumber":19,"author":{"gitId":"KSunil2001"},"content":"    public static final String DEFAULT_DISCHARGE \u003d \"To Be Confirmed\";","lastModifiedDate":"2023-03-22"},{"lineNumber":20,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"    private Nric nric;","lastModifiedDate":"2023-03-14"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private Name name;","lastModifiedDate":"2017-12-20"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"    private Status status;","lastModifiedDate":"2023-03-17"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"    private WardName ward;","lastModifiedDate":"2023-03-27"},{"lineNumber":25,"author":{"gitId":"KSunil2001"},"content":"    private Discharge discharge;","lastModifiedDate":"2023-03-22"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2020-05-27"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Creates a {@code PersonBuilder} with the default details.","lastModifiedDate":"2020-05-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2020-05-27"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"    public PatientBuilder() {","lastModifiedDate":"2023-03-13"},{"lineNumber":31,"author":{"gitId":"nramapurath"},"content":"        nric \u003d new Nric(DEFAULT_NRIC);","lastModifiedDate":"2023-03-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);","lastModifiedDate":"2017-12-20"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"        status \u003d new Status(DEFAULT_STATUS);","lastModifiedDate":"2023-03-17"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"        ward \u003d new WardName(DEFAULT_WARD);","lastModifiedDate":"2023-03-27"},{"lineNumber":35,"author":{"gitId":"KSunil2001"},"content":"        discharge \u003d new Discharge(DEFAULT_DISCHARGE);","lastModifiedDate":"2023-03-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-11"},{"lineNumber":39,"author":{"gitId":"nramapurath"},"content":"     * Initializes the PersonBuilder with the data of {@code patientToCopy}.","lastModifiedDate":"2023-03-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-11"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"    public PatientBuilder(Patient patientToCopy) {","lastModifiedDate":"2023-03-13"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        nric \u003d patientToCopy.getNric();","lastModifiedDate":"2023-03-13"},{"lineNumber":43,"author":{"gitId":"nramapurath"},"content":"        name \u003d patientToCopy.getName();","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"daytona65"},"content":"        status \u003d patientToCopy.getStatus();","lastModifiedDate":"2023-03-17"},{"lineNumber":45,"author":{"gitId":"daytona65"},"content":"        ward \u003d patientToCopy.getWardName();","lastModifiedDate":"2023-03-27"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"        discharge \u003d patientToCopy.getDischarge();","lastModifiedDate":"2023-03-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-11"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-11"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-26"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"     * Sets the {@code Name} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-26"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"    public PatientBuilder withName(String name) {","lastModifiedDate":"2023-03-13"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        this.name \u003d new Name(name);","lastModifiedDate":"2017-12-20"},{"lineNumber":54,"author":{"gitId":"-"},"content":"        return this;","lastModifiedDate":"2016-09-03"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":58,"author":{"gitId":"nramapurath"},"content":"     * Sets the {@code Nric} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-14"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"    public PatientBuilder withNric(String nric) {","lastModifiedDate":"2023-03-14"},{"lineNumber":61,"author":{"gitId":"nramapurath"},"content":"        this.nric \u003d new Nric(nric);","lastModifiedDate":"2023-03-14"},{"lineNumber":62,"author":{"gitId":"daytona65"},"content":"        return this;","lastModifiedDate":"2023-03-13"},{"lineNumber":63,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":64,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-17"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"     * Sets the {@code Status} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-17"},{"lineNumber":67,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-17"},{"lineNumber":68,"author":{"gitId":"daytona65"},"content":"    public PatientBuilder withStatus(String status) {","lastModifiedDate":"2023-03-17"},{"lineNumber":69,"author":{"gitId":"daytona65"},"content":"        this.status \u003d new Status(status);","lastModifiedDate":"2023-03-17"},{"lineNumber":70,"author":{"gitId":"daytona65"},"content":"        return this;","lastModifiedDate":"2023-03-17"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-09-03"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-09-03"},{"lineNumber":73,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":74,"author":{"gitId":"KSunil2001"},"content":"     * Sets the {@code Ward} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-22"},{"lineNumber":75,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"    public PatientBuilder withWard(WardName ward) {","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"jeraldkiew"},"content":"        this.ward \u003d ward;","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"KSunil2001"},"content":"        return this;","lastModifiedDate":"2023-03-22"},{"lineNumber":79,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":80,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":81,"author":{"gitId":"KSunil2001"},"content":"    /**","lastModifiedDate":"2023-03-22"},{"lineNumber":82,"author":{"gitId":"KSunil2001"},"content":"     * Sets the {@code Discharge} of the {@code Patient} that we are building.","lastModifiedDate":"2023-03-22"},{"lineNumber":83,"author":{"gitId":"KSunil2001"},"content":"     */","lastModifiedDate":"2023-03-22"},{"lineNumber":84,"author":{"gitId":"KSunil2001"},"content":"    public PatientBuilder withDischarge(String discharge) {","lastModifiedDate":"2023-03-22"},{"lineNumber":85,"author":{"gitId":"KSunil2001"},"content":"        this.discharge \u003d new Discharge(discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":86,"author":{"gitId":"KSunil2001"},"content":"        return this;","lastModifiedDate":"2023-03-22"},{"lineNumber":87,"author":{"gitId":"KSunil2001"},"content":"    }","lastModifiedDate":"2023-03-22"},{"lineNumber":88,"author":{"gitId":"KSunil2001"},"content":"","lastModifiedDate":"2023-03-22"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"    public Patient build() {","lastModifiedDate":"2023-03-17"},{"lineNumber":90,"author":{"gitId":"KSunil2001"},"content":"        return new Patient(nric, name, status, ward, discharge);","lastModifiedDate":"2023-03-22"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-17"},{"lineNumber":92,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-09-03"}],"authorContributionMap":{"nramapurath":8,"yitong241":7,"daytona65":29,"jeraldkiew":2,"-":26,"KSunil2001":20}},{"path":"src/test/java/seedu/medinfo/testutil/PersonUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NAME;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_NRIC;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.parser.CliSyntax.PREFIX_STATUS;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.AddCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.logic.commands.EditCommand;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":11,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-04-05"},{"lineNumber":13,"author":{"gitId":"nramapurath"},"content":" * A utility class for Patient.","lastModifiedDate":"2023-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-04-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class PersonUtil {","lastModifiedDate":"2017-04-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-05"},{"lineNumber":18,"author":{"gitId":"nramapurath"},"content":"     * Returns an add command string for adding the {@code patient}.","lastModifiedDate":"2023-03-08"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-05"},{"lineNumber":20,"author":{"gitId":"nramapurath"},"content":"    public static String getAddCommand(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":21,"author":{"gitId":"nramapurath"},"content":"        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(patient);","lastModifiedDate":"2023-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-06"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-04-06"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-04-06"},{"lineNumber":25,"author":{"gitId":"nramapurath"},"content":"     * Returns the part of command string for the given {@code patient}\u0027s details.","lastModifiedDate":"2023-03-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-04-06"},{"lineNumber":27,"author":{"gitId":"nramapurath"},"content":"    public static String getPersonDetails(Patient patient) {","lastModifiedDate":"2023-03-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2017-04-05"},{"lineNumber":29,"author":{"gitId":"nramapurath"},"content":"        sb.append(PREFIX_NAME + patient.getName().fullName + \" \");","lastModifiedDate":"2023-03-08"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"        sb.append(PREFIX_NRIC + patient.getNric().value + \" \");","lastModifiedDate":"2023-03-14"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"        sb.append(PREFIX_STATUS + patient.getStatus().value + \" \");","lastModifiedDate":"2023-03-17"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2017-04-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-04-05"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2018-03-26"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2018-03-26"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details.","lastModifiedDate":"2018-03-26"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2018-03-26"},{"lineNumber":38,"author":{"gitId":"KSunil2001"},"content":"    public static String getEditPersonDescriptorDetails(EditCommand.EditPatientDescriptor descriptor) {","lastModifiedDate":"2023-03-09"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2018-03-26"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));","lastModifiedDate":"2018-03-26"},{"lineNumber":41,"author":{"gitId":"daytona65"},"content":"        descriptor.getNric().ifPresent(nric -\u003e sb.append(PREFIX_NRIC).append(nric.value).append(\" \"));","lastModifiedDate":"2023-03-14"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"        descriptor.getStatus().ifPresent(status -\u003e sb.append(PREFIX_STATUS).append(status.value).append(\" \"));","lastModifiedDate":"2023-03-17"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        return sb.toString();","lastModifiedDate":"2018-03-26"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2018-03-26"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-04-05"}],"authorContributionMap":{"nramapurath":7,"yitong241":7,"daytona65":6,"-":24,"KSunil2001":1}},{"path":"src/test/java/seedu/medinfo/testutil/SerializableTestClass.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2016-08-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;","lastModifiedDate":"2016-08-08"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.HashMap;","lastModifiedDate":"2016-08-08"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;","lastModifiedDate":"2016-08-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":8,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * A class used to test serialization and deserialization","lastModifiedDate":"2016-08-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class SerializableTestClass {","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":13,"author":{"gitId":"-"},"content":"            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":14,"author":{"gitId":"-"},"content":"            + \"  \\\"listOfLocalDateTimes\\\" : \"","lastModifiedDate":"2016-10-12"},{"lineNumber":15,"author":{"gitId":"-"},"content":"            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \"","lastModifiedDate":"2016-10-12"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            + \"\\\"0001-01-01T01:01:00\\\" ],%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            + \"  \\\"mapOfIntegerToString\\\" : {%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            + \"    \\\"1\\\" : \\\"One\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            + \"    \\\"2\\\" : \\\"Two\\\",%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            + \"    \\\"3\\\" : \\\"Three\\\"%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            + \"  }%n\"","lastModifiedDate":"2016-10-12"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            + \"}\");","lastModifiedDate":"2016-10-12"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";","lastModifiedDate":"2016-08-08"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    private String name;","lastModifiedDate":"2016-08-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public static String getNameTestValue() {","lastModifiedDate":"2016-08-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return NAME_TEST_VALUE;","lastModifiedDate":"2016-08-08"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    public static List\u003cLocalDateTime\u003e getListTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MIN);","lastModifiedDate":"2016-08-08"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.MAX);","lastModifiedDate":"2016-08-08"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));","lastModifiedDate":"2016-08-08"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2016-08-08"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(1, \"One\");","lastModifiedDate":"2016-08-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(2, \"Two\");","lastModifiedDate":"2016-08-08"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        mapOfIntegerToString.put(3, \"Three\");","lastModifiedDate":"2016-08-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    public void setTestValues() {","lastModifiedDate":"2016-08-08"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        name \u003d getNameTestValue();","lastModifiedDate":"2016-08-08"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        listOfLocalDateTimes \u003d getListTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        mapOfIntegerToString \u003d getHashMapTestValues();","lastModifiedDate":"2016-08-08"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public String getName() {","lastModifiedDate":"2016-08-08"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        return name;","lastModifiedDate":"2016-08-08"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {","lastModifiedDate":"2016-08-08"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        return listOfLocalDateTimes;","lastModifiedDate":"2016-08-08"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":68,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {","lastModifiedDate":"2016-08-08"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        return mapOfIntegerToString;","lastModifiedDate":"2016-08-08"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"yitong241":1,"-":71}},{"path":"src/test/java/seedu/medinfo/testutil/TestUtil.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.io.IOException;","lastModifiedDate":"2017-01-19"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.nio.file.Files;","lastModifiedDate":"2018-04-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2018-04-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2018-04-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.Model;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":12,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-08-08"},{"lineNumber":13,"author":{"gitId":"-"},"content":" * A utility class for test cases.","lastModifiedDate":"2016-08-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-08-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class TestUtil {","lastModifiedDate":"2016-08-08"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-10-16"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git.","lastModifiedDate":"2016-10-16"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-10-16"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");","lastModifiedDate":"2018-04-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-10-16"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-08-08"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting path.","lastModifiedDate":"2018-04-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist.","lastModifiedDate":"2016-09-28"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-08-08"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    public static Path getFilePathInSandboxFolder(String fileName) {","lastModifiedDate":"2018-04-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        try {","lastModifiedDate":"2016-09-28"},{"lineNumber":28,"author":{"gitId":"-"},"content":"            Files.createDirectories(SANDBOX_FOLDER);","lastModifiedDate":"2018-04-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        } catch (IOException e) {","lastModifiedDate":"2016-09-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2016-09-28"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-09-28"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        return SANDBOX_FOLDER.resolve(fileName);","lastModifiedDate":"2018-04-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-08-08"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-08-08"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":36,"author":{"gitId":"nramapurath"},"content":"     * Returns the middle index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2023-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    public static Index getMidIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":39,"author":{"gitId":"KSunil2001"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size() / 2);","lastModifiedDate":"2023-03-09"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":43,"author":{"gitId":"nramapurath"},"content":"     * Returns the last index of the patient in the {@code model}\u0027s patient list.","lastModifiedDate":"2023-03-08"},{"lineNumber":44,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    public static Index getLastIndex(Model model) {","lastModifiedDate":"2017-07-30"},{"lineNumber":46,"author":{"gitId":"KSunil2001"},"content":"        return Index.fromOneBased(model.getFilteredPatientList().size());","lastModifiedDate":"2023-03-09"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-07-30"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2017-07-30"},{"lineNumber":50,"author":{"gitId":"nramapurath"},"content":"     * Returns the patient in the {@code model}\u0027s patient list at {@code index}.","lastModifiedDate":"2023-03-08"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2017-07-30"},{"lineNumber":52,"author":{"gitId":"nramapurath"},"content":"    public static Patient getPerson(Model model, Index index) {","lastModifiedDate":"2023-03-08"},{"lineNumber":53,"author":{"gitId":"KSunil2001"},"content":"        return model.getFilteredPatientList().get(index.getZeroBased());","lastModifiedDate":"2023-03-09"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-07-30"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-08-08"}],"authorContributionMap":{"nramapurath":4,"yitong241":4,"-":44,"KSunil2001":3}},{"path":"src/test/java/seedu/medinfo/testutil/TypicalIndexes.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.commons.core.index.Index;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2017-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests.","lastModifiedDate":"2017-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2017-08-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class TypicalIndexes {","lastModifiedDate":"2017-08-05"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);","lastModifiedDate":"2017-08-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);","lastModifiedDate":"2017-08-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);","lastModifiedDate":"2017-08-05"},{"lineNumber":12,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2017-08-05"}],"authorContributionMap":{"yitong241":2,"-":10}},{"path":"src/test/java/seedu/medinfo/testutil/TypicalPatients.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.testutil;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_DISCHARGE_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_DISCHARGE_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NAME_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":7,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NRIC_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":8,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_NRIC_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":9,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_STATUS_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":10,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_STATUS_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":11,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_WARD_AMY;","lastModifiedDate":"2023-03-30"},{"lineNumber":12,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.logic.commands.CommandTestUtil.VALID_WARD_BOB;","lastModifiedDate":"2023-03-30"},{"lineNumber":13,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.model.ward.Ward.wardWithName;","lastModifiedDate":"2023-03-30"},{"lineNumber":14,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-14"},{"lineNumber":15,"author":{"gitId":"daytona65"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-03-13"},{"lineNumber":16,"author":{"gitId":"daytona65"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-03-13"},{"lineNumber":17,"author":{"gitId":"daytona65"},"content":"import java.util.List;","lastModifiedDate":"2023-03-13"},{"lineNumber":18,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":19,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.MedInfo;","lastModifiedDate":"2023-03-30"},{"lineNumber":20,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.patient.Patient;","lastModifiedDate":"2023-03-30"},{"lineNumber":21,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.Ward;","lastModifiedDate":"2023-03-30"},{"lineNumber":22,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.model.ward.WardName;","lastModifiedDate":"2023-03-30"},{"lineNumber":23,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":24,"author":{"gitId":"daytona65"},"content":"/**","lastModifiedDate":"2023-03-13"},{"lineNumber":25,"author":{"gitId":"jeraldkiew"},"content":" * A utility class containing a list of {@code Patient} objects to be used in","lastModifiedDate":"2023-03-29"},{"lineNumber":26,"author":{"gitId":"jeraldkiew"},"content":" * tests.","lastModifiedDate":"2023-03-29"},{"lineNumber":27,"author":{"gitId":"daytona65"},"content":" */","lastModifiedDate":"2023-03-13"},{"lineNumber":28,"author":{"gitId":"daytona65"},"content":"public class TypicalPatients {","lastModifiedDate":"2023-03-13"},{"lineNumber":29,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":30,"author":{"gitId":"daytona65"},"content":"    // Patients","lastModifiedDate":"2023-03-27"},{"lineNumber":31,"author":{"gitId":"daytona65"},"content":"    public static final Patient ALEX \u003d new PatientBuilder().withNric(\"S1000007A\")","lastModifiedDate":"2023-03-27"},{"lineNumber":32,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Alex Smith\").withStatus(\"GRAY\").withWard(new WardName(\"Waiting Room\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":33,"author":{"gitId":"daytona65"},"content":"            .withDischarge(\"12/02/2023 1400\").build();","lastModifiedDate":"2023-03-27"},{"lineNumber":34,"author":{"gitId":"daytona65"},"content":"    public static final Patient BENSON \u003d new PatientBuilder().withNric(\"S7654321F\")","lastModifiedDate":"2023-03-14"},{"lineNumber":35,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Benson Tillman\").withStatus(\"GRAY\").withWard(new WardName(\"Waiting Room\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":36,"author":{"gitId":"daytona65"},"content":"            .withDischarge(\"12/02/2023 1500\").build();","lastModifiedDate":"2023-03-27"},{"lineNumber":37,"author":{"gitId":"daytona65"},"content":"    public static final Patient CARL \u003d new PatientBuilder().withNric(\"S2468024G\")","lastModifiedDate":"2023-03-14"},{"lineNumber":38,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Carl Leigh\").withStatus(\"GREEN\").withWard(new WardName(\"Class A\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":39,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(\"12/02/2023 1600\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":40,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient DANIEL \u003d new PatientBuilder().withNric(\"S1244567A\")","lastModifiedDate":"2023-03-15"},{"lineNumber":41,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Daniel Wellington\").withStatus(\"YELLOW\").withWard(new WardName(\"Class B\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":42,"author":{"gitId":"daytona65"},"content":"            .withDischarge(\"13/02/2023 1400\").build();","lastModifiedDate":"2023-03-27"},{"lineNumber":43,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient ELLE \u003d new PatientBuilder().withNric(\"S1235567A\")","lastModifiedDate":"2023-03-15"},{"lineNumber":44,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Elle Schmidt\").withStatus(\"GREEN\").withWard(new WardName(\"Class C\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":45,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(\"13/02/2023 1500\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":46,"author":{"gitId":"daytona65"},"content":"    public static final Patient FIONA \u003d new PatientBuilder().withNric(\"S6969696B\")","lastModifiedDate":"2023-03-14"},{"lineNumber":47,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"Fiona Shrekt\").withStatus(\"RED\").withWard(new WardName(\"ICU\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":48,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(\"13/02/2023 1600\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":49,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient GEORGE \u003d new PatientBuilder().withNric(\"S1224567A\")","lastModifiedDate":"2023-03-15"},{"lineNumber":50,"author":{"gitId":"jeraldkiew"},"content":"            .withName(\"George Townsend\").withStatus(\"RED\").withWard(new WardName(\"ICU\"))","lastModifiedDate":"2023-03-29"},{"lineNumber":51,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(\"14/02/2023 1400\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":52,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":53,"author":{"gitId":"daytona65"},"content":"    // Wards","lastModifiedDate":"2023-03-27"},{"lineNumber":54,"author":{"gitId":"daytona65"},"content":"    public static final Ward WR \u003d wardWithName(\"Waiting Room\");","lastModifiedDate":"2023-03-27"},{"lineNumber":55,"author":{"gitId":"daytona65"},"content":"    public static final Ward A \u003d wardWithName(\"Class A\").withCapacity(30);","lastModifiedDate":"2023-03-27"},{"lineNumber":56,"author":{"gitId":"daytona65"},"content":"    public static final Ward B \u003d wardWithName(\"Class B\").withCapacity(30);","lastModifiedDate":"2023-03-27"},{"lineNumber":57,"author":{"gitId":"daytona65"},"content":"    public static final Ward C \u003d wardWithName(\"Class C\").withCapacity(30);","lastModifiedDate":"2023-03-27"},{"lineNumber":58,"author":{"gitId":"daytona65"},"content":"    public static final Ward ICU \u003d wardWithName(\"ICU\").withCapacity(40);","lastModifiedDate":"2023-03-27"},{"lineNumber":59,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":60,"author":{"gitId":"daytona65"},"content":"    // Manually added","lastModifiedDate":"2023-03-13"},{"lineNumber":61,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient HOON \u003d new PatientBuilder().withName(\"Hoon Meier\").withNric(\"T2222222L\")","lastModifiedDate":"2023-03-22"},{"lineNumber":62,"author":{"gitId":"jeraldkiew"},"content":"            .withStatus(\"GREEN\").withWard(new WardName(\"C1\")).withDischarge(\"22/02/2023 1540\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":63,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient IDA \u003d new PatientBuilder().withName(\"Ida Mueller\").withNric(\"S3333333L\")","lastModifiedDate":"2023-03-22"},{"lineNumber":64,"author":{"gitId":"jeraldkiew"},"content":"            .withStatus(\"YELLOW\").withWard(new WardName(\"B2\")).withDischarge(\"25/02/2023 1400\").build();","lastModifiedDate":"2023-03-29"},{"lineNumber":65,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":66,"author":{"gitId":"daytona65"},"content":"    // Manually added - Patient\u0027s details found in {@code CommandTestUtil}","lastModifiedDate":"2023-03-13"},{"lineNumber":67,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient AMY \u003d new PatientBuilder().withName(VALID_NAME_AMY).withNric(VALID_NRIC_AMY)","lastModifiedDate":"2023-03-22"},{"lineNumber":68,"author":{"gitId":"jeraldkiew"},"content":"            .withStatus(VALID_STATUS_AMY).withWard(new WardName(VALID_WARD_AMY))","lastModifiedDate":"2023-03-29"},{"lineNumber":69,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(VALID_DISCHARGE_AMY).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":70,"author":{"gitId":"KSunil2001"},"content":"    public static final Patient BOB \u003d new PatientBuilder().withName(VALID_NAME_BOB).withNric(VALID_NRIC_BOB)","lastModifiedDate":"2023-03-22"},{"lineNumber":71,"author":{"gitId":"jeraldkiew"},"content":"            .withStatus(VALID_STATUS_BOB).withWard(new WardName(VALID_WARD_BOB))","lastModifiedDate":"2023-03-29"},{"lineNumber":72,"author":{"gitId":"jeraldkiew"},"content":"            .withDischarge(VALID_DISCHARGE_BOB).build();","lastModifiedDate":"2023-03-29"},{"lineNumber":73,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":74,"author":{"gitId":"daytona65"},"content":"    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER","lastModifiedDate":"2023-03-13"},{"lineNumber":75,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":76,"author":{"gitId":"jeraldkiew"},"content":"    private TypicalPatients() {","lastModifiedDate":"2023-03-29"},{"lineNumber":77,"author":{"gitId":"jeraldkiew"},"content":"    } // prevents instantiation","lastModifiedDate":"2023-03-29"},{"lineNumber":78,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":79,"author":{"gitId":"daytona65"},"content":"    /**","lastModifiedDate":"2023-03-13"},{"lineNumber":80,"author":{"gitId":"yitong241"},"content":"     * Returns an {@code MedInfo} with all the typical persons.","lastModifiedDate":"2023-03-30"},{"lineNumber":81,"author":{"gitId":"daytona65"},"content":"     */","lastModifiedDate":"2023-03-13"},{"lineNumber":82,"author":{"gitId":"yitong241"},"content":"    public static MedInfo getTypicalMedInfo() {","lastModifiedDate":"2023-03-30"},{"lineNumber":83,"author":{"gitId":"yitong241"},"content":"        MedInfo ab \u003d new MedInfo();","lastModifiedDate":"2023-03-30"},{"lineNumber":84,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":85,"author":{"gitId":"daytona65"},"content":"        for (Ward ward : getTypicalWards()) {","lastModifiedDate":"2023-03-27"},{"lineNumber":86,"author":{"gitId":"daytona65"},"content":"            ab.addWard(ward);","lastModifiedDate":"2023-03-27"},{"lineNumber":87,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-27"},{"lineNumber":88,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":89,"author":{"gitId":"daytona65"},"content":"        for (Patient patient : getTypicalPatients()) {","lastModifiedDate":"2023-03-13"},{"lineNumber":90,"author":{"gitId":"daytona65"},"content":"            ab.addPatient(patient);","lastModifiedDate":"2023-03-13"},{"lineNumber":91,"author":{"gitId":"daytona65"},"content":"        }","lastModifiedDate":"2023-03-13"},{"lineNumber":92,"author":{"gitId":"daytona65"},"content":"        return ab;","lastModifiedDate":"2023-03-13"},{"lineNumber":93,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":94,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-13"},{"lineNumber":95,"author":{"gitId":"daytona65"},"content":"    public static List\u003cPatient\u003e getTypicalPatients() {","lastModifiedDate":"2023-03-13"},{"lineNumber":96,"author":{"gitId":"daytona65"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(ALEX, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));","lastModifiedDate":"2023-03-17"},{"lineNumber":97,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-13"},{"lineNumber":98,"author":{"gitId":"daytona65"},"content":"","lastModifiedDate":"2023-03-27"},{"lineNumber":99,"author":{"gitId":"daytona65"},"content":"    public static List\u003cWard\u003e getTypicalWards() {","lastModifiedDate":"2023-03-27"},{"lineNumber":100,"author":{"gitId":"daytona65"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(WR, A, B, C, ICU));","lastModifiedDate":"2023-03-27"},{"lineNumber":101,"author":{"gitId":"daytona65"},"content":"    }","lastModifiedDate":"2023-03-27"},{"lineNumber":102,"author":{"gitId":"daytona65"},"content":"}","lastModifiedDate":"2023-03-13"}],"authorContributionMap":{"yitong241":19,"daytona65":55,"jeraldkiew":21,"KSunil2001":7}},{"path":"src/test/java/seedu/medinfo/ui/TestFxmlObject.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import javafx.beans.DefaultProperty;","lastModifiedDate":"2016-12-21"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":5,"author":{"gitId":"-"},"content":"/**","lastModifiedDate":"2016-12-21"},{"lineNumber":6,"author":{"gitId":"-"},"content":" * A test object which can be constructed via an FXML file.","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":" * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized.","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":" */","lastModifiedDate":"2016-12-21"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@DefaultProperty(\"text\")","lastModifiedDate":"2016-12-21"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TestFxmlObject {","lastModifiedDate":"2016-12-21"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    private String text;","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    public TestFxmlObject() {}","lastModifiedDate":"2016-12-21"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public TestFxmlObject(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        setText(text);","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public String getText() {","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        return text;","lastModifiedDate":"2016-12-21"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    public void setText(String text) {","lastModifiedDate":"2016-12-21"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        this.text \u003d text;","lastModifiedDate":"2016-12-21"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    @Override","lastModifiedDate":"2016-12-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public boolean equals(Object other) {","lastModifiedDate":"2016-12-21"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        return other \u003d\u003d this // short circuit if same object","lastModifiedDate":"2017-04-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                || (other instanceof TestFxmlObject // instanceof handles nulls","lastModifiedDate":"2017-04-14"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));","lastModifiedDate":"2018-08-14"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"yitong241":1,"-":34}},{"path":"src/test/java/seedu/medinfo/ui/UiPartTest.java","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"yitong241"},"content":"package seedu.medinfo.ui;","lastModifiedDate":"2023-03-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2019-03-15"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import static org.junit.jupiter.api.Assertions.assertNotNull;","lastModifiedDate":"2019-03-15"},{"lineNumber":5,"author":{"gitId":"yitong241"},"content":"import static seedu.medinfo.testutil.Assert.assertThrows;","lastModifiedDate":"2023-03-30"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.net.URL;","lastModifiedDate":"2016-12-21"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.nio.file.Path;","lastModifiedDate":"2019-04-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-01-19"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2019-04-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"import org.junit.jupiter.api.io.TempDir;","lastModifiedDate":"2019-04-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2016-12-21"},{"lineNumber":14,"author":{"gitId":"yitong241"},"content":"import seedu.medinfo.MainApp;","lastModifiedDate":"2023-03-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class UiPartTest {","lastModifiedDate":"2016-12-21"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";","lastModifiedDate":"2016-12-21"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";","lastModifiedDate":"2017-11-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");","lastModifiedDate":"2016-12-21"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    @TempDir","lastModifiedDate":"2019-04-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    public Path testFolder;","lastModifiedDate":"2019-04-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public void constructor_nullFileUrl_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {","lastModifiedDate":"2016-12-21"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);","lastModifiedDate":"2019-04-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileUrl_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));","lastModifiedDate":"2019-03-14"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void constructor_validFileUrl_loadsFile() {","lastModifiedDate":"2016-12-21"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);","lastModifiedDate":"2016-12-21"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());","lastModifiedDate":"2016-12-21"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2017-11-29"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    public void constructor_validFileWithFxRootUrl_loadsFile() {","lastModifiedDate":"2017-11-29"},{"lineNumber":55,"author":{"gitId":"-"},"content":"        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);","lastModifiedDate":"2017-11-29"},{"lineNumber":56,"author":{"gitId":"-"},"content":"        TestFxmlObject root \u003d new TestFxmlObject();","lastModifiedDate":"2017-11-29"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());","lastModifiedDate":"2017-11-29"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2017-11-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    public void constructor_nullFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));","lastModifiedDate":"2019-03-14"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    public void constructor_missingFileName_throwsNullPointerException() {","lastModifiedDate":"2017-05-15"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    @Test","lastModifiedDate":"2016-12-21"},{"lineNumber":73,"author":{"gitId":"-"},"content":"    public void constructor_invalidFileName_throwsAssertionError() {","lastModifiedDate":"2016-12-21"},{"lineNumber":74,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));","lastModifiedDate":"2019-03-14"},{"lineNumber":75,"author":{"gitId":"-"},"content":"        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));","lastModifiedDate":"2019-03-14"},{"lineNumber":76,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":77,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    private URL getTestFileUrl(String testFilePath) {","lastModifiedDate":"2016-12-21"},{"lineNumber":79,"author":{"gitId":"-"},"content":"        String testFilePathInView \u003d \"/view/\" + testFilePath;","lastModifiedDate":"2016-12-21"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);","lastModifiedDate":"2016-12-21"},{"lineNumber":81,"author":{"gitId":"-"},"content":"        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");","lastModifiedDate":"2019-03-15"},{"lineNumber":82,"author":{"gitId":"-"},"content":"        return testFileUrl;","lastModifiedDate":"2016-12-21"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**","lastModifiedDate":"2016-12-21"},{"lineNumber":86,"author":{"gitId":"-"},"content":"     * UiPart used for testing.","lastModifiedDate":"2016-12-21"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}.","lastModifiedDate":"2016-12-21"},{"lineNumber":88,"author":{"gitId":"-"},"content":"     */","lastModifiedDate":"2016-12-21"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {","lastModifiedDate":"2016-12-21"},{"lineNumber":90,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":91,"author":{"gitId":"-"},"content":"        @FXML","lastModifiedDate":"2016-12-21"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        private TestFxmlObject validFileRoot; // Check that @FXML annotations work","lastModifiedDate":"2016-12-21"},{"lineNumber":93,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":97,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":98,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName, T root) {","lastModifiedDate":"2017-11-29"},{"lineNumber":99,"author":{"gitId":"-"},"content":"            super(fxmlFileName, root);","lastModifiedDate":"2017-11-29"},{"lineNumber":100,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2017-11-29"},{"lineNumber":101,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":102,"author":{"gitId":"-"},"content":"        TestUiPart(URL fxmlFileUrl) {","lastModifiedDate":"2016-12-21"},{"lineNumber":103,"author":{"gitId":"-"},"content":"            super(fxmlFileUrl);","lastModifiedDate":"2016-12-21"},{"lineNumber":104,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":105,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":106,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        TestUiPart(String fxmlFileName) {","lastModifiedDate":"2016-12-21"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            super(fxmlFileName);","lastModifiedDate":"2016-12-21"},{"lineNumber":109,"author":{"gitId":"-"},"content":"            assertEquals(VALID_FILE_ROOT, validFileRoot);","lastModifiedDate":"2016-12-21"},{"lineNumber":110,"author":{"gitId":"-"},"content":"        }","lastModifiedDate":"2016-12-21"},{"lineNumber":111,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":112,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2016-12-21"},{"lineNumber":113,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":114,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"yitong241":3,"-":111}},{"path":"src/test/resources/view/UiPartTest/validFile.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2016-12-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2016-12-21"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"\u003c?import seedu.medinfo.ui.TestFxmlObject?\u003e","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e","lastModifiedDate":"2016-12-21"}],"authorContributionMap":{"yitong241":1,"-":3}},{"path":"src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml","fileType":"test-code","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2017-11-29"},{"lineNumber":3,"author":{"gitId":"yitong241"},"content":"\u003cfx:root type\u003d\"seedu.medinfo.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\"","lastModifiedDate":"2023-03-30"},{"lineNumber":4,"author":{"gitId":"-"},"content":"         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    \u003ctext\u003eHello World!\u003c/text\u003e","lastModifiedDate":"2017-11-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2017-11-29"}],"authorContributionMap":{"yitong241":1,"-":5}}]
